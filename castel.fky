module castel where

    newtype Vector = (Float, Float)

    zip :: [Vector] -> [Vector] -> [(Vector, Vector)]
    zip (x : xs) (y : ys) = [(x, y)] + zip xs ys
    zip _ _ = []

    tail :: [Vector] -> Vector
    tail [x]      = x
    tail (x : xs) = tail xs

    add :: Vector -> Vector
    add (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

    mul :: Vector -> Vector
    mul (x1, y1) (x2, y2) = (x1 * x2, x2 * y2)

    lerp :: Vector -> Vector -> Float -> Vector
    lerp a b t = add (mul a (1 - t)) (mul b t)

    castel :: [Vector] -> Float -> Vector
    castel [a, b] t = lerp a b t
    castel cs t = castel new_cs t
                  where pairs  = zip cs (tail cs)
                        new_cs = [] # todo...
