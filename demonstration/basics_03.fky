# Creating algebraic data types.
module basics_03 with

    # You can declare a new data type with the 'newtype' keyword.
    newtype Vector2D = V Float Float

    test_vector = V 5.2 6.1

    # Pattern matching can be performed against user-defined data types.
    fst (V x _) = x
    snd (V _ y) = y
    sum (V a b) (V x y) = V (a + x) (b + y)

    # Data types can be recursive (or even infinite, as we will see later!)
    newtype IntList = Cons Integer IntList | Nil

    test_list = Cons 5 (Cons 1 (Cons 7 (Cons 7 (Cons 3 Nil))))

    # Pretty print a list
    pprint list = "[" ++
                  aux list ++
                  "]"
                  with aux Nil = ""
                       aux (Cons x Nil) = to_str x
                       aux (Cons x xs)  = to_str x ++ ", " ++ aux xs

    # Given an IntList, find the total
    total Nil         = 0
    total (Cons x xs) = x + total xs

    # Given an IntList, find the maximum
    max Nil                      = fail "No maximum in empty list!"
    max (Cons x Nil)             = x
    max (Cons x xs) given x > m  = x
                    given x <= m = m
                    with m = max xs
