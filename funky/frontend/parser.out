Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    INEQUALITY
    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT IDENTIFIER
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE
Rule 10    TOP_DECLARATION -> DECLARATION
Rule 11    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 12    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 13    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 14    DECLARATIONS_LIST -> DECLARATION
Rule 15    DECLARATION -> GEN_DECLARATION
Rule 16    DECLARATION -> FUNCTION_LHS RHS
Rule 17    DECLARATION -> PAT RHS
Rule 18    GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE
Rule 19    GEN_DECLARATION -> <empty>
Rule 20    TYPE -> ATYPE
Rule 21    TYPE -> ATYPE ARROW TYPE
Rule 22    ATYPE -> TYPENAME
Rule 23    ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN
Rule 24    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 25    ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE
Rule 26    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 27    FUNCTION_LHS -> PAT VAROP PAT
Rule 28    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 29    RHS -> EQUALS EXP
Rule 30    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 31    RHS -> GDRHS
Rule 32    RHS -> GDRHS WHERE DECLARATIONS
Rule 33    GDRHS -> GUARDS EQUALS EXP
Rule 34    GDRHS -> GUARDS EQUALS EXP GDRHS
Rule 35    GUARDS -> PIPE GUARD
Rule 36    GUARD -> INFIX_EXP
Rule 37    EXP -> INFIX_EXP
Rule 38    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 39    INFIX_EXP -> MINUS INFIX_EXP
Rule 40    INFIX_EXP -> LEXP
Rule 41    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 42    LEXP -> LET DECLARATIONS IN EXP
Rule 43    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 44    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 45    LEXP -> FEXP
Rule 46    FEXP -> FEXP AEXP
Rule 47    FEXP -> AEXP
Rule 48    AEXP -> USED_VAR
Rule 49    AEXP -> GCON
Rule 50    AEXP -> LITERAL
Rule 51    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 52    AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
Rule 53    AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE
Rule 54    AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
Rule 55    ALTS -> ALT ENDSTATEMENT ALTS
Rule 56    ALTS -> ALT
Rule 57    ALT -> PAT ARROW EXP
Rule 58    ALT -> <empty>
Rule 59    PAT -> LPAT CONSTRUCTOR PAT
Rule 60    PAT -> LPAT
Rule 61    LPAT -> APAT
Rule 62    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 63    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 64    APAT -> PARAM
Rule 65    APAT -> GCON
Rule 66    APAT -> LITERAL
Rule 67    APAT -> OPEN_PAREN PAT CLOSE_PAREN
Rule 68    APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
Rule 69    APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE
Rule 70    GCON -> OPEN_PAREN CLOSE_PAREN
Rule 71    GCON -> OPEN_SQUARE CLOSE_SQUARE
Rule 72    VAROP -> VARSYM
Rule 73    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 74    OP -> VAROP
Rule 75    EXP_LIST -> EXP_LIST COMMA EXP
Rule 76    EXP_LIST -> EXP
Rule 77    APATS -> APAT APATS
Rule 78    APATS -> <empty>
Rule 79    PAT_LIST -> PAT_LIST COMMA PAT
Rule 80    PAT_LIST -> PAT
Rule 81    VARSYM -> PLUS
Rule 82    VARSYM -> MINUS
Rule 83    VARSYM -> TIMES
Rule 84    VARSYM -> DIVIDE
Rule 85    VARSYM -> POW
Rule 86    VARSYM -> EQUALITY
Rule 87    VARSYM -> LESS
Rule 88    VARSYM -> LEQ
Rule 89    VARSYM -> GREATER
Rule 90    VARSYM -> GEQ
Rule 91    TYPES_LIST -> TYPES_LIST COMMA TYPE
Rule 92    TYPES_LIST -> TYPE
Rule 93    LITERAL -> FLOAT
Rule 94    LITERAL -> INTEGER
Rule 95    LITERAL -> BOOL
Rule 96    LITERAL -> CHAR
Rule 97    LITERAL -> STRING
Rule 98    USED_VAR -> IDENTIFIER
Rule 99    PARAM -> IDENTIFIER

Terminals, with rules where they appear

ARROW                : 21 41 57
AS                   : 
BACKTICK             : 73 73
BOOL                 : 95
CHAR                 : 96
CLOSE_BRACE          : 2 3 11 12 44
CLOSE_PAREN          : 23 24 28 51 52 62 63 67 68 70
CLOSE_SQUARE         : 25 53 54 69 71
COMMA                : 52 54 68 75 79 91
CONSTRUCTOR          : 59
DIVIDE               : 84
ELSE                 : 43
ENDSTATEMENT         : 2 4 7 13 55
EQUALITY             : 86
EQUALS               : 9 29 30 33 34
FLOAT                : 63 93
GEQ                  : 90
GREATER              : 89
IDENTIFIER           : 1 6 18 26 73 98 99
IF                   : 43
IMPORT               : 6
IN                   : 42
INEQUALITY           : 
INTEGER              : 62 94
LAMBDA               : 41
LEQ                  : 88
LESS                 : 87
LET                  : 42
MATCH                : 44
MINUS                : 39 62 63 82
MODULE               : 1
NEWTYPE              : 9
OF                   : 44
OPEN_BRACE           : 2 3 11 12 44
OPEN_PAREN           : 23 24 28 51 52 62 63 67 68 70
OPEN_SQUARE          : 25 53 54 69 71
PIPE                 : 35
PLUS                 : 81
POW                  : 85
STRING               : 97
THEN                 : 43
TIMES                : 83
TYPENAME             : 9 22
TYPESIG              : 18
WHERE                : 1 30 32
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 46 47
ALT                  : 55 56
ALTS                 : 44 55
APAT                 : 26 28 41 61 77
APATS                : 26 28 41 77
ATYPE                : 20 21
BODY                 : 1
DECLARATION          : 10 13 14
DECLARATIONS         : 30 32 42
DECLARATIONS_LIST    : 11 13
EXP                  : 29 30 33 34 41 42 43 43 43 44 51 52 53 54 57 75 76
EXP_LIST             : 52 54 75
FEXP                 : 45 46
FUNCTION_LHS         : 16 28
GCON                 : 49 65
GDRHS                : 31 32 34
GEN_DECLARATION      : 15
GUARD                : 35
GUARDS               : 33 34
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 36 37 38 39
LEXP                 : 38 40
LITERAL              : 50 66
LPAT                 : 59 60
MODULE_DEFINITION    : 0
OP                   : 38
PARAM                : 64
PAT                  : 17 27 27 57 59 67 68 79 80
PAT_LIST             : 68 69 79
RHS                  : 16 17
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 9 18 21 24 25 91 92
TYPES_LIST           : 23 91
USED_VAR             : 48
VAROP                : 27 74
VARSYM               : 72

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 31


state 8

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 32
    ENDSTATEMENT    shift and go to state 33


state 9

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (8) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (6) IMPORT_DECLARATION -> IMPORT . IDENTIFIER

    IDENTIFIER      shift and go to state 34


state 12

    (18) GEN_DECLARATION -> IDENTIFIER . TYPESIG TYPE
    (26) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (99) PARAM -> IDENTIFIER .
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    TYPESIG         shift and go to state 36
    CONSTRUCTOR     reduce using rule 99 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 99 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 99 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 99 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 99 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 99 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 99 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 99 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 99 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 99 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 99 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 99 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 99 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 99 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 37
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 13

    (9) TOP_DECLARATION -> NEWTYPE . TYPENAME EQUALS TYPE

    TYPENAME        shift and go to state 39


state 14

    (10) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)


state 15

    (15) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 15 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 15 (DECLARATION -> GEN_DECLARATION .)


state 16

    (16) DECLARATION -> FUNCTION_LHS . RHS
    (29) RHS -> . EQUALS EXP
    (30) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (31) RHS -> . GDRHS
    (32) RHS -> . GDRHS WHERE DECLARATIONS
    (33) GDRHS -> . GUARDS EQUALS EXP
    (34) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (35) GUARDS -> . PIPE GUARD

    EQUALS          shift and go to state 41
    PIPE            shift and go to state 44

    RHS                            shift and go to state 40
    GDRHS                          shift and go to state 42
    GUARDS                         shift and go to state 43

state 17

    (17) DECLARATION -> PAT . RHS
    (27) FUNCTION_LHS -> PAT . VAROP PAT
    (29) RHS -> . EQUALS EXP
    (30) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (31) RHS -> . GDRHS
    (32) RHS -> . GDRHS WHERE DECLARATIONS
    (72) VAROP -> . VARSYM
    (73) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (33) GDRHS -> . GUARDS EQUALS EXP
    (34) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (81) VARSYM -> . PLUS
    (82) VARSYM -> . MINUS
    (83) VARSYM -> . TIMES
    (84) VARSYM -> . DIVIDE
    (85) VARSYM -> . POW
    (86) VARSYM -> . EQUALITY
    (87) VARSYM -> . LESS
    (88) VARSYM -> . LEQ
    (89) VARSYM -> . GREATER
    (90) VARSYM -> . GEQ
    (35) GUARDS -> . PIPE GUARD

    EQUALS          shift and go to state 41
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58
    PIPE            shift and go to state 44

    RHS                            shift and go to state 45
    VAROP                          shift and go to state 46
    GDRHS                          shift and go to state 42
    VARSYM                         shift and go to state 47
    GUARDS                         shift and go to state 43

state 18

    (61) LPAT -> APAT .

    CONSTRUCTOR     reduce using rule 61 (LPAT -> APAT .)
    EQUALS          reduce using rule 61 (LPAT -> APAT .)
    BACKTICK        reduce using rule 61 (LPAT -> APAT .)
    PLUS            reduce using rule 61 (LPAT -> APAT .)
    MINUS           reduce using rule 61 (LPAT -> APAT .)
    TIMES           reduce using rule 61 (LPAT -> APAT .)
    DIVIDE          reduce using rule 61 (LPAT -> APAT .)
    POW             reduce using rule 61 (LPAT -> APAT .)
    EQUALITY        reduce using rule 61 (LPAT -> APAT .)
    LESS            reduce using rule 61 (LPAT -> APAT .)
    LEQ             reduce using rule 61 (LPAT -> APAT .)
    GREATER         reduce using rule 61 (LPAT -> APAT .)
    GEQ             reduce using rule 61 (LPAT -> APAT .)
    PIPE            reduce using rule 61 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 61 (LPAT -> APAT .)
    COMMA           reduce using rule 61 (LPAT -> APAT .)
    CLOSE_SQUARE    reduce using rule 61 (LPAT -> APAT .)
    ARROW           reduce using rule 61 (LPAT -> APAT .)


state 19

    (28) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (67) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (68) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (70) GCON -> OPEN_PAREN . CLOSE_PAREN
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 60
    IDENTIFIER      shift and go to state 62
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    FUNCTION_LHS                   shift and go to state 59
    APAT                           shift and go to state 18
    PAT                            shift and go to state 61
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 20

    (59) PAT -> LPAT . CONSTRUCTOR PAT
    (60) PAT -> LPAT .

    CONSTRUCTOR     shift and go to state 63
    EQUALS          reduce using rule 60 (PAT -> LPAT .)
    BACKTICK        reduce using rule 60 (PAT -> LPAT .)
    PLUS            reduce using rule 60 (PAT -> LPAT .)
    MINUS           reduce using rule 60 (PAT -> LPAT .)
    TIMES           reduce using rule 60 (PAT -> LPAT .)
    DIVIDE          reduce using rule 60 (PAT -> LPAT .)
    POW             reduce using rule 60 (PAT -> LPAT .)
    EQUALITY        reduce using rule 60 (PAT -> LPAT .)
    LESS            reduce using rule 60 (PAT -> LPAT .)
    LEQ             reduce using rule 60 (PAT -> LPAT .)
    GREATER         reduce using rule 60 (PAT -> LPAT .)
    GEQ             reduce using rule 60 (PAT -> LPAT .)
    PIPE            reduce using rule 60 (PAT -> LPAT .)
    CLOSE_PAREN     reduce using rule 60 (PAT -> LPAT .)
    COMMA           reduce using rule 60 (PAT -> LPAT .)
    CLOSE_SQUARE    reduce using rule 60 (PAT -> LPAT .)
    ARROW           reduce using rule 60 (PAT -> LPAT .)


state 21

    (62) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 64


state 22

    (94) LITERAL -> INTEGER .

    CONSTRUCTOR     reduce using rule 94 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 94 (LITERAL -> INTEGER .)
    BACKTICK        reduce using rule 94 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 94 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 94 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 94 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 94 (LITERAL -> INTEGER .)
    POW             reduce using rule 94 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 94 (LITERAL -> INTEGER .)
    LESS            reduce using rule 94 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 94 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 94 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 94 (LITERAL -> INTEGER .)
    PIPE            reduce using rule 94 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 94 (LITERAL -> INTEGER .)
    OPEN_SQUARE     reduce using rule 94 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 94 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 94 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 94 (LITERAL -> INTEGER .)
    BOOL            reduce using rule 94 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 94 (LITERAL -> INTEGER .)
    STRING          reduce using rule 94 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 94 (LITERAL -> INTEGER .)
    COMMA           reduce using rule 94 (LITERAL -> INTEGER .)
    CLOSE_SQUARE    reduce using rule 94 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 94 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 94 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 94 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 94 (LITERAL -> INTEGER .)
    THEN            reduce using rule 94 (LITERAL -> INTEGER .)
    OF              reduce using rule 94 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 94 (LITERAL -> INTEGER .)


state 23

    (93) LITERAL -> FLOAT .

    CONSTRUCTOR     reduce using rule 93 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 93 (LITERAL -> FLOAT .)
    BACKTICK        reduce using rule 93 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 93 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 93 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 93 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 93 (LITERAL -> FLOAT .)
    POW             reduce using rule 93 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 93 (LITERAL -> FLOAT .)
    LESS            reduce using rule 93 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 93 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 93 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 93 (LITERAL -> FLOAT .)
    PIPE            reduce using rule 93 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 93 (LITERAL -> FLOAT .)
    OPEN_SQUARE     reduce using rule 93 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 93 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 93 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 93 (LITERAL -> FLOAT .)
    BOOL            reduce using rule 93 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 93 (LITERAL -> FLOAT .)
    STRING          reduce using rule 93 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 93 (LITERAL -> FLOAT .)
    COMMA           reduce using rule 93 (LITERAL -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 93 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 93 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 93 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 93 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 93 (LITERAL -> FLOAT .)
    THEN            reduce using rule 93 (LITERAL -> FLOAT .)
    OF              reduce using rule 93 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 93 (LITERAL -> FLOAT .)


state 24

    (64) APAT -> PARAM .

    CONSTRUCTOR     reduce using rule 64 (APAT -> PARAM .)
    EQUALS          reduce using rule 64 (APAT -> PARAM .)
    BACKTICK        reduce using rule 64 (APAT -> PARAM .)
    PLUS            reduce using rule 64 (APAT -> PARAM .)
    MINUS           reduce using rule 64 (APAT -> PARAM .)
    TIMES           reduce using rule 64 (APAT -> PARAM .)
    DIVIDE          reduce using rule 64 (APAT -> PARAM .)
    POW             reduce using rule 64 (APAT -> PARAM .)
    EQUALITY        reduce using rule 64 (APAT -> PARAM .)
    LESS            reduce using rule 64 (APAT -> PARAM .)
    LEQ             reduce using rule 64 (APAT -> PARAM .)
    GREATER         reduce using rule 64 (APAT -> PARAM .)
    GEQ             reduce using rule 64 (APAT -> PARAM .)
    PIPE            reduce using rule 64 (APAT -> PARAM .)
    OPEN_PAREN      reduce using rule 64 (APAT -> PARAM .)
    OPEN_SQUARE     reduce using rule 64 (APAT -> PARAM .)
    IDENTIFIER      reduce using rule 64 (APAT -> PARAM .)
    FLOAT           reduce using rule 64 (APAT -> PARAM .)
    INTEGER         reduce using rule 64 (APAT -> PARAM .)
    BOOL            reduce using rule 64 (APAT -> PARAM .)
    CHAR            reduce using rule 64 (APAT -> PARAM .)
    STRING          reduce using rule 64 (APAT -> PARAM .)
    CLOSE_PAREN     reduce using rule 64 (APAT -> PARAM .)
    COMMA           reduce using rule 64 (APAT -> PARAM .)
    CLOSE_SQUARE    reduce using rule 64 (APAT -> PARAM .)
    ARROW           reduce using rule 64 (APAT -> PARAM .)


state 25

    (65) APAT -> GCON .

    CONSTRUCTOR     reduce using rule 65 (APAT -> GCON .)
    EQUALS          reduce using rule 65 (APAT -> GCON .)
    BACKTICK        reduce using rule 65 (APAT -> GCON .)
    PLUS            reduce using rule 65 (APAT -> GCON .)
    MINUS           reduce using rule 65 (APAT -> GCON .)
    TIMES           reduce using rule 65 (APAT -> GCON .)
    DIVIDE          reduce using rule 65 (APAT -> GCON .)
    POW             reduce using rule 65 (APAT -> GCON .)
    EQUALITY        reduce using rule 65 (APAT -> GCON .)
    LESS            reduce using rule 65 (APAT -> GCON .)
    LEQ             reduce using rule 65 (APAT -> GCON .)
    GREATER         reduce using rule 65 (APAT -> GCON .)
    GEQ             reduce using rule 65 (APAT -> GCON .)
    PIPE            reduce using rule 65 (APAT -> GCON .)
    OPEN_PAREN      reduce using rule 65 (APAT -> GCON .)
    OPEN_SQUARE     reduce using rule 65 (APAT -> GCON .)
    IDENTIFIER      reduce using rule 65 (APAT -> GCON .)
    FLOAT           reduce using rule 65 (APAT -> GCON .)
    INTEGER         reduce using rule 65 (APAT -> GCON .)
    BOOL            reduce using rule 65 (APAT -> GCON .)
    CHAR            reduce using rule 65 (APAT -> GCON .)
    STRING          reduce using rule 65 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 65 (APAT -> GCON .)
    COMMA           reduce using rule 65 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 65 (APAT -> GCON .)
    ARROW           reduce using rule 65 (APAT -> GCON .)


state 26

    (66) APAT -> LITERAL .

    CONSTRUCTOR     reduce using rule 66 (APAT -> LITERAL .)
    EQUALS          reduce using rule 66 (APAT -> LITERAL .)
    BACKTICK        reduce using rule 66 (APAT -> LITERAL .)
    PLUS            reduce using rule 66 (APAT -> LITERAL .)
    MINUS           reduce using rule 66 (APAT -> LITERAL .)
    TIMES           reduce using rule 66 (APAT -> LITERAL .)
    DIVIDE          reduce using rule 66 (APAT -> LITERAL .)
    POW             reduce using rule 66 (APAT -> LITERAL .)
    EQUALITY        reduce using rule 66 (APAT -> LITERAL .)
    LESS            reduce using rule 66 (APAT -> LITERAL .)
    LEQ             reduce using rule 66 (APAT -> LITERAL .)
    GREATER         reduce using rule 66 (APAT -> LITERAL .)
    GEQ             reduce using rule 66 (APAT -> LITERAL .)
    PIPE            reduce using rule 66 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 66 (APAT -> LITERAL .)
    OPEN_SQUARE     reduce using rule 66 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 66 (APAT -> LITERAL .)
    FLOAT           reduce using rule 66 (APAT -> LITERAL .)
    INTEGER         reduce using rule 66 (APAT -> LITERAL .)
    BOOL            reduce using rule 66 (APAT -> LITERAL .)
    CHAR            reduce using rule 66 (APAT -> LITERAL .)
    STRING          reduce using rule 66 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 66 (APAT -> LITERAL .)
    COMMA           reduce using rule 66 (APAT -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 66 (APAT -> LITERAL .)
    ARROW           reduce using rule 66 (APAT -> LITERAL .)


state 27

    (69) APAT -> OPEN_SQUARE . PAT_LIST CLOSE_SQUARE
    (71) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (79) PAT_LIST -> . PAT_LIST COMMA PAT
    (80) PAT_LIST -> . PAT
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 66
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT_LIST                       shift and go to state 65
    PAT                            shift and go to state 67
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 28

    (95) LITERAL -> BOOL .

    CONSTRUCTOR     reduce using rule 95 (LITERAL -> BOOL .)
    EQUALS          reduce using rule 95 (LITERAL -> BOOL .)
    BACKTICK        reduce using rule 95 (LITERAL -> BOOL .)
    PLUS            reduce using rule 95 (LITERAL -> BOOL .)
    MINUS           reduce using rule 95 (LITERAL -> BOOL .)
    TIMES           reduce using rule 95 (LITERAL -> BOOL .)
    DIVIDE          reduce using rule 95 (LITERAL -> BOOL .)
    POW             reduce using rule 95 (LITERAL -> BOOL .)
    EQUALITY        reduce using rule 95 (LITERAL -> BOOL .)
    LESS            reduce using rule 95 (LITERAL -> BOOL .)
    LEQ             reduce using rule 95 (LITERAL -> BOOL .)
    GREATER         reduce using rule 95 (LITERAL -> BOOL .)
    GEQ             reduce using rule 95 (LITERAL -> BOOL .)
    PIPE            reduce using rule 95 (LITERAL -> BOOL .)
    OPEN_PAREN      reduce using rule 95 (LITERAL -> BOOL .)
    OPEN_SQUARE     reduce using rule 95 (LITERAL -> BOOL .)
    IDENTIFIER      reduce using rule 95 (LITERAL -> BOOL .)
    FLOAT           reduce using rule 95 (LITERAL -> BOOL .)
    INTEGER         reduce using rule 95 (LITERAL -> BOOL .)
    BOOL            reduce using rule 95 (LITERAL -> BOOL .)
    CHAR            reduce using rule 95 (LITERAL -> BOOL .)
    STRING          reduce using rule 95 (LITERAL -> BOOL .)
    CLOSE_PAREN     reduce using rule 95 (LITERAL -> BOOL .)
    COMMA           reduce using rule 95 (LITERAL -> BOOL .)
    CLOSE_SQUARE    reduce using rule 95 (LITERAL -> BOOL .)
    WHERE           reduce using rule 95 (LITERAL -> BOOL .)
    CLOSE_BRACE     reduce using rule 95 (LITERAL -> BOOL .)
    ENDSTATEMENT    reduce using rule 95 (LITERAL -> BOOL .)
    ARROW           reduce using rule 95 (LITERAL -> BOOL .)
    THEN            reduce using rule 95 (LITERAL -> BOOL .)
    OF              reduce using rule 95 (LITERAL -> BOOL .)
    ELSE            reduce using rule 95 (LITERAL -> BOOL .)


state 29

    (96) LITERAL -> CHAR .

    CONSTRUCTOR     reduce using rule 96 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 96 (LITERAL -> CHAR .)
    BACKTICK        reduce using rule 96 (LITERAL -> CHAR .)
    PLUS            reduce using rule 96 (LITERAL -> CHAR .)
    MINUS           reduce using rule 96 (LITERAL -> CHAR .)
    TIMES           reduce using rule 96 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 96 (LITERAL -> CHAR .)
    POW             reduce using rule 96 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 96 (LITERAL -> CHAR .)
    LESS            reduce using rule 96 (LITERAL -> CHAR .)
    LEQ             reduce using rule 96 (LITERAL -> CHAR .)
    GREATER         reduce using rule 96 (LITERAL -> CHAR .)
    GEQ             reduce using rule 96 (LITERAL -> CHAR .)
    PIPE            reduce using rule 96 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 96 (LITERAL -> CHAR .)
    OPEN_SQUARE     reduce using rule 96 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 96 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 96 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 96 (LITERAL -> CHAR .)
    BOOL            reduce using rule 96 (LITERAL -> CHAR .)
    CHAR            reduce using rule 96 (LITERAL -> CHAR .)
    STRING          reduce using rule 96 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 96 (LITERAL -> CHAR .)
    COMMA           reduce using rule 96 (LITERAL -> CHAR .)
    CLOSE_SQUARE    reduce using rule 96 (LITERAL -> CHAR .)
    WHERE           reduce using rule 96 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 96 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 96 (LITERAL -> CHAR .)
    ARROW           reduce using rule 96 (LITERAL -> CHAR .)
    THEN            reduce using rule 96 (LITERAL -> CHAR .)
    OF              reduce using rule 96 (LITERAL -> CHAR .)
    ELSE            reduce using rule 96 (LITERAL -> CHAR .)


state 30

    (97) LITERAL -> STRING .

    CONSTRUCTOR     reduce using rule 97 (LITERAL -> STRING .)
    EQUALS          reduce using rule 97 (LITERAL -> STRING .)
    BACKTICK        reduce using rule 97 (LITERAL -> STRING .)
    PLUS            reduce using rule 97 (LITERAL -> STRING .)
    MINUS           reduce using rule 97 (LITERAL -> STRING .)
    TIMES           reduce using rule 97 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 97 (LITERAL -> STRING .)
    POW             reduce using rule 97 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 97 (LITERAL -> STRING .)
    LESS            reduce using rule 97 (LITERAL -> STRING .)
    LEQ             reduce using rule 97 (LITERAL -> STRING .)
    GREATER         reduce using rule 97 (LITERAL -> STRING .)
    GEQ             reduce using rule 97 (LITERAL -> STRING .)
    PIPE            reduce using rule 97 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 97 (LITERAL -> STRING .)
    OPEN_SQUARE     reduce using rule 97 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 97 (LITERAL -> STRING .)
    FLOAT           reduce using rule 97 (LITERAL -> STRING .)
    INTEGER         reduce using rule 97 (LITERAL -> STRING .)
    BOOL            reduce using rule 97 (LITERAL -> STRING .)
    CHAR            reduce using rule 97 (LITERAL -> STRING .)
    STRING          reduce using rule 97 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 97 (LITERAL -> STRING .)
    COMMA           reduce using rule 97 (LITERAL -> STRING .)
    CLOSE_SQUARE    reduce using rule 97 (LITERAL -> STRING .)
    WHERE           reduce using rule 97 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 97 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 97 (LITERAL -> STRING .)
    ARROW           reduce using rule 97 (LITERAL -> STRING .)
    THEN            reduce using rule 97 (LITERAL -> STRING .)
    OF              reduce using rule 97 (LITERAL -> STRING .)
    ELSE            reduce using rule 97 (LITERAL -> STRING .)


state 31

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    TOP_DECLARATIONS               shift and go to state 68
    IMPORT_DECLARATION             shift and go to state 69
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 32

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 33

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    TOP_DECLARATION                shift and go to state 70
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 34

    (6) IMPORT_DECLARATION -> IMPORT IDENTIFIER .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATION -> IMPORT IDENTIFIER .)


state 35

    (99) PARAM -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 99 (PARAM -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 99 (PARAM -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 99 (PARAM -> IDENTIFIER .)
    FLOAT           reduce using rule 99 (PARAM -> IDENTIFIER .)
    INTEGER         reduce using rule 99 (PARAM -> IDENTIFIER .)
    BOOL            reduce using rule 99 (PARAM -> IDENTIFIER .)
    CHAR            reduce using rule 99 (PARAM -> IDENTIFIER .)
    STRING          reduce using rule 99 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 99 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 99 (PARAM -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 99 (PARAM -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 99 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 99 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 99 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 99 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 99 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 99 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 99 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 99 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 99 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 99 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 99 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 99 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 99 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 99 (PARAM -> IDENTIFIER .)
    ARROW           reduce using rule 99 (PARAM -> IDENTIFIER .)


state 36

    (18) GEN_DECLARATION -> IDENTIFIER TYPESIG . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 71
    ATYPE                          shift and go to state 72

state 37

    (26) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (77) APATS -> . APAT APATS
    (78) APATS -> .
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    EQUALS          reduce using rule 78 (APATS -> .)
    PIPE            reduce using rule 78 (APATS -> .)
    CLOSE_PAREN     reduce using rule 78 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 77
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 38

    (67) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (68) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (70) GCON -> OPEN_PAREN . CLOSE_PAREN
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 60
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 78
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 39

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME . EQUALS TYPE

    EQUALS          shift and go to state 79


state 40

    (16) DECLARATION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 16 (DECLARATION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 16 (DECLARATION -> FUNCTION_LHS RHS .)


state 41

    (29) RHS -> EQUALS . EXP
    (30) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 80
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 42

    (31) RHS -> GDRHS .
    (32) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 31 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 31 (RHS -> GDRHS .)
    WHERE           shift and go to state 96


state 43

    (33) GDRHS -> GUARDS . EQUALS EXP
    (34) GDRHS -> GUARDS . EQUALS EXP GDRHS

    EQUALS          shift and go to state 97


state 44

    (35) GUARDS -> PIPE . GUARD
    (36) GUARD -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    GUARD                          shift and go to state 98
    INFIX_EXP                      shift and go to state 99
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 45

    (17) DECLARATION -> PAT RHS .

    CLOSE_BRACE     reduce using rule 17 (DECLARATION -> PAT RHS .)
    ENDSTATEMENT    reduce using rule 17 (DECLARATION -> PAT RHS .)


state 46

    (27) FUNCTION_LHS -> PAT VAROP . PAT
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 100
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 47

    (72) VAROP -> VARSYM .

    MINUS           reduce using rule 72 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 72 (VAROP -> VARSYM .)
    OPEN_SQUARE     reduce using rule 72 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 72 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 72 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 72 (VAROP -> VARSYM .)
    BOOL            reduce using rule 72 (VAROP -> VARSYM .)
    CHAR            reduce using rule 72 (VAROP -> VARSYM .)
    STRING          reduce using rule 72 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 72 (VAROP -> VARSYM .)
    LET             reduce using rule 72 (VAROP -> VARSYM .)
    IF              reduce using rule 72 (VAROP -> VARSYM .)
    MATCH           reduce using rule 72 (VAROP -> VARSYM .)


state 48

    (73) VAROP -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 101


state 49

    (81) VARSYM -> PLUS .

    MINUS           reduce using rule 81 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 81 (VARSYM -> PLUS .)
    OPEN_SQUARE     reduce using rule 81 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 81 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 81 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 81 (VARSYM -> PLUS .)
    BOOL            reduce using rule 81 (VARSYM -> PLUS .)
    CHAR            reduce using rule 81 (VARSYM -> PLUS .)
    STRING          reduce using rule 81 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 81 (VARSYM -> PLUS .)
    LET             reduce using rule 81 (VARSYM -> PLUS .)
    IF              reduce using rule 81 (VARSYM -> PLUS .)
    MATCH           reduce using rule 81 (VARSYM -> PLUS .)


state 50

    (82) VARSYM -> MINUS .

    MINUS           reduce using rule 82 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 82 (VARSYM -> MINUS .)
    OPEN_SQUARE     reduce using rule 82 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 82 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 82 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 82 (VARSYM -> MINUS .)
    BOOL            reduce using rule 82 (VARSYM -> MINUS .)
    CHAR            reduce using rule 82 (VARSYM -> MINUS .)
    STRING          reduce using rule 82 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 82 (VARSYM -> MINUS .)
    LET             reduce using rule 82 (VARSYM -> MINUS .)
    IF              reduce using rule 82 (VARSYM -> MINUS .)
    MATCH           reduce using rule 82 (VARSYM -> MINUS .)


state 51

    (83) VARSYM -> TIMES .

    MINUS           reduce using rule 83 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 83 (VARSYM -> TIMES .)
    OPEN_SQUARE     reduce using rule 83 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 83 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 83 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 83 (VARSYM -> TIMES .)
    BOOL            reduce using rule 83 (VARSYM -> TIMES .)
    CHAR            reduce using rule 83 (VARSYM -> TIMES .)
    STRING          reduce using rule 83 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 83 (VARSYM -> TIMES .)
    LET             reduce using rule 83 (VARSYM -> TIMES .)
    IF              reduce using rule 83 (VARSYM -> TIMES .)
    MATCH           reduce using rule 83 (VARSYM -> TIMES .)


state 52

    (84) VARSYM -> DIVIDE .

    MINUS           reduce using rule 84 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 84 (VARSYM -> DIVIDE .)
    OPEN_SQUARE     reduce using rule 84 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 84 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 84 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 84 (VARSYM -> DIVIDE .)
    BOOL            reduce using rule 84 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 84 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 84 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 84 (VARSYM -> DIVIDE .)
    LET             reduce using rule 84 (VARSYM -> DIVIDE .)
    IF              reduce using rule 84 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 84 (VARSYM -> DIVIDE .)


state 53

    (85) VARSYM -> POW .

    MINUS           reduce using rule 85 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 85 (VARSYM -> POW .)
    OPEN_SQUARE     reduce using rule 85 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 85 (VARSYM -> POW .)
    FLOAT           reduce using rule 85 (VARSYM -> POW .)
    INTEGER         reduce using rule 85 (VARSYM -> POW .)
    BOOL            reduce using rule 85 (VARSYM -> POW .)
    CHAR            reduce using rule 85 (VARSYM -> POW .)
    STRING          reduce using rule 85 (VARSYM -> POW .)
    LAMBDA          reduce using rule 85 (VARSYM -> POW .)
    LET             reduce using rule 85 (VARSYM -> POW .)
    IF              reduce using rule 85 (VARSYM -> POW .)
    MATCH           reduce using rule 85 (VARSYM -> POW .)


state 54

    (86) VARSYM -> EQUALITY .

    MINUS           reduce using rule 86 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 86 (VARSYM -> EQUALITY .)
    OPEN_SQUARE     reduce using rule 86 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 86 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 86 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 86 (VARSYM -> EQUALITY .)
    BOOL            reduce using rule 86 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 86 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 86 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 86 (VARSYM -> EQUALITY .)
    LET             reduce using rule 86 (VARSYM -> EQUALITY .)
    IF              reduce using rule 86 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 86 (VARSYM -> EQUALITY .)


state 55

    (87) VARSYM -> LESS .

    MINUS           reduce using rule 87 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 87 (VARSYM -> LESS .)
    OPEN_SQUARE     reduce using rule 87 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 87 (VARSYM -> LESS .)
    FLOAT           reduce using rule 87 (VARSYM -> LESS .)
    INTEGER         reduce using rule 87 (VARSYM -> LESS .)
    BOOL            reduce using rule 87 (VARSYM -> LESS .)
    CHAR            reduce using rule 87 (VARSYM -> LESS .)
    STRING          reduce using rule 87 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 87 (VARSYM -> LESS .)
    LET             reduce using rule 87 (VARSYM -> LESS .)
    IF              reduce using rule 87 (VARSYM -> LESS .)
    MATCH           reduce using rule 87 (VARSYM -> LESS .)


state 56

    (88) VARSYM -> LEQ .

    MINUS           reduce using rule 88 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 88 (VARSYM -> LEQ .)
    OPEN_SQUARE     reduce using rule 88 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 88 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 88 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 88 (VARSYM -> LEQ .)
    BOOL            reduce using rule 88 (VARSYM -> LEQ .)
    CHAR            reduce using rule 88 (VARSYM -> LEQ .)
    STRING          reduce using rule 88 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 88 (VARSYM -> LEQ .)
    LET             reduce using rule 88 (VARSYM -> LEQ .)
    IF              reduce using rule 88 (VARSYM -> LEQ .)
    MATCH           reduce using rule 88 (VARSYM -> LEQ .)


state 57

    (89) VARSYM -> GREATER .

    MINUS           reduce using rule 89 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 89 (VARSYM -> GREATER .)
    OPEN_SQUARE     reduce using rule 89 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 89 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 89 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 89 (VARSYM -> GREATER .)
    BOOL            reduce using rule 89 (VARSYM -> GREATER .)
    CHAR            reduce using rule 89 (VARSYM -> GREATER .)
    STRING          reduce using rule 89 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 89 (VARSYM -> GREATER .)
    LET             reduce using rule 89 (VARSYM -> GREATER .)
    IF              reduce using rule 89 (VARSYM -> GREATER .)
    MATCH           reduce using rule 89 (VARSYM -> GREATER .)


state 58

    (90) VARSYM -> GEQ .

    MINUS           reduce using rule 90 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 90 (VARSYM -> GEQ .)
    OPEN_SQUARE     reduce using rule 90 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 90 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 90 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 90 (VARSYM -> GEQ .)
    BOOL            reduce using rule 90 (VARSYM -> GEQ .)
    CHAR            reduce using rule 90 (VARSYM -> GEQ .)
    STRING          reduce using rule 90 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 90 (VARSYM -> GEQ .)
    LET             reduce using rule 90 (VARSYM -> GEQ .)
    IF              reduce using rule 90 (VARSYM -> GEQ .)
    MATCH           reduce using rule 90 (VARSYM -> GEQ .)


state 59

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 102


state 60

    (70) GCON -> OPEN_PAREN CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BACKTICK        reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TIMES           reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    POW             reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALITY        reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LESS            reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LEQ             reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GREATER         reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GEQ             reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PIPE            reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BOOL            reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WHERE           reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    THEN            reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OF              reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 70 (GCON -> OPEN_PAREN CLOSE_PAREN .)


state 61

    (67) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (68) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN
    (27) FUNCTION_LHS -> PAT . VAROP PAT
    (72) VAROP -> . VARSYM
    (73) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (81) VARSYM -> . PLUS
    (82) VARSYM -> . MINUS
    (83) VARSYM -> . TIMES
    (84) VARSYM -> . DIVIDE
    (85) VARSYM -> . POW
    (86) VARSYM -> . EQUALITY
    (87) VARSYM -> . LESS
    (88) VARSYM -> . LEQ
    (89) VARSYM -> . GREATER
    (90) VARSYM -> . GEQ

    CLOSE_PAREN     shift and go to state 103
    COMMA           shift and go to state 104
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58

    VAROP                          shift and go to state 46
    VARSYM                         shift and go to state 47

state 62

    (26) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (99) PARAM -> IDENTIFIER .
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    CONSTRUCTOR     reduce using rule 99 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 99 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 99 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 99 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 99 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 99 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 99 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 99 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 99 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 99 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 99 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 99 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 99 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 99 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 37
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 63

    (59) PAT -> LPAT CONSTRUCTOR . PAT
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    LPAT                           shift and go to state 20
    PAT                            shift and go to state 105
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 64

    (62) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (63) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 106
    FLOAT           shift and go to state 107


state 65

    (69) APAT -> OPEN_SQUARE PAT_LIST . CLOSE_SQUARE
    (79) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_SQUARE    shift and go to state 108
    COMMA           shift and go to state 109


state 66

    (71) GCON -> OPEN_SQUARE CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BACKTICK        reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TIMES           reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    POW             reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALITY        reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LEQ             reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GEQ             reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PIPE            reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INTEGER         reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BOOL            reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CHAR            reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WHERE           reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ARROW           reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    THEN            reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OF              reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ELSE            reduce using rule 71 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)


state 67

    (80) PAT_LIST -> PAT .

    CLOSE_SQUARE    reduce using rule 80 (PAT_LIST -> PAT .)
    COMMA           reduce using rule 80 (PAT_LIST -> PAT .)
    CLOSE_PAREN     reduce using rule 80 (PAT_LIST -> PAT .)


state 68

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 110
    ENDSTATEMENT    shift and go to state 33


state 69

    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 4 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 70

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 71

    (18) GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .

    CLOSE_BRACE     reduce using rule 18 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)
    ENDSTATEMENT    reduce using rule 18 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)


state 72

    (20) TYPE -> ATYPE .
    (21) TYPE -> ATYPE . ARROW TYPE

    CLOSE_BRACE     reduce using rule 20 (TYPE -> ATYPE .)
    ENDSTATEMENT    reduce using rule 20 (TYPE -> ATYPE .)
    CLOSE_PAREN     reduce using rule 20 (TYPE -> ATYPE .)
    COMMA           reduce using rule 20 (TYPE -> ATYPE .)
    CLOSE_SQUARE    reduce using rule 20 (TYPE -> ATYPE .)
    ARROW           shift and go to state 111


state 73

    (22) ATYPE -> TYPENAME .

    ARROW           reduce using rule 22 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 22 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 22 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 22 (ATYPE -> TYPENAME .)
    COMMA           reduce using rule 22 (ATYPE -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 22 (ATYPE -> TYPENAME .)


state 74

    (23) ATYPE -> OPEN_PAREN . TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (91) TYPES_LIST -> . TYPES_LIST COMMA TYPE
    (92) TYPES_LIST -> . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPES_LIST                     shift and go to state 112
    TYPE                           shift and go to state 113
    ATYPE                          shift and go to state 72

state 75

    (25) ATYPE -> OPEN_SQUARE . TYPE CLOSE_SQUARE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 114
    ATYPE                          shift and go to state 72

state 76

    (77) APATS -> APAT . APATS
    (77) APATS -> . APAT APATS
    (78) APATS -> .
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    EQUALS          reduce using rule 78 (APATS -> .)
    PIPE            reduce using rule 78 (APATS -> .)
    CLOSE_PAREN     reduce using rule 78 (APATS -> .)
    ARROW           reduce using rule 78 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 115
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 77

    (26) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 26 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    PIPE            reduce using rule 26 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 26 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 78

    (67) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (68) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 103
    COMMA           shift and go to state 104


state 79

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 116
    ATYPE                          shift and go to state 72

state 80

    (29) RHS -> EQUALS EXP .
    (30) RHS -> EQUALS EXP . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 29 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 29 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 117


state 81

    (37) EXP -> INFIX_EXP .

    WHERE           reduce using rule 37 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 37 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 37 (EXP -> INFIX_EXP .)
    THEN            reduce using rule 37 (EXP -> INFIX_EXP .)
    OF              reduce using rule 37 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 37 (EXP -> INFIX_EXP .)
    COMMA           reduce using rule 37 (EXP -> INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 37 (EXP -> INFIX_EXP .)
    PIPE            reduce using rule 37 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 37 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 37 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 37 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 37 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 37 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 37 (EXP -> INFIX_EXP .)
    POW             reduce using rule 37 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 37 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 37 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 37 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 37 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 37 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 37 (EXP -> INFIX_EXP .)


state 82

    (38) INFIX_EXP -> LEXP . OP INFIX_EXP
    (40) INFIX_EXP -> LEXP .
    (74) OP -> . VAROP
    (72) VAROP -> . VARSYM
    (73) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (81) VARSYM -> . PLUS
    (82) VARSYM -> . MINUS
    (83) VARSYM -> . TIMES
    (84) VARSYM -> . DIVIDE
    (85) VARSYM -> . POW
    (86) VARSYM -> . EQUALITY
    (87) VARSYM -> . LESS
    (88) VARSYM -> . LEQ
    (89) VARSYM -> . GREATER
    (90) VARSYM -> . GEQ

  ! shift/reduce conflict for BACKTICK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    WHERE           reduce using rule 40 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 40 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 40 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 40 (INFIX_EXP -> LEXP .)
    THEN            reduce using rule 40 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 40 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 40 (INFIX_EXP -> LEXP .)
    COMMA           reduce using rule 40 (INFIX_EXP -> LEXP .)
    CLOSE_SQUARE    reduce using rule 40 (INFIX_EXP -> LEXP .)
    PIPE            reduce using rule 40 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 40 (INFIX_EXP -> LEXP .)
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58

  ! BACKTICK        [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! PLUS            [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! MINUS           [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 40 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 118
    VAROP                          shift and go to state 119
    VARSYM                         shift and go to state 47

state 83

    (39) INFIX_EXP -> MINUS . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    INFIX_EXP                      shift and go to state 120
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 84

    (41) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 121
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 85

    (42) LEXP -> LET . DECLARATIONS IN EXP
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 123

    DECLARATIONS                   shift and go to state 122

state 86

    (43) LEXP -> IF . EXP THEN EXP ELSE EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 124
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 87

    (44) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 125
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 88

    (45) LEXP -> FEXP .
    (46) FEXP -> FEXP . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    BACKTICK        reduce using rule 45 (LEXP -> FEXP .)
    PLUS            reduce using rule 45 (LEXP -> FEXP .)
    MINUS           reduce using rule 45 (LEXP -> FEXP .)
    TIMES           reduce using rule 45 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 45 (LEXP -> FEXP .)
    POW             reduce using rule 45 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 45 (LEXP -> FEXP .)
    LESS            reduce using rule 45 (LEXP -> FEXP .)
    LEQ             reduce using rule 45 (LEXP -> FEXP .)
    GREATER         reduce using rule 45 (LEXP -> FEXP .)
    GEQ             reduce using rule 45 (LEXP -> FEXP .)
    WHERE           reduce using rule 45 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 45 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 45 (LEXP -> FEXP .)
    EQUALS          reduce using rule 45 (LEXP -> FEXP .)
    THEN            reduce using rule 45 (LEXP -> FEXP .)
    OF              reduce using rule 45 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 45 (LEXP -> FEXP .)
    COMMA           reduce using rule 45 (LEXP -> FEXP .)
    CLOSE_SQUARE    reduce using rule 45 (LEXP -> FEXP .)
    PIPE            reduce using rule 45 (LEXP -> FEXP .)
    ELSE            reduce using rule 45 (LEXP -> FEXP .)
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    AEXP                           shift and go to state 126
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 89

    (47) FEXP -> AEXP .

    OPEN_PAREN      reduce using rule 47 (FEXP -> AEXP .)
    OPEN_SQUARE     reduce using rule 47 (FEXP -> AEXP .)
    IDENTIFIER      reduce using rule 47 (FEXP -> AEXP .)
    FLOAT           reduce using rule 47 (FEXP -> AEXP .)
    INTEGER         reduce using rule 47 (FEXP -> AEXP .)
    BOOL            reduce using rule 47 (FEXP -> AEXP .)
    CHAR            reduce using rule 47 (FEXP -> AEXP .)
    STRING          reduce using rule 47 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 47 (FEXP -> AEXP .)
    PLUS            reduce using rule 47 (FEXP -> AEXP .)
    MINUS           reduce using rule 47 (FEXP -> AEXP .)
    TIMES           reduce using rule 47 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 47 (FEXP -> AEXP .)
    POW             reduce using rule 47 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 47 (FEXP -> AEXP .)
    LESS            reduce using rule 47 (FEXP -> AEXP .)
    LEQ             reduce using rule 47 (FEXP -> AEXP .)
    GREATER         reduce using rule 47 (FEXP -> AEXP .)
    GEQ             reduce using rule 47 (FEXP -> AEXP .)
    WHERE           reduce using rule 47 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 47 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 47 (FEXP -> AEXP .)
    EQUALS          reduce using rule 47 (FEXP -> AEXP .)
    THEN            reduce using rule 47 (FEXP -> AEXP .)
    OF              reduce using rule 47 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 47 (FEXP -> AEXP .)
    COMMA           reduce using rule 47 (FEXP -> AEXP .)
    CLOSE_SQUARE    reduce using rule 47 (FEXP -> AEXP .)
    PIPE            reduce using rule 47 (FEXP -> AEXP .)
    ELSE            reduce using rule 47 (FEXP -> AEXP .)


state 90

    (48) AEXP -> USED_VAR .

    OPEN_PAREN      reduce using rule 48 (AEXP -> USED_VAR .)
    OPEN_SQUARE     reduce using rule 48 (AEXP -> USED_VAR .)
    IDENTIFIER      reduce using rule 48 (AEXP -> USED_VAR .)
    FLOAT           reduce using rule 48 (AEXP -> USED_VAR .)
    INTEGER         reduce using rule 48 (AEXP -> USED_VAR .)
    BOOL            reduce using rule 48 (AEXP -> USED_VAR .)
    CHAR            reduce using rule 48 (AEXP -> USED_VAR .)
    STRING          reduce using rule 48 (AEXP -> USED_VAR .)
    BACKTICK        reduce using rule 48 (AEXP -> USED_VAR .)
    PLUS            reduce using rule 48 (AEXP -> USED_VAR .)
    MINUS           reduce using rule 48 (AEXP -> USED_VAR .)
    TIMES           reduce using rule 48 (AEXP -> USED_VAR .)
    DIVIDE          reduce using rule 48 (AEXP -> USED_VAR .)
    POW             reduce using rule 48 (AEXP -> USED_VAR .)
    EQUALITY        reduce using rule 48 (AEXP -> USED_VAR .)
    LESS            reduce using rule 48 (AEXP -> USED_VAR .)
    LEQ             reduce using rule 48 (AEXP -> USED_VAR .)
    GREATER         reduce using rule 48 (AEXP -> USED_VAR .)
    GEQ             reduce using rule 48 (AEXP -> USED_VAR .)
    WHERE           reduce using rule 48 (AEXP -> USED_VAR .)
    CLOSE_BRACE     reduce using rule 48 (AEXP -> USED_VAR .)
    ENDSTATEMENT    reduce using rule 48 (AEXP -> USED_VAR .)
    EQUALS          reduce using rule 48 (AEXP -> USED_VAR .)
    THEN            reduce using rule 48 (AEXP -> USED_VAR .)
    OF              reduce using rule 48 (AEXP -> USED_VAR .)
    CLOSE_PAREN     reduce using rule 48 (AEXP -> USED_VAR .)
    COMMA           reduce using rule 48 (AEXP -> USED_VAR .)
    CLOSE_SQUARE    reduce using rule 48 (AEXP -> USED_VAR .)
    PIPE            reduce using rule 48 (AEXP -> USED_VAR .)
    ELSE            reduce using rule 48 (AEXP -> USED_VAR .)


state 91

    (49) AEXP -> GCON .

    OPEN_PAREN      reduce using rule 49 (AEXP -> GCON .)
    OPEN_SQUARE     reduce using rule 49 (AEXP -> GCON .)
    IDENTIFIER      reduce using rule 49 (AEXP -> GCON .)
    FLOAT           reduce using rule 49 (AEXP -> GCON .)
    INTEGER         reduce using rule 49 (AEXP -> GCON .)
    BOOL            reduce using rule 49 (AEXP -> GCON .)
    CHAR            reduce using rule 49 (AEXP -> GCON .)
    STRING          reduce using rule 49 (AEXP -> GCON .)
    BACKTICK        reduce using rule 49 (AEXP -> GCON .)
    PLUS            reduce using rule 49 (AEXP -> GCON .)
    MINUS           reduce using rule 49 (AEXP -> GCON .)
    TIMES           reduce using rule 49 (AEXP -> GCON .)
    DIVIDE          reduce using rule 49 (AEXP -> GCON .)
    POW             reduce using rule 49 (AEXP -> GCON .)
    EQUALITY        reduce using rule 49 (AEXP -> GCON .)
    LESS            reduce using rule 49 (AEXP -> GCON .)
    LEQ             reduce using rule 49 (AEXP -> GCON .)
    GREATER         reduce using rule 49 (AEXP -> GCON .)
    GEQ             reduce using rule 49 (AEXP -> GCON .)
    WHERE           reduce using rule 49 (AEXP -> GCON .)
    CLOSE_BRACE     reduce using rule 49 (AEXP -> GCON .)
    ENDSTATEMENT    reduce using rule 49 (AEXP -> GCON .)
    EQUALS          reduce using rule 49 (AEXP -> GCON .)
    THEN            reduce using rule 49 (AEXP -> GCON .)
    OF              reduce using rule 49 (AEXP -> GCON .)
    CLOSE_PAREN     reduce using rule 49 (AEXP -> GCON .)
    COMMA           reduce using rule 49 (AEXP -> GCON .)
    CLOSE_SQUARE    reduce using rule 49 (AEXP -> GCON .)
    PIPE            reduce using rule 49 (AEXP -> GCON .)
    ELSE            reduce using rule 49 (AEXP -> GCON .)


state 92

    (50) AEXP -> LITERAL .

    OPEN_PAREN      reduce using rule 50 (AEXP -> LITERAL .)
    OPEN_SQUARE     reduce using rule 50 (AEXP -> LITERAL .)
    IDENTIFIER      reduce using rule 50 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 50 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 50 (AEXP -> LITERAL .)
    BOOL            reduce using rule 50 (AEXP -> LITERAL .)
    CHAR            reduce using rule 50 (AEXP -> LITERAL .)
    STRING          reduce using rule 50 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 50 (AEXP -> LITERAL .)
    PLUS            reduce using rule 50 (AEXP -> LITERAL .)
    MINUS           reduce using rule 50 (AEXP -> LITERAL .)
    TIMES           reduce using rule 50 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 50 (AEXP -> LITERAL .)
    POW             reduce using rule 50 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 50 (AEXP -> LITERAL .)
    LESS            reduce using rule 50 (AEXP -> LITERAL .)
    LEQ             reduce using rule 50 (AEXP -> LITERAL .)
    GREATER         reduce using rule 50 (AEXP -> LITERAL .)
    GEQ             reduce using rule 50 (AEXP -> LITERAL .)
    WHERE           reduce using rule 50 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 50 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 50 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 50 (AEXP -> LITERAL .)
    THEN            reduce using rule 50 (AEXP -> LITERAL .)
    OF              reduce using rule 50 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 50 (AEXP -> LITERAL .)
    COMMA           reduce using rule 50 (AEXP -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 50 (AEXP -> LITERAL .)
    PIPE            reduce using rule 50 (AEXP -> LITERAL .)
    ELSE            reduce using rule 50 (AEXP -> LITERAL .)


state 93

    (51) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (52) AEXP -> OPEN_PAREN . EXP COMMA EXP_LIST CLOSE_PAREN
    (70) GCON -> OPEN_PAREN . CLOSE_PAREN
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 60
    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 127
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 94

    (53) AEXP -> OPEN_SQUARE . EXP CLOSE_SQUARE
    (54) AEXP -> OPEN_SQUARE . EXP COMMA EXP_LIST CLOSE_SQUARE
    (71) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 66
    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 128
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 95

    (98) USED_VAR -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    FLOAT           reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    INTEGER         reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    BOOL            reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    CHAR            reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    STRING          reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    BACKTICK        reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    PLUS            reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    MINUS           reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    TIMES           reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    DIVIDE          reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    POW             reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    EQUALITY        reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    LESS            reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    LEQ             reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    GREATER         reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    GEQ             reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    WHERE           reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    EQUALS          reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    THEN            reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    OF              reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    COMMA           reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    PIPE            reduce using rule 98 (USED_VAR -> IDENTIFIER .)
    ELSE            reduce using rule 98 (USED_VAR -> IDENTIFIER .)


state 96

    (32) RHS -> GDRHS WHERE . DECLARATIONS
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 123

    DECLARATIONS                   shift and go to state 129

state 97

    (33) GDRHS -> GUARDS EQUALS . EXP
    (34) GDRHS -> GUARDS EQUALS . EXP GDRHS
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 130
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 98

    (35) GUARDS -> PIPE GUARD .

    EQUALS          reduce using rule 35 (GUARDS -> PIPE GUARD .)


state 99

    (36) GUARD -> INFIX_EXP .

    EQUALS          reduce using rule 36 (GUARD -> INFIX_EXP .)


state 100

    (27) FUNCTION_LHS -> PAT VAROP PAT .

    EQUALS          reduce using rule 27 (FUNCTION_LHS -> PAT VAROP PAT .)
    PIPE            reduce using rule 27 (FUNCTION_LHS -> PAT VAROP PAT .)
    CLOSE_PAREN     reduce using rule 27 (FUNCTION_LHS -> PAT VAROP PAT .)


state 101

    (73) VAROP -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 131


state 102

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 132
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 103

    (67) APAT -> OPEN_PAREN PAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALS          reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PLUS            reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MINUS           reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TIMES           reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    POW             reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LESS            reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LEQ             reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GREATER         reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GEQ             reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PIPE            reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    FLOAT           reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INTEGER         reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BOOL            reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CHAR            reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    STRING          reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    COMMA           reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    ARROW           reduce using rule 67 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)


state 104

    (68) APAT -> OPEN_PAREN PAT COMMA . PAT_LIST CLOSE_PAREN
    (79) PAT_LIST -> . PAT_LIST COMMA PAT
    (80) PAT_LIST -> . PAT
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 67
    PAT_LIST                       shift and go to state 133
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 105

    (59) PAT -> LPAT CONSTRUCTOR PAT .

    EQUALS          reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    BACKTICK        reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    PLUS            reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    MINUS           reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    TIMES           reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    DIVIDE          reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    POW             reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    EQUALITY        reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    LESS            reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    LEQ             reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    GREATER         reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    GEQ             reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    PIPE            reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_PAREN     reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    COMMA           reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_SQUARE    reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)
    ARROW           reduce using rule 59 (PAT -> LPAT CONSTRUCTOR PAT .)


state 106

    (62) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 134


state 107

    (63) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 135


state 108

    (69) APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    POW             reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    ARROW           reduce using rule 69 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)


state 109

    (79) PAT_LIST -> PAT_LIST COMMA . PAT
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 136
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 110

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 111

    (21) TYPE -> ATYPE ARROW . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    ATYPE                          shift and go to state 72
    TYPE                           shift and go to state 137

state 112

    (23) ATYPE -> OPEN_PAREN TYPES_LIST . CLOSE_PAREN
    (91) TYPES_LIST -> TYPES_LIST . COMMA TYPE

    CLOSE_PAREN     shift and go to state 138
    COMMA           shift and go to state 139


state 113

    (24) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN
    (92) TYPES_LIST -> TYPE .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 140
    COMMA           reduce using rule 92 (TYPES_LIST -> TYPE .)

  ! CLOSE_PAREN     [ reduce using rule 92 (TYPES_LIST -> TYPE .) ]


state 114

    (25) ATYPE -> OPEN_SQUARE TYPE . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 141


state 115

    (77) APATS -> APAT APATS .

    EQUALS          reduce using rule 77 (APATS -> APAT APATS .)
    PIPE            reduce using rule 77 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 77 (APATS -> APAT APATS .)
    ARROW           reduce using rule 77 (APATS -> APAT APATS .)


state 116

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)


state 117

    (30) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 123

    DECLARATIONS                   shift and go to state 142

state 118

    (38) INFIX_EXP -> LEXP OP . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    LEXP                           shift and go to state 82
    INFIX_EXP                      shift and go to state 143
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 119

    (74) OP -> VAROP .

    MINUS           reduce using rule 74 (OP -> VAROP .)
    LAMBDA          reduce using rule 74 (OP -> VAROP .)
    LET             reduce using rule 74 (OP -> VAROP .)
    IF              reduce using rule 74 (OP -> VAROP .)
    MATCH           reduce using rule 74 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 74 (OP -> VAROP .)
    OPEN_SQUARE     reduce using rule 74 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 74 (OP -> VAROP .)
    FLOAT           reduce using rule 74 (OP -> VAROP .)
    INTEGER         reduce using rule 74 (OP -> VAROP .)
    BOOL            reduce using rule 74 (OP -> VAROP .)
    CHAR            reduce using rule 74 (OP -> VAROP .)
    STRING          reduce using rule 74 (OP -> VAROP .)


state 120

    (39) INFIX_EXP -> MINUS INFIX_EXP .

    WHERE           reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    THEN            reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    COMMA           reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    PIPE            reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 39 (INFIX_EXP -> MINUS INFIX_EXP .)


state 121

    (41) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (77) APATS -> . APAT APATS
    (78) APATS -> .
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    ARROW           reduce using rule 78 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 144
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 122

    (42) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 145


state 123

    (11) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (13) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 147
    IDENTIFIER      shift and go to state 12
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

  ! CLOSE_BRACE     [ reduce using rule 19 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 146
    DECLARATION                    shift and go to state 148
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 124

    (43) LEXP -> IF EXP . THEN EXP ELSE EXP

    THEN            shift and go to state 149


state 125

    (44) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE

    OF              shift and go to state 150


state 126

    (46) FEXP -> FEXP AEXP .

    OPEN_PAREN      reduce using rule 46 (FEXP -> FEXP AEXP .)
    OPEN_SQUARE     reduce using rule 46 (FEXP -> FEXP AEXP .)
    IDENTIFIER      reduce using rule 46 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 46 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 46 (FEXP -> FEXP AEXP .)
    BOOL            reduce using rule 46 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 46 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 46 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 46 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 46 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 46 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 46 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 46 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 46 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 46 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 46 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 46 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 46 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 46 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 46 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 46 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 46 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 46 (FEXP -> FEXP AEXP .)
    THEN            reduce using rule 46 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 46 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 46 (FEXP -> FEXP AEXP .)
    COMMA           reduce using rule 46 (FEXP -> FEXP AEXP .)
    CLOSE_SQUARE    reduce using rule 46 (FEXP -> FEXP AEXP .)
    PIPE            reduce using rule 46 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 46 (FEXP -> FEXP AEXP .)


state 127

    (51) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (52) AEXP -> OPEN_PAREN EXP . COMMA EXP_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 151
    COMMA           shift and go to state 152


state 128

    (53) AEXP -> OPEN_SQUARE EXP . CLOSE_SQUARE
    (54) AEXP -> OPEN_SQUARE EXP . COMMA EXP_LIST CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 153
    COMMA           shift and go to state 154


state 129

    (32) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 32 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 32 (RHS -> GDRHS WHERE DECLARATIONS .)


state 130

    (33) GDRHS -> GUARDS EQUALS EXP .
    (34) GDRHS -> GUARDS EQUALS EXP . GDRHS
    (33) GDRHS -> . GUARDS EQUALS EXP
    (34) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (35) GUARDS -> . PIPE GUARD

    WHERE           reduce using rule 33 (GDRHS -> GUARDS EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 33 (GDRHS -> GUARDS EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 33 (GDRHS -> GUARDS EQUALS EXP .)
    PIPE            shift and go to state 44

    GUARDS                         shift and go to state 43
    GDRHS                          shift and go to state 155

state 131

    (73) VAROP -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_SQUARE     reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    BOOL            reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IF              reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 73 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)


state 132

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (77) APATS -> . APAT APATS
    (78) APATS -> .
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    EQUALS          reduce using rule 78 (APATS -> .)
    PIPE            reduce using rule 78 (APATS -> .)
    CLOSE_PAREN     reduce using rule 78 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 156
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 133

    (68) APAT -> OPEN_PAREN PAT COMMA PAT_LIST . CLOSE_PAREN
    (79) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_PAREN     shift and go to state 157
    COMMA           shift and go to state 109


state 134

    (62) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    BACKTICK        reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PLUS            reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MINUS           reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    TIMES           reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    DIVIDE          reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    POW             reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALITY        reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LESS            reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LEQ             reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GREATER         reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GEQ             reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PIPE            reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    COMMA           reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 62 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 135

    (63) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PLUS            reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MINUS           reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    TIMES           reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    POW             reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LESS            reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LEQ             reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GREATER         reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GEQ             reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PIPE            reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    COMMA           reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 63 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 136

    (79) PAT_LIST -> PAT_LIST COMMA PAT .

    CLOSE_SQUARE    reduce using rule 79 (PAT_LIST -> PAT_LIST COMMA PAT .)
    COMMA           reduce using rule 79 (PAT_LIST -> PAT_LIST COMMA PAT .)
    CLOSE_PAREN     reduce using rule 79 (PAT_LIST -> PAT_LIST COMMA PAT .)


state 137

    (21) TYPE -> ATYPE ARROW TYPE .

    CLOSE_BRACE     reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    ENDSTATEMENT    reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_PAREN     reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    COMMA           reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_SQUARE    reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)


state 138

    (23) ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .

    ARROW           reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)


state 139

    (91) TYPES_LIST -> TYPES_LIST COMMA . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 158
    ATYPE                          shift and go to state 72

state 140

    (24) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    ARROW           reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    COMMA           reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 141

    (25) ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .

    ARROW           reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    COMMA           reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)


state 142

    (30) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 30 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 30 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 143

    (38) INFIX_EXP -> LEXP OP INFIX_EXP .

    WHERE           reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    THEN            reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    COMMA           reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PIPE            reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 38 (INFIX_EXP -> LEXP OP INFIX_EXP .)


state 144

    (41) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 159


state 145

    (42) LEXP -> LET DECLARATIONS IN . EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 160
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 146

    (11) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 161


state 147

    (12) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 148

    (13) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 162
    CLOSE_BRACE     reduce using rule 14 (DECLARATIONS_LIST -> DECLARATION .)


state 149

    (43) LEXP -> IF EXP THEN . EXP ELSE EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 163
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 150

    (44) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 164


state 151

    (51) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BOOL            reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    THEN            reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    COMMA           reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PIPE            reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 51 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 152

    (52) AEXP -> OPEN_PAREN EXP COMMA . EXP_LIST CLOSE_PAREN
    (75) EXP_LIST -> . EXP_LIST COMMA EXP
    (76) EXP_LIST -> . EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 165
    EXP_LIST                       shift and go to state 166
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 153

    (53) AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    FLOAT           reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INTEGER         reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BOOL            reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CHAR            reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    STRING          reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BACKTICK        reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PLUS            reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MINUS           reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TIMES           reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    DIVIDE          reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    POW             reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALITY        reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LESS            reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LEQ             reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GREATER         reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GEQ             reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WHERE           reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALS          reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    THEN            reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OF              reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    COMMA           reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PIPE            reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ELSE            reduce using rule 53 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)


state 154

    (54) AEXP -> OPEN_SQUARE EXP COMMA . EXP_LIST CLOSE_SQUARE
    (75) EXP_LIST -> . EXP_LIST COMMA EXP
    (76) EXP_LIST -> . EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 165
    EXP_LIST                       shift and go to state 167
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 155

    (34) GDRHS -> GUARDS EQUALS EXP GDRHS .

    WHERE           reduce using rule 34 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 34 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 34 (GDRHS -> GUARDS EQUALS EXP GDRHS .)


state 156

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 28 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    PIPE            reduce using rule 28 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 28 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 157

    (68) APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    POW             reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LESS            reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    STRING          reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    ARROW           reduce using rule 68 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)


state 158

    (91) TYPES_LIST -> TYPES_LIST COMMA TYPE .

    CLOSE_PAREN     reduce using rule 91 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)
    COMMA           reduce using rule 91 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)


state 159

    (41) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 168
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 160

    (42) LEXP -> LET DECLARATIONS IN EXP .

    BACKTICK        reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    PLUS            reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    THEN            reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    COMMA           reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_SQUARE    reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    PIPE            reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 42 (LEXP -> LET DECLARATIONS IN EXP .)


state 161

    (11) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 162

    (13) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (13) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 12
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    DECLARATION                    shift and go to state 148
    DECLARATIONS_LIST              shift and go to state 169
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 163

    (43) LEXP -> IF EXP THEN EXP . ELSE EXP

    ELSE            shift and go to state 170


state 164

    (44) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (55) ALTS -> . ALT ENDSTATEMENT ALTS
    (56) ALTS -> . ALT
    (57) ALT -> . PAT ARROW EXP
    (58) ALT -> .
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 58 (ALT -> .)
    CLOSE_BRACE     reduce using rule 58 (ALT -> .)
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    ALTS                           shift and go to state 171
    ALT                            shift and go to state 172
    PAT                            shift and go to state 173
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 165

    (76) EXP_LIST -> EXP .

    CLOSE_PAREN     reduce using rule 76 (EXP_LIST -> EXP .)
    COMMA           reduce using rule 76 (EXP_LIST -> EXP .)
    CLOSE_SQUARE    reduce using rule 76 (EXP_LIST -> EXP .)


state 166

    (52) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST . CLOSE_PAREN
    (75) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_PAREN     shift and go to state 175
    COMMA           shift and go to state 174


state 167

    (54) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST . CLOSE_SQUARE
    (75) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_SQUARE    shift and go to state 176
    COMMA           shift and go to state 174


state 168

    (41) LEXP -> LAMBDA APAT APATS ARROW EXP .

    BACKTICK        reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PLUS            reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    THEN            reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    COMMA           reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_SQUARE    reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PIPE            reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 41 (LEXP -> LAMBDA APAT APATS ARROW EXP .)


state 169

    (13) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 13 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 170

    (43) LEXP -> IF EXP THEN EXP ELSE . EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 177
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 171

    (44) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 178


state 172

    (55) ALTS -> ALT . ENDSTATEMENT ALTS
    (56) ALTS -> ALT .

    ENDSTATEMENT    shift and go to state 179
    CLOSE_BRACE     reduce using rule 56 (ALTS -> ALT .)


state 173

    (57) ALT -> PAT . ARROW EXP

    ARROW           shift and go to state 180


state 174

    (75) EXP_LIST -> EXP_LIST COMMA . EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 181
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 175

    (52) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    STRING          reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    POW             reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LESS            reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WHERE           reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    THEN            reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OF              reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ELSE            reduce using rule 52 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)


state 176

    (54) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    POW             reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WHERE           reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    THEN            reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OF              reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ELSE            reduce using rule 54 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)


state 177

    (43) LEXP -> IF EXP THEN EXP ELSE EXP .

    BACKTICK        reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PLUS            reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MINUS           reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    TIMES           reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    DIVIDE          reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    POW             reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALITY        reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LESS            reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LEQ             reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GREATER         reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GEQ             reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WHERE           reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALS          reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    THEN            reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OF              reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    COMMA           reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_SQUARE    reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PIPE            reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ELSE            reduce using rule 43 (LEXP -> IF EXP THEN EXP ELSE EXP .)


state 178

    (44) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    BACKTICK        reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PLUS            reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    THEN            reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    COMMA           reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_SQUARE    reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PIPE            reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 44 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 179

    (55) ALTS -> ALT ENDSTATEMENT . ALTS
    (55) ALTS -> . ALT ENDSTATEMENT ALTS
    (56) ALTS -> . ALT
    (57) ALT -> . PAT ARROW EXP
    (58) ALT -> .
    (59) PAT -> . LPAT CONSTRUCTOR PAT
    (60) PAT -> . LPAT
    (61) LPAT -> . APAT
    (62) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (63) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (64) APAT -> . PARAM
    (65) APAT -> . GCON
    (66) APAT -> . LITERAL
    (67) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (68) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (69) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (99) PARAM -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 58 (ALT -> .)
    CLOSE_BRACE     reduce using rule 58 (ALT -> .)
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    ALT                            shift and go to state 172
    ALTS                           shift and go to state 182
    PAT                            shift and go to state 173
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 180

    (57) ALT -> PAT ARROW . EXP
    (37) EXP -> . INFIX_EXP
    (38) INFIX_EXP -> . LEXP OP INFIX_EXP
    (39) INFIX_EXP -> . MINUS INFIX_EXP
    (40) INFIX_EXP -> . LEXP
    (41) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (42) LEXP -> . LET DECLARATIONS IN EXP
    (43) LEXP -> . IF EXP THEN EXP ELSE EXP
    (44) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (45) LEXP -> . FEXP
    (46) FEXP -> . FEXP AEXP
    (47) FEXP -> . AEXP
    (48) AEXP -> . USED_VAR
    (49) AEXP -> . GCON
    (50) AEXP -> . LITERAL
    (51) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (52) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (53) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (54) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (98) USED_VAR -> . IDENTIFIER
    (70) GCON -> . OPEN_PAREN CLOSE_PAREN
    (71) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (93) LITERAL -> . FLOAT
    (94) LITERAL -> . INTEGER
    (95) LITERAL -> . BOOL
    (96) LITERAL -> . CHAR
    (97) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 183
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 181

    (75) EXP_LIST -> EXP_LIST COMMA EXP .

    CLOSE_PAREN     reduce using rule 75 (EXP_LIST -> EXP_LIST COMMA EXP .)
    COMMA           reduce using rule 75 (EXP_LIST -> EXP_LIST COMMA EXP .)
    CLOSE_SQUARE    reduce using rule 75 (EXP_LIST -> EXP_LIST COMMA EXP .)


state 182

    (55) ALTS -> ALT ENDSTATEMENT ALTS .

    CLOSE_BRACE     reduce using rule 55 (ALTS -> ALT ENDSTATEMENT ALTS .)


state 183

    (57) ALT -> PAT ARROW EXP .

    ENDSTATEMENT    reduce using rule 57 (ALT -> PAT ARROW EXP .)
    CLOSE_BRACE     reduce using rule 57 (ALT -> PAT ARROW EXP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BACKTICK in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for POW in state 82 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS in state 82 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 82 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 123 resolved as shift
