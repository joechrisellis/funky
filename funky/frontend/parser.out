Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT IDENTIFIER
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE
Rule 10    TOP_DECLARATION -> DECLARATION
Rule 11    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 12    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 13    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 14    DECLARATIONS_LIST -> DECLARATION
Rule 15    DECLARATION -> GEN_DECLARATION
Rule 16    DECLARATION -> FUNCTION_LHS RHS
Rule 17    DECLARATION -> PAT RHS
Rule 18    GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE
Rule 19    GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP
Rule 20    GEN_DECLARATION -> <empty>
Rule 21    ASSOCIATIVITY -> LEFTASSOC
Rule 22    ASSOCIATIVITY -> RIGHTASSOC
Rule 23    ASSOCIATIVITY -> NONASSOC
Rule 24    TYPE -> ATYPE
Rule 25    TYPE -> ATYPE ARROW TYPE
Rule 26    ATYPE -> TYPENAME
Rule 27    ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN
Rule 28    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 29    ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE
Rule 30    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 31    FUNCTION_LHS -> PAT VAROP PAT
Rule 32    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 33    RHS -> EQUALS EXP
Rule 34    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 35    RHS -> GDRHS
Rule 36    RHS -> GDRHS WHERE DECLARATIONS
Rule 37    GDRHS -> GUARDS EQUALS EXP
Rule 38    GDRHS -> GUARDS EQUALS EXP GDRHS
Rule 39    GUARDS -> PIPE GUARD
Rule 40    GUARD -> INFIX_EXP
Rule 41    EXP -> INFIX_EXP
Rule 42    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 43    INFIX_EXP -> MINUS INFIX_EXP
Rule 44    INFIX_EXP -> LEXP
Rule 45    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 46    LEXP -> LET DECLARATIONS IN EXP
Rule 47    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 48    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 49    LEXP -> FEXP
Rule 50    FEXP -> FEXP AEXP
Rule 51    FEXP -> AEXP
Rule 52    AEXP -> USED_VAR
Rule 53    AEXP -> GCON
Rule 54    AEXP -> LITERAL
Rule 55    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 56    AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
Rule 57    AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE
Rule 58    AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
Rule 59    ALTS -> ALT ENDSTATEMENT ALTS
Rule 60    ALTS -> ALT
Rule 61    ALT -> PAT ARROW EXP
Rule 62    ALT -> <empty>
Rule 63    PAT -> LPAT CONSTRUCTOR PAT
Rule 64    PAT -> LPAT
Rule 65    LPAT -> APAT
Rule 66    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 67    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 68    APAT -> PARAM
Rule 69    APAT -> GCON
Rule 70    APAT -> LITERAL
Rule 71    APAT -> OPEN_PAREN PAT CLOSE_PAREN
Rule 72    APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
Rule 73    APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE
Rule 74    GCON -> OPEN_PAREN CLOSE_PAREN
Rule 75    GCON -> OPEN_SQUARE CLOSE_SQUARE
Rule 76    VAROP -> VARSYM
Rule 77    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 78    OP -> VAROP
Rule 79    EXP_LIST -> EXP_LIST COMMA EXP
Rule 80    EXP_LIST -> EXP
Rule 81    APATS -> APAT APATS
Rule 82    APATS -> <empty>
Rule 83    PAT_LIST -> PAT_LIST COMMA PAT
Rule 84    PAT_LIST -> PAT
Rule 85    VARSYM -> PLUS
Rule 86    VARSYM -> MINUS
Rule 87    VARSYM -> TIMES
Rule 88    VARSYM -> DIVIDE
Rule 89    VARSYM -> POW
Rule 90    VARSYM -> EQUALITY
Rule 91    VARSYM -> INEQUALITY
Rule 92    VARSYM -> LESS
Rule 93    VARSYM -> LEQ
Rule 94    VARSYM -> GREATER
Rule 95    VARSYM -> GEQ
Rule 96    VARSYM -> CONSTRUCTOR
Rule 97    TYPES_LIST -> TYPES_LIST COMMA TYPE
Rule 98    TYPES_LIST -> TYPE
Rule 99    LITERAL -> FLOAT
Rule 100   LITERAL -> INTEGER
Rule 101   LITERAL -> BOOL
Rule 102   LITERAL -> CHAR
Rule 103   LITERAL -> STRING
Rule 104   USED_VAR -> IDENTIFIER
Rule 105   PARAM -> IDENTIFIER

Terminals, with rules where they appear

ARROW                : 25 45 61
AS                   : 
BACKTICK             : 77 77
BOOL                 : 101
CHAR                 : 102
CLOSE_BRACE          : 2 3 11 12 48
CLOSE_PAREN          : 27 28 32 55 56 66 67 71 72 74
CLOSE_SQUARE         : 29 57 58 73 75
COMMA                : 56 58 72 79 83 97
CONSTRUCTOR          : 63 96
DIVIDE               : 88
ELSE                 : 47
ENDSTATEMENT         : 2 4 7 13 59
EQUALITY             : 90
EQUALS               : 9 33 34 37 38
FLOAT                : 67 99
GEQ                  : 95
GREATER              : 94
IDENTIFIER           : 1 6 18 30 77 104 105
IF                   : 47
IMPORT               : 6
IN                   : 46
INEQUALITY           : 91
INTEGER              : 19 66 100
LAMBDA               : 45
LEFTASSOC            : 21
LEQ                  : 93
LESS                 : 92
LET                  : 46
MATCH                : 48
MINUS                : 43 66 67 86
MODULE               : 1
NEWTYPE              : 9
NONASSOC             : 23
OF                   : 48
OPEN_BRACE           : 2 3 11 12 48
OPEN_PAREN           : 27 28 32 55 56 66 67 71 72 74
OPEN_SQUARE          : 29 57 58 73 75
PIPE                 : 39
PLUS                 : 85
POW                  : 89
RIGHTASSOC           : 22
SETFIX               : 19
STRING               : 103
THEN                 : 47
TIMES                : 87
TYPENAME             : 9 26
TYPESIG              : 18
WHERE                : 1 34 36
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 50 51
ALT                  : 59 60
ALTS                 : 48 59
APAT                 : 30 32 45 65 81
APATS                : 30 32 45 81
ASSOCIATIVITY        : 19
ATYPE                : 24 25
BODY                 : 1
DECLARATION          : 10 13 14
DECLARATIONS         : 34 36 46
DECLARATIONS_LIST    : 11 13
EXP                  : 33 34 37 38 45 46 47 47 47 48 55 56 57 58 61 79 80
EXP_LIST             : 56 58 79
FEXP                 : 49 50
FUNCTION_LHS         : 16 32
GCON                 : 53 69
GDRHS                : 35 36 38
GEN_DECLARATION      : 15
GUARD                : 39
GUARDS               : 37 38
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 40 41 42 43
LEXP                 : 42 44
LITERAL              : 54 70
LPAT                 : 63 64
MODULE_DEFINITION    : 0
OP                   : 19 42
PARAM                : 68
PAT                  : 17 31 31 61 63 71 72 83 84
PAT_LIST             : 72 73 83
RHS                  : 16 17
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 9 18 25 28 29 97 98
TYPES_LIST           : 27 97
USED_VAR             : 52
VAROP                : 31 78
VARSYM               : 76

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (20) GEN_DECLARATION -> .
    (30) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (31) FUNCTION_LHS -> . PAT VAROP PAT
    (32) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 18
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 21
    MINUS           shift and go to state 23
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 32


state 8

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 33
    ENDSTATEMENT    shift and go to state 34


state 9

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (8) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (6) IMPORT_DECLARATION -> IMPORT . IDENTIFIER

    IDENTIFIER      shift and go to state 35


state 12

    (18) GEN_DECLARATION -> IDENTIFIER . TYPESIG TYPE
    (30) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (105) PARAM -> IDENTIFIER .
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    TYPESIG         shift and go to state 37
    CONSTRUCTOR     reduce using rule 105 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 105 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 105 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 105 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 105 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 105 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 105 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 105 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 105 (PARAM -> IDENTIFIER .)
    INEQUALITY      reduce using rule 105 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 105 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 105 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 105 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 105 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 105 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 38
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 13

    (9) TOP_DECLARATION -> NEWTYPE . TYPENAME EQUALS TYPE

    TYPENAME        shift and go to state 40


state 14

    (10) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)


state 15

    (15) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 15 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 15 (DECLARATION -> GEN_DECLARATION .)


state 16

    (16) DECLARATION -> FUNCTION_LHS . RHS
    (33) RHS -> . EQUALS EXP
    (34) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (35) RHS -> . GDRHS
    (36) RHS -> . GDRHS WHERE DECLARATIONS
    (37) GDRHS -> . GUARDS EQUALS EXP
    (38) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (39) GUARDS -> . PIPE GUARD

    EQUALS          shift and go to state 42
    PIPE            shift and go to state 45

    RHS                            shift and go to state 41
    GDRHS                          shift and go to state 43
    GUARDS                         shift and go to state 44

state 17

    (17) DECLARATION -> PAT . RHS
    (31) FUNCTION_LHS -> PAT . VAROP PAT
    (33) RHS -> . EQUALS EXP
    (34) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (35) RHS -> . GDRHS
    (36) RHS -> . GDRHS WHERE DECLARATIONS
    (76) VAROP -> . VARSYM
    (77) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (37) GDRHS -> . GUARDS EQUALS EXP
    (38) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (85) VARSYM -> . PLUS
    (86) VARSYM -> . MINUS
    (87) VARSYM -> . TIMES
    (88) VARSYM -> . DIVIDE
    (89) VARSYM -> . POW
    (90) VARSYM -> . EQUALITY
    (91) VARSYM -> . INEQUALITY
    (92) VARSYM -> . LESS
    (93) VARSYM -> . LEQ
    (94) VARSYM -> . GREATER
    (95) VARSYM -> . GEQ
    (96) VARSYM -> . CONSTRUCTOR
    (39) GUARDS -> . PIPE GUARD

    EQUALS          shift and go to state 42
    BACKTICK        shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    POW             shift and go to state 54
    EQUALITY        shift and go to state 55
    INEQUALITY      shift and go to state 56
    LESS            shift and go to state 57
    LEQ             shift and go to state 58
    GREATER         shift and go to state 59
    GEQ             shift and go to state 60
    CONSTRUCTOR     shift and go to state 61
    PIPE            shift and go to state 45

    RHS                            shift and go to state 46
    VAROP                          shift and go to state 47
    GDRHS                          shift and go to state 43
    VARSYM                         shift and go to state 48
    GUARDS                         shift and go to state 44

state 18

    (19) GEN_DECLARATION -> SETFIX . ASSOCIATIVITY INTEGER OP
    (21) ASSOCIATIVITY -> . LEFTASSOC
    (22) ASSOCIATIVITY -> . RIGHTASSOC
    (23) ASSOCIATIVITY -> . NONASSOC

    LEFTASSOC       shift and go to state 63
    RIGHTASSOC      shift and go to state 64
    NONASSOC        shift and go to state 65

    ASSOCIATIVITY                  shift and go to state 62

state 19

    (100) LITERAL -> INTEGER .

    CONSTRUCTOR     reduce using rule 100 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 100 (LITERAL -> INTEGER .)
    BACKTICK        reduce using rule 100 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 100 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 100 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 100 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 100 (LITERAL -> INTEGER .)
    POW             reduce using rule 100 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 100 (LITERAL -> INTEGER .)
    INEQUALITY      reduce using rule 100 (LITERAL -> INTEGER .)
    LESS            reduce using rule 100 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 100 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 100 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 100 (LITERAL -> INTEGER .)
    PIPE            reduce using rule 100 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 100 (LITERAL -> INTEGER .)
    OPEN_SQUARE     reduce using rule 100 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 100 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 100 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 100 (LITERAL -> INTEGER .)
    BOOL            reduce using rule 100 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 100 (LITERAL -> INTEGER .)
    STRING          reduce using rule 100 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 100 (LITERAL -> INTEGER .)
    COMMA           reduce using rule 100 (LITERAL -> INTEGER .)
    CLOSE_SQUARE    reduce using rule 100 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 100 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 100 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 100 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 100 (LITERAL -> INTEGER .)
    THEN            reduce using rule 100 (LITERAL -> INTEGER .)
    OF              reduce using rule 100 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 100 (LITERAL -> INTEGER .)


state 20

    (65) LPAT -> APAT .

    CONSTRUCTOR     reduce using rule 65 (LPAT -> APAT .)
    EQUALS          reduce using rule 65 (LPAT -> APAT .)
    BACKTICK        reduce using rule 65 (LPAT -> APAT .)
    PLUS            reduce using rule 65 (LPAT -> APAT .)
    MINUS           reduce using rule 65 (LPAT -> APAT .)
    TIMES           reduce using rule 65 (LPAT -> APAT .)
    DIVIDE          reduce using rule 65 (LPAT -> APAT .)
    POW             reduce using rule 65 (LPAT -> APAT .)
    EQUALITY        reduce using rule 65 (LPAT -> APAT .)
    INEQUALITY      reduce using rule 65 (LPAT -> APAT .)
    LESS            reduce using rule 65 (LPAT -> APAT .)
    LEQ             reduce using rule 65 (LPAT -> APAT .)
    GREATER         reduce using rule 65 (LPAT -> APAT .)
    GEQ             reduce using rule 65 (LPAT -> APAT .)
    PIPE            reduce using rule 65 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 65 (LPAT -> APAT .)
    COMMA           reduce using rule 65 (LPAT -> APAT .)
    CLOSE_SQUARE    reduce using rule 65 (LPAT -> APAT .)
    ARROW           reduce using rule 65 (LPAT -> APAT .)


state 21

    (32) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (71) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (72) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (74) GCON -> OPEN_PAREN . CLOSE_PAREN
    (30) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (31) FUNCTION_LHS -> . PAT VAROP PAT
    (32) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 67
    IDENTIFIER      shift and go to state 69
    OPEN_PAREN      shift and go to state 21
    MINUS           shift and go to state 23
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    FUNCTION_LHS                   shift and go to state 66
    APAT                           shift and go to state 20
    PAT                            shift and go to state 68
    LPAT                           shift and go to state 22
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 22

    (63) PAT -> LPAT . CONSTRUCTOR PAT
    (64) PAT -> LPAT .

  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
    CONSTRUCTOR     shift and go to state 70
    EQUALS          reduce using rule 64 (PAT -> LPAT .)
    BACKTICK        reduce using rule 64 (PAT -> LPAT .)
    PLUS            reduce using rule 64 (PAT -> LPAT .)
    MINUS           reduce using rule 64 (PAT -> LPAT .)
    TIMES           reduce using rule 64 (PAT -> LPAT .)
    DIVIDE          reduce using rule 64 (PAT -> LPAT .)
    POW             reduce using rule 64 (PAT -> LPAT .)
    EQUALITY        reduce using rule 64 (PAT -> LPAT .)
    INEQUALITY      reduce using rule 64 (PAT -> LPAT .)
    LESS            reduce using rule 64 (PAT -> LPAT .)
    LEQ             reduce using rule 64 (PAT -> LPAT .)
    GREATER         reduce using rule 64 (PAT -> LPAT .)
    GEQ             reduce using rule 64 (PAT -> LPAT .)
    PIPE            reduce using rule 64 (PAT -> LPAT .)
    CLOSE_PAREN     reduce using rule 64 (PAT -> LPAT .)
    COMMA           reduce using rule 64 (PAT -> LPAT .)
    CLOSE_SQUARE    reduce using rule 64 (PAT -> LPAT .)
    ARROW           reduce using rule 64 (PAT -> LPAT .)

  ! CONSTRUCTOR     [ reduce using rule 64 (PAT -> LPAT .) ]


state 23

    (66) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 71


state 24

    (99) LITERAL -> FLOAT .

    CONSTRUCTOR     reduce using rule 99 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 99 (LITERAL -> FLOAT .)
    BACKTICK        reduce using rule 99 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 99 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 99 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 99 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 99 (LITERAL -> FLOAT .)
    POW             reduce using rule 99 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 99 (LITERAL -> FLOAT .)
    INEQUALITY      reduce using rule 99 (LITERAL -> FLOAT .)
    LESS            reduce using rule 99 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 99 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 99 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 99 (LITERAL -> FLOAT .)
    PIPE            reduce using rule 99 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 99 (LITERAL -> FLOAT .)
    OPEN_SQUARE     reduce using rule 99 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 99 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 99 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 99 (LITERAL -> FLOAT .)
    BOOL            reduce using rule 99 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 99 (LITERAL -> FLOAT .)
    STRING          reduce using rule 99 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 99 (LITERAL -> FLOAT .)
    COMMA           reduce using rule 99 (LITERAL -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 99 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 99 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 99 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 99 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 99 (LITERAL -> FLOAT .)
    THEN            reduce using rule 99 (LITERAL -> FLOAT .)
    OF              reduce using rule 99 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 99 (LITERAL -> FLOAT .)


state 25

    (68) APAT -> PARAM .

    CONSTRUCTOR     reduce using rule 68 (APAT -> PARAM .)
    EQUALS          reduce using rule 68 (APAT -> PARAM .)
    BACKTICK        reduce using rule 68 (APAT -> PARAM .)
    PLUS            reduce using rule 68 (APAT -> PARAM .)
    MINUS           reduce using rule 68 (APAT -> PARAM .)
    TIMES           reduce using rule 68 (APAT -> PARAM .)
    DIVIDE          reduce using rule 68 (APAT -> PARAM .)
    POW             reduce using rule 68 (APAT -> PARAM .)
    EQUALITY        reduce using rule 68 (APAT -> PARAM .)
    INEQUALITY      reduce using rule 68 (APAT -> PARAM .)
    LESS            reduce using rule 68 (APAT -> PARAM .)
    LEQ             reduce using rule 68 (APAT -> PARAM .)
    GREATER         reduce using rule 68 (APAT -> PARAM .)
    GEQ             reduce using rule 68 (APAT -> PARAM .)
    PIPE            reduce using rule 68 (APAT -> PARAM .)
    OPEN_PAREN      reduce using rule 68 (APAT -> PARAM .)
    OPEN_SQUARE     reduce using rule 68 (APAT -> PARAM .)
    IDENTIFIER      reduce using rule 68 (APAT -> PARAM .)
    FLOAT           reduce using rule 68 (APAT -> PARAM .)
    INTEGER         reduce using rule 68 (APAT -> PARAM .)
    BOOL            reduce using rule 68 (APAT -> PARAM .)
    CHAR            reduce using rule 68 (APAT -> PARAM .)
    STRING          reduce using rule 68 (APAT -> PARAM .)
    CLOSE_PAREN     reduce using rule 68 (APAT -> PARAM .)
    COMMA           reduce using rule 68 (APAT -> PARAM .)
    CLOSE_SQUARE    reduce using rule 68 (APAT -> PARAM .)
    ARROW           reduce using rule 68 (APAT -> PARAM .)


state 26

    (69) APAT -> GCON .

    CONSTRUCTOR     reduce using rule 69 (APAT -> GCON .)
    EQUALS          reduce using rule 69 (APAT -> GCON .)
    BACKTICK        reduce using rule 69 (APAT -> GCON .)
    PLUS            reduce using rule 69 (APAT -> GCON .)
    MINUS           reduce using rule 69 (APAT -> GCON .)
    TIMES           reduce using rule 69 (APAT -> GCON .)
    DIVIDE          reduce using rule 69 (APAT -> GCON .)
    POW             reduce using rule 69 (APAT -> GCON .)
    EQUALITY        reduce using rule 69 (APAT -> GCON .)
    INEQUALITY      reduce using rule 69 (APAT -> GCON .)
    LESS            reduce using rule 69 (APAT -> GCON .)
    LEQ             reduce using rule 69 (APAT -> GCON .)
    GREATER         reduce using rule 69 (APAT -> GCON .)
    GEQ             reduce using rule 69 (APAT -> GCON .)
    PIPE            reduce using rule 69 (APAT -> GCON .)
    OPEN_PAREN      reduce using rule 69 (APAT -> GCON .)
    OPEN_SQUARE     reduce using rule 69 (APAT -> GCON .)
    IDENTIFIER      reduce using rule 69 (APAT -> GCON .)
    FLOAT           reduce using rule 69 (APAT -> GCON .)
    INTEGER         reduce using rule 69 (APAT -> GCON .)
    BOOL            reduce using rule 69 (APAT -> GCON .)
    CHAR            reduce using rule 69 (APAT -> GCON .)
    STRING          reduce using rule 69 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 69 (APAT -> GCON .)
    COMMA           reduce using rule 69 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 69 (APAT -> GCON .)
    ARROW           reduce using rule 69 (APAT -> GCON .)


state 27

    (70) APAT -> LITERAL .

    CONSTRUCTOR     reduce using rule 70 (APAT -> LITERAL .)
    EQUALS          reduce using rule 70 (APAT -> LITERAL .)
    BACKTICK        reduce using rule 70 (APAT -> LITERAL .)
    PLUS            reduce using rule 70 (APAT -> LITERAL .)
    MINUS           reduce using rule 70 (APAT -> LITERAL .)
    TIMES           reduce using rule 70 (APAT -> LITERAL .)
    DIVIDE          reduce using rule 70 (APAT -> LITERAL .)
    POW             reduce using rule 70 (APAT -> LITERAL .)
    EQUALITY        reduce using rule 70 (APAT -> LITERAL .)
    INEQUALITY      reduce using rule 70 (APAT -> LITERAL .)
    LESS            reduce using rule 70 (APAT -> LITERAL .)
    LEQ             reduce using rule 70 (APAT -> LITERAL .)
    GREATER         reduce using rule 70 (APAT -> LITERAL .)
    GEQ             reduce using rule 70 (APAT -> LITERAL .)
    PIPE            reduce using rule 70 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 70 (APAT -> LITERAL .)
    OPEN_SQUARE     reduce using rule 70 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 70 (APAT -> LITERAL .)
    FLOAT           reduce using rule 70 (APAT -> LITERAL .)
    INTEGER         reduce using rule 70 (APAT -> LITERAL .)
    BOOL            reduce using rule 70 (APAT -> LITERAL .)
    CHAR            reduce using rule 70 (APAT -> LITERAL .)
    STRING          reduce using rule 70 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 70 (APAT -> LITERAL .)
    COMMA           reduce using rule 70 (APAT -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 70 (APAT -> LITERAL .)
    ARROW           reduce using rule 70 (APAT -> LITERAL .)


state 28

    (73) APAT -> OPEN_SQUARE . PAT_LIST CLOSE_SQUARE
    (75) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (83) PAT_LIST -> . PAT_LIST COMMA PAT
    (84) PAT_LIST -> . PAT
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 73
    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT_LIST                       shift and go to state 72
    PAT                            shift and go to state 74
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 29

    (101) LITERAL -> BOOL .

    CONSTRUCTOR     reduce using rule 101 (LITERAL -> BOOL .)
    EQUALS          reduce using rule 101 (LITERAL -> BOOL .)
    BACKTICK        reduce using rule 101 (LITERAL -> BOOL .)
    PLUS            reduce using rule 101 (LITERAL -> BOOL .)
    MINUS           reduce using rule 101 (LITERAL -> BOOL .)
    TIMES           reduce using rule 101 (LITERAL -> BOOL .)
    DIVIDE          reduce using rule 101 (LITERAL -> BOOL .)
    POW             reduce using rule 101 (LITERAL -> BOOL .)
    EQUALITY        reduce using rule 101 (LITERAL -> BOOL .)
    INEQUALITY      reduce using rule 101 (LITERAL -> BOOL .)
    LESS            reduce using rule 101 (LITERAL -> BOOL .)
    LEQ             reduce using rule 101 (LITERAL -> BOOL .)
    GREATER         reduce using rule 101 (LITERAL -> BOOL .)
    GEQ             reduce using rule 101 (LITERAL -> BOOL .)
    PIPE            reduce using rule 101 (LITERAL -> BOOL .)
    OPEN_PAREN      reduce using rule 101 (LITERAL -> BOOL .)
    OPEN_SQUARE     reduce using rule 101 (LITERAL -> BOOL .)
    IDENTIFIER      reduce using rule 101 (LITERAL -> BOOL .)
    FLOAT           reduce using rule 101 (LITERAL -> BOOL .)
    INTEGER         reduce using rule 101 (LITERAL -> BOOL .)
    BOOL            reduce using rule 101 (LITERAL -> BOOL .)
    CHAR            reduce using rule 101 (LITERAL -> BOOL .)
    STRING          reduce using rule 101 (LITERAL -> BOOL .)
    CLOSE_PAREN     reduce using rule 101 (LITERAL -> BOOL .)
    COMMA           reduce using rule 101 (LITERAL -> BOOL .)
    CLOSE_SQUARE    reduce using rule 101 (LITERAL -> BOOL .)
    WHERE           reduce using rule 101 (LITERAL -> BOOL .)
    CLOSE_BRACE     reduce using rule 101 (LITERAL -> BOOL .)
    ENDSTATEMENT    reduce using rule 101 (LITERAL -> BOOL .)
    ARROW           reduce using rule 101 (LITERAL -> BOOL .)
    THEN            reduce using rule 101 (LITERAL -> BOOL .)
    OF              reduce using rule 101 (LITERAL -> BOOL .)
    ELSE            reduce using rule 101 (LITERAL -> BOOL .)


state 30

    (102) LITERAL -> CHAR .

    CONSTRUCTOR     reduce using rule 102 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 102 (LITERAL -> CHAR .)
    BACKTICK        reduce using rule 102 (LITERAL -> CHAR .)
    PLUS            reduce using rule 102 (LITERAL -> CHAR .)
    MINUS           reduce using rule 102 (LITERAL -> CHAR .)
    TIMES           reduce using rule 102 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 102 (LITERAL -> CHAR .)
    POW             reduce using rule 102 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 102 (LITERAL -> CHAR .)
    INEQUALITY      reduce using rule 102 (LITERAL -> CHAR .)
    LESS            reduce using rule 102 (LITERAL -> CHAR .)
    LEQ             reduce using rule 102 (LITERAL -> CHAR .)
    GREATER         reduce using rule 102 (LITERAL -> CHAR .)
    GEQ             reduce using rule 102 (LITERAL -> CHAR .)
    PIPE            reduce using rule 102 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 102 (LITERAL -> CHAR .)
    OPEN_SQUARE     reduce using rule 102 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 102 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 102 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 102 (LITERAL -> CHAR .)
    BOOL            reduce using rule 102 (LITERAL -> CHAR .)
    CHAR            reduce using rule 102 (LITERAL -> CHAR .)
    STRING          reduce using rule 102 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 102 (LITERAL -> CHAR .)
    COMMA           reduce using rule 102 (LITERAL -> CHAR .)
    CLOSE_SQUARE    reduce using rule 102 (LITERAL -> CHAR .)
    WHERE           reduce using rule 102 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 102 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 102 (LITERAL -> CHAR .)
    ARROW           reduce using rule 102 (LITERAL -> CHAR .)
    THEN            reduce using rule 102 (LITERAL -> CHAR .)
    OF              reduce using rule 102 (LITERAL -> CHAR .)
    ELSE            reduce using rule 102 (LITERAL -> CHAR .)


state 31

    (103) LITERAL -> STRING .

    CONSTRUCTOR     reduce using rule 103 (LITERAL -> STRING .)
    EQUALS          reduce using rule 103 (LITERAL -> STRING .)
    BACKTICK        reduce using rule 103 (LITERAL -> STRING .)
    PLUS            reduce using rule 103 (LITERAL -> STRING .)
    MINUS           reduce using rule 103 (LITERAL -> STRING .)
    TIMES           reduce using rule 103 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 103 (LITERAL -> STRING .)
    POW             reduce using rule 103 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 103 (LITERAL -> STRING .)
    INEQUALITY      reduce using rule 103 (LITERAL -> STRING .)
    LESS            reduce using rule 103 (LITERAL -> STRING .)
    LEQ             reduce using rule 103 (LITERAL -> STRING .)
    GREATER         reduce using rule 103 (LITERAL -> STRING .)
    GEQ             reduce using rule 103 (LITERAL -> STRING .)
    PIPE            reduce using rule 103 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 103 (LITERAL -> STRING .)
    OPEN_SQUARE     reduce using rule 103 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 103 (LITERAL -> STRING .)
    FLOAT           reduce using rule 103 (LITERAL -> STRING .)
    INTEGER         reduce using rule 103 (LITERAL -> STRING .)
    BOOL            reduce using rule 103 (LITERAL -> STRING .)
    CHAR            reduce using rule 103 (LITERAL -> STRING .)
    STRING          reduce using rule 103 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 103 (LITERAL -> STRING .)
    COMMA           reduce using rule 103 (LITERAL -> STRING .)
    CLOSE_SQUARE    reduce using rule 103 (LITERAL -> STRING .)
    WHERE           reduce using rule 103 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 103 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 103 (LITERAL -> STRING .)
    ARROW           reduce using rule 103 (LITERAL -> STRING .)
    THEN            reduce using rule 103 (LITERAL -> STRING .)
    OF              reduce using rule 103 (LITERAL -> STRING .)
    ELSE            reduce using rule 103 (LITERAL -> STRING .)


state 32

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (20) GEN_DECLARATION -> .
    (30) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (31) FUNCTION_LHS -> . PAT VAROP PAT
    (32) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 18
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 21
    MINUS           shift and go to state 23
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    TOP_DECLARATIONS               shift and go to state 75
    IMPORT_DECLARATION             shift and go to state 76
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 33

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 34

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (20) GEN_DECLARATION -> .
    (30) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (31) FUNCTION_LHS -> . PAT VAROP PAT
    (32) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 18
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 21
    MINUS           shift and go to state 23
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    TOP_DECLARATION                shift and go to state 77
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 35

    (6) IMPORT_DECLARATION -> IMPORT IDENTIFIER .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATION -> IMPORT IDENTIFIER .)


state 36

    (105) PARAM -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 105 (PARAM -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 105 (PARAM -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 105 (PARAM -> IDENTIFIER .)
    FLOAT           reduce using rule 105 (PARAM -> IDENTIFIER .)
    INTEGER         reduce using rule 105 (PARAM -> IDENTIFIER .)
    BOOL            reduce using rule 105 (PARAM -> IDENTIFIER .)
    CHAR            reduce using rule 105 (PARAM -> IDENTIFIER .)
    STRING          reduce using rule 105 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 105 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 105 (PARAM -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 105 (PARAM -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 105 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 105 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 105 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 105 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 105 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 105 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 105 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 105 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 105 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 105 (PARAM -> IDENTIFIER .)
    INEQUALITY      reduce using rule 105 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 105 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 105 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 105 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 105 (PARAM -> IDENTIFIER .)
    ARROW           reduce using rule 105 (PARAM -> IDENTIFIER .)


state 37

    (18) GEN_DECLARATION -> IDENTIFIER TYPESIG . TYPE
    (24) TYPE -> . ATYPE
    (25) TYPE -> . ATYPE ARROW TYPE
    (26) ATYPE -> . TYPENAME
    (27) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (28) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (29) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 80
    OPEN_PAREN      shift and go to state 81
    OPEN_SQUARE     shift and go to state 82

    TYPE                           shift and go to state 78
    ATYPE                          shift and go to state 79

state 38

    (30) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (81) APATS -> . APAT APATS
    (82) APATS -> .
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    EQUALS          reduce using rule 82 (APATS -> .)
    PIPE            reduce using rule 82 (APATS -> .)
    CLOSE_PAREN     reduce using rule 82 (APATS -> .)
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 83
    APATS                          shift and go to state 84
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 39

    (71) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (72) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (74) GCON -> OPEN_PAREN . CLOSE_PAREN
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 67
    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 85
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 40

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME . EQUALS TYPE

    EQUALS          shift and go to state 86


state 41

    (16) DECLARATION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 16 (DECLARATION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 16 (DECLARATION -> FUNCTION_LHS RHS .)


state 42

    (33) RHS -> EQUALS . EXP
    (34) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 87
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 43

    (35) RHS -> GDRHS .
    (36) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 35 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 35 (RHS -> GDRHS .)
    WHERE           shift and go to state 103


state 44

    (37) GDRHS -> GUARDS . EQUALS EXP
    (38) GDRHS -> GUARDS . EQUALS EXP GDRHS

    EQUALS          shift and go to state 104


state 45

    (39) GUARDS -> PIPE . GUARD
    (40) GUARD -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    GUARD                          shift and go to state 105
    INFIX_EXP                      shift and go to state 106
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 46

    (17) DECLARATION -> PAT RHS .

    CLOSE_BRACE     reduce using rule 17 (DECLARATION -> PAT RHS .)
    ENDSTATEMENT    reduce using rule 17 (DECLARATION -> PAT RHS .)


state 47

    (31) FUNCTION_LHS -> PAT VAROP . PAT
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 107
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 48

    (76) VAROP -> VARSYM .

    MINUS           reduce using rule 76 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 76 (VAROP -> VARSYM .)
    OPEN_SQUARE     reduce using rule 76 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 76 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 76 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 76 (VAROP -> VARSYM .)
    BOOL            reduce using rule 76 (VAROP -> VARSYM .)
    CHAR            reduce using rule 76 (VAROP -> VARSYM .)
    STRING          reduce using rule 76 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 76 (VAROP -> VARSYM .)
    LET             reduce using rule 76 (VAROP -> VARSYM .)
    IF              reduce using rule 76 (VAROP -> VARSYM .)
    MATCH           reduce using rule 76 (VAROP -> VARSYM .)
    CLOSE_BRACE     reduce using rule 76 (VAROP -> VARSYM .)
    ENDSTATEMENT    reduce using rule 76 (VAROP -> VARSYM .)


state 49

    (77) VAROP -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 108


state 50

    (85) VARSYM -> PLUS .

    MINUS           reduce using rule 85 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 85 (VARSYM -> PLUS .)
    OPEN_SQUARE     reduce using rule 85 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 85 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 85 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 85 (VARSYM -> PLUS .)
    BOOL            reduce using rule 85 (VARSYM -> PLUS .)
    CHAR            reduce using rule 85 (VARSYM -> PLUS .)
    STRING          reduce using rule 85 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 85 (VARSYM -> PLUS .)
    LET             reduce using rule 85 (VARSYM -> PLUS .)
    IF              reduce using rule 85 (VARSYM -> PLUS .)
    MATCH           reduce using rule 85 (VARSYM -> PLUS .)
    CLOSE_BRACE     reduce using rule 85 (VARSYM -> PLUS .)
    ENDSTATEMENT    reduce using rule 85 (VARSYM -> PLUS .)


state 51

    (86) VARSYM -> MINUS .

    MINUS           reduce using rule 86 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 86 (VARSYM -> MINUS .)
    OPEN_SQUARE     reduce using rule 86 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 86 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 86 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 86 (VARSYM -> MINUS .)
    BOOL            reduce using rule 86 (VARSYM -> MINUS .)
    CHAR            reduce using rule 86 (VARSYM -> MINUS .)
    STRING          reduce using rule 86 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 86 (VARSYM -> MINUS .)
    LET             reduce using rule 86 (VARSYM -> MINUS .)
    IF              reduce using rule 86 (VARSYM -> MINUS .)
    MATCH           reduce using rule 86 (VARSYM -> MINUS .)
    CLOSE_BRACE     reduce using rule 86 (VARSYM -> MINUS .)
    ENDSTATEMENT    reduce using rule 86 (VARSYM -> MINUS .)


state 52

    (87) VARSYM -> TIMES .

    MINUS           reduce using rule 87 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 87 (VARSYM -> TIMES .)
    OPEN_SQUARE     reduce using rule 87 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 87 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 87 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 87 (VARSYM -> TIMES .)
    BOOL            reduce using rule 87 (VARSYM -> TIMES .)
    CHAR            reduce using rule 87 (VARSYM -> TIMES .)
    STRING          reduce using rule 87 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 87 (VARSYM -> TIMES .)
    LET             reduce using rule 87 (VARSYM -> TIMES .)
    IF              reduce using rule 87 (VARSYM -> TIMES .)
    MATCH           reduce using rule 87 (VARSYM -> TIMES .)
    CLOSE_BRACE     reduce using rule 87 (VARSYM -> TIMES .)
    ENDSTATEMENT    reduce using rule 87 (VARSYM -> TIMES .)


state 53

    (88) VARSYM -> DIVIDE .

    MINUS           reduce using rule 88 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 88 (VARSYM -> DIVIDE .)
    OPEN_SQUARE     reduce using rule 88 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 88 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 88 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 88 (VARSYM -> DIVIDE .)
    BOOL            reduce using rule 88 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 88 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 88 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 88 (VARSYM -> DIVIDE .)
    LET             reduce using rule 88 (VARSYM -> DIVIDE .)
    IF              reduce using rule 88 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 88 (VARSYM -> DIVIDE .)
    CLOSE_BRACE     reduce using rule 88 (VARSYM -> DIVIDE .)
    ENDSTATEMENT    reduce using rule 88 (VARSYM -> DIVIDE .)


state 54

    (89) VARSYM -> POW .

    MINUS           reduce using rule 89 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 89 (VARSYM -> POW .)
    OPEN_SQUARE     reduce using rule 89 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 89 (VARSYM -> POW .)
    FLOAT           reduce using rule 89 (VARSYM -> POW .)
    INTEGER         reduce using rule 89 (VARSYM -> POW .)
    BOOL            reduce using rule 89 (VARSYM -> POW .)
    CHAR            reduce using rule 89 (VARSYM -> POW .)
    STRING          reduce using rule 89 (VARSYM -> POW .)
    LAMBDA          reduce using rule 89 (VARSYM -> POW .)
    LET             reduce using rule 89 (VARSYM -> POW .)
    IF              reduce using rule 89 (VARSYM -> POW .)
    MATCH           reduce using rule 89 (VARSYM -> POW .)
    CLOSE_BRACE     reduce using rule 89 (VARSYM -> POW .)
    ENDSTATEMENT    reduce using rule 89 (VARSYM -> POW .)


state 55

    (90) VARSYM -> EQUALITY .

    MINUS           reduce using rule 90 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 90 (VARSYM -> EQUALITY .)
    OPEN_SQUARE     reduce using rule 90 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 90 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 90 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 90 (VARSYM -> EQUALITY .)
    BOOL            reduce using rule 90 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 90 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 90 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 90 (VARSYM -> EQUALITY .)
    LET             reduce using rule 90 (VARSYM -> EQUALITY .)
    IF              reduce using rule 90 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 90 (VARSYM -> EQUALITY .)
    CLOSE_BRACE     reduce using rule 90 (VARSYM -> EQUALITY .)
    ENDSTATEMENT    reduce using rule 90 (VARSYM -> EQUALITY .)


state 56

    (91) VARSYM -> INEQUALITY .

    MINUS           reduce using rule 91 (VARSYM -> INEQUALITY .)
    OPEN_PAREN      reduce using rule 91 (VARSYM -> INEQUALITY .)
    OPEN_SQUARE     reduce using rule 91 (VARSYM -> INEQUALITY .)
    IDENTIFIER      reduce using rule 91 (VARSYM -> INEQUALITY .)
    FLOAT           reduce using rule 91 (VARSYM -> INEQUALITY .)
    INTEGER         reduce using rule 91 (VARSYM -> INEQUALITY .)
    BOOL            reduce using rule 91 (VARSYM -> INEQUALITY .)
    CHAR            reduce using rule 91 (VARSYM -> INEQUALITY .)
    STRING          reduce using rule 91 (VARSYM -> INEQUALITY .)
    LAMBDA          reduce using rule 91 (VARSYM -> INEQUALITY .)
    LET             reduce using rule 91 (VARSYM -> INEQUALITY .)
    IF              reduce using rule 91 (VARSYM -> INEQUALITY .)
    MATCH           reduce using rule 91 (VARSYM -> INEQUALITY .)
    CLOSE_BRACE     reduce using rule 91 (VARSYM -> INEQUALITY .)
    ENDSTATEMENT    reduce using rule 91 (VARSYM -> INEQUALITY .)


state 57

    (92) VARSYM -> LESS .

    MINUS           reduce using rule 92 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 92 (VARSYM -> LESS .)
    OPEN_SQUARE     reduce using rule 92 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 92 (VARSYM -> LESS .)
    FLOAT           reduce using rule 92 (VARSYM -> LESS .)
    INTEGER         reduce using rule 92 (VARSYM -> LESS .)
    BOOL            reduce using rule 92 (VARSYM -> LESS .)
    CHAR            reduce using rule 92 (VARSYM -> LESS .)
    STRING          reduce using rule 92 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 92 (VARSYM -> LESS .)
    LET             reduce using rule 92 (VARSYM -> LESS .)
    IF              reduce using rule 92 (VARSYM -> LESS .)
    MATCH           reduce using rule 92 (VARSYM -> LESS .)
    CLOSE_BRACE     reduce using rule 92 (VARSYM -> LESS .)
    ENDSTATEMENT    reduce using rule 92 (VARSYM -> LESS .)


state 58

    (93) VARSYM -> LEQ .

    MINUS           reduce using rule 93 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 93 (VARSYM -> LEQ .)
    OPEN_SQUARE     reduce using rule 93 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 93 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 93 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 93 (VARSYM -> LEQ .)
    BOOL            reduce using rule 93 (VARSYM -> LEQ .)
    CHAR            reduce using rule 93 (VARSYM -> LEQ .)
    STRING          reduce using rule 93 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 93 (VARSYM -> LEQ .)
    LET             reduce using rule 93 (VARSYM -> LEQ .)
    IF              reduce using rule 93 (VARSYM -> LEQ .)
    MATCH           reduce using rule 93 (VARSYM -> LEQ .)
    CLOSE_BRACE     reduce using rule 93 (VARSYM -> LEQ .)
    ENDSTATEMENT    reduce using rule 93 (VARSYM -> LEQ .)


state 59

    (94) VARSYM -> GREATER .

    MINUS           reduce using rule 94 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 94 (VARSYM -> GREATER .)
    OPEN_SQUARE     reduce using rule 94 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 94 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 94 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 94 (VARSYM -> GREATER .)
    BOOL            reduce using rule 94 (VARSYM -> GREATER .)
    CHAR            reduce using rule 94 (VARSYM -> GREATER .)
    STRING          reduce using rule 94 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 94 (VARSYM -> GREATER .)
    LET             reduce using rule 94 (VARSYM -> GREATER .)
    IF              reduce using rule 94 (VARSYM -> GREATER .)
    MATCH           reduce using rule 94 (VARSYM -> GREATER .)
    CLOSE_BRACE     reduce using rule 94 (VARSYM -> GREATER .)
    ENDSTATEMENT    reduce using rule 94 (VARSYM -> GREATER .)


state 60

    (95) VARSYM -> GEQ .

    MINUS           reduce using rule 95 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 95 (VARSYM -> GEQ .)
    OPEN_SQUARE     reduce using rule 95 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 95 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 95 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 95 (VARSYM -> GEQ .)
    BOOL            reduce using rule 95 (VARSYM -> GEQ .)
    CHAR            reduce using rule 95 (VARSYM -> GEQ .)
    STRING          reduce using rule 95 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 95 (VARSYM -> GEQ .)
    LET             reduce using rule 95 (VARSYM -> GEQ .)
    IF              reduce using rule 95 (VARSYM -> GEQ .)
    MATCH           reduce using rule 95 (VARSYM -> GEQ .)
    CLOSE_BRACE     reduce using rule 95 (VARSYM -> GEQ .)
    ENDSTATEMENT    reduce using rule 95 (VARSYM -> GEQ .)


state 61

    (96) VARSYM -> CONSTRUCTOR .

    MINUS           reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    OPEN_PAREN      reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    OPEN_SQUARE     reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    IDENTIFIER      reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    FLOAT           reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    INTEGER         reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    BOOL            reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    CHAR            reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    STRING          reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    LAMBDA          reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    LET             reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    IF              reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    MATCH           reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 96 (VARSYM -> CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 96 (VARSYM -> CONSTRUCTOR .)


state 62

    (19) GEN_DECLARATION -> SETFIX ASSOCIATIVITY . INTEGER OP

    INTEGER         shift and go to state 109


state 63

    (21) ASSOCIATIVITY -> LEFTASSOC .

    INTEGER         reduce using rule 21 (ASSOCIATIVITY -> LEFTASSOC .)


state 64

    (22) ASSOCIATIVITY -> RIGHTASSOC .

    INTEGER         reduce using rule 22 (ASSOCIATIVITY -> RIGHTASSOC .)


state 65

    (23) ASSOCIATIVITY -> NONASSOC .

    INTEGER         reduce using rule 23 (ASSOCIATIVITY -> NONASSOC .)


state 66

    (32) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 110


state 67

    (74) GCON -> OPEN_PAREN CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BACKTICK        reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TIMES           reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    POW             reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALITY        reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INEQUALITY      reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LESS            reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LEQ             reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GREATER         reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GEQ             reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PIPE            reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BOOL            reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WHERE           reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    THEN            reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OF              reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 74 (GCON -> OPEN_PAREN CLOSE_PAREN .)


state 68

    (71) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (72) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN
    (31) FUNCTION_LHS -> PAT . VAROP PAT
    (76) VAROP -> . VARSYM
    (77) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (85) VARSYM -> . PLUS
    (86) VARSYM -> . MINUS
    (87) VARSYM -> . TIMES
    (88) VARSYM -> . DIVIDE
    (89) VARSYM -> . POW
    (90) VARSYM -> . EQUALITY
    (91) VARSYM -> . INEQUALITY
    (92) VARSYM -> . LESS
    (93) VARSYM -> . LEQ
    (94) VARSYM -> . GREATER
    (95) VARSYM -> . GEQ
    (96) VARSYM -> . CONSTRUCTOR

    CLOSE_PAREN     shift and go to state 111
    COMMA           shift and go to state 112
    BACKTICK        shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    POW             shift and go to state 54
    EQUALITY        shift and go to state 55
    INEQUALITY      shift and go to state 56
    LESS            shift and go to state 57
    LEQ             shift and go to state 58
    GREATER         shift and go to state 59
    GEQ             shift and go to state 60
    CONSTRUCTOR     shift and go to state 61

    VAROP                          shift and go to state 47
    VARSYM                         shift and go to state 48

state 69

    (30) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (105) PARAM -> IDENTIFIER .
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CONSTRUCTOR     reduce using rule 105 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 105 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 105 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 105 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 105 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 105 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 105 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 105 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 105 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 105 (PARAM -> IDENTIFIER .)
    INEQUALITY      reduce using rule 105 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 105 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 105 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 105 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 105 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 38
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 70

    (63) PAT -> LPAT CONSTRUCTOR . PAT
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    LPAT                           shift and go to state 22
    PAT                            shift and go to state 113
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 71

    (66) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (67) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 114
    FLOAT           shift and go to state 115


state 72

    (73) APAT -> OPEN_SQUARE PAT_LIST . CLOSE_SQUARE
    (83) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_SQUARE    shift and go to state 116
    COMMA           shift and go to state 117


state 73

    (75) GCON -> OPEN_SQUARE CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BACKTICK        reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TIMES           reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    POW             reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALITY        reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LEQ             reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GEQ             reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PIPE            reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INTEGER         reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BOOL            reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CHAR            reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WHERE           reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ARROW           reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    THEN            reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OF              reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ELSE            reduce using rule 75 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)


state 74

    (84) PAT_LIST -> PAT .

    CLOSE_SQUARE    reduce using rule 84 (PAT_LIST -> PAT .)
    COMMA           reduce using rule 84 (PAT_LIST -> PAT .)
    CLOSE_PAREN     reduce using rule 84 (PAT_LIST -> PAT .)


state 75

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 118
    ENDSTATEMENT    shift and go to state 34


state 76

    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 4 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 77

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 78

    (18) GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .

    CLOSE_BRACE     reduce using rule 18 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)
    ENDSTATEMENT    reduce using rule 18 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)


state 79

    (24) TYPE -> ATYPE .
    (25) TYPE -> ATYPE . ARROW TYPE

    CLOSE_BRACE     reduce using rule 24 (TYPE -> ATYPE .)
    ENDSTATEMENT    reduce using rule 24 (TYPE -> ATYPE .)
    CLOSE_PAREN     reduce using rule 24 (TYPE -> ATYPE .)
    COMMA           reduce using rule 24 (TYPE -> ATYPE .)
    CLOSE_SQUARE    reduce using rule 24 (TYPE -> ATYPE .)
    ARROW           shift and go to state 119


state 80

    (26) ATYPE -> TYPENAME .

    ARROW           reduce using rule 26 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 26 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 26 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 26 (ATYPE -> TYPENAME .)
    COMMA           reduce using rule 26 (ATYPE -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 26 (ATYPE -> TYPENAME .)


state 81

    (27) ATYPE -> OPEN_PAREN . TYPES_LIST CLOSE_PAREN
    (28) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (97) TYPES_LIST -> . TYPES_LIST COMMA TYPE
    (98) TYPES_LIST -> . TYPE
    (24) TYPE -> . ATYPE
    (25) TYPE -> . ATYPE ARROW TYPE
    (26) ATYPE -> . TYPENAME
    (27) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (28) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (29) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 80
    OPEN_PAREN      shift and go to state 81
    OPEN_SQUARE     shift and go to state 82

    TYPES_LIST                     shift and go to state 120
    TYPE                           shift and go to state 121
    ATYPE                          shift and go to state 79

state 82

    (29) ATYPE -> OPEN_SQUARE . TYPE CLOSE_SQUARE
    (24) TYPE -> . ATYPE
    (25) TYPE -> . ATYPE ARROW TYPE
    (26) ATYPE -> . TYPENAME
    (27) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (28) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (29) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 80
    OPEN_PAREN      shift and go to state 81
    OPEN_SQUARE     shift and go to state 82

    TYPE                           shift and go to state 122
    ATYPE                          shift and go to state 79

state 83

    (81) APATS -> APAT . APATS
    (81) APATS -> . APAT APATS
    (82) APATS -> .
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    EQUALS          reduce using rule 82 (APATS -> .)
    PIPE            reduce using rule 82 (APATS -> .)
    CLOSE_PAREN     reduce using rule 82 (APATS -> .)
    ARROW           reduce using rule 82 (APATS -> .)
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 83
    APATS                          shift and go to state 123
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 84

    (30) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 30 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    PIPE            reduce using rule 30 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 30 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 85

    (71) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (72) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 111
    COMMA           shift and go to state 112


state 86

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS . TYPE
    (24) TYPE -> . ATYPE
    (25) TYPE -> . ATYPE ARROW TYPE
    (26) ATYPE -> . TYPENAME
    (27) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (28) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (29) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 80
    OPEN_PAREN      shift and go to state 81
    OPEN_SQUARE     shift and go to state 82

    TYPE                           shift and go to state 124
    ATYPE                          shift and go to state 79

state 87

    (33) RHS -> EQUALS EXP .
    (34) RHS -> EQUALS EXP . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 33 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 33 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 125


state 88

    (41) EXP -> INFIX_EXP .

    WHERE           reduce using rule 41 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 41 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 41 (EXP -> INFIX_EXP .)
    THEN            reduce using rule 41 (EXP -> INFIX_EXP .)
    OF              reduce using rule 41 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 41 (EXP -> INFIX_EXP .)
    COMMA           reduce using rule 41 (EXP -> INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 41 (EXP -> INFIX_EXP .)
    PIPE            reduce using rule 41 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 41 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 41 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 41 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 41 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 41 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 41 (EXP -> INFIX_EXP .)
    POW             reduce using rule 41 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 41 (EXP -> INFIX_EXP .)
    INEQUALITY      reduce using rule 41 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 41 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 41 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 41 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 41 (EXP -> INFIX_EXP .)
    CONSTRUCTOR     reduce using rule 41 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 41 (EXP -> INFIX_EXP .)


state 89

    (42) INFIX_EXP -> LEXP . OP INFIX_EXP
    (44) INFIX_EXP -> LEXP .
    (78) OP -> . VAROP
    (76) VAROP -> . VARSYM
    (77) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (85) VARSYM -> . PLUS
    (86) VARSYM -> . MINUS
    (87) VARSYM -> . TIMES
    (88) VARSYM -> . DIVIDE
    (89) VARSYM -> . POW
    (90) VARSYM -> . EQUALITY
    (91) VARSYM -> . INEQUALITY
    (92) VARSYM -> . LESS
    (93) VARSYM -> . LEQ
    (94) VARSYM -> . GREATER
    (95) VARSYM -> . GEQ
    (96) VARSYM -> . CONSTRUCTOR

  ! shift/reduce conflict for BACKTICK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
    WHERE           reduce using rule 44 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 44 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 44 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 44 (INFIX_EXP -> LEXP .)
    THEN            reduce using rule 44 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 44 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 44 (INFIX_EXP -> LEXP .)
    COMMA           reduce using rule 44 (INFIX_EXP -> LEXP .)
    CLOSE_SQUARE    reduce using rule 44 (INFIX_EXP -> LEXP .)
    PIPE            reduce using rule 44 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 44 (INFIX_EXP -> LEXP .)
    BACKTICK        shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    POW             shift and go to state 54
    EQUALITY        shift and go to state 55
    INEQUALITY      shift and go to state 56
    LESS            shift and go to state 57
    LEQ             shift and go to state 58
    GREATER         shift and go to state 59
    GEQ             shift and go to state 60
    CONSTRUCTOR     shift and go to state 61

  ! BACKTICK        [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! PLUS            [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! MINUS           [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! INEQUALITY      [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]
  ! CONSTRUCTOR     [ reduce using rule 44 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 126
    VAROP                          shift and go to state 127
    VARSYM                         shift and go to state 48

state 90

    (43) INFIX_EXP -> MINUS . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    INFIX_EXP                      shift and go to state 128
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 91

    (45) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 129
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 92

    (46) LEXP -> LET . DECLARATIONS IN EXP
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 131

    DECLARATIONS                   shift and go to state 130

state 93

    (47) LEXP -> IF . EXP THEN EXP ELSE EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 132
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 94

    (48) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 133
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 95

    (49) LEXP -> FEXP .
    (50) FEXP -> FEXP . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    BACKTICK        reduce using rule 49 (LEXP -> FEXP .)
    PLUS            reduce using rule 49 (LEXP -> FEXP .)
    MINUS           reduce using rule 49 (LEXP -> FEXP .)
    TIMES           reduce using rule 49 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 49 (LEXP -> FEXP .)
    POW             reduce using rule 49 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 49 (LEXP -> FEXP .)
    INEQUALITY      reduce using rule 49 (LEXP -> FEXP .)
    LESS            reduce using rule 49 (LEXP -> FEXP .)
    LEQ             reduce using rule 49 (LEXP -> FEXP .)
    GREATER         reduce using rule 49 (LEXP -> FEXP .)
    GEQ             reduce using rule 49 (LEXP -> FEXP .)
    CONSTRUCTOR     reduce using rule 49 (LEXP -> FEXP .)
    WHERE           reduce using rule 49 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 49 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 49 (LEXP -> FEXP .)
    EQUALS          reduce using rule 49 (LEXP -> FEXP .)
    THEN            reduce using rule 49 (LEXP -> FEXP .)
    OF              reduce using rule 49 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 49 (LEXP -> FEXP .)
    COMMA           reduce using rule 49 (LEXP -> FEXP .)
    CLOSE_SQUARE    reduce using rule 49 (LEXP -> FEXP .)
    PIPE            reduce using rule 49 (LEXP -> FEXP .)
    ELSE            reduce using rule 49 (LEXP -> FEXP .)
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    AEXP                           shift and go to state 134
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 96

    (51) FEXP -> AEXP .

    OPEN_PAREN      reduce using rule 51 (FEXP -> AEXP .)
    OPEN_SQUARE     reduce using rule 51 (FEXP -> AEXP .)
    IDENTIFIER      reduce using rule 51 (FEXP -> AEXP .)
    FLOAT           reduce using rule 51 (FEXP -> AEXP .)
    INTEGER         reduce using rule 51 (FEXP -> AEXP .)
    BOOL            reduce using rule 51 (FEXP -> AEXP .)
    CHAR            reduce using rule 51 (FEXP -> AEXP .)
    STRING          reduce using rule 51 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 51 (FEXP -> AEXP .)
    PLUS            reduce using rule 51 (FEXP -> AEXP .)
    MINUS           reduce using rule 51 (FEXP -> AEXP .)
    TIMES           reduce using rule 51 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 51 (FEXP -> AEXP .)
    POW             reduce using rule 51 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 51 (FEXP -> AEXP .)
    INEQUALITY      reduce using rule 51 (FEXP -> AEXP .)
    LESS            reduce using rule 51 (FEXP -> AEXP .)
    LEQ             reduce using rule 51 (FEXP -> AEXP .)
    GREATER         reduce using rule 51 (FEXP -> AEXP .)
    GEQ             reduce using rule 51 (FEXP -> AEXP .)
    CONSTRUCTOR     reduce using rule 51 (FEXP -> AEXP .)
    WHERE           reduce using rule 51 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 51 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 51 (FEXP -> AEXP .)
    EQUALS          reduce using rule 51 (FEXP -> AEXP .)
    THEN            reduce using rule 51 (FEXP -> AEXP .)
    OF              reduce using rule 51 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 51 (FEXP -> AEXP .)
    COMMA           reduce using rule 51 (FEXP -> AEXP .)
    CLOSE_SQUARE    reduce using rule 51 (FEXP -> AEXP .)
    PIPE            reduce using rule 51 (FEXP -> AEXP .)
    ELSE            reduce using rule 51 (FEXP -> AEXP .)


state 97

    (52) AEXP -> USED_VAR .

    OPEN_PAREN      reduce using rule 52 (AEXP -> USED_VAR .)
    OPEN_SQUARE     reduce using rule 52 (AEXP -> USED_VAR .)
    IDENTIFIER      reduce using rule 52 (AEXP -> USED_VAR .)
    FLOAT           reduce using rule 52 (AEXP -> USED_VAR .)
    INTEGER         reduce using rule 52 (AEXP -> USED_VAR .)
    BOOL            reduce using rule 52 (AEXP -> USED_VAR .)
    CHAR            reduce using rule 52 (AEXP -> USED_VAR .)
    STRING          reduce using rule 52 (AEXP -> USED_VAR .)
    BACKTICK        reduce using rule 52 (AEXP -> USED_VAR .)
    PLUS            reduce using rule 52 (AEXP -> USED_VAR .)
    MINUS           reduce using rule 52 (AEXP -> USED_VAR .)
    TIMES           reduce using rule 52 (AEXP -> USED_VAR .)
    DIVIDE          reduce using rule 52 (AEXP -> USED_VAR .)
    POW             reduce using rule 52 (AEXP -> USED_VAR .)
    EQUALITY        reduce using rule 52 (AEXP -> USED_VAR .)
    INEQUALITY      reduce using rule 52 (AEXP -> USED_VAR .)
    LESS            reduce using rule 52 (AEXP -> USED_VAR .)
    LEQ             reduce using rule 52 (AEXP -> USED_VAR .)
    GREATER         reduce using rule 52 (AEXP -> USED_VAR .)
    GEQ             reduce using rule 52 (AEXP -> USED_VAR .)
    CONSTRUCTOR     reduce using rule 52 (AEXP -> USED_VAR .)
    WHERE           reduce using rule 52 (AEXP -> USED_VAR .)
    CLOSE_BRACE     reduce using rule 52 (AEXP -> USED_VAR .)
    ENDSTATEMENT    reduce using rule 52 (AEXP -> USED_VAR .)
    EQUALS          reduce using rule 52 (AEXP -> USED_VAR .)
    THEN            reduce using rule 52 (AEXP -> USED_VAR .)
    OF              reduce using rule 52 (AEXP -> USED_VAR .)
    CLOSE_PAREN     reduce using rule 52 (AEXP -> USED_VAR .)
    COMMA           reduce using rule 52 (AEXP -> USED_VAR .)
    CLOSE_SQUARE    reduce using rule 52 (AEXP -> USED_VAR .)
    PIPE            reduce using rule 52 (AEXP -> USED_VAR .)
    ELSE            reduce using rule 52 (AEXP -> USED_VAR .)


state 98

    (53) AEXP -> GCON .

    OPEN_PAREN      reduce using rule 53 (AEXP -> GCON .)
    OPEN_SQUARE     reduce using rule 53 (AEXP -> GCON .)
    IDENTIFIER      reduce using rule 53 (AEXP -> GCON .)
    FLOAT           reduce using rule 53 (AEXP -> GCON .)
    INTEGER         reduce using rule 53 (AEXP -> GCON .)
    BOOL            reduce using rule 53 (AEXP -> GCON .)
    CHAR            reduce using rule 53 (AEXP -> GCON .)
    STRING          reduce using rule 53 (AEXP -> GCON .)
    BACKTICK        reduce using rule 53 (AEXP -> GCON .)
    PLUS            reduce using rule 53 (AEXP -> GCON .)
    MINUS           reduce using rule 53 (AEXP -> GCON .)
    TIMES           reduce using rule 53 (AEXP -> GCON .)
    DIVIDE          reduce using rule 53 (AEXP -> GCON .)
    POW             reduce using rule 53 (AEXP -> GCON .)
    EQUALITY        reduce using rule 53 (AEXP -> GCON .)
    INEQUALITY      reduce using rule 53 (AEXP -> GCON .)
    LESS            reduce using rule 53 (AEXP -> GCON .)
    LEQ             reduce using rule 53 (AEXP -> GCON .)
    GREATER         reduce using rule 53 (AEXP -> GCON .)
    GEQ             reduce using rule 53 (AEXP -> GCON .)
    CONSTRUCTOR     reduce using rule 53 (AEXP -> GCON .)
    WHERE           reduce using rule 53 (AEXP -> GCON .)
    CLOSE_BRACE     reduce using rule 53 (AEXP -> GCON .)
    ENDSTATEMENT    reduce using rule 53 (AEXP -> GCON .)
    EQUALS          reduce using rule 53 (AEXP -> GCON .)
    THEN            reduce using rule 53 (AEXP -> GCON .)
    OF              reduce using rule 53 (AEXP -> GCON .)
    CLOSE_PAREN     reduce using rule 53 (AEXP -> GCON .)
    COMMA           reduce using rule 53 (AEXP -> GCON .)
    CLOSE_SQUARE    reduce using rule 53 (AEXP -> GCON .)
    PIPE            reduce using rule 53 (AEXP -> GCON .)
    ELSE            reduce using rule 53 (AEXP -> GCON .)


state 99

    (54) AEXP -> LITERAL .

    OPEN_PAREN      reduce using rule 54 (AEXP -> LITERAL .)
    OPEN_SQUARE     reduce using rule 54 (AEXP -> LITERAL .)
    IDENTIFIER      reduce using rule 54 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 54 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 54 (AEXP -> LITERAL .)
    BOOL            reduce using rule 54 (AEXP -> LITERAL .)
    CHAR            reduce using rule 54 (AEXP -> LITERAL .)
    STRING          reduce using rule 54 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 54 (AEXP -> LITERAL .)
    PLUS            reduce using rule 54 (AEXP -> LITERAL .)
    MINUS           reduce using rule 54 (AEXP -> LITERAL .)
    TIMES           reduce using rule 54 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 54 (AEXP -> LITERAL .)
    POW             reduce using rule 54 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 54 (AEXP -> LITERAL .)
    INEQUALITY      reduce using rule 54 (AEXP -> LITERAL .)
    LESS            reduce using rule 54 (AEXP -> LITERAL .)
    LEQ             reduce using rule 54 (AEXP -> LITERAL .)
    GREATER         reduce using rule 54 (AEXP -> LITERAL .)
    GEQ             reduce using rule 54 (AEXP -> LITERAL .)
    CONSTRUCTOR     reduce using rule 54 (AEXP -> LITERAL .)
    WHERE           reduce using rule 54 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 54 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 54 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 54 (AEXP -> LITERAL .)
    THEN            reduce using rule 54 (AEXP -> LITERAL .)
    OF              reduce using rule 54 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 54 (AEXP -> LITERAL .)
    COMMA           reduce using rule 54 (AEXP -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 54 (AEXP -> LITERAL .)
    PIPE            reduce using rule 54 (AEXP -> LITERAL .)
    ELSE            reduce using rule 54 (AEXP -> LITERAL .)


state 100

    (55) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (56) AEXP -> OPEN_PAREN . EXP COMMA EXP_LIST CLOSE_PAREN
    (74) GCON -> OPEN_PAREN . CLOSE_PAREN
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 67
    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 135
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 101

    (57) AEXP -> OPEN_SQUARE . EXP CLOSE_SQUARE
    (58) AEXP -> OPEN_SQUARE . EXP COMMA EXP_LIST CLOSE_SQUARE
    (75) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 73
    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 136
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 102

    (104) USED_VAR -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    FLOAT           reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    INTEGER         reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    BOOL            reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    CHAR            reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    STRING          reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    BACKTICK        reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    PLUS            reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    MINUS           reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    TIMES           reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    DIVIDE          reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    POW             reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    EQUALITY        reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    INEQUALITY      reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    LESS            reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    LEQ             reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    GREATER         reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    GEQ             reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    WHERE           reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    EQUALS          reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    THEN            reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    OF              reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    COMMA           reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    PIPE            reduce using rule 104 (USED_VAR -> IDENTIFIER .)
    ELSE            reduce using rule 104 (USED_VAR -> IDENTIFIER .)


state 103

    (36) RHS -> GDRHS WHERE . DECLARATIONS
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 131

    DECLARATIONS                   shift and go to state 137

state 104

    (37) GDRHS -> GUARDS EQUALS . EXP
    (38) GDRHS -> GUARDS EQUALS . EXP GDRHS
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 138
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 105

    (39) GUARDS -> PIPE GUARD .

    EQUALS          reduce using rule 39 (GUARDS -> PIPE GUARD .)


state 106

    (40) GUARD -> INFIX_EXP .

    EQUALS          reduce using rule 40 (GUARD -> INFIX_EXP .)


state 107

    (31) FUNCTION_LHS -> PAT VAROP PAT .

    EQUALS          reduce using rule 31 (FUNCTION_LHS -> PAT VAROP PAT .)
    PIPE            reduce using rule 31 (FUNCTION_LHS -> PAT VAROP PAT .)
    CLOSE_PAREN     reduce using rule 31 (FUNCTION_LHS -> PAT VAROP PAT .)


state 108

    (77) VAROP -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 139


state 109

    (19) GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER . OP
    (78) OP -> . VAROP
    (76) VAROP -> . VARSYM
    (77) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (85) VARSYM -> . PLUS
    (86) VARSYM -> . MINUS
    (87) VARSYM -> . TIMES
    (88) VARSYM -> . DIVIDE
    (89) VARSYM -> . POW
    (90) VARSYM -> . EQUALITY
    (91) VARSYM -> . INEQUALITY
    (92) VARSYM -> . LESS
    (93) VARSYM -> . LEQ
    (94) VARSYM -> . GREATER
    (95) VARSYM -> . GEQ
    (96) VARSYM -> . CONSTRUCTOR

    BACKTICK        shift and go to state 49
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    POW             shift and go to state 54
    EQUALITY        shift and go to state 55
    INEQUALITY      shift and go to state 56
    LESS            shift and go to state 57
    LEQ             shift and go to state 58
    GREATER         shift and go to state 59
    GEQ             shift and go to state 60
    CONSTRUCTOR     shift and go to state 61

    OP                             shift and go to state 140
    VAROP                          shift and go to state 127
    VARSYM                         shift and go to state 48

state 110

    (32) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 141
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 111

    (71) APAT -> OPEN_PAREN PAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALS          reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PLUS            reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MINUS           reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TIMES           reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    POW             reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INEQUALITY      reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LESS            reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LEQ             reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GREATER         reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GEQ             reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PIPE            reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    FLOAT           reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INTEGER         reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BOOL            reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CHAR            reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    STRING          reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    COMMA           reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    ARROW           reduce using rule 71 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)


state 112

    (72) APAT -> OPEN_PAREN PAT COMMA . PAT_LIST CLOSE_PAREN
    (83) PAT_LIST -> . PAT_LIST COMMA PAT
    (84) PAT_LIST -> . PAT
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 74
    PAT_LIST                       shift and go to state 142
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 113

    (63) PAT -> LPAT CONSTRUCTOR PAT .

    EQUALS          reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    BACKTICK        reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    PLUS            reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    MINUS           reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    TIMES           reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    DIVIDE          reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    POW             reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    EQUALITY        reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    INEQUALITY      reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    LESS            reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    LEQ             reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    GREATER         reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    GEQ             reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    CONSTRUCTOR     reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    PIPE            reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_PAREN     reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    COMMA           reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_SQUARE    reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)
    ARROW           reduce using rule 63 (PAT -> LPAT CONSTRUCTOR PAT .)


state 114

    (66) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 143


state 115

    (67) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 144


state 116

    (73) APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    POW             reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    ARROW           reduce using rule 73 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)


state 117

    (83) PAT_LIST -> PAT_LIST COMMA . PAT
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 145
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 118

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 119

    (25) TYPE -> ATYPE ARROW . TYPE
    (24) TYPE -> . ATYPE
    (25) TYPE -> . ATYPE ARROW TYPE
    (26) ATYPE -> . TYPENAME
    (27) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (28) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (29) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 80
    OPEN_PAREN      shift and go to state 81
    OPEN_SQUARE     shift and go to state 82

    ATYPE                          shift and go to state 79
    TYPE                           shift and go to state 146

state 120

    (27) ATYPE -> OPEN_PAREN TYPES_LIST . CLOSE_PAREN
    (97) TYPES_LIST -> TYPES_LIST . COMMA TYPE

    CLOSE_PAREN     shift and go to state 147
    COMMA           shift and go to state 148


state 121

    (28) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN
    (98) TYPES_LIST -> TYPE .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 149
    COMMA           reduce using rule 98 (TYPES_LIST -> TYPE .)

  ! CLOSE_PAREN     [ reduce using rule 98 (TYPES_LIST -> TYPE .) ]


state 122

    (29) ATYPE -> OPEN_SQUARE TYPE . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 150


state 123

    (81) APATS -> APAT APATS .

    EQUALS          reduce using rule 81 (APATS -> APAT APATS .)
    PIPE            reduce using rule 81 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 81 (APATS -> APAT APATS .)
    ARROW           reduce using rule 81 (APATS -> APAT APATS .)


state 124

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)


state 125

    (34) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 131

    DECLARATIONS                   shift and go to state 151

state 126

    (42) INFIX_EXP -> LEXP OP . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    LEXP                           shift and go to state 89
    INFIX_EXP                      shift and go to state 152
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 127

    (78) OP -> VAROP .

    MINUS           reduce using rule 78 (OP -> VAROP .)
    LAMBDA          reduce using rule 78 (OP -> VAROP .)
    LET             reduce using rule 78 (OP -> VAROP .)
    IF              reduce using rule 78 (OP -> VAROP .)
    MATCH           reduce using rule 78 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 78 (OP -> VAROP .)
    OPEN_SQUARE     reduce using rule 78 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 78 (OP -> VAROP .)
    FLOAT           reduce using rule 78 (OP -> VAROP .)
    INTEGER         reduce using rule 78 (OP -> VAROP .)
    BOOL            reduce using rule 78 (OP -> VAROP .)
    CHAR            reduce using rule 78 (OP -> VAROP .)
    STRING          reduce using rule 78 (OP -> VAROP .)
    CLOSE_BRACE     reduce using rule 78 (OP -> VAROP .)
    ENDSTATEMENT    reduce using rule 78 (OP -> VAROP .)


state 128

    (43) INFIX_EXP -> MINUS INFIX_EXP .

    WHERE           reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    THEN            reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    COMMA           reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    PIPE            reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    INEQUALITY      reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    CONSTRUCTOR     reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 43 (INFIX_EXP -> MINUS INFIX_EXP .)


state 129

    (45) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (81) APATS -> . APAT APATS
    (82) APATS -> .
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    ARROW           reduce using rule 82 (APATS -> .)
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 83
    APATS                          shift and go to state 153
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 130

    (46) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 154


state 131

    (11) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (13) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (20) GEN_DECLARATION -> .
    (30) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (31) FUNCTION_LHS -> . PAT VAROP PAT
    (32) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 156
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 18
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 21
    MINUS           shift and go to state 23
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

  ! CLOSE_BRACE     [ reduce using rule 20 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 155
    DECLARATION                    shift and go to state 157
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 132

    (47) LEXP -> IF EXP . THEN EXP ELSE EXP

    THEN            shift and go to state 158


state 133

    (48) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE

    OF              shift and go to state 159


state 134

    (50) FEXP -> FEXP AEXP .

    OPEN_PAREN      reduce using rule 50 (FEXP -> FEXP AEXP .)
    OPEN_SQUARE     reduce using rule 50 (FEXP -> FEXP AEXP .)
    IDENTIFIER      reduce using rule 50 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 50 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 50 (FEXP -> FEXP AEXP .)
    BOOL            reduce using rule 50 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 50 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 50 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 50 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 50 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 50 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 50 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 50 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 50 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 50 (FEXP -> FEXP AEXP .)
    INEQUALITY      reduce using rule 50 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 50 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 50 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 50 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 50 (FEXP -> FEXP AEXP .)
    CONSTRUCTOR     reduce using rule 50 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 50 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 50 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 50 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 50 (FEXP -> FEXP AEXP .)
    THEN            reduce using rule 50 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 50 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 50 (FEXP -> FEXP AEXP .)
    COMMA           reduce using rule 50 (FEXP -> FEXP AEXP .)
    CLOSE_SQUARE    reduce using rule 50 (FEXP -> FEXP AEXP .)
    PIPE            reduce using rule 50 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 50 (FEXP -> FEXP AEXP .)


state 135

    (55) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (56) AEXP -> OPEN_PAREN EXP . COMMA EXP_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 160
    COMMA           shift and go to state 161


state 136

    (57) AEXP -> OPEN_SQUARE EXP . CLOSE_SQUARE
    (58) AEXP -> OPEN_SQUARE EXP . COMMA EXP_LIST CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 162
    COMMA           shift and go to state 163


state 137

    (36) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 36 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 36 (RHS -> GDRHS WHERE DECLARATIONS .)


state 138

    (37) GDRHS -> GUARDS EQUALS EXP .
    (38) GDRHS -> GUARDS EQUALS EXP . GDRHS
    (37) GDRHS -> . GUARDS EQUALS EXP
    (38) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (39) GUARDS -> . PIPE GUARD

    WHERE           reduce using rule 37 (GDRHS -> GUARDS EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 37 (GDRHS -> GUARDS EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 37 (GDRHS -> GUARDS EQUALS EXP .)
    PIPE            shift and go to state 45

    GUARDS                         shift and go to state 44
    GDRHS                          shift and go to state 164

state 139

    (77) VAROP -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_SQUARE     reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    BOOL            reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IF              reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_BRACE     reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    ENDSTATEMENT    reduce using rule 77 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)


state 140

    (19) GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .

    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)


state 141

    (32) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (81) APATS -> . APAT APATS
    (82) APATS -> .
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    EQUALS          reduce using rule 82 (APATS -> .)
    PIPE            reduce using rule 82 (APATS -> .)
    CLOSE_PAREN     reduce using rule 82 (APATS -> .)
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 83
    APATS                          shift and go to state 165
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 142

    (72) APAT -> OPEN_PAREN PAT COMMA PAT_LIST . CLOSE_PAREN
    (83) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_PAREN     shift and go to state 166
    COMMA           shift and go to state 117


state 143

    (66) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    BACKTICK        reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PLUS            reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MINUS           reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    TIMES           reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    DIVIDE          reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    POW             reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALITY        reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    INEQUALITY      reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LESS            reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LEQ             reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GREATER         reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GEQ             reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PIPE            reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    COMMA           reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 66 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 144

    (67) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PLUS            reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MINUS           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    TIMES           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    POW             reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    INEQUALITY      reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LESS            reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LEQ             reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GREATER         reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GEQ             reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PIPE            reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    COMMA           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 145

    (83) PAT_LIST -> PAT_LIST COMMA PAT .

    CLOSE_SQUARE    reduce using rule 83 (PAT_LIST -> PAT_LIST COMMA PAT .)
    COMMA           reduce using rule 83 (PAT_LIST -> PAT_LIST COMMA PAT .)
    CLOSE_PAREN     reduce using rule 83 (PAT_LIST -> PAT_LIST COMMA PAT .)


state 146

    (25) TYPE -> ATYPE ARROW TYPE .

    CLOSE_BRACE     reduce using rule 25 (TYPE -> ATYPE ARROW TYPE .)
    ENDSTATEMENT    reduce using rule 25 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_PAREN     reduce using rule 25 (TYPE -> ATYPE ARROW TYPE .)
    COMMA           reduce using rule 25 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_SQUARE    reduce using rule 25 (TYPE -> ATYPE ARROW TYPE .)


state 147

    (27) ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .

    ARROW           reduce using rule 27 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 27 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 27 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 27 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 27 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 27 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)


state 148

    (97) TYPES_LIST -> TYPES_LIST COMMA . TYPE
    (24) TYPE -> . ATYPE
    (25) TYPE -> . ATYPE ARROW TYPE
    (26) ATYPE -> . TYPENAME
    (27) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (28) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (29) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 80
    OPEN_PAREN      shift and go to state 81
    OPEN_SQUARE     shift and go to state 82

    TYPE                           shift and go to state 167
    ATYPE                          shift and go to state 79

state 149

    (28) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    ARROW           reduce using rule 28 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 28 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 28 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 28 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    COMMA           reduce using rule 28 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 28 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 150

    (29) ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .

    ARROW           reduce using rule 29 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 29 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 29 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 29 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    COMMA           reduce using rule 29 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 29 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)


state 151

    (34) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 34 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 34 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 152

    (42) INFIX_EXP -> LEXP OP INFIX_EXP .

    WHERE           reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    THEN            reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    COMMA           reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PIPE            reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INEQUALITY      reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CONSTRUCTOR     reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 42 (INFIX_EXP -> LEXP OP INFIX_EXP .)


state 153

    (45) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 168


state 154

    (46) LEXP -> LET DECLARATIONS IN . EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 169
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 155

    (11) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 170


state 156

    (12) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 157

    (13) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 171
    CLOSE_BRACE     reduce using rule 14 (DECLARATIONS_LIST -> DECLARATION .)


state 158

    (47) LEXP -> IF EXP THEN . EXP ELSE EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 172
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 159

    (48) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 173


state 160

    (55) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BOOL            reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INEQUALITY      reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CONSTRUCTOR     reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    THEN            reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    COMMA           reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PIPE            reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 55 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 161

    (56) AEXP -> OPEN_PAREN EXP COMMA . EXP_LIST CLOSE_PAREN
    (79) EXP_LIST -> . EXP_LIST COMMA EXP
    (80) EXP_LIST -> . EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 174
    EXP_LIST                       shift and go to state 175
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 162

    (57) AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    FLOAT           reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INTEGER         reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BOOL            reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CHAR            reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    STRING          reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BACKTICK        reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PLUS            reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MINUS           reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TIMES           reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    DIVIDE          reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    POW             reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALITY        reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LESS            reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LEQ             reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GREATER         reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GEQ             reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CONSTRUCTOR     reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WHERE           reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALS          reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    THEN            reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OF              reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    COMMA           reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PIPE            reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ELSE            reduce using rule 57 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)


state 163

    (58) AEXP -> OPEN_SQUARE EXP COMMA . EXP_LIST CLOSE_SQUARE
    (79) EXP_LIST -> . EXP_LIST COMMA EXP
    (80) EXP_LIST -> . EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 174
    EXP_LIST                       shift and go to state 176
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 164

    (38) GDRHS -> GUARDS EQUALS EXP GDRHS .

    WHERE           reduce using rule 38 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 38 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 38 (GDRHS -> GUARDS EQUALS EXP GDRHS .)


state 165

    (32) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 32 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    PIPE            reduce using rule 32 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 32 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 166

    (72) APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    POW             reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INEQUALITY      reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LESS            reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    STRING          reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    ARROW           reduce using rule 72 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)


state 167

    (97) TYPES_LIST -> TYPES_LIST COMMA TYPE .

    CLOSE_PAREN     reduce using rule 97 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)
    COMMA           reduce using rule 97 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)


state 168

    (45) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 177
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 169

    (46) LEXP -> LET DECLARATIONS IN EXP .

    BACKTICK        reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    PLUS            reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    INEQUALITY      reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    CONSTRUCTOR     reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    THEN            reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    COMMA           reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_SQUARE    reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    PIPE            reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 46 (LEXP -> LET DECLARATIONS IN EXP .)


state 170

    (11) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 171

    (13) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (13) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (20) GEN_DECLARATION -> .
    (30) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (31) FUNCTION_LHS -> . PAT VAROP PAT
    (32) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 18
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 21
    MINUS           shift and go to state 23
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    DECLARATION                    shift and go to state 157
    DECLARATIONS_LIST              shift and go to state 178
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 172

    (47) LEXP -> IF EXP THEN EXP . ELSE EXP

    ELSE            shift and go to state 179


state 173

    (48) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (59) ALTS -> . ALT ENDSTATEMENT ALTS
    (60) ALTS -> . ALT
    (61) ALT -> . PAT ARROW EXP
    (62) ALT -> .
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 62 (ALT -> .)
    CLOSE_BRACE     reduce using rule 62 (ALT -> .)
    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    ALTS                           shift and go to state 180
    ALT                            shift and go to state 181
    PAT                            shift and go to state 182
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 174

    (80) EXP_LIST -> EXP .

    CLOSE_PAREN     reduce using rule 80 (EXP_LIST -> EXP .)
    COMMA           reduce using rule 80 (EXP_LIST -> EXP .)
    CLOSE_SQUARE    reduce using rule 80 (EXP_LIST -> EXP .)


state 175

    (56) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST . CLOSE_PAREN
    (79) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_PAREN     shift and go to state 184
    COMMA           shift and go to state 183


state 176

    (58) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST . CLOSE_SQUARE
    (79) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_SQUARE    shift and go to state 185
    COMMA           shift and go to state 183


state 177

    (45) LEXP -> LAMBDA APAT APATS ARROW EXP .

    BACKTICK        reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PLUS            reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    INEQUALITY      reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CONSTRUCTOR     reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    THEN            reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    COMMA           reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_SQUARE    reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PIPE            reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 45 (LEXP -> LAMBDA APAT APATS ARROW EXP .)


state 178

    (13) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 13 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 179

    (47) LEXP -> IF EXP THEN EXP ELSE . EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 186
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 180

    (48) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 187


state 181

    (59) ALTS -> ALT . ENDSTATEMENT ALTS
    (60) ALTS -> ALT .

    ENDSTATEMENT    shift and go to state 188
    CLOSE_BRACE     reduce using rule 60 (ALTS -> ALT .)


state 182

    (61) ALT -> PAT . ARROW EXP

    ARROW           shift and go to state 189


state 183

    (79) EXP_LIST -> EXP_LIST COMMA . EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 190
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 184

    (56) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    STRING          reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    POW             reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INEQUALITY      reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LESS            reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CONSTRUCTOR     reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WHERE           reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    THEN            reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OF              reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ELSE            reduce using rule 56 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)


state 185

    (58) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    POW             reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CONSTRUCTOR     reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WHERE           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    THEN            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OF              reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ELSE            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)


state 186

    (47) LEXP -> IF EXP THEN EXP ELSE EXP .

    BACKTICK        reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PLUS            reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MINUS           reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    TIMES           reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    DIVIDE          reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    POW             reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALITY        reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    INEQUALITY      reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LESS            reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LEQ             reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GREATER         reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GEQ             reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CONSTRUCTOR     reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WHERE           reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALS          reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    THEN            reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OF              reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    COMMA           reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_SQUARE    reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PIPE            reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ELSE            reduce using rule 47 (LEXP -> IF EXP THEN EXP ELSE EXP .)


state 187

    (48) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    BACKTICK        reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PLUS            reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INEQUALITY      reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CONSTRUCTOR     reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    THEN            reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    COMMA           reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_SQUARE    reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PIPE            reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 48 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 188

    (59) ALTS -> ALT ENDSTATEMENT . ALTS
    (59) ALTS -> . ALT ENDSTATEMENT ALTS
    (60) ALTS -> . ALT
    (61) ALT -> . PAT ARROW EXP
    (62) ALT -> .
    (63) PAT -> . LPAT CONSTRUCTOR PAT
    (64) PAT -> . LPAT
    (65) LPAT -> . APAT
    (66) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (67) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (68) APAT -> . PARAM
    (69) APAT -> . GCON
    (70) APAT -> . LITERAL
    (71) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (72) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (73) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (105) PARAM -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 62 (ALT -> .)
    CLOSE_BRACE     reduce using rule 62 (ALT -> .)
    MINUS           shift and go to state 23
    OPEN_PAREN      shift and go to state 39
    OPEN_SQUARE     shift and go to state 28
    IDENTIFIER      shift and go to state 36
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    ALT                            shift and go to state 181
    ALTS                           shift and go to state 191
    PAT                            shift and go to state 182
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    PARAM                          shift and go to state 25
    GCON                           shift and go to state 26
    LITERAL                        shift and go to state 27

state 189

    (61) ALT -> PAT ARROW . EXP
    (41) EXP -> . INFIX_EXP
    (42) INFIX_EXP -> . LEXP OP INFIX_EXP
    (43) INFIX_EXP -> . MINUS INFIX_EXP
    (44) INFIX_EXP -> . LEXP
    (45) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (46) LEXP -> . LET DECLARATIONS IN EXP
    (47) LEXP -> . IF EXP THEN EXP ELSE EXP
    (48) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) LEXP -> . FEXP
    (50) FEXP -> . FEXP AEXP
    (51) FEXP -> . AEXP
    (52) AEXP -> . USED_VAR
    (53) AEXP -> . GCON
    (54) AEXP -> . LITERAL
    (55) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (56) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (57) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (58) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (104) USED_VAR -> . IDENTIFIER
    (74) GCON -> . OPEN_PAREN CLOSE_PAREN
    (75) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    IDENTIFIER      shift and go to state 102
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 19
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 192
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    USED_VAR                       shift and go to state 97
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 190

    (79) EXP_LIST -> EXP_LIST COMMA EXP .

    CLOSE_PAREN     reduce using rule 79 (EXP_LIST -> EXP_LIST COMMA EXP .)
    COMMA           reduce using rule 79 (EXP_LIST -> EXP_LIST COMMA EXP .)
    CLOSE_SQUARE    reduce using rule 79 (EXP_LIST -> EXP_LIST COMMA EXP .)


state 191

    (59) ALTS -> ALT ENDSTATEMENT ALTS .

    CLOSE_BRACE     reduce using rule 59 (ALTS -> ALT ENDSTATEMENT ALTS .)


state 192

    (61) ALT -> PAT ARROW EXP .

    ENDSTATEMENT    reduce using rule 61 (ALT -> PAT ARROW EXP .)
    CLOSE_BRACE     reduce using rule 61 (ALT -> PAT ARROW EXP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CONSTRUCTOR in state 22 resolved as shift
WARNING: shift/reduce conflict for BACKTICK in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for POW in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 89 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS in state 89 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 89 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 89 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 89 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 131 resolved as shift
