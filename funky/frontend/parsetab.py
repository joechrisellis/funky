
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET MATCH MINUS MODULE NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,33,117,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,66,68,69,72,82,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,125,126,128,130,133,138,140,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[3,12,35,36,-99,68,-98,-68,-69,-70,36,-100,-101,-102,12,12,-104,36,36,101,101,36,-76,107,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,36,36,-75,36,101,36,101,101,101,-51,-52,-53,-54,101,101,-103,101,36,-71,36,-73,36,101,-78,36,12,-50,-77,36,101,101,-55,101,-57,101,-72,101,12,36,101,101,-56,-58,36,101,]),'WHERE':([3,19,24,29,30,31,43,66,72,86,87,88,94,95,96,97,98,101,127,133,137,151,159,161,163,168,176,183,184,185,186,],[4,-99,-98,-100,-101,-102,102,-74,-75,124,-41,-44,-49,-51,-52,-53,-54,-103,-43,-50,-37,-42,-55,-57,-38,-46,-45,-56,-58,-47,-48,]),'OPEN_BRACE':([4,91,102,124,158,],[6,130,130,130,172,]),'IMPORT':([6,32,],[11,11,]),'NEWTYPE':([6,32,34,],[13,13,13,]),'SETFIX':([6,32,34,130,170,],[18,18,18,18,18,]),'CLOSE_BRACE':([6,8,10,14,15,19,24,29,30,31,32,34,41,43,46,48,50,51,52,53,54,55,56,57,58,59,60,66,72,74,76,77,78,79,86,87,88,94,95,96,97,98,101,123,126,127,130,133,136,137,138,139,145,146,148,149,150,151,154,155,156,159,161,163,168,169,170,172,176,177,179,180,183,184,185,186,187,190,191,],[-20,33,-8,-10,-15,-99,-98,-100,-101,-102,-20,-20,-16,-35,-17,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,-75,117,-7,-18,-24,-26,-33,-41,-44,-49,-51,-52,-53,-54,-103,-9,-78,-43,155,-50,-36,-37,-77,-19,-25,-27,-28,-29,-34,-42,169,-12,-14,-55,-57,-38,-46,-11,-20,-62,-45,-13,186,-60,-56,-58,-47,-48,-62,-59,-61,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,19,24,29,30,31,32,34,35,41,43,46,48,50,51,52,53,54,55,56,57,58,59,60,66,72,74,75,76,77,78,79,86,87,88,94,95,96,97,98,101,123,126,127,130,133,136,137,138,139,145,146,148,149,150,151,155,156,159,161,163,168,169,170,172,176,180,183,184,185,186,187,191,],[-20,32,34,-5,-8,-10,-15,-99,-98,-100,-101,-102,-20,-20,-6,-16,-35,-17,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,-75,34,-4,-7,-18,-24,-26,-33,-41,-44,-49,-51,-52,-53,-54,-103,-9,-78,-43,-20,-50,-36,-37,-77,-19,-25,-27,-28,-29,-34,-42,-12,170,-55,-57,-38,-46,-11,-20,-62,-45,187,-56,-58,-47,-48,-62,-61,]),'OPEN_PAREN':([6,12,19,21,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,66,68,69,72,80,81,82,85,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,118,125,126,128,130,133,138,140,147,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[21,39,-99,21,70,-98,-68,-69,-70,39,-100,-101,-102,21,21,-104,80,39,39,99,99,39,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,39,39,-75,80,80,39,80,99,39,99,99,99,-51,-52,-53,-54,99,99,-103,99,39,-71,39,-73,39,80,99,-78,39,21,-50,-77,39,80,99,99,-55,99,-57,99,-72,99,21,39,99,99,-56,-58,39,99,]),'MINUS':([6,12,17,19,20,21,22,24,25,26,27,28,29,30,31,32,34,36,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,66,67,68,69,72,87,88,89,92,93,94,95,96,97,98,99,100,101,103,108,110,111,112,115,116,125,126,127,130,133,138,142,143,151,153,157,159,160,161,162,165,167,168,170,172,176,178,182,183,184,185,186,187,188,],[23,-104,51,-99,-65,23,-64,-98,-68,-69,-70,23,-100,-101,-102,23,23,-104,23,89,89,23,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,51,-104,23,-75,-41,51,89,89,89,-49,-51,-52,-53,-54,89,89,-103,89,51,-71,23,-63,-73,23,89,-78,-43,23,-50,-77,-66,-67,-42,89,89,-55,89,-57,89,-72,89,-46,23,23,-45,89,89,-56,-58,-47,-48,23,89,]),'OPEN_SQUARE':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,37,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,66,68,69,72,80,81,82,85,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,118,125,126,128,130,133,138,140,147,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[28,28,-99,28,-98,-68,-69,-70,28,-100,-101,-102,28,28,-104,81,28,28,100,100,28,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,28,28,-75,81,81,28,81,100,28,100,100,100,-51,-52,-53,-54,100,100,-103,100,28,-71,28,-73,28,81,100,-78,28,28,-50,-77,28,81,100,100,-55,100,-57,100,-72,100,28,28,100,100,-56,-58,28,100,]),'FLOAT':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,66,68,69,70,72,82,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,125,126,128,130,133,138,140,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[24,24,-99,24,-98,-68,-69,-70,24,-100,-101,-102,24,24,-104,24,24,24,24,24,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,24,24,114,-75,24,24,24,24,24,24,-51,-52,-53,-54,24,24,-103,24,24,-71,24,-73,24,24,-78,24,24,-50,-77,24,24,24,-55,24,-57,24,-72,24,24,24,24,24,-56,-58,24,24,]),'INTEGER':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,68,69,70,72,82,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,125,126,128,130,133,138,140,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[19,19,-99,19,-98,-68,-69,-70,19,-100,-101,-102,19,19,-104,19,19,19,19,19,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,108,-21,-22,-23,-74,19,19,113,-75,19,19,19,19,19,19,-51,-52,-53,-54,19,19,-103,19,19,-71,19,-73,19,19,-78,19,19,-50,-77,19,19,19,-55,19,-57,19,-72,19,19,19,19,19,-56,-58,19,19,]),'BOOL':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,66,68,69,72,82,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,125,126,128,130,133,138,140,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[29,29,-99,29,-98,-68,-69,-70,29,-100,-101,-102,29,29,-104,29,29,29,29,29,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,29,29,-75,29,29,29,29,29,29,-51,-52,-53,-54,29,29,-103,29,29,-71,29,-73,29,29,-78,29,29,-50,-77,29,29,29,-55,29,-57,29,-72,29,29,29,29,29,-56,-58,29,29,]),'CHAR':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,66,68,69,72,82,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,125,126,128,130,133,138,140,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[30,30,-99,30,-98,-68,-69,-70,30,-100,-101,-102,30,30,-104,30,30,30,30,30,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,30,30,-75,30,30,30,30,30,30,-51,-52,-53,-54,30,30,-103,30,30,-71,30,-73,30,30,-78,30,30,-50,-77,30,30,30,-55,30,-57,30,-72,30,30,30,30,30,-56,-58,30,30,]),'STRING':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,66,68,69,72,82,89,90,92,93,94,95,96,97,98,99,100,101,103,109,110,111,115,116,125,126,128,130,133,138,140,153,157,159,160,161,162,165,167,170,172,178,182,183,184,187,188,],[31,31,-99,31,-98,-68,-69,-70,31,-100,-101,-102,31,31,-104,31,31,31,31,31,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-74,31,31,-75,31,31,31,31,31,31,-51,-52,-53,-54,31,31,-103,31,31,-71,31,-73,31,31,-78,31,31,-50,-77,31,31,31,-55,31,-57,31,-72,31,31,31,31,31,-56,-58,31,31,]),'TYPESIG':([12,],[37,]),'CONSTRUCTOR':([12,19,20,22,24,25,26,27,29,30,31,36,66,68,72,110,115,142,143,165,],[-104,-99,-65,69,-98,-68,-69,-70,-100,-101,-102,-104,-74,-104,-75,-71,-73,-66,-67,-72,]),'EQUALS':([12,16,17,19,20,22,24,25,26,27,29,30,31,36,38,40,44,66,72,82,83,87,88,94,95,96,97,98,101,104,105,106,110,112,115,122,127,133,140,142,143,151,159,161,164,165,168,176,183,184,185,186,],[-104,42,42,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-82,85,103,-74,-75,-82,-30,-41,-44,-49,-51,-52,-53,-54,-103,-39,-40,-31,-71,-63,-73,-81,-43,-50,-82,-66,-67,-42,-55,-57,-32,-72,-46,-45,-56,-58,-47,-48,]),'BACKTICK':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,107,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,49,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,49,-104,-75,-41,49,-49,-51,-52,-53,-54,-103,138,49,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'PLUS':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,50,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,50,-104,-75,-41,50,-49,-51,-52,-53,-54,-103,50,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'TIMES':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,52,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,52,-104,-75,-41,52,-49,-51,-52,-53,-54,-103,52,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'DIVIDE':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,53,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,53,-104,-75,-41,53,-49,-51,-52,-53,-54,-103,53,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'POW':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,54,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,54,-104,-75,-41,54,-49,-51,-52,-53,-54,-103,54,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'EQUALITY':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,55,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,55,-104,-75,-41,55,-49,-51,-52,-53,-54,-103,55,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'INEQUALITY':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,56,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,56,-104,-75,-41,56,-49,-51,-52,-53,-54,-103,56,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'LESS':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,57,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,57,-104,-75,-41,57,-49,-51,-52,-53,-54,-103,57,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'LEQ':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,58,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,58,-104,-75,-41,58,-49,-51,-52,-53,-54,-103,58,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'GREATER':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,59,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,59,-104,-75,-41,59,-49,-51,-52,-53,-54,-103,59,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'GEQ':([12,17,19,20,22,24,25,26,27,29,30,31,36,66,67,68,72,87,88,94,95,96,97,98,101,108,110,112,115,127,133,142,143,151,159,161,165,168,176,183,184,185,186,],[-104,60,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,60,-104,-75,-41,60,-49,-51,-52,-53,-54,-103,60,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'PIPE':([12,16,17,19,20,22,24,25,26,27,29,30,31,36,38,66,72,82,83,87,88,94,95,96,97,98,101,106,110,112,115,122,127,133,137,140,142,143,151,159,161,164,165,168,176,183,184,185,186,],[-104,45,45,-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-82,-74,-75,-82,-30,-41,-44,-49,-51,-52,-53,-54,-103,-31,-71,-63,-73,-81,-43,-50,45,-82,-66,-67,-42,-55,-57,-32,-72,-46,-45,-56,-58,-47,-48,]),'TYPENAME':([13,37,80,81,85,118,147,],[40,79,79,79,79,79,79,]),'LEFTASSOC':([18,],[62,]),'RIGHTASSOC':([18,],[63,]),'NONASSOC':([18,],[64,]),'CLOSE_PAREN':([19,20,21,22,24,25,26,27,29,30,31,36,38,39,65,66,67,68,72,73,78,79,82,83,84,87,88,94,95,96,97,98,99,101,106,110,112,113,114,115,119,120,122,127,133,134,140,141,142,143,144,145,146,148,149,151,159,161,164,165,166,168,173,174,176,183,184,185,186,189,],[-99,-65,66,-64,-98,-68,-69,-70,-100,-101,-102,-104,-82,66,109,-74,110,-104,-75,-84,-24,-26,-82,-30,110,-41,-44,-49,-51,-52,-53,-54,66,-103,-31,-71,-63,142,143,-73,146,148,-81,-43,-50,159,-82,165,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-32,-72,-96,-46,-80,183,-45,-56,-58,-47,-48,-79,]),'COMMA':([19,20,22,24,25,26,27,29,30,31,36,66,67,68,71,72,73,78,79,84,87,88,94,95,96,97,98,101,110,112,115,119,120,127,133,134,135,141,142,143,144,145,146,148,149,151,159,161,165,166,168,173,174,175,176,183,184,185,186,189,],[-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,111,-104,116,-75,-84,-24,-26,111,-41,-44,-49,-51,-52,-53,-54,-103,-71,-63,-73,147,-97,-43,-50,160,162,116,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-72,-96,-46,-80,182,182,-45,-56,-58,-47,-48,-79,]),'CLOSE_SQUARE':([19,20,22,24,25,26,27,28,29,30,31,36,66,71,72,73,78,79,87,88,94,95,96,97,98,100,101,110,112,115,121,127,133,135,142,143,144,145,146,148,149,151,159,161,165,168,173,175,176,183,184,185,186,189,],[-99,-65,-64,-98,-68,-69,-70,72,-100,-101,-102,-104,-74,115,-75,-84,-24,-26,-41,-44,-49,-51,-52,-53,-54,72,-103,-71,-63,-73,149,-43,-50,161,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-72,-46,-80,184,-45,-56,-58,-47,-48,-79,]),'ARROW':([19,20,22,24,25,26,27,29,30,31,36,66,72,78,79,82,110,112,115,122,128,142,143,146,148,149,152,165,181,],[-99,-65,-64,-98,-68,-69,-70,-100,-101,-102,-104,-74,-75,118,-26,-82,-71,-63,-73,-81,-82,-66,-67,-27,-28,-29,167,-72,188,]),'THEN':([19,24,29,30,31,66,72,87,88,94,95,96,97,98,101,127,131,133,151,159,161,168,176,183,184,185,186,],[-99,-98,-100,-101,-102,-74,-75,-41,-44,-49,-51,-52,-53,-54,-103,-43,157,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'OF':([19,24,29,30,31,66,72,87,88,94,95,96,97,98,101,127,132,133,151,159,161,168,176,183,184,185,186,],[-99,-98,-100,-101,-102,-74,-75,-41,-44,-49,-51,-52,-53,-54,-103,-43,158,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'ELSE':([19,24,29,30,31,66,72,87,88,94,95,96,97,98,101,127,133,151,159,161,168,171,176,183,184,185,186,],[-99,-98,-100,-101,-102,-74,-75,-41,-44,-49,-51,-52,-53,-54,-103,-43,-50,-42,-55,-57,-46,178,-45,-56,-58,-47,-48,]),'LAMBDA':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,89,92,93,99,100,103,125,126,138,153,157,160,162,167,178,182,188,],[90,90,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,90,90,90,90,90,90,90,-78,-77,90,90,90,90,90,90,90,90,]),'LET':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,89,92,93,99,100,103,125,126,138,153,157,160,162,167,178,182,188,],[91,91,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,91,91,91,91,91,91,91,-78,-77,91,91,91,91,91,91,91,91,]),'IF':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,89,92,93,99,100,103,125,126,138,153,157,160,162,167,178,182,188,],[92,92,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,92,92,92,92,92,92,92,-78,-77,92,92,92,92,92,92,92,92,]),'MATCH':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,89,92,93,99,100,103,125,126,138,153,157,160,162,167,178,182,188,],[93,93,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,93,93,93,93,93,93,93,-78,-77,93,93,93,93,93,93,93,93,]),'IN':([129,155,169,],[153,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,32,],[8,74,]),'IMPORT_DECLARATION':([6,32,],[9,75,]),'TOP_DECLARATION':([6,32,34,],[10,10,76,]),'DECLARATION':([6,32,34,130,170,],[14,14,14,156,156,]),'GEN_DECLARATION':([6,32,34,130,170,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,21,32,34,130,170,],[16,65,16,16,16,16,]),'PAT':([6,21,28,32,34,39,47,69,111,116,130,170,172,187,],[17,67,73,17,17,84,106,112,73,144,17,17,181,181,]),'APAT':([6,12,21,28,32,34,38,39,47,68,69,82,90,109,111,116,128,130,140,170,172,187,],[20,38,20,20,20,20,82,20,20,38,20,82,128,140,20,20,82,20,82,20,20,20,]),'LPAT':([6,21,28,32,34,39,47,69,111,116,130,170,172,187,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'PARAM':([6,12,21,28,32,34,38,39,47,68,69,82,90,109,111,116,128,130,140,170,172,187,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'GCON':([6,12,21,28,32,34,38,39,42,45,47,68,69,82,89,90,92,93,94,99,100,103,109,111,116,125,128,130,140,153,157,160,162,167,170,172,178,182,187,188,],[26,26,26,26,26,26,26,26,97,97,26,26,26,26,97,26,97,97,97,97,97,97,26,26,26,97,26,26,26,97,97,97,97,97,26,26,97,97,26,97,]),'LITERAL':([6,12,21,28,32,34,38,39,42,45,47,68,69,82,89,90,92,93,94,99,100,103,109,111,116,125,128,130,140,153,157,160,162,167,170,172,178,182,187,188,],[27,27,27,27,27,27,27,27,98,98,27,27,27,27,98,27,98,98,98,98,98,98,27,27,27,98,27,27,27,98,98,98,98,98,27,27,98,98,27,98,]),'RHS':([16,17,],[41,46,]),'GDRHS':([16,17,137,],[43,43,163,]),'GUARDS':([16,17,137,],[44,44,44,]),'VAROP':([17,67,88,108,],[47,47,126,126,]),'VARSYM':([17,67,88,108,],[48,48,48,48,]),'ASSOCIATIVITY':([18,],[61,]),'PAT_LIST':([28,111,],[71,141,]),'TYPE':([37,80,81,85,118,147,],[77,120,121,123,145,166,]),'ATYPE':([37,80,81,85,118,147,],[78,78,78,78,78,78,]),'APATS':([38,82,128,140,],[83,122,152,164,]),'EXP':([42,92,93,99,100,103,153,157,160,162,167,178,182,188,],[86,131,132,134,135,137,168,171,173,173,176,185,189,191,]),'INFIX_EXP':([42,45,89,92,93,99,100,103,125,153,157,160,162,167,178,182,188,],[87,105,127,87,87,87,87,87,151,87,87,87,87,87,87,87,87,]),'LEXP':([42,45,89,92,93,99,100,103,125,153,157,160,162,167,178,182,188,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'FEXP':([42,45,89,92,93,99,100,103,125,153,157,160,162,167,178,182,188,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'AEXP':([42,45,89,92,93,94,99,100,103,125,153,157,160,162,167,178,182,188,],[95,95,95,95,95,133,95,95,95,95,95,95,95,95,95,95,95,95,]),'USED_VAR':([42,45,89,92,93,94,99,100,103,125,153,157,160,162,167,178,182,188,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'GUARD':([45,],[104,]),'TYPES_LIST':([80,],[119,]),'OP':([88,108,],[125,139,]),'DECLARATIONS':([91,102,124,],[129,136,150,]),'DECLARATIONS_LIST':([130,170,],[154,177,]),'EXP_LIST':([160,162,],[174,175,]),'ALTS':([172,187,],[179,190,]),'ALT':([172,187,],[180,180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',19),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',25),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',26),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',38),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',39),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',47),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',52),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',53),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',61),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',62),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',70),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',71),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',79),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',80),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',88),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',89),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',90),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',100),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',101),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',102),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',110),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',111),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',112),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',117),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',118),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',126),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',127),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',128),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',129),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',142),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',143),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',144),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',156),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',157),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',158),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',159),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',172),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',173),
  ('GUARDS -> PIPE GUARD','GUARDS',2,'p_GUARDS','funky_parser.py',181),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',186),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',192),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',198),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',199),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',200),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',218),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',219),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',220),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',221),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',222),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',237),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',238),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',246),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',247),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',248),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',249),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',250),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',251),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',252),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',273),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',274),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',282),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',283),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',288),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',289),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',297),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',298),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',299),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',307),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',308),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',309),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',310),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',311),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',312),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',327),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',328),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',336),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',337),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',347),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',352),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',353),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',361),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',362),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',370),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',371),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',380),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',381),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',382),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',383),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',384),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',385),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',386),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',387),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',388),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',389),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',390),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',395),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',396),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',404),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',405),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',406),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',407),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',408),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',413),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',417),
]
