
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET MATCH MINUS MODULE NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,33,116,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,49,50,51,52,53,54,55,56,57,58,59,65,67,68,71,81,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,124,125,127,129,132,137,139,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[3,12,35,36,-98,67,-97,-68,-69,-70,36,-99,-100,-101,12,12,-103,36,36,100,100,36,-76,106,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,36,36,-75,36,100,36,100,100,100,-51,-52,-53,-54,100,100,-102,100,36,-71,36,-73,36,100,-78,36,12,-50,-77,36,100,100,-55,100,-57,100,-72,100,12,36,100,100,-56,-58,36,100,]),'WHERE':([3,19,24,29,30,31,43,65,71,85,86,87,93,94,95,96,97,100,126,132,136,150,158,160,162,167,175,182,183,184,185,],[4,-98,-97,-99,-100,-101,101,-74,-75,123,-41,-44,-49,-51,-52,-53,-54,-102,-43,-50,-37,-42,-55,-57,-38,-46,-45,-56,-58,-47,-48,]),'OPEN_BRACE':([4,90,101,123,157,],[6,129,129,129,171,]),'IMPORT':([6,32,],[11,11,]),'NEWTYPE':([6,32,34,],[13,13,13,]),'SETFIX':([6,32,34,129,169,],[18,18,18,18,18,]),'CLOSE_BRACE':([6,8,10,14,15,19,24,29,30,31,32,34,41,43,46,48,50,51,52,53,54,55,56,57,58,59,65,71,73,75,76,77,78,85,86,87,93,94,95,96,97,100,122,125,126,129,132,135,136,137,138,144,145,147,148,149,150,153,154,155,158,160,162,167,168,169,171,175,176,178,179,182,183,184,185,186,189,190,],[-20,33,-8,-10,-15,-98,-97,-99,-100,-101,-20,-20,-16,-35,-17,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,-75,116,-7,-18,-24,-26,-33,-41,-44,-49,-51,-52,-53,-54,-102,-9,-78,-43,154,-50,-36,-37,-77,-19,-25,-27,-28,-29,-34,-42,168,-12,-14,-55,-57,-38,-46,-11,-20,-62,-45,-13,185,-60,-56,-58,-47,-48,-62,-59,-61,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,19,24,29,30,31,32,34,35,41,43,46,48,50,51,52,53,54,55,56,57,58,59,65,71,73,74,75,76,77,78,85,86,87,93,94,95,96,97,100,122,125,126,129,132,135,136,137,138,144,145,147,148,149,150,154,155,158,160,162,167,168,169,171,175,179,182,183,184,185,186,190,],[-20,32,34,-5,-8,-10,-15,-98,-97,-99,-100,-101,-20,-20,-6,-16,-35,-17,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,-75,34,-4,-7,-18,-24,-26,-33,-41,-44,-49,-51,-52,-53,-54,-102,-9,-78,-43,-20,-50,-36,-37,-77,-19,-25,-27,-28,-29,-34,-42,-12,169,-55,-57,-38,-46,-11,-20,-62,-45,186,-56,-58,-47,-48,-62,-61,]),'OPEN_PAREN':([6,12,19,21,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,71,79,80,81,84,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,117,124,125,127,129,132,137,139,146,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[21,39,-98,21,69,-97,-68,-69,-70,39,-99,-100,-101,21,21,-103,79,39,39,98,98,39,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,39,39,-75,79,79,39,79,98,39,98,98,98,-51,-52,-53,-54,98,98,-102,98,39,-71,39,-73,39,79,98,-78,39,21,-50,-77,39,79,98,98,-55,98,-57,98,-72,98,21,39,98,98,-56,-58,39,98,]),'MINUS':([6,12,17,19,20,21,22,24,25,26,27,28,29,30,31,32,34,36,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,65,66,67,68,71,86,87,88,91,92,93,94,95,96,97,98,99,100,102,107,109,110,111,114,115,124,125,126,129,132,137,141,142,150,152,156,158,159,160,161,164,166,167,169,171,175,177,181,182,183,184,185,186,187,],[23,-103,51,-98,-65,23,-64,-97,-68,-69,-70,23,-99,-100,-101,23,23,-103,23,88,88,23,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,51,-103,23,-75,-41,51,88,88,88,-49,-51,-52,-53,-54,88,88,-102,88,51,-71,23,-63,-73,23,88,-78,-43,23,-50,-77,-66,-67,-42,88,88,-55,88,-57,88,-72,88,-46,23,23,-45,88,88,-56,-58,-47,-48,23,88,]),'OPEN_SQUARE':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,37,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,71,79,80,81,84,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,117,124,125,127,129,132,137,139,146,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[28,28,-98,28,-97,-68,-69,-70,28,-99,-100,-101,28,28,-103,80,28,28,99,99,28,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,28,28,-75,80,80,28,80,99,28,99,99,99,-51,-52,-53,-54,99,99,-102,99,28,-71,28,-73,28,80,99,-78,28,28,-50,-77,28,80,99,99,-55,99,-57,99,-72,99,28,28,99,99,-56,-58,28,99,]),'FLOAT':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,69,71,81,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,124,125,127,129,132,137,139,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[24,24,-98,24,-97,-68,-69,-70,24,-99,-100,-101,24,24,-103,24,24,24,24,24,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,24,24,113,-75,24,24,24,24,24,24,-51,-52,-53,-54,24,24,-102,24,24,-71,24,-73,24,24,-78,24,24,-50,-77,24,24,24,-55,24,-57,24,-72,24,24,24,24,24,-56,-58,24,24,]),'INTEGER':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,71,81,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,124,125,127,129,132,137,139,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[19,19,-98,19,-97,-68,-69,-70,19,-99,-100,-101,19,19,-103,19,19,19,19,19,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,107,-21,-22,-23,-74,19,19,112,-75,19,19,19,19,19,19,-51,-52,-53,-54,19,19,-102,19,19,-71,19,-73,19,19,-78,19,19,-50,-77,19,19,19,-55,19,-57,19,-72,19,19,19,19,19,-56,-58,19,19,]),'BOOL':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,71,81,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,124,125,127,129,132,137,139,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[29,29,-98,29,-97,-68,-69,-70,29,-99,-100,-101,29,29,-103,29,29,29,29,29,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,29,29,-75,29,29,29,29,29,29,-51,-52,-53,-54,29,29,-102,29,29,-71,29,-73,29,29,-78,29,29,-50,-77,29,29,29,-55,29,-57,29,-72,29,29,29,29,29,-56,-58,29,29,]),'CHAR':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,71,81,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,124,125,127,129,132,137,139,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[30,30,-98,30,-97,-68,-69,-70,30,-99,-100,-101,30,30,-103,30,30,30,30,30,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,30,30,-75,30,30,30,30,30,30,-51,-52,-53,-54,30,30,-102,30,30,-71,30,-73,30,30,-78,30,30,-50,-77,30,30,30,-55,30,-57,30,-72,30,30,30,30,30,-56,-58,30,30,]),'STRING':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,71,81,88,89,91,92,93,94,95,96,97,98,99,100,102,108,109,110,114,115,124,125,127,129,132,137,139,152,156,158,159,160,161,164,166,169,171,177,181,182,183,186,187,],[31,31,-98,31,-97,-68,-69,-70,31,-99,-100,-101,31,31,-103,31,31,31,31,31,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-74,31,31,-75,31,31,31,31,31,31,-51,-52,-53,-54,31,31,-102,31,31,-71,31,-73,31,31,-78,31,31,-50,-77,31,31,31,-55,31,-57,31,-72,31,31,31,31,31,-56,-58,31,31,]),'TYPESIG':([12,],[37,]),'CONSTRUCTOR':([12,19,20,22,24,25,26,27,29,30,31,36,65,67,71,109,114,141,142,164,],[-103,-98,-65,68,-97,-68,-69,-70,-99,-100,-101,-103,-74,-103,-75,-71,-73,-66,-67,-72,]),'EQUALS':([12,16,17,19,20,22,24,25,26,27,29,30,31,36,38,40,44,65,71,81,82,86,87,93,94,95,96,97,100,103,104,105,109,111,114,121,126,132,139,141,142,150,158,160,163,164,167,175,182,183,184,185,],[-103,42,42,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-82,84,102,-74,-75,-82,-30,-41,-44,-49,-51,-52,-53,-54,-102,-39,-40,-31,-71,-63,-73,-81,-43,-50,-82,-66,-67,-42,-55,-57,-32,-72,-46,-45,-56,-58,-47,-48,]),'BACKTICK':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,106,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,49,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,49,-103,-75,-41,49,-49,-51,-52,-53,-54,-102,137,49,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'PLUS':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,50,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,50,-103,-75,-41,50,-49,-51,-52,-53,-54,-102,50,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'TIMES':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,52,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,52,-103,-75,-41,52,-49,-51,-52,-53,-54,-102,52,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'DIVIDE':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,53,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,53,-103,-75,-41,53,-49,-51,-52,-53,-54,-102,53,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'POW':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,54,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,54,-103,-75,-41,54,-49,-51,-52,-53,-54,-102,54,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'EQUALITY':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,55,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,55,-103,-75,-41,55,-49,-51,-52,-53,-54,-102,55,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'LESS':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,56,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,56,-103,-75,-41,56,-49,-51,-52,-53,-54,-102,56,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'LEQ':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,57,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,57,-103,-75,-41,57,-49,-51,-52,-53,-54,-102,57,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'GREATER':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,58,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,58,-103,-75,-41,58,-49,-51,-52,-53,-54,-102,58,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'GEQ':([12,17,19,20,22,24,25,26,27,29,30,31,36,65,66,67,71,86,87,93,94,95,96,97,100,107,109,111,114,126,132,141,142,150,158,160,164,167,175,182,183,184,185,],[-103,59,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,59,-103,-75,-41,59,-49,-51,-52,-53,-54,-102,59,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'PIPE':([12,16,17,19,20,22,24,25,26,27,29,30,31,36,38,65,71,81,82,86,87,93,94,95,96,97,100,105,109,111,114,121,126,132,136,139,141,142,150,158,160,163,164,167,175,182,183,184,185,],[-103,45,45,-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-82,-74,-75,-82,-30,-41,-44,-49,-51,-52,-53,-54,-102,-31,-71,-63,-73,-81,-43,-50,45,-82,-66,-67,-42,-55,-57,-32,-72,-46,-45,-56,-58,-47,-48,]),'TYPENAME':([13,37,79,80,84,117,146,],[40,78,78,78,78,78,78,]),'LEFTASSOC':([18,],[61,]),'RIGHTASSOC':([18,],[62,]),'NONASSOC':([18,],[63,]),'CLOSE_PAREN':([19,20,21,22,24,25,26,27,29,30,31,36,38,39,64,65,66,67,71,72,77,78,81,82,83,86,87,93,94,95,96,97,98,100,105,109,111,112,113,114,118,119,121,126,132,133,139,140,141,142,143,144,145,147,148,150,158,160,163,164,165,167,172,173,175,182,183,184,185,188,],[-98,-65,65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-82,65,108,-74,109,-103,-75,-84,-24,-26,-82,-30,109,-41,-44,-49,-51,-52,-53,-54,65,-102,-31,-71,-63,141,142,-73,145,147,-81,-43,-50,158,-82,164,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-32,-72,-95,-46,-80,182,-45,-56,-58,-47,-48,-79,]),'COMMA':([19,20,22,24,25,26,27,29,30,31,36,65,66,67,70,71,72,77,78,83,86,87,93,94,95,96,97,100,109,111,114,118,119,126,132,133,134,140,141,142,143,144,145,147,148,150,158,160,164,165,167,172,173,174,175,182,183,184,185,188,],[-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,110,-103,115,-75,-84,-24,-26,110,-41,-44,-49,-51,-52,-53,-54,-102,-71,-63,-73,146,-96,-43,-50,159,161,115,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-72,-95,-46,-80,181,181,-45,-56,-58,-47,-48,-79,]),'CLOSE_SQUARE':([19,20,22,24,25,26,27,28,29,30,31,36,65,70,71,72,77,78,86,87,93,94,95,96,97,99,100,109,111,114,120,126,132,134,141,142,143,144,145,147,148,150,158,160,164,167,172,174,175,182,183,184,185,188,],[-98,-65,-64,-97,-68,-69,-70,71,-99,-100,-101,-103,-74,114,-75,-84,-24,-26,-41,-44,-49,-51,-52,-53,-54,71,-102,-71,-63,-73,148,-43,-50,160,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-72,-46,-80,183,-45,-56,-58,-47,-48,-79,]),'ARROW':([19,20,22,24,25,26,27,29,30,31,36,65,71,77,78,81,109,111,114,121,127,141,142,145,147,148,151,164,180,],[-98,-65,-64,-97,-68,-69,-70,-99,-100,-101,-103,-74,-75,117,-26,-82,-71,-63,-73,-81,-82,-66,-67,-27,-28,-29,166,-72,187,]),'THEN':([19,24,29,30,31,65,71,86,87,93,94,95,96,97,100,126,130,132,150,158,160,167,175,182,183,184,185,],[-98,-97,-99,-100,-101,-74,-75,-41,-44,-49,-51,-52,-53,-54,-102,-43,156,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'OF':([19,24,29,30,31,65,71,86,87,93,94,95,96,97,100,126,131,132,150,158,160,167,175,182,183,184,185,],[-98,-97,-99,-100,-101,-74,-75,-41,-44,-49,-51,-52,-53,-54,-102,-43,157,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'ELSE':([19,24,29,30,31,65,71,86,87,93,94,95,96,97,100,126,132,150,158,160,167,170,175,182,183,184,185,],[-98,-97,-99,-100,-101,-74,-75,-41,-44,-49,-51,-52,-53,-54,-102,-43,-50,-42,-55,-57,-46,177,-45,-56,-58,-47,-48,]),'LAMBDA':([42,45,48,50,51,52,53,54,55,56,57,58,59,88,91,92,98,99,102,124,125,137,152,156,159,161,166,177,181,187,],[89,89,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,89,89,89,89,89,89,89,-78,-77,89,89,89,89,89,89,89,89,]),'LET':([42,45,48,50,51,52,53,54,55,56,57,58,59,88,91,92,98,99,102,124,125,137,152,156,159,161,166,177,181,187,],[90,90,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,90,90,90,90,90,90,90,-78,-77,90,90,90,90,90,90,90,90,]),'IF':([42,45,48,50,51,52,53,54,55,56,57,58,59,88,91,92,98,99,102,124,125,137,152,156,159,161,166,177,181,187,],[91,91,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,91,91,91,91,91,91,91,-78,-77,91,91,91,91,91,91,91,91,]),'MATCH':([42,45,48,50,51,52,53,54,55,56,57,58,59,88,91,92,98,99,102,124,125,137,152,156,159,161,166,177,181,187,],[92,92,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,92,92,92,92,92,92,92,-78,-77,92,92,92,92,92,92,92,92,]),'IN':([128,154,168,],[152,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,32,],[8,73,]),'IMPORT_DECLARATION':([6,32,],[9,74,]),'TOP_DECLARATION':([6,32,34,],[10,10,75,]),'DECLARATION':([6,32,34,129,169,],[14,14,14,155,155,]),'GEN_DECLARATION':([6,32,34,129,169,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,21,32,34,129,169,],[16,64,16,16,16,16,]),'PAT':([6,21,28,32,34,39,47,68,110,115,129,169,171,186,],[17,66,72,17,17,83,105,111,72,143,17,17,180,180,]),'APAT':([6,12,21,28,32,34,38,39,47,67,68,81,89,108,110,115,127,129,139,169,171,186,],[20,38,20,20,20,20,81,20,20,38,20,81,127,139,20,20,81,20,81,20,20,20,]),'LPAT':([6,21,28,32,34,39,47,68,110,115,129,169,171,186,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'PARAM':([6,12,21,28,32,34,38,39,47,67,68,81,89,108,110,115,127,129,139,169,171,186,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'GCON':([6,12,21,28,32,34,38,39,42,45,47,67,68,81,88,89,91,92,93,98,99,102,108,110,115,124,127,129,139,152,156,159,161,166,169,171,177,181,186,187,],[26,26,26,26,26,26,26,26,96,96,26,26,26,26,96,26,96,96,96,96,96,96,26,26,26,96,26,26,26,96,96,96,96,96,26,26,96,96,26,96,]),'LITERAL':([6,12,21,28,32,34,38,39,42,45,47,67,68,81,88,89,91,92,93,98,99,102,108,110,115,124,127,129,139,152,156,159,161,166,169,171,177,181,186,187,],[27,27,27,27,27,27,27,27,97,97,27,27,27,27,97,27,97,97,97,97,97,97,27,27,27,97,27,27,27,97,97,97,97,97,27,27,97,97,27,97,]),'RHS':([16,17,],[41,46,]),'GDRHS':([16,17,136,],[43,43,162,]),'GUARDS':([16,17,136,],[44,44,44,]),'VAROP':([17,66,87,107,],[47,47,125,125,]),'VARSYM':([17,66,87,107,],[48,48,48,48,]),'ASSOCIATIVITY':([18,],[60,]),'PAT_LIST':([28,110,],[70,140,]),'TYPE':([37,79,80,84,117,146,],[76,119,120,122,144,165,]),'ATYPE':([37,79,80,84,117,146,],[77,77,77,77,77,77,]),'APATS':([38,81,127,139,],[82,121,151,163,]),'EXP':([42,91,92,98,99,102,152,156,159,161,166,177,181,187,],[85,130,131,133,134,136,167,170,172,172,175,184,188,190,]),'INFIX_EXP':([42,45,88,91,92,98,99,102,124,152,156,159,161,166,177,181,187,],[86,104,126,86,86,86,86,86,150,86,86,86,86,86,86,86,86,]),'LEXP':([42,45,88,91,92,98,99,102,124,152,156,159,161,166,177,181,187,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'FEXP':([42,45,88,91,92,98,99,102,124,152,156,159,161,166,177,181,187,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'AEXP':([42,45,88,91,92,93,98,99,102,124,152,156,159,161,166,177,181,187,],[94,94,94,94,94,132,94,94,94,94,94,94,94,94,94,94,94,94,]),'USED_VAR':([42,45,88,91,92,93,98,99,102,124,152,156,159,161,166,177,181,187,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'GUARD':([45,],[103,]),'TYPES_LIST':([79,],[118,]),'OP':([87,107,],[124,138,]),'DECLARATIONS':([90,101,123,],[128,135,149,]),'DECLARATIONS_LIST':([129,169,],[153,176,]),'EXP_LIST':([159,161,],[173,174,]),'ALTS':([171,186,],[178,189,]),'ALT':([171,186,],[179,179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',18),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',24),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',25),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',37),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',38),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',46),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',51),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',52),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',60),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',61),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',69),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',70),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',78),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',79),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',87),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',88),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',89),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',99),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',100),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',101),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',107),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',108),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',109),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',114),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',115),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',123),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',124),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',125),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',126),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',139),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',140),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',141),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',153),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',154),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',155),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',156),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',169),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',170),
  ('GUARDS -> PIPE GUARD','GUARDS',2,'p_GUARDS','funky_parser.py',178),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',183),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',189),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',195),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',196),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',197),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',215),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',216),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',217),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',218),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',219),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',234),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',235),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',243),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',244),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',245),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',246),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',247),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',248),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',249),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',270),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',271),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',279),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',280),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',285),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',286),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',294),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',295),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',296),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',304),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',305),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',306),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',307),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',308),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',309),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',324),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',325),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',333),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',334),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',342),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',347),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',348),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',356),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',357),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',365),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',366),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',375),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',376),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',377),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',378),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',379),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',380),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',381),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',382),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',383),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',384),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',389),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',390),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',398),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',399),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',400),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',401),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',402),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',407),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',411),
]
