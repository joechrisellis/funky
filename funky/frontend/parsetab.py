
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET LIST_CONSTRUCTOR MATCH MINUS MODULE NEWCONS NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | NEWCONS TYPENAME EQUALS CONSTRUCTORS\n                           | DECLARATION\n        CONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT LIST_CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n                | GCON APAT APATS\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n                | TYPENAME\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | LIST_CONSTRUCTOR\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,35,125,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,76,78,88,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,136,137,139,141,144,149,151,166,170,172,173,174,175,178,182,185,187,193,197,198,199,202,203,],[3,12,37,38,-83,-108,73,-107,38,-75,-77,38,-109,-110,-111,12,12,-113,38,-76,38,108,108,38,-84,114,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,38,38,38,-82,38,108,38,108,108,108,-57,-58,-59,-60,108,108,-112,108,38,-78,38,-80,38,108,-86,38,12,-56,-85,38,108,108,-61,108,-63,108,-79,108,12,38,108,108,-62,-64,38,108,]),'WHERE':([3,14,21,26,31,32,33,47,71,78,93,94,95,101,102,103,104,105,108,138,144,148,164,172,174,176,183,191,198,199,200,201,],[4,-83,-108,-107,-109,-110,-111,109,-81,-82,135,-47,-50,-55,-57,-58,-59,-60,-112,-49,-56,-43,-48,-61,-63,-44,-52,-51,-62,-64,-53,-54,]),'OPEN_BRACE':([4,98,109,135,171,],[6,141,141,141,187,]),'IMPORT':([6,34,],[11,11,]),'NEWTYPE':([6,34,36,],[13,13,13,]),'NEWCONS':([6,34,36,],[15,15,15,]),'SETFIX':([6,34,36,141,185,],[20,20,20,20,20,]),'CLOSE_BRACE':([6,8,10,14,16,17,21,26,31,32,33,34,36,45,47,50,52,54,55,56,57,58,59,60,61,62,63,64,65,71,78,80,82,83,84,85,93,94,95,101,102,103,104,105,108,131,132,133,134,137,138,141,144,147,148,149,150,156,157,159,160,161,163,164,167,168,169,172,174,176,180,181,183,184,185,187,191,192,194,195,198,199,200,201,202,205,206,],[-24,35,-8,-83,-11,-19,-108,-107,-109,-110,-111,-24,-24,-20,-41,-21,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,-82,125,-7,-22,-28,-32,-39,-47,-50,-55,-57,-58,-59,-60,-112,-9,-31,-10,-13,-86,-49,168,-56,-42,-43,-85,-23,-29,-33,-34,-35,-14,-40,-48,184,-16,-18,-61,-63,-44,-30,-12,-52,-15,-24,-68,-51,-17,201,-66,-62,-64,-53,-54,-68,-65,-67,]),'ENDSTATEMENT':([6,7,8,9,10,14,16,17,21,26,31,32,33,34,36,37,45,47,50,52,54,55,56,57,58,59,60,61,62,63,64,65,71,78,80,81,82,83,84,85,93,94,95,101,102,103,104,105,108,131,132,133,134,137,138,141,144,147,148,149,150,156,157,159,160,161,163,164,168,169,172,174,176,180,181,183,184,185,187,191,195,198,199,200,201,202,206,],[-24,34,36,-5,-8,-83,-11,-19,-108,-107,-109,-110,-111,-24,-24,-6,-20,-41,-21,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,-82,36,-4,-7,-22,-28,-32,-39,-47,-50,-55,-57,-58,-59,-60,-112,-9,-31,-10,-13,-86,-49,-24,-56,-42,-43,-85,-23,-29,-33,-34,-35,-14,-40,-48,-16,185,-61,-63,-44,-30,-12,-52,-15,-24,-68,-51,202,-62,-64,-53,-54,-68,-67,]),'OPEN_PAREN':([6,12,14,21,23,25,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,76,78,85,86,87,88,91,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,126,132,136,137,139,141,144,149,151,157,158,159,160,161,166,170,172,173,174,175,178,180,182,185,187,193,197,198,199,202,203,],[23,42,-83,-108,23,75,-107,42,-75,-77,42,-109,-110,-111,23,23,-113,86,42,-76,42,106,106,42,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,42,42,42,-82,-32,86,86,42,86,106,42,106,106,106,-57,-58,-59,-60,106,106,-112,106,42,-78,42,-80,42,86,-31,106,-86,42,23,-56,-85,42,-33,86,-34,-35,86,106,106,-61,106,-63,106,-79,-30,106,23,42,106,106,-62,-64,42,106,]),'MINUS':([6,12,14,19,21,22,23,24,26,27,28,29,30,31,32,33,34,36,38,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,72,73,74,76,78,88,94,95,96,99,100,101,102,103,104,105,106,107,108,110,115,117,118,119,122,123,124,130,136,137,138,141,144,149,153,154,164,166,170,172,173,174,175,178,182,183,185,187,191,193,197,198,199,200,201,202,203,],[25,-113,-83,55,-108,-71,25,-70,-107,-76,-75,-77,25,-109,-110,-111,25,25,-113,-76,25,96,96,25,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,55,-113,25,-90,-82,-90,-47,55,96,96,96,-55,-57,-58,-59,-60,96,96,-112,96,55,-78,25,-69,-74,-80,25,-89,96,-86,-49,25,-56,-85,-72,-73,-48,96,96,-61,96,-63,96,-79,96,-52,25,25,-51,96,96,-62,-64,-53,-54,25,96,]),'OPEN_SQUARE':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,76,78,85,86,87,88,91,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,126,132,136,137,139,141,144,149,151,157,158,159,160,161,166,170,172,173,174,175,178,180,182,185,187,193,197,198,199,202,203,],[30,30,-83,-108,30,-107,30,-75,-77,30,-109,-110,-111,30,30,-113,87,30,-76,30,107,107,30,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,30,30,30,-82,-32,87,87,30,87,107,30,107,107,107,-57,-58,-59,-60,107,107,-112,107,30,-78,30,-80,30,87,-31,107,-86,30,30,-56,-85,30,-33,87,-34,-35,87,107,107,-61,107,-63,107,-79,-30,107,30,30,107,107,-62,-64,30,107,]),'TYPENAME':([6,12,13,14,15,21,23,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,76,78,85,86,87,88,91,92,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,126,132,136,137,139,141,144,149,151,157,158,159,160,161,162,166,170,172,173,174,175,178,180,182,185,187,193,197,198,199,202,203,],[14,14,43,-83,44,-108,14,-107,14,-75,-77,14,-109,-110,-111,14,14,-113,85,14,-76,14,14,14,14,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,14,14,14,-82,-32,85,85,14,85,132,14,14,14,14,14,-57,-58,-59,-60,14,14,-112,14,14,-78,14,-80,14,85,-31,14,-86,14,14,-56,-85,14,-33,85,-34,-35,85,132,14,14,-61,14,-63,14,-79,-30,14,14,14,14,14,-62,-64,14,14,]),'FLOAT':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,75,76,78,88,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,136,137,139,141,144,149,151,166,170,172,173,174,175,178,182,185,187,193,197,198,199,202,203,],[26,26,-83,-108,26,-107,26,-75,-77,26,-109,-110,-111,26,26,-113,26,-76,26,26,26,26,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,26,26,121,26,-82,26,26,26,26,26,26,-57,-58,-59,-60,26,26,-112,26,26,-78,26,-80,26,26,-86,26,26,-56,-85,26,26,26,-61,26,-63,26,-79,26,26,26,26,26,-62,-64,26,26,]),'INTEGER':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,74,75,76,78,88,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,136,137,139,141,144,149,151,166,170,172,173,174,175,178,182,185,187,193,197,198,199,202,203,],[21,21,-83,-108,21,-107,21,-75,-77,21,-109,-110,-111,21,21,-113,21,-76,21,21,21,21,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,115,-25,-26,-27,-81,21,21,120,21,-82,21,21,21,21,21,21,-57,-58,-59,-60,21,21,-112,21,21,-78,21,-80,21,21,-86,21,21,-56,-85,21,21,21,-61,21,-63,21,-79,21,21,21,21,21,-62,-64,21,21,]),'BOOL':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,76,78,88,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,136,137,139,141,144,149,151,166,170,172,173,174,175,178,182,185,187,193,197,198,199,202,203,],[31,31,-83,-108,31,-107,31,-75,-77,31,-109,-110,-111,31,31,-113,31,-76,31,31,31,31,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,31,31,31,-82,31,31,31,31,31,31,-57,-58,-59,-60,31,31,-112,31,31,-78,31,-80,31,31,-86,31,31,-56,-85,31,31,31,-61,31,-63,31,-79,31,31,31,31,31,-62,-64,31,31,]),'CHAR':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,76,78,88,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,136,137,139,141,144,149,151,166,170,172,173,174,175,178,182,185,187,193,197,198,199,202,203,],[32,32,-83,-108,32,-107,32,-75,-77,32,-109,-110,-111,32,32,-113,32,-76,32,32,32,32,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,32,32,32,-82,32,32,32,32,32,32,-57,-58,-59,-60,32,32,-112,32,32,-78,32,-80,32,32,-86,32,32,-56,-85,32,32,32,-61,32,-63,32,-79,32,32,32,32,32,-62,-64,32,32,]),'STRING':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,71,73,74,76,78,88,96,97,99,100,101,102,103,104,105,106,107,108,110,116,117,118,123,124,136,137,139,141,144,149,151,166,170,172,173,174,175,178,182,185,187,193,197,198,199,202,203,],[33,33,-83,-108,33,-107,33,-75,-77,33,-109,-110,-111,33,33,-113,33,-76,33,33,33,33,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-81,33,33,33,-82,33,33,33,33,33,33,-57,-58,-59,-60,33,33,-112,33,33,-78,33,-80,33,33,-86,33,33,-56,-85,33,33,33,-61,33,-63,33,-79,33,33,33,33,33,-62,-64,33,33,]),'TYPESIG':([12,],[39,]),'LIST_CONSTRUCTOR':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,65,-108,-71,74,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,65,-113,-90,-82,-90,-47,65,-55,-57,-58,-59,-60,-112,65,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'EQUALS':([12,14,18,19,21,22,24,26,27,28,29,31,32,33,38,40,41,43,44,48,71,76,78,88,89,94,95,101,102,103,104,105,108,111,112,113,117,119,122,123,130,138,144,151,153,154,164,172,174,177,178,183,191,198,199,200,201,],[-113,-83,46,46,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-90,-76,91,92,110,-81,-90,-82,-90,-36,-47,-50,-55,-57,-58,-59,-60,-112,-45,-46,-37,-78,-69,-74,-80,-89,-49,-56,-90,-72,-73,-48,-61,-63,-38,-79,-52,-51,-62,-64,-53,-54,]),'BACKTICK':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,114,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,53,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,53,-113,-90,-82,-90,-47,53,-55,-57,-58,-59,-60,-112,149,53,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'PLUS':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,54,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,54,-113,-90,-82,-90,-47,54,-55,-57,-58,-59,-60,-112,54,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'TIMES':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,56,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,56,-113,-90,-82,-90,-47,56,-55,-57,-58,-59,-60,-112,56,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'DIVIDE':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,57,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,57,-113,-90,-82,-90,-47,57,-55,-57,-58,-59,-60,-112,57,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'POW':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,58,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,58,-113,-90,-82,-90,-47,58,-55,-57,-58,-59,-60,-112,58,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'EQUALITY':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,59,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,59,-113,-90,-82,-90,-47,59,-55,-57,-58,-59,-60,-112,59,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'INEQUALITY':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,60,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,60,-113,-90,-82,-90,-47,60,-55,-57,-58,-59,-60,-112,60,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'LESS':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,61,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,61,-113,-90,-82,-90,-47,61,-55,-57,-58,-59,-60,-112,61,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'LEQ':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,62,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,62,-113,-90,-82,-90,-47,62,-55,-57,-58,-59,-60,-112,62,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'GREATER':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,63,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,63,-113,-90,-82,-90,-47,63,-55,-57,-58,-59,-60,-112,63,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'GEQ':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,78,88,94,95,101,102,103,104,105,108,115,117,119,122,123,130,138,144,153,154,164,172,174,178,183,191,198,199,200,201,],[-113,-83,64,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,64,-113,-90,-82,-90,-47,64,-55,-57,-58,-59,-60,-112,64,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'PIPE':([12,14,18,19,21,22,24,26,27,28,29,31,32,33,38,40,41,71,76,78,85,88,89,94,95,101,102,103,104,105,108,113,117,119,122,123,130,132,133,134,138,144,148,151,153,154,157,159,160,161,164,172,174,177,178,180,181,183,191,198,199,200,201,],[-113,-83,49,49,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-90,-76,-81,-90,-82,-32,-90,-36,-47,-50,-55,-57,-58,-59,-60,-112,-37,-78,-69,-74,-80,-89,-31,162,-13,-49,-56,49,-90,-72,-73,-33,-34,-35,-14,-48,-61,-63,-38,-79,-30,-12,-52,-51,-62,-64,-53,-54,]),'CLOSE_PAREN':([14,21,22,23,24,26,27,28,29,31,32,33,38,40,41,42,70,71,72,73,76,78,79,84,85,88,89,90,94,95,101,102,103,104,105,106,108,113,117,119,120,121,122,123,127,128,130,138,144,145,151,152,153,154,155,156,157,159,160,164,172,174,177,178,179,183,188,189,191,198,199,200,201,204,],[-83,-108,-71,71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-90,-76,71,116,-81,117,-113,-90,-82,-92,-28,-32,-90,-36,117,-47,-50,-55,-57,-58,-59,-60,71,-112,-37,-78,-69,153,154,-74,-80,157,159,-89,-49,-56,172,-90,178,-72,-73,-91,-29,-33,-34,-35,-48,-61,-63,-38,-79,-105,-52,-88,198,-51,-62,-64,-53,-54,-87,]),'COMMA':([14,21,22,24,26,27,28,29,31,32,33,38,41,71,72,73,76,77,78,79,84,85,88,90,94,95,101,102,103,104,105,108,117,119,122,123,127,128,130,138,144,145,146,152,153,154,155,156,157,159,160,164,172,174,178,179,183,188,189,190,191,198,199,200,201,204,],[-83,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,118,-113,-90,124,-82,-92,-28,-32,-90,118,-47,-50,-55,-57,-58,-59,-60,-112,-78,-69,-74,-80,158,-106,-89,-49,-56,173,175,124,-72,-73,-91,-29,-33,-34,-35,-48,-61,-63,-79,-105,-52,-88,197,197,-51,-62,-64,-53,-54,-87,]),'CLOSE_SQUARE':([14,21,22,24,26,27,28,29,30,31,32,33,38,41,71,76,77,78,79,84,85,88,94,95,101,102,103,104,105,107,108,117,119,122,123,129,130,138,144,146,153,154,155,156,157,159,160,164,172,174,178,183,188,190,191,198,199,200,201,204,],[-83,-108,-71,-70,-107,-76,-75,-77,78,-109,-110,-111,-113,-76,-81,-90,123,-82,-92,-28,-32,-90,-47,-50,-55,-57,-58,-59,-60,78,-112,-78,-69,-74,-80,160,-89,-49,-56,174,-72,-73,-91,-29,-33,-34,-35,-48,-61,-63,-79,-52,-88,199,-51,-62,-64,-53,-54,-87,]),'ARROW':([14,21,22,24,26,27,28,29,31,32,33,38,41,71,76,78,84,85,88,117,119,122,123,130,139,153,154,157,159,160,165,178,196,],[-83,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,-90,-82,126,-32,-90,-78,-69,-74,-80,-89,-90,-72,-73,-33,-34,-35,182,-79,203,]),'THEN':([14,21,26,31,32,33,71,78,94,95,101,102,103,104,105,108,138,142,144,164,172,174,183,191,198,199,200,201,],[-83,-108,-107,-109,-110,-111,-81,-82,-47,-50,-55,-57,-58,-59,-60,-112,-49,170,-56,-48,-61,-63,-52,-51,-62,-64,-53,-54,]),'OF':([14,21,26,31,32,33,71,78,94,95,101,102,103,104,105,108,138,143,144,164,172,174,183,191,198,199,200,201,],[-83,-108,-107,-109,-110,-111,-81,-82,-47,-50,-55,-57,-58,-59,-60,-112,-49,171,-56,-48,-61,-63,-52,-51,-62,-64,-53,-54,]),'ELSE':([14,21,26,31,32,33,71,78,94,95,101,102,103,104,105,108,138,144,164,172,174,183,186,191,198,199,200,201,],[-83,-108,-107,-109,-110,-111,-81,-82,-47,-50,-55,-57,-58,-59,-60,-112,-49,-56,-48,-61,-63,-52,193,-51,-62,-64,-53,-54,]),'LEFTASSOC':([20,],[67,]),'RIGHTASSOC':([20,],[68,]),'NONASSOC':([20,],[69,]),'LAMBDA':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,96,99,100,106,107,110,136,137,149,166,170,173,175,182,193,197,203,],[97,97,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,97,97,97,97,97,97,97,-86,-85,97,97,97,97,97,97,97,97,]),'LET':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,96,99,100,106,107,110,136,137,149,166,170,173,175,182,193,197,203,],[98,98,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,98,98,98,98,98,98,98,-86,-85,98,98,98,98,98,98,98,98,]),'IF':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,96,99,100,106,107,110,136,137,149,166,170,173,175,182,193,197,203,],[99,99,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,99,99,99,99,99,99,99,-86,-85,99,99,99,99,99,99,99,99,]),'MATCH':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,96,99,100,106,107,110,136,137,149,166,170,173,175,182,193,197,203,],[100,100,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,100,100,100,100,100,100,100,-86,-85,100,100,100,100,100,100,100,100,]),'IN':([140,168,184,],[166,-16,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,34,],[8,80,]),'IMPORT_DECLARATION':([6,34,],[9,81,]),'TOP_DECLARATION':([6,34,36,],[10,10,82,]),'DECLARATION':([6,34,36,141,185,],[16,16,16,169,169,]),'GEN_DECLARATION':([6,34,36,141,185,],[17,17,17,17,17,]),'FUNCTION_LHS':([6,23,34,36,141,185,],[18,70,18,18,18,18,]),'PAT':([6,23,30,34,36,42,51,74,118,124,141,185,187,202,],[19,72,79,19,19,90,113,119,79,155,19,19,196,196,]),'APAT':([6,12,23,27,30,34,36,40,42,51,73,74,76,88,97,116,118,124,139,141,151,185,187,202,],[22,40,22,76,22,22,22,88,22,22,40,22,88,88,139,151,22,22,88,22,88,22,22,22,]),'LPAT':([6,23,30,34,36,42,51,74,118,124,141,185,187,202,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'GCON':([6,12,23,27,30,34,36,40,42,46,49,51,73,74,76,88,96,97,99,100,101,106,107,110,116,118,124,136,139,141,151,166,170,173,175,182,185,187,193,197,202,203,],[27,41,27,41,27,27,27,41,27,104,104,27,41,27,41,41,104,41,104,104,104,104,104,104,41,27,27,104,41,27,41,104,104,104,104,104,27,27,104,104,27,104,]),'PARAM':([6,12,23,27,30,34,36,40,42,51,73,74,76,88,97,116,118,124,139,141,151,185,187,202,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'LITERAL':([6,12,23,27,30,34,36,40,42,46,49,51,73,74,76,88,96,97,99,100,101,106,107,110,116,118,124,136,139,141,151,166,170,173,175,182,185,187,193,197,202,203,],[29,29,29,29,29,29,29,29,29,105,105,29,29,29,29,29,105,29,105,105,105,105,105,105,29,29,29,105,29,29,29,105,105,105,105,105,29,29,105,105,29,105,]),'RHS':([18,19,],[45,50,]),'GDRHS':([18,19,148,],[47,47,176,]),'GUARDS':([18,19,148,],[48,48,48,]),'VAROP':([19,72,95,115,],[51,51,137,137,]),'VARSYM':([19,72,95,115,],[52,52,52,52,]),'ASSOCIATIVITY':([20,],[66,]),'PAT_LIST':([30,118,],[77,152,]),'TYPE':([39,86,87,91,126,158,],[83,128,129,131,156,179,]),'ATYPE':([39,86,87,91,126,158,161,],[84,84,84,84,84,84,180,]),'APATS':([40,76,88,139,151,],[89,122,130,165,177,]),'EXP':([46,99,100,106,107,110,166,170,173,175,182,193,197,203,],[93,142,143,145,146,148,183,186,188,188,191,200,204,206,]),'INFIX_EXP':([46,49,96,99,100,106,107,110,136,166,170,173,175,182,193,197,203,],[94,112,138,94,94,94,94,94,164,94,94,94,94,94,94,94,94,]),'LEXP':([46,49,96,99,100,106,107,110,136,166,170,173,175,182,193,197,203,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'FEXP':([46,49,96,99,100,106,107,110,136,166,170,173,175,182,193,197,203,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'AEXP':([46,49,96,99,100,101,106,107,110,136,166,170,173,175,182,193,197,203,],[102,102,102,102,102,144,102,102,102,102,102,102,102,102,102,102,102,102,]),'USED_VAR':([46,49,96,99,100,101,106,107,110,136,166,170,173,175,182,193,197,203,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'GUARD':([49,],[111,]),'TYPES_LIST':([86,],[127,]),'CONSTRUCTORS':([92,],[133,]),'CONSTRUCTOR':([92,162,],[134,181,]),'OP':([95,115,],[136,150,]),'DECLARATIONS':([98,109,135,],[140,147,163,]),'ATYPES':([132,],[161,]),'DECLARATIONS_LIST':([141,185,],[167,192,]),'EXP_LIST':([173,175,],[189,190,]),'ALTS':([187,202,],[194,205,]),'ALT':([187,202,],[195,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',21),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',27),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',28),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',41),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',49),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',55),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',63),
  ('TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',64),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',65),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',75),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',76),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',84),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',88),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',89),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',97),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',98),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',106),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',107),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',108),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',118),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',119),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',120),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',128),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',129),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',130),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',135),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',136),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',144),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',145),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',153),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',154),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',155),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',156),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',169),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',170),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',171),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',183),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',184),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',185),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',186),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',199),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',200),
  ('GUARDS -> PIPE GUARD','GUARDS',2,'p_GUARDS','funky_parser.py',208),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',213),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',219),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',225),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',226),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',227),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',245),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',246),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',247),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',248),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',249),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',264),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',265),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',273),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',274),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',275),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',276),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',277),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',278),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',279),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',302),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',303),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',311),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',312),
  ('PAT -> LPAT LIST_CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',317),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',318),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',326),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',327),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',328),
  ('LPAT -> GCON APAT APATS','LPAT',3,'p_LPAT','funky_parser.py',329),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',339),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',340),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',341),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',342),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',343),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',344),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',361),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',362),
  ('GCON -> TYPENAME','GCON',1,'p_GCON','funky_parser.py',363),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',373),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',374),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',384),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',389),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',390),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',398),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',399),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',407),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',408),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',417),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',418),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',419),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',420),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',421),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',422),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',423),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',424),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',425),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',426),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',427),
  ('VARSYM -> LIST_CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',428),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',433),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',434),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',442),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',443),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',444),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',445),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',446),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',451),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',455),
]
