
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET MATCH MINUS MODULE NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | CONSTRUCTOR\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,33,118,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,73,83,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,126,127,129,131,134,139,141,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[3,12,35,36,-100,69,-99,-68,-69,-70,36,-101,-102,-103,12,12,-105,36,36,102,102,36,-76,108,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,36,36,-75,36,102,36,102,102,102,-51,-52,-53,-54,102,102,-104,102,36,-71,36,-73,36,102,-78,36,12,-50,-77,36,102,102,-55,102,-57,102,-72,102,12,36,102,102,-56,-58,36,102,]),'WHERE':([3,19,24,29,30,31,43,67,73,87,88,89,95,96,97,98,99,102,128,134,138,152,160,162,164,169,177,184,185,186,187,],[4,-100,-99,-101,-102,-103,103,-74,-75,125,-41,-44,-49,-51,-52,-53,-54,-104,-43,-50,-37,-42,-55,-57,-38,-46,-45,-56,-58,-47,-48,]),'OPEN_BRACE':([4,92,103,125,159,],[6,131,131,131,173,]),'IMPORT':([6,32,],[11,11,]),'NEWTYPE':([6,32,34,],[13,13,13,]),'SETFIX':([6,32,34,131,171,],[18,18,18,18,18,]),'CLOSE_BRACE':([6,8,10,14,15,19,24,29,30,31,32,34,41,43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,67,73,75,77,78,79,80,87,88,89,95,96,97,98,99,102,124,127,128,131,134,137,138,139,140,146,147,149,150,151,152,155,156,157,160,162,164,169,170,171,173,177,178,180,181,184,185,186,187,188,191,192,],[-20,33,-8,-10,-15,-100,-99,-101,-102,-103,-20,-20,-16,-35,-17,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,-75,118,-7,-18,-24,-26,-33,-41,-44,-49,-51,-52,-53,-54,-104,-9,-78,-43,156,-50,-36,-37,-77,-19,-25,-27,-28,-29,-34,-42,170,-12,-14,-55,-57,-38,-46,-11,-20,-62,-45,-13,187,-60,-56,-58,-47,-48,-62,-59,-61,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,19,24,29,30,31,32,34,35,41,43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,67,73,75,76,77,78,79,80,87,88,89,95,96,97,98,99,102,124,127,128,131,134,137,138,139,140,146,147,149,150,151,152,156,157,160,162,164,169,170,171,173,177,181,184,185,186,187,188,192,],[-20,32,34,-5,-8,-10,-15,-100,-99,-101,-102,-103,-20,-20,-6,-16,-35,-17,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,-75,34,-4,-7,-18,-24,-26,-33,-41,-44,-49,-51,-52,-53,-54,-104,-9,-78,-43,-20,-50,-36,-37,-77,-19,-25,-27,-28,-29,-34,-42,-12,171,-55,-57,-38,-46,-11,-20,-62,-45,188,-56,-58,-47,-48,-62,-61,]),'OPEN_PAREN':([6,12,19,21,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,73,81,82,83,86,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,119,126,127,129,131,134,139,141,148,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[21,39,-100,21,71,-99,-68,-69,-70,39,-101,-102,-103,21,21,-105,81,39,39,100,100,39,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,39,39,-75,81,81,39,81,100,39,100,100,100,-51,-52,-53,-54,100,100,-104,100,39,-71,39,-73,39,81,100,-78,39,21,-50,-77,39,81,100,100,-55,100,-57,100,-72,100,21,39,100,100,-56,-58,39,100,]),'MINUS':([6,12,17,19,20,21,22,24,25,26,27,28,29,30,31,32,34,36,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,67,68,69,70,73,88,89,90,93,94,95,96,97,98,99,100,101,102,104,109,111,112,113,116,117,126,127,128,131,134,139,143,144,152,154,158,160,161,162,163,166,168,169,171,173,177,179,183,184,185,186,187,188,189,],[23,-105,51,-100,-65,23,-64,-99,-68,-69,-70,23,-101,-102,-103,23,23,-105,23,90,90,23,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,51,-105,23,-75,-41,51,90,90,90,-49,-51,-52,-53,-54,90,90,-104,90,51,-71,23,-63,-73,23,90,-78,-43,23,-50,-77,-66,-67,-42,90,90,-55,90,-57,90,-72,90,-46,23,23,-45,90,90,-56,-58,-47,-48,23,90,]),'OPEN_SQUARE':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,37,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,73,81,82,83,86,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,119,126,127,129,131,134,139,141,148,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[28,28,-100,28,-99,-68,-69,-70,28,-101,-102,-103,28,28,-105,82,28,28,101,101,28,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,28,28,-75,82,82,28,82,101,28,101,101,101,-51,-52,-53,-54,101,101,-104,101,28,-71,28,-73,28,82,101,-78,28,28,-50,-77,28,82,101,101,-55,101,-57,101,-72,101,28,28,101,101,-56,-58,28,101,]),'FLOAT':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,71,73,83,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,126,127,129,131,134,139,141,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[24,24,-100,24,-99,-68,-69,-70,24,-101,-102,-103,24,24,-105,24,24,24,24,24,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,24,24,115,-75,24,24,24,24,24,24,-51,-52,-53,-54,24,24,-104,24,24,-71,24,-73,24,24,-78,24,24,-50,-77,24,24,24,-55,24,-57,24,-72,24,24,24,24,24,-56,-58,24,24,]),'INTEGER':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,70,71,73,83,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,126,127,129,131,134,139,141,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[19,19,-100,19,-99,-68,-69,-70,19,-101,-102,-103,19,19,-105,19,19,19,19,19,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,109,-21,-22,-23,-74,19,19,114,-75,19,19,19,19,19,19,-51,-52,-53,-54,19,19,-104,19,19,-71,19,-73,19,19,-78,19,19,-50,-77,19,19,19,-55,19,-57,19,-72,19,19,19,19,19,-56,-58,19,19,]),'BOOL':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,73,83,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,126,127,129,131,134,139,141,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[29,29,-100,29,-99,-68,-69,-70,29,-101,-102,-103,29,29,-105,29,29,29,29,29,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,29,29,-75,29,29,29,29,29,29,-51,-52,-53,-54,29,29,-104,29,29,-71,29,-73,29,29,-78,29,29,-50,-77,29,29,29,-55,29,-57,29,-72,29,29,29,29,29,-56,-58,29,29,]),'CHAR':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,73,83,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,126,127,129,131,134,139,141,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[30,30,-100,30,-99,-68,-69,-70,30,-101,-102,-103,30,30,-105,30,30,30,30,30,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,30,30,-75,30,30,30,30,30,30,-51,-52,-53,-54,30,30,-104,30,30,-71,30,-73,30,30,-78,30,30,-50,-77,30,30,30,-55,30,-57,30,-72,30,30,30,30,30,-56,-58,30,30,]),'STRING':([6,12,19,21,24,25,26,27,28,29,30,31,32,34,36,38,39,42,45,47,48,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,73,83,90,91,93,94,95,96,97,98,99,100,101,102,104,110,111,112,116,117,126,127,129,131,134,139,141,154,158,160,161,162,163,166,168,171,173,179,183,184,185,188,189,],[31,31,-100,31,-99,-68,-69,-70,31,-101,-102,-103,31,31,-105,31,31,31,31,31,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-74,31,31,-75,31,31,31,31,31,31,-51,-52,-53,-54,31,31,-104,31,31,-71,31,-73,31,31,-78,31,31,-50,-77,31,31,31,-55,31,-57,31,-72,31,31,31,31,31,-56,-58,31,31,]),'TYPESIG':([12,],[37,]),'CONSTRUCTOR':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,61,-100,-65,70,-99,-68,-69,-70,-101,-102,-103,-105,-74,61,-105,-75,-41,61,-49,-51,-52,-53,-54,-104,61,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'EQUALS':([12,16,17,19,20,22,24,25,26,27,29,30,31,36,38,40,44,67,73,83,84,88,89,95,96,97,98,99,102,105,106,107,111,113,116,123,128,134,141,143,144,152,160,162,165,166,169,177,184,185,186,187,],[-105,42,42,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-82,86,104,-74,-75,-82,-30,-41,-44,-49,-51,-52,-53,-54,-104,-39,-40,-31,-71,-63,-73,-81,-43,-50,-82,-66,-67,-42,-55,-57,-32,-72,-46,-45,-56,-58,-47,-48,]),'BACKTICK':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,108,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,49,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,49,-105,-75,-41,49,-49,-51,-52,-53,-54,-104,139,49,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'PLUS':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,50,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,50,-105,-75,-41,50,-49,-51,-52,-53,-54,-104,50,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'TIMES':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,52,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,52,-105,-75,-41,52,-49,-51,-52,-53,-54,-104,52,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'DIVIDE':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,53,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,53,-105,-75,-41,53,-49,-51,-52,-53,-54,-104,53,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'POW':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,54,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,54,-105,-75,-41,54,-49,-51,-52,-53,-54,-104,54,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'EQUALITY':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,55,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,55,-105,-75,-41,55,-49,-51,-52,-53,-54,-104,55,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'INEQUALITY':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,56,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,56,-105,-75,-41,56,-49,-51,-52,-53,-54,-104,56,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'LESS':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,57,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,57,-105,-75,-41,57,-49,-51,-52,-53,-54,-104,57,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'LEQ':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,58,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,58,-105,-75,-41,58,-49,-51,-52,-53,-54,-104,58,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'GREATER':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,59,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,59,-105,-75,-41,59,-49,-51,-52,-53,-54,-104,59,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'GEQ':([12,17,19,20,22,24,25,26,27,29,30,31,36,67,68,69,73,88,89,95,96,97,98,99,102,109,111,113,116,128,134,143,144,152,160,162,166,169,177,184,185,186,187,],[-105,60,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,60,-105,-75,-41,60,-49,-51,-52,-53,-54,-104,60,-71,-63,-73,-43,-50,-66,-67,-42,-55,-57,-72,-46,-45,-56,-58,-47,-48,]),'PIPE':([12,16,17,19,20,22,24,25,26,27,29,30,31,36,38,67,73,83,84,88,89,95,96,97,98,99,102,107,111,113,116,123,128,134,138,141,143,144,152,160,162,165,166,169,177,184,185,186,187,],[-105,45,45,-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-82,-74,-75,-82,-30,-41,-44,-49,-51,-52,-53,-54,-104,-31,-71,-63,-73,-81,-43,-50,45,-82,-66,-67,-42,-55,-57,-32,-72,-46,-45,-56,-58,-47,-48,]),'TYPENAME':([13,37,81,82,86,119,148,],[40,80,80,80,80,80,80,]),'LEFTASSOC':([18,],[63,]),'RIGHTASSOC':([18,],[64,]),'NONASSOC':([18,],[65,]),'CLOSE_PAREN':([19,20,21,22,24,25,26,27,29,30,31,36,38,39,66,67,68,69,73,74,79,80,83,84,85,88,89,95,96,97,98,99,100,102,107,111,113,114,115,116,120,121,123,128,134,135,141,142,143,144,145,146,147,149,150,152,160,162,165,166,167,169,174,175,177,184,185,186,187,190,],[-100,-65,67,-64,-99,-68,-69,-70,-101,-102,-103,-105,-82,67,110,-74,111,-105,-75,-84,-24,-26,-82,-30,111,-41,-44,-49,-51,-52,-53,-54,67,-104,-31,-71,-63,143,144,-73,147,149,-81,-43,-50,160,-82,166,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-32,-72,-97,-46,-80,184,-45,-56,-58,-47,-48,-79,]),'COMMA':([19,20,22,24,25,26,27,29,30,31,36,67,68,69,72,73,74,79,80,85,88,89,95,96,97,98,99,102,111,113,116,120,121,128,134,135,136,142,143,144,145,146,147,149,150,152,160,162,166,167,169,174,175,176,177,184,185,186,187,190,],[-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,112,-105,117,-75,-84,-24,-26,112,-41,-44,-49,-51,-52,-53,-54,-104,-71,-63,-73,148,-98,-43,-50,161,163,117,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-72,-97,-46,-80,183,183,-45,-56,-58,-47,-48,-79,]),'CLOSE_SQUARE':([19,20,22,24,25,26,27,28,29,30,31,36,67,72,73,74,79,80,88,89,95,96,97,98,99,101,102,111,113,116,122,128,134,136,143,144,145,146,147,149,150,152,160,162,166,169,174,176,177,184,185,186,187,190,],[-100,-65,-64,-99,-68,-69,-70,73,-101,-102,-103,-105,-74,116,-75,-84,-24,-26,-41,-44,-49,-51,-52,-53,-54,73,-104,-71,-63,-73,150,-43,-50,162,-66,-67,-83,-25,-27,-28,-29,-42,-55,-57,-72,-46,-80,185,-45,-56,-58,-47,-48,-79,]),'ARROW':([19,20,22,24,25,26,27,29,30,31,36,67,73,79,80,83,111,113,116,123,129,143,144,147,149,150,153,166,182,],[-100,-65,-64,-99,-68,-69,-70,-101,-102,-103,-105,-74,-75,119,-26,-82,-71,-63,-73,-81,-82,-66,-67,-27,-28,-29,168,-72,189,]),'THEN':([19,24,29,30,31,67,73,88,89,95,96,97,98,99,102,128,132,134,152,160,162,169,177,184,185,186,187,],[-100,-99,-101,-102,-103,-74,-75,-41,-44,-49,-51,-52,-53,-54,-104,-43,158,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'OF':([19,24,29,30,31,67,73,88,89,95,96,97,98,99,102,128,133,134,152,160,162,169,177,184,185,186,187,],[-100,-99,-101,-102,-103,-74,-75,-41,-44,-49,-51,-52,-53,-54,-104,-43,159,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'ELSE':([19,24,29,30,31,67,73,88,89,95,96,97,98,99,102,128,134,152,160,162,169,172,177,184,185,186,187,],[-100,-99,-101,-102,-103,-74,-75,-41,-44,-49,-51,-52,-53,-54,-104,-43,-50,-42,-55,-57,-46,179,-45,-56,-58,-47,-48,]),'LAMBDA':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,61,90,93,94,100,101,104,126,127,139,154,158,161,163,168,179,183,189,],[91,91,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,91,91,91,91,91,91,91,-78,-77,91,91,91,91,91,91,91,91,]),'LET':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,61,90,93,94,100,101,104,126,127,139,154,158,161,163,168,179,183,189,],[92,92,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,92,92,92,92,92,92,92,-78,-77,92,92,92,92,92,92,92,92,]),'IF':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,61,90,93,94,100,101,104,126,127,139,154,158,161,163,168,179,183,189,],[93,93,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,93,93,93,93,93,93,93,-78,-77,93,93,93,93,93,93,93,93,]),'MATCH':([42,45,48,50,51,52,53,54,55,56,57,58,59,60,61,90,93,94,100,101,104,126,127,139,154,158,161,163,168,179,183,189,],[94,94,-76,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,94,94,94,94,94,94,94,-78,-77,94,94,94,94,94,94,94,94,]),'IN':([130,156,170,],[154,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,32,],[8,75,]),'IMPORT_DECLARATION':([6,32,],[9,76,]),'TOP_DECLARATION':([6,32,34,],[10,10,77,]),'DECLARATION':([6,32,34,131,171,],[14,14,14,157,157,]),'GEN_DECLARATION':([6,32,34,131,171,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,21,32,34,131,171,],[16,66,16,16,16,16,]),'PAT':([6,21,28,32,34,39,47,70,112,117,131,171,173,188,],[17,68,74,17,17,85,107,113,74,145,17,17,182,182,]),'APAT':([6,12,21,28,32,34,38,39,47,69,70,83,91,110,112,117,129,131,141,171,173,188,],[20,38,20,20,20,20,83,20,20,38,20,83,129,141,20,20,83,20,83,20,20,20,]),'LPAT':([6,21,28,32,34,39,47,70,112,117,131,171,173,188,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'PARAM':([6,12,21,28,32,34,38,39,47,69,70,83,91,110,112,117,129,131,141,171,173,188,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'GCON':([6,12,21,28,32,34,38,39,42,45,47,69,70,83,90,91,93,94,95,100,101,104,110,112,117,126,129,131,141,154,158,161,163,168,171,173,179,183,188,189,],[26,26,26,26,26,26,26,26,98,98,26,26,26,26,98,26,98,98,98,98,98,98,26,26,26,98,26,26,26,98,98,98,98,98,26,26,98,98,26,98,]),'LITERAL':([6,12,21,28,32,34,38,39,42,45,47,69,70,83,90,91,93,94,95,100,101,104,110,112,117,126,129,131,141,154,158,161,163,168,171,173,179,183,188,189,],[27,27,27,27,27,27,27,27,99,99,27,27,27,27,99,27,99,99,99,99,99,99,27,27,27,99,27,27,27,99,99,99,99,99,27,27,99,99,27,99,]),'RHS':([16,17,],[41,46,]),'GDRHS':([16,17,138,],[43,43,164,]),'GUARDS':([16,17,138,],[44,44,44,]),'VAROP':([17,68,89,109,],[47,47,127,127,]),'VARSYM':([17,68,89,109,],[48,48,48,48,]),'ASSOCIATIVITY':([18,],[62,]),'PAT_LIST':([28,112,],[72,142,]),'TYPE':([37,81,82,86,119,148,],[78,121,122,124,146,167,]),'ATYPE':([37,81,82,86,119,148,],[79,79,79,79,79,79,]),'APATS':([38,83,129,141,],[84,123,153,165,]),'EXP':([42,93,94,100,101,104,154,158,161,163,168,179,183,189,],[87,132,133,135,136,138,169,172,174,174,177,186,190,192,]),'INFIX_EXP':([42,45,90,93,94,100,101,104,126,154,158,161,163,168,179,183,189,],[88,106,128,88,88,88,88,88,152,88,88,88,88,88,88,88,88,]),'LEXP':([42,45,90,93,94,100,101,104,126,154,158,161,163,168,179,183,189,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'FEXP':([42,45,90,93,94,100,101,104,126,154,158,161,163,168,179,183,189,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'AEXP':([42,45,90,93,94,95,100,101,104,126,154,158,161,163,168,179,183,189,],[96,96,96,96,96,134,96,96,96,96,96,96,96,96,96,96,96,96,]),'USED_VAR':([42,45,90,93,94,95,100,101,104,126,154,158,161,163,168,179,183,189,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'GUARD':([45,],[105,]),'TYPES_LIST':([81,],[120,]),'OP':([89,109,],[126,140,]),'DECLARATIONS':([92,103,125,],[130,137,151,]),'DECLARATIONS_LIST':([131,171,],[155,178,]),'EXP_LIST':([161,163,],[175,176,]),'ALTS':([173,188,],[180,191,]),'ALT':([173,188,],[181,181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',20),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',26),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',27),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',39),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',48),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',53),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',62),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',63),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',71),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',72),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',80),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',81),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',89),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',90),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',91),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',101),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',102),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',103),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',111),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',112),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',113),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',118),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',119),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',127),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',128),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',129),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',130),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',143),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',144),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',145),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',157),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',158),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',159),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',160),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',173),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',174),
  ('GUARDS -> PIPE GUARD','GUARDS',2,'p_GUARDS','funky_parser.py',182),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',187),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',193),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',199),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',200),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',201),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',219),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',220),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',221),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',222),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',223),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',238),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',239),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',247),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',248),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',249),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',250),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',251),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',252),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',253),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',274),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',275),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',283),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',284),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',289),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',290),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',298),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',299),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',300),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',308),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',309),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',310),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',311),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',312),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',313),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',328),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',329),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',337),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',338),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',348),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',353),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',354),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',362),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',363),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',371),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',372),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',381),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',382),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',383),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',384),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',385),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',386),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',387),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',388),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',389),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',390),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',391),
  ('VARSYM -> CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',392),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',397),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',398),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',406),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',407),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',408),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',409),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',410),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',415),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',419),
]
