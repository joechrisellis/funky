
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEQ LESS LET MATCH MINUS MODULE NEWTYPE OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           |\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD_LIST\n        GUARD_LIST : GUARD_LIST COMMA GUARD\n                      | GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,32,111,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,119,120,122,124,127,132,133,134,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[3,12,34,35,62,-96,-95,-66,-67,-68,35,-97,-98,-99,12,12,-101,35,35,95,95,35,-74,102,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,35,35,-73,35,95,35,95,95,95,-49,-50,-51,-52,95,95,-100,95,35,-69,35,-71,35,95,-76,35,12,-48,95,-75,35,95,95,-53,95,-55,95,-70,95,12,35,95,95,-54,-56,35,95,]),'WHERE':([3,22,23,28,29,30,42,60,66,80,81,82,88,89,90,91,92,95,121,127,131,145,153,155,157,163,171,178,179,180,181,],[4,-96,-95,-97,-98,-99,96,-72,-73,118,-39,-42,-47,-49,-50,-51,-52,-100,-41,-48,-33,-40,-53,-55,-34,-44,-43,-54,-56,-45,-46,]),'OPEN_BRACE':([4,85,96,118,152,],[6,124,124,124,167,]),'IMPORT':([6,31,],[11,11,]),'NEWTYPE':([6,31,33,],[13,13,13,]),'CLOSE_BRACE':([6,8,10,14,15,22,23,28,29,30,31,33,40,42,45,60,66,68,70,71,72,73,80,81,82,88,89,90,91,92,95,117,121,124,127,130,131,139,140,142,143,144,145,148,149,150,153,155,157,163,164,165,167,171,172,174,175,178,179,180,181,182,185,186,],[-19,32,-8,-10,-15,-96,-95,-97,-98,-99,-19,-19,-16,-31,-17,-72,-73,111,-7,-18,-20,-22,-29,-39,-42,-47,-49,-50,-51,-52,-100,-9,-41,149,-48,-32,-33,-21,-23,-24,-25,-30,-40,164,-12,-14,-53,-55,-34,-44,-11,-19,-60,-43,-13,181,-58,-54,-56,-45,-46,-60,-57,-59,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,22,23,28,29,30,31,33,34,40,42,45,60,66,68,69,70,71,72,73,80,81,82,88,89,90,91,92,95,117,121,124,127,130,131,139,140,142,143,144,145,149,150,153,155,157,163,164,165,167,171,175,178,179,180,181,182,186,],[-19,31,33,-5,-8,-10,-15,-96,-95,-97,-98,-99,-19,-19,-6,-16,-31,-17,-72,-73,33,-4,-7,-18,-20,-22,-29,-39,-42,-47,-49,-50,-51,-52,-100,-9,-41,-19,-48,-32,-33,-21,-23,-24,-25,-30,-40,-12,165,-53,-55,-34,-44,-11,-19,-60,-43,182,-54,-56,-45,-46,-60,-59,]),'OPEN_PAREN':([6,12,19,21,22,23,24,25,26,27,28,29,30,31,33,35,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,74,75,76,79,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,112,119,120,122,124,127,132,133,134,141,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[19,38,19,64,-96,-95,-66,-67,-68,38,-97,-98,-99,19,19,-101,74,38,38,93,93,38,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,38,38,-73,74,74,38,74,93,38,93,93,93,-49,-50,-51,-52,93,93,-100,93,38,-69,38,-71,38,74,93,-76,38,19,-48,93,-75,38,74,93,93,-53,93,-55,93,-70,93,19,38,93,93,-54,-56,38,93,]),'MINUS':([6,12,17,18,19,20,22,23,24,25,26,27,28,29,30,31,33,35,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,61,62,63,66,81,82,83,86,87,88,89,90,91,92,93,94,95,97,104,105,106,109,110,119,120,121,124,127,132,133,136,137,145,147,151,153,154,155,156,160,162,163,165,167,171,173,177,178,179,180,181,182,183,],[21,-101,50,-63,21,-62,-96,-95,-66,-67,-68,21,-97,-98,-99,21,21,-101,21,83,83,21,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,50,-101,21,-73,-39,50,83,83,83,-47,-49,-50,-51,-52,83,83,-100,83,-69,21,-61,-71,21,83,-76,-41,21,-48,83,-75,-64,-65,-40,83,83,-53,83,-55,83,-70,83,-44,21,21,-43,83,83,-54,-56,-45,-46,21,83,]),'OPEN_SQUARE':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,74,75,76,79,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,112,119,120,122,124,127,132,133,134,141,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[27,27,27,-96,-95,-66,-67,-68,27,-97,-98,-99,27,27,-101,75,27,27,94,94,27,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,27,27,-73,75,75,27,75,94,27,94,94,94,-49,-50,-51,-52,94,94,-100,94,27,-69,27,-71,27,75,94,-76,27,27,-48,94,-75,27,75,94,94,-53,94,-55,94,-70,94,27,27,94,94,-54,-56,27,94,]),'FLOAT':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,64,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,119,120,122,124,127,132,133,134,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[23,23,23,-96,-95,-66,-67,-68,23,-97,-98,-99,23,23,-101,23,23,23,23,23,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,23,23,108,-73,23,23,23,23,23,23,-49,-50,-51,-52,23,23,-100,23,23,-69,23,-71,23,23,-76,23,23,-48,23,-75,23,23,23,-53,23,-55,23,-70,23,23,23,23,23,-54,-56,23,23,]),'INTEGER':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,64,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,119,120,122,124,127,132,133,134,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[22,22,22,-96,-95,-66,-67,-68,22,-97,-98,-99,22,22,-101,22,22,22,22,22,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,22,22,107,-73,22,22,22,22,22,22,-49,-50,-51,-52,22,22,-100,22,22,-69,22,-71,22,22,-76,22,22,-48,22,-75,22,22,22,-53,22,-55,22,-70,22,22,22,22,22,-54,-56,22,22,]),'BOOL':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,119,120,122,124,127,132,133,134,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[28,28,28,-96,-95,-66,-67,-68,28,-97,-98,-99,28,28,-101,28,28,28,28,28,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,28,28,-73,28,28,28,28,28,28,-49,-50,-51,-52,28,28,-100,28,28,-69,28,-71,28,28,-76,28,28,-48,28,-75,28,28,28,-53,28,-55,28,-70,28,28,28,28,28,-54,-56,28,28,]),'CHAR':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,119,120,122,124,127,132,133,134,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[29,29,29,-96,-95,-66,-67,-68,29,-97,-98,-99,29,29,-101,29,29,29,29,29,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,29,29,-73,29,29,29,29,29,29,-49,-50,-51,-52,29,29,-100,29,29,-69,29,-71,29,29,-76,29,29,-48,29,-75,29,29,29,-53,29,-55,29,-70,29,29,29,29,29,-54,-56,29,29,]),'STRING':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,103,104,105,109,110,119,120,122,124,127,132,133,134,147,151,153,154,155,156,160,162,165,167,173,177,178,179,182,183,],[30,30,30,-96,-95,-66,-67,-68,30,-97,-98,-99,30,30,-101,30,30,30,30,30,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-72,30,30,-73,30,30,30,30,30,30,-49,-50,-51,-52,30,30,-100,30,30,-69,30,-71,30,30,-76,30,30,-48,30,-75,30,30,30,-53,30,-55,30,-70,30,30,30,30,30,-54,-56,30,30,]),'TYPESIG':([12,],[36,]),'CONSTRUCTOR':([12,18,20,22,23,24,25,26,28,29,30,35,60,62,66,104,109,136,137,160,],[-101,-63,63,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,-101,-73,-69,-71,-64,-65,-70,]),'EQUALS':([12,16,17,18,20,22,23,24,25,26,28,29,30,35,37,39,43,60,66,76,77,81,82,88,89,90,91,92,95,98,99,100,101,104,106,109,116,121,127,134,136,137,145,153,155,158,159,160,163,171,178,179,180,181,],[-101,41,41,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-80,79,97,-72,-73,-80,-26,-39,-42,-47,-49,-50,-51,-52,-100,-35,-37,-38,-27,-69,-61,-71,-79,-41,-48,-80,-64,-65,-40,-53,-55,-36,-28,-70,-44,-43,-54,-56,-45,-46,]),'BACKTICK':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,102,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,48,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,48,-101,-73,-39,48,-47,-49,-50,-51,-52,-100,133,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'PLUS':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,49,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,49,-101,-73,-39,49,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'TIMES':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,51,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,51,-101,-73,-39,51,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'DIVIDE':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,52,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,52,-101,-73,-39,52,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'POW':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,53,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,53,-101,-73,-39,53,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'EQUALITY':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,54,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,54,-101,-73,-39,54,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'LESS':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,55,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,55,-101,-73,-39,55,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'LEQ':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,56,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,56,-101,-73,-39,56,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'GREATER':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,57,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,57,-101,-73,-39,57,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'GEQ':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,104,106,109,121,127,136,137,145,153,155,160,163,171,178,179,180,181,],[-101,58,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,58,-101,-73,-39,58,-47,-49,-50,-51,-52,-100,-69,-61,-71,-41,-48,-64,-65,-40,-53,-55,-70,-44,-43,-54,-56,-45,-46,]),'PIPE':([12,16,17,18,20,22,23,24,25,26,28,29,30,35,37,60,66,76,77,81,82,88,89,90,91,92,95,101,104,106,109,116,121,127,131,134,136,137,145,153,155,159,160,163,171,178,179,180,181,],[-101,44,44,-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-80,-72,-73,-80,-26,-39,-42,-47,-49,-50,-51,-52,-100,-27,-69,-61,-71,-79,-41,-48,44,-80,-64,-65,-40,-53,-55,-28,-70,-44,-43,-54,-56,-45,-46,]),'TYPENAME':([13,36,74,75,79,112,141,],[39,73,73,73,73,73,73,]),'CLOSE_PAREN':([18,19,20,22,23,24,25,26,28,29,30,35,37,38,59,60,61,62,66,67,72,73,76,77,78,81,82,88,89,90,91,92,93,95,101,104,106,107,108,109,113,114,116,121,127,128,134,135,136,137,138,139,140,142,143,145,153,155,159,160,161,163,168,169,171,178,179,180,181,184,],[-63,60,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-80,60,103,-72,104,-101,-73,-82,-20,-22,-80,-26,104,-39,-42,-47,-49,-50,-51,-52,60,-100,-27,-69,-61,136,137,-71,140,142,-79,-41,-48,153,-80,160,-64,-65,-81,-21,-23,-24,-25,-40,-53,-55,-28,-70,-93,-44,-78,178,-43,-54,-56,-45,-46,-77,]),'COMMA':([18,20,22,23,24,25,26,28,29,30,35,60,61,62,65,66,67,72,73,78,81,82,88,89,90,91,92,95,98,99,100,104,106,109,113,114,121,127,128,129,135,136,137,138,139,140,142,143,145,153,155,158,160,161,163,168,169,170,171,178,179,180,181,184,],[-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,105,-101,110,-73,-82,-20,-22,105,-39,-42,-47,-49,-50,-51,-52,-100,132,-37,-38,-69,-61,-71,141,-94,-41,-48,154,156,110,-64,-65,-81,-21,-23,-24,-25,-40,-53,-55,-36,-70,-93,-44,-78,177,177,-43,-54,-56,-45,-46,-77,]),'CLOSE_SQUARE':([18,20,22,23,24,25,26,27,28,29,30,35,60,65,66,67,72,73,81,82,88,89,90,91,92,94,95,104,106,109,115,121,127,129,136,137,138,139,140,142,143,145,153,155,160,163,168,170,171,178,179,180,181,184,],[-63,-62,-96,-95,-66,-67,-68,66,-97,-98,-99,-101,-72,109,-73,-82,-20,-22,-39,-42,-47,-49,-50,-51,-52,66,-100,-69,-61,-71,143,-41,-48,155,-64,-65,-81,-21,-23,-24,-25,-40,-53,-55,-70,-44,-78,179,-43,-54,-56,-45,-46,-77,]),'ARROW':([18,20,22,23,24,25,26,28,29,30,35,60,66,72,73,76,104,106,109,116,122,136,137,140,142,143,146,160,176,],[-63,-62,-96,-95,-66,-67,-68,-97,-98,-99,-101,-72,-73,112,-22,-80,-69,-61,-71,-79,-80,-64,-65,-23,-24,-25,162,-70,183,]),'THEN':([22,23,28,29,30,60,66,81,82,88,89,90,91,92,95,121,125,127,145,153,155,163,171,178,179,180,181,],[-96,-95,-97,-98,-99,-72,-73,-39,-42,-47,-49,-50,-51,-52,-100,-41,151,-48,-40,-53,-55,-44,-43,-54,-56,-45,-46,]),'OF':([22,23,28,29,30,60,66,81,82,88,89,90,91,92,95,121,126,127,145,153,155,163,171,178,179,180,181,],[-96,-95,-97,-98,-99,-72,-73,-39,-42,-47,-49,-50,-51,-52,-100,-41,152,-48,-40,-53,-55,-44,-43,-54,-56,-45,-46,]),'ELSE':([22,23,28,29,30,60,66,81,82,88,89,90,91,92,95,121,127,145,153,155,163,166,171,178,179,180,181,],[-96,-95,-97,-98,-99,-72,-73,-39,-42,-47,-49,-50,-51,-52,-100,-41,-48,-40,-53,-55,-44,173,-43,-54,-56,-45,-46,]),'LAMBDA':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,119,120,132,133,147,151,154,156,162,173,177,183,],[84,84,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,84,84,84,84,84,84,84,-76,84,-75,84,84,84,84,84,84,84,84,]),'LET':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,119,120,132,133,147,151,154,156,162,173,177,183,],[85,85,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,85,85,85,85,85,85,85,-76,85,-75,85,85,85,85,85,85,85,85,]),'IF':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,119,120,132,133,147,151,154,156,162,173,177,183,],[86,86,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,86,86,86,86,86,86,86,-76,86,-75,86,86,86,86,86,86,86,86,]),'MATCH':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,119,120,132,133,147,151,154,156,162,173,177,183,],[87,87,-74,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,87,87,87,87,87,87,87,-76,87,-75,87,87,87,87,87,87,87,87,]),'IN':([123,149,164,],[147,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,31,],[8,68,]),'IMPORT_DECLARATION':([6,31,],[9,69,]),'TOP_DECLARATION':([6,31,33,],[10,10,70,]),'DECLARATION':([6,31,33,124,165,],[14,14,14,150,150,]),'GEN_DECLARATION':([6,31,33,124,165,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,19,31,33,124,165,],[16,59,16,16,16,16,]),'PAT':([6,19,27,31,33,38,46,63,105,110,124,165,167,182,],[17,61,67,17,17,78,101,106,67,138,17,17,176,176,]),'APAT':([6,12,19,27,31,33,37,38,46,62,63,76,84,103,105,110,122,124,134,165,167,182,],[18,37,18,18,18,18,76,18,18,37,18,76,122,134,18,18,76,18,76,18,18,18,]),'LPAT':([6,19,27,31,33,38,46,63,105,110,124,165,167,182,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'PARAM':([6,12,19,27,31,33,37,38,46,62,63,76,84,103,105,110,122,124,134,165,167,182,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'GCON':([6,12,19,27,31,33,37,38,41,44,46,62,63,76,83,84,86,87,88,93,94,97,103,105,110,119,122,124,132,134,147,151,154,156,162,165,167,173,177,182,183,],[25,25,25,25,25,25,25,25,91,91,25,25,25,25,91,25,91,91,91,91,91,91,25,25,25,91,25,25,91,25,91,91,91,91,91,25,25,91,91,25,91,]),'LITERAL':([6,12,19,27,31,33,37,38,41,44,46,62,63,76,83,84,86,87,88,93,94,97,103,105,110,119,122,124,132,134,147,151,154,156,162,165,167,173,177,182,183,],[26,26,26,26,26,26,26,26,92,92,26,26,26,26,92,26,92,92,92,92,92,92,26,26,26,92,26,26,92,26,92,92,92,92,92,26,26,92,92,26,92,]),'RHS':([16,17,],[40,45,]),'GDRHS':([16,17,131,],[42,42,157,]),'GUARDS':([16,17,131,],[43,43,43,]),'VAROP':([17,61,82,],[46,46,120,]),'VARSYM':([17,61,82,],[47,47,47,]),'PAT_LIST':([27,105,],[65,135,]),'TYPE':([36,74,75,79,112,141,],[71,114,115,117,139,161,]),'ATYPE':([36,74,75,79,112,141,],[72,72,72,72,72,72,]),'APATS':([37,76,122,134,],[77,116,146,159,]),'EXP':([41,86,87,93,94,97,147,151,154,156,162,173,177,183,],[80,125,126,128,129,131,163,166,168,168,171,180,184,186,]),'INFIX_EXP':([41,44,83,86,87,93,94,97,119,132,147,151,154,156,162,173,177,183,],[81,100,121,81,81,81,81,81,145,100,81,81,81,81,81,81,81,81,]),'LEXP':([41,44,83,86,87,93,94,97,119,132,147,151,154,156,162,173,177,183,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'FEXP':([41,44,83,86,87,93,94,97,119,132,147,151,154,156,162,173,177,183,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'AEXP':([41,44,83,86,87,88,93,94,97,119,132,147,151,154,156,162,173,177,183,],[89,89,89,89,89,127,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'USED_VAR':([41,44,83,86,87,88,93,94,97,119,132,147,151,154,156,162,173,177,183,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'GUARD_LIST':([44,],[98,]),'GUARD':([44,132,],[99,158,]),'TYPES_LIST':([74,],[113,]),'OP':([82,],[119,]),'DECLARATIONS':([85,96,118,],[123,130,144,]),'DECLARATIONS_LIST':([124,165,],[148,172,]),'EXP_LIST':([154,156,],[169,170,]),'ALTS':([167,182,],[174,185,]),'ALT':([167,182,],[175,175,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',24),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',30),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',31),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',43),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',44),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',52),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',57),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',58),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',66),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',67),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',75),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',76),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',84),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',85),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',93),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',94),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',95),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',105),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',106),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',114),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',115),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',123),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',124),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',125),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',126),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',139),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',140),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',141),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',153),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',154),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',155),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',156),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',169),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',170),
  ('GUARDS -> PIPE GUARD_LIST','GUARDS',2,'p_GUARDS','funky_parser.py',178),
  ('GUARD_LIST -> GUARD_LIST COMMA GUARD','GUARD_LIST',3,'p_GUARD_LIST','funky_parser.py',183),
  ('GUARD_LIST -> GUARD','GUARD_LIST',1,'p_GUARD_LIST','funky_parser.py',184),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',192),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',198),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',204),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',205),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',206),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',224),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',225),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',226),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',227),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',228),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',243),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',244),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',252),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',253),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',254),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',255),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',256),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',257),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',258),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',279),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',280),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',288),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',289),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',294),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',295),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',303),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',304),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',305),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',313),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',314),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',315),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',316),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',317),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',318),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',333),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',334),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',342),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',343),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',351),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',356),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',357),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',365),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',366),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',374),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',375),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',384),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',385),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',386),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',387),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',388),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',389),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',390),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',391),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',392),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',393),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',398),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',399),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',407),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',408),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',409),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',410),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',411),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',416),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',420),
]
