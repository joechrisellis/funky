
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET LIST_CONSTRUCTOR MATCH MINUS MODULE NEWCONS NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | NEWCONS TYPENAME EQUALS CONSTRUCTORS\n                           | DECLARATION\n        CONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT LIST_CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n                | GCON APAT APATS\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n                | TYPENAME\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | CONSTRUCTOR\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,35,127,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,77,79,86,89,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,137,138,140,142,145,150,151,153,159,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[3,12,37,38,-83,-108,74,-107,38,-75,-77,38,-109,-110,-111,12,12,-113,38,-76,38,109,109,38,-84,115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,38,38,38,-82,-32,38,109,38,109,109,109,-57,-58,-59,-60,109,109,-112,109,-14,38,-78,38,-80,38,109,-86,38,12,-56,-85,-30,38,-33,-34,-35,109,109,-61,109,-63,109,-79,109,12,38,109,109,-62,-64,38,109,]),'WHERE':([3,14,21,26,31,32,33,47,72,79,94,95,96,102,103,104,105,106,109,139,145,149,165,173,175,177,183,191,198,199,200,201,],[4,-83,-108,-107,-109,-110,-111,110,-81,-82,136,-47,-50,-55,-57,-58,-59,-60,-112,-49,-56,-43,-48,-61,-63,-44,-52,-51,-62,-64,-53,-54,]),'OPEN_BRACE':([4,99,110,136,172,],[6,142,142,142,187,]),'IMPORT':([6,34,],[11,11,]),'NEWTYPE':([6,34,36,],[13,13,13,]),'NEWCONS':([6,34,36,],[15,15,15,]),'SETFIX':([6,34,36,142,185,],[20,20,20,20,20,]),'CLOSE_BRACE':([6,8,10,14,16,17,21,26,31,32,33,34,36,45,47,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,79,81,83,84,85,86,94,95,96,102,103,104,105,106,109,116,133,134,135,138,139,142,145,148,149,150,151,152,158,159,161,162,164,165,168,169,170,173,175,177,181,183,184,185,187,191,192,194,195,198,199,200,201,202,205,206,],[-24,35,-8,-83,-11,-19,-108,-107,-109,-110,-111,-24,-24,-20,-41,-21,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,-82,127,-7,-22,-28,-32,-39,-47,-50,-55,-57,-58,-59,-60,-112,-14,-9,-10,-13,-86,-49,169,-56,-42,-43,-85,-30,-23,-29,-33,-34,-35,-40,-48,184,-16,-18,-61,-63,-44,-12,-52,-15,-24,-68,-51,-17,201,-66,-62,-64,-53,-54,-68,-65,-67,]),'ENDSTATEMENT':([6,7,8,9,10,14,16,17,21,26,31,32,33,34,36,37,45,47,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,79,81,82,83,84,85,86,94,95,96,102,103,104,105,106,109,116,133,134,135,138,139,142,145,148,149,150,151,152,158,159,161,162,164,165,169,170,173,175,177,181,183,184,185,187,191,195,198,199,200,201,202,206,],[-24,34,36,-5,-8,-83,-11,-19,-108,-107,-109,-110,-111,-24,-24,-6,-20,-41,-21,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,-82,36,-4,-7,-22,-28,-32,-39,-47,-50,-55,-57,-58,-59,-60,-112,-14,-9,-10,-13,-86,-49,-24,-56,-42,-43,-85,-30,-23,-29,-33,-34,-35,-40,-48,-16,185,-61,-63,-44,-12,-52,-15,-24,-68,-51,202,-62,-64,-53,-54,-68,-67,]),'OPEN_PAREN':([6,12,14,21,23,25,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,77,79,86,87,88,89,92,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,128,137,138,140,142,145,150,151,153,159,160,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[23,42,-83,-108,23,76,-107,42,-75,-77,42,-109,-110,-111,23,23,-113,87,42,-76,42,107,107,42,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,42,42,42,-82,-32,87,87,42,87,107,42,107,107,107,-57,-58,-59,-60,107,107,-112,107,87,42,-78,42,-80,42,87,107,-86,42,23,-56,-85,-30,42,-33,87,-34,-35,107,107,-61,107,-63,107,-79,107,23,42,107,107,-62,-64,42,107,]),'MINUS':([6,12,14,19,21,22,23,24,26,27,28,29,30,31,32,33,34,36,38,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,74,75,77,79,86,89,95,96,97,100,101,102,103,104,105,106,107,108,109,111,116,117,119,120,121,124,125,126,132,137,138,139,142,145,150,151,155,156,159,161,162,165,167,171,173,174,175,176,179,182,183,185,187,191,193,197,198,199,200,201,202,203,],[25,-113,-83,55,-108,-71,25,-70,-107,-76,-75,-77,25,-109,-110,-111,25,25,-113,-76,25,97,97,25,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,55,-113,25,-90,-82,-32,-90,-47,55,97,97,97,-55,-57,-58,-59,-60,97,97,-112,97,-14,55,-78,25,-69,-74,-80,25,-89,97,-86,-49,25,-56,-85,-30,-72,-73,-33,-34,-35,-48,97,97,-61,97,-63,97,-79,97,-52,25,25,-51,97,97,-62,-64,-53,-54,25,97,]),'OPEN_SQUARE':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,77,79,86,87,88,89,92,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,128,137,138,140,142,145,150,151,153,159,160,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[30,30,-83,-108,30,-107,30,-75,-77,30,-109,-110,-111,30,30,-113,88,30,-76,30,108,108,30,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,30,30,30,-82,-32,88,88,30,88,108,30,108,108,108,-57,-58,-59,-60,108,108,-112,108,88,30,-78,30,-80,30,88,108,-86,30,30,-56,-85,-30,30,-33,88,-34,-35,108,108,-61,108,-63,108,-79,108,30,30,108,108,-62,-64,30,108,]),'TYPENAME':([6,12,13,14,15,19,21,22,23,24,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,74,75,77,79,86,87,88,89,92,93,95,96,97,98,100,101,102,103,104,105,106,107,108,109,111,116,117,118,119,120,121,124,125,126,128,132,137,138,139,140,142,145,150,151,153,155,156,159,160,161,162,163,165,167,171,173,174,175,176,179,182,183,185,187,191,193,197,198,199,200,201,202,203,],[14,14,43,-83,44,66,-108,-71,14,-70,-107,14,-75,-77,14,-109,-110,-111,14,14,-113,86,14,-76,14,14,14,14,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,66,14,14,14,-82,-32,86,86,14,86,66,-47,66,14,14,14,14,14,-57,-58,-59,-60,14,14,-112,14,86,66,14,-78,14,-69,-74,-80,14,86,-89,14,-86,-49,14,14,-56,-85,-30,14,-72,-73,-33,86,-34,-35,66,-48,14,14,-61,14,-63,14,-79,14,-52,14,14,-51,14,14,-62,-64,-53,-54,14,14,]),'FLOAT':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,76,77,79,86,89,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,137,138,140,142,145,150,151,153,159,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[26,26,-83,-108,26,-107,26,-75,-77,26,-109,-110,-111,26,26,-113,26,-76,26,26,26,26,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,26,26,123,26,-82,-32,26,26,26,26,26,26,-57,-58,-59,-60,26,26,-112,26,-14,26,-78,26,-80,26,26,-86,26,26,-56,-85,-30,26,-33,-34,-35,26,26,-61,26,-63,26,-79,26,26,26,26,26,-62,-64,26,26,]),'INTEGER':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,74,75,76,77,79,86,89,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,137,138,140,142,145,150,151,153,159,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[21,21,-83,-108,21,-107,21,-75,-77,21,-109,-110,-111,21,21,-113,21,-76,21,21,21,21,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,117,-25,-26,-27,-81,21,21,122,21,-82,-32,21,21,21,21,21,21,-57,-58,-59,-60,21,21,-112,21,-14,21,-78,21,-80,21,21,-86,21,21,-56,-85,-30,21,-33,-34,-35,21,21,-61,21,-63,21,-79,21,21,21,21,21,-62,-64,21,21,]),'BOOL':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,77,79,86,89,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,137,138,140,142,145,150,151,153,159,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[31,31,-83,-108,31,-107,31,-75,-77,31,-109,-110,-111,31,31,-113,31,-76,31,31,31,31,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,31,31,31,-82,-32,31,31,31,31,31,31,-57,-58,-59,-60,31,31,-112,31,-14,31,-78,31,-80,31,31,-86,31,31,-56,-85,-30,31,-33,-34,-35,31,31,-61,31,-63,31,-79,31,31,31,31,31,-62,-64,31,31,]),'CHAR':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,77,79,86,89,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,137,138,140,142,145,150,151,153,159,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[32,32,-83,-108,32,-107,32,-75,-77,32,-109,-110,-111,32,32,-113,32,-76,32,32,32,32,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,32,32,32,-82,-32,32,32,32,32,32,32,-57,-58,-59,-60,32,32,-112,32,-14,32,-78,32,-80,32,32,-86,32,32,-56,-85,-30,32,-33,-34,-35,32,32,-61,32,-63,32,-79,32,32,32,32,32,-62,-64,32,32,]),'STRING':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,75,77,79,86,89,97,98,100,101,102,103,104,105,106,107,108,109,111,116,118,119,120,125,126,137,138,140,142,145,150,151,153,159,161,162,167,171,173,174,175,176,179,182,185,187,193,197,198,199,202,203,],[33,33,-83,-108,33,-107,33,-75,-77,33,-109,-110,-111,33,33,-113,33,-76,33,33,33,33,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-81,33,33,33,-82,-32,33,33,33,33,33,33,-57,-58,-59,-60,33,33,-112,33,-14,33,-78,33,-80,33,33,-86,33,33,-56,-85,-30,33,-33,-34,-35,33,33,-61,33,-63,33,-79,33,33,33,33,33,-62,-64,33,33,]),'TYPESIG':([12,],[39,]),'LIST_CONSTRUCTOR':([12,14,21,22,24,26,27,28,29,31,32,33,38,41,72,74,77,79,89,119,124,125,132,155,156,179,],[-113,-83,-108,-71,75,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,-113,-90,-82,-90,-78,-74,-80,-89,-72,-73,-79,]),'EQUALS':([12,14,18,19,21,22,24,26,27,28,29,31,32,33,38,40,41,43,44,48,72,77,79,89,90,95,96,102,103,104,105,106,109,112,113,114,119,121,124,125,132,139,145,153,155,156,165,173,175,178,179,183,191,198,199,200,201,],[-113,-83,46,46,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-90,-76,92,93,111,-81,-90,-82,-90,-36,-47,-50,-55,-57,-58,-59,-60,-112,-45,-46,-37,-78,-69,-74,-80,-89,-49,-56,-90,-72,-73,-48,-61,-63,-38,-79,-52,-51,-62,-64,-53,-54,]),'BACKTICK':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,115,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,53,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,53,-113,-90,-82,-90,-47,53,-55,-57,-58,-59,-60,-112,150,53,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'PLUS':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,54,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,54,-113,-90,-82,-90,-47,54,-55,-57,-58,-59,-60,-112,54,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'TIMES':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,56,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,56,-113,-90,-82,-90,-47,56,-55,-57,-58,-59,-60,-112,56,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'DIVIDE':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,57,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,57,-113,-90,-82,-90,-47,57,-55,-57,-58,-59,-60,-112,57,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'POW':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,58,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,58,-113,-90,-82,-90,-47,58,-55,-57,-58,-59,-60,-112,58,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'EQUALITY':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,59,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,59,-113,-90,-82,-90,-47,59,-55,-57,-58,-59,-60,-112,59,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'INEQUALITY':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,60,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,60,-113,-90,-82,-90,-47,60,-55,-57,-58,-59,-60,-112,60,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'LESS':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,61,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,61,-113,-90,-82,-90,-47,61,-55,-57,-58,-59,-60,-112,61,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'LEQ':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,62,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,62,-113,-90,-82,-90,-47,62,-55,-57,-58,-59,-60,-112,62,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'GREATER':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,63,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,63,-113,-90,-82,-90,-47,63,-55,-57,-58,-59,-60,-112,63,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'GEQ':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,79,89,95,96,102,103,104,105,106,109,117,119,121,124,125,132,139,145,155,156,165,173,175,179,183,191,198,199,200,201,],[-113,-83,64,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,64,-113,-90,-82,-90,-47,64,-55,-57,-58,-59,-60,-112,64,-78,-69,-74,-80,-89,-49,-56,-72,-73,-48,-61,-63,-79,-52,-51,-62,-64,-53,-54,]),'PIPE':([12,14,18,19,21,22,24,26,27,28,29,31,32,33,38,40,41,66,72,77,79,86,89,90,95,96,102,103,104,105,106,109,114,116,119,121,124,125,132,134,135,139,145,149,151,153,155,156,159,161,162,165,173,175,178,179,181,183,191,198,199,200,201,],[-113,-83,49,49,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-90,-76,-31,-81,-90,-82,-32,-90,-36,-47,-50,-55,-57,-58,-59,-60,-112,-37,-14,-78,-69,-74,-80,-89,163,-13,-49,-56,49,-30,-90,-72,-73,-33,-34,-35,-48,-61,-63,-38,-79,-12,-52,-51,-62,-64,-53,-54,]),'CLOSE_PAREN':([14,21,22,23,24,26,27,28,29,31,32,33,38,40,41,42,71,72,73,74,77,79,80,85,86,89,90,91,95,96,102,103,104,105,106,107,109,114,119,121,122,123,124,125,129,130,132,139,145,146,153,154,155,156,157,158,159,161,162,165,173,175,178,179,180,183,188,189,191,198,199,200,201,204,],[-83,-108,-71,72,-70,-107,-76,-75,-77,-109,-110,-111,-113,-90,-76,72,118,-81,119,-113,-90,-82,-92,-28,-32,-90,-36,119,-47,-50,-55,-57,-58,-59,-60,72,-112,-37,-78,-69,155,156,-74,-80,159,161,-89,-49,-56,173,-90,179,-72,-73,-91,-29,-33,-34,-35,-48,-61,-63,-38,-79,-105,-52,-88,198,-51,-62,-64,-53,-54,-87,]),'COMMA':([14,21,22,24,26,27,28,29,31,32,33,38,41,72,73,74,77,78,79,80,85,86,89,91,95,96,102,103,104,105,106,109,119,121,124,125,129,130,132,139,145,146,147,154,155,156,157,158,159,161,162,165,173,175,179,180,183,188,189,190,191,198,199,200,201,204,],[-83,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,120,-113,-90,126,-82,-92,-28,-32,-90,120,-47,-50,-55,-57,-58,-59,-60,-112,-78,-69,-74,-80,160,-106,-89,-49,-56,174,176,126,-72,-73,-91,-29,-33,-34,-35,-48,-61,-63,-79,-105,-52,-88,197,197,-51,-62,-64,-53,-54,-87,]),'CLOSE_SQUARE':([14,21,22,24,26,27,28,29,30,31,32,33,38,41,72,77,78,79,80,85,86,89,95,96,102,103,104,105,106,108,109,119,121,124,125,131,132,139,145,147,155,156,157,158,159,161,162,165,173,175,179,183,188,190,191,198,199,200,201,204,],[-83,-108,-71,-70,-107,-76,-75,-77,79,-109,-110,-111,-113,-76,-81,-90,125,-82,-92,-28,-32,-90,-47,-50,-55,-57,-58,-59,-60,79,-112,-78,-69,-74,-80,162,-89,-49,-56,175,-72,-73,-91,-29,-33,-34,-35,-48,-61,-63,-79,-52,-88,199,-51,-62,-64,-53,-54,-87,]),'ARROW':([14,21,22,24,26,27,28,29,31,32,33,38,41,72,77,79,85,86,89,119,121,124,125,132,140,155,156,159,161,162,166,179,196,],[-83,-108,-71,-70,-107,-76,-75,-77,-109,-110,-111,-113,-76,-81,-90,-82,128,-32,-90,-78,-69,-74,-80,-89,-90,-72,-73,-33,-34,-35,182,-79,203,]),'THEN':([14,21,26,31,32,33,72,79,95,96,102,103,104,105,106,109,139,143,145,165,173,175,183,191,198,199,200,201,],[-83,-108,-107,-109,-110,-111,-81,-82,-47,-50,-55,-57,-58,-59,-60,-112,-49,171,-56,-48,-61,-63,-52,-51,-62,-64,-53,-54,]),'OF':([14,21,26,31,32,33,72,79,95,96,102,103,104,105,106,109,139,144,145,165,173,175,183,191,198,199,200,201,],[-83,-108,-107,-109,-110,-111,-81,-82,-47,-50,-55,-57,-58,-59,-60,-112,-49,172,-56,-48,-61,-63,-52,-51,-62,-64,-53,-54,]),'ELSE':([14,21,26,31,32,33,72,79,95,96,102,103,104,105,106,109,139,145,165,173,175,183,186,191,198,199,200,201,],[-83,-108,-107,-109,-110,-111,-81,-82,-47,-50,-55,-57,-58,-59,-60,-112,-49,-56,-48,-61,-63,-52,193,-51,-62,-64,-53,-54,]),'LEFTASSOC':([20,],[68,]),'RIGHTASSOC':([20,],[69,]),'NONASSOC':([20,],[70,]),'LAMBDA':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,86,97,100,101,107,108,111,116,137,138,150,151,159,161,162,167,171,174,176,182,193,197,203,],[98,98,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-32,98,98,98,98,98,98,-14,98,-86,-85,-30,-33,-34,-35,98,98,98,98,98,98,98,98,]),'LET':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,86,97,100,101,107,108,111,116,137,138,150,151,159,161,162,167,171,174,176,182,193,197,203,],[99,99,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-32,99,99,99,99,99,99,-14,99,-86,-85,-30,-33,-34,-35,99,99,99,99,99,99,99,99,]),'IF':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,86,97,100,101,107,108,111,116,137,138,150,151,159,161,162,167,171,174,176,182,193,197,203,],[100,100,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-32,100,100,100,100,100,100,-14,100,-86,-85,-30,-33,-34,-35,100,100,100,100,100,100,100,100,]),'MATCH':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,86,97,100,101,107,108,111,116,137,138,150,151,159,161,162,167,171,174,176,182,193,197,203,],[101,101,-84,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-32,101,101,101,101,101,101,-14,101,-86,-85,-30,-33,-34,-35,101,101,101,101,101,101,101,101,]),'IN':([141,169,184,],[167,-16,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,34,],[8,81,]),'IMPORT_DECLARATION':([6,34,],[9,82,]),'TOP_DECLARATION':([6,34,36,],[10,10,83,]),'DECLARATION':([6,34,36,142,185,],[16,16,16,170,170,]),'GEN_DECLARATION':([6,34,36,142,185,],[17,17,17,17,17,]),'FUNCTION_LHS':([6,23,34,36,142,185,],[18,71,18,18,18,18,]),'PAT':([6,23,30,34,36,42,51,75,120,126,142,185,187,202,],[19,73,80,19,19,91,114,121,80,157,19,19,196,196,]),'APAT':([6,12,23,27,30,34,36,40,42,51,74,75,77,89,98,118,120,126,140,142,153,185,187,202,],[22,40,22,77,22,22,22,89,22,22,40,22,89,89,140,153,22,22,89,22,89,22,22,22,]),'LPAT':([6,23,30,34,36,42,51,75,120,126,142,185,187,202,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'GCON':([6,12,23,27,30,34,36,40,42,46,49,51,74,75,77,89,97,98,100,101,102,107,108,111,118,120,126,137,140,142,153,167,171,174,176,182,185,187,193,197,202,203,],[27,41,27,41,27,27,27,41,27,105,105,27,41,27,41,41,105,41,105,105,105,105,105,105,41,27,27,105,41,27,41,105,105,105,105,105,27,27,105,105,27,105,]),'PARAM':([6,12,23,27,30,34,36,40,42,51,74,75,77,89,98,118,120,126,140,142,153,185,187,202,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'LITERAL':([6,12,23,27,30,34,36,40,42,46,49,51,74,75,77,89,97,98,100,101,102,107,108,111,118,120,126,137,140,142,153,167,171,174,176,182,185,187,193,197,202,203,],[29,29,29,29,29,29,29,29,29,106,106,29,29,29,29,29,106,29,106,106,106,106,106,106,29,29,29,106,29,29,29,106,106,106,106,106,29,29,106,106,29,106,]),'RHS':([18,19,],[45,50,]),'GDRHS':([18,19,149,],[47,47,177,]),'GUARDS':([18,19,149,],[48,48,48,]),'VAROP':([19,73,96,117,],[51,51,138,138,]),'VARSYM':([19,73,96,117,],[52,52,52,52,]),'CONSTRUCTOR':([19,73,93,96,117,163,],[65,65,135,65,65,181,]),'ASSOCIATIVITY':([20,],[67,]),'PAT_LIST':([30,120,],[78,154,]),'TYPE':([39,87,88,92,128,160,],[84,130,131,133,158,180,]),'ATYPE':([39,87,88,92,116,128,160,],[85,85,85,85,151,85,85,]),'APATS':([40,77,89,140,153,],[90,124,132,166,178,]),'EXP':([46,100,101,107,108,111,167,171,174,176,182,193,197,203,],[94,143,144,146,147,149,183,186,188,188,191,200,204,206,]),'INFIX_EXP':([46,49,97,100,101,107,108,111,137,167,171,174,176,182,193,197,203,],[95,113,139,95,95,95,95,95,165,95,95,95,95,95,95,95,95,]),'LEXP':([46,49,97,100,101,107,108,111,137,167,171,174,176,182,193,197,203,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'FEXP':([46,49,97,100,101,107,108,111,137,167,171,174,176,182,193,197,203,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'AEXP':([46,49,97,100,101,102,107,108,111,137,167,171,174,176,182,193,197,203,],[103,103,103,103,103,145,103,103,103,103,103,103,103,103,103,103,103,103,]),'USED_VAR':([46,49,97,100,101,102,107,108,111,137,167,171,174,176,182,193,197,203,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'GUARD':([49,],[112,]),'ATYPES':([66,],[116,]),'TYPES_LIST':([87,],[129,]),'CONSTRUCTORS':([93,],[134,]),'OP':([96,117,],[137,152,]),'DECLARATIONS':([99,110,136,],[141,148,164,]),'DECLARATIONS_LIST':([142,185,],[168,192,]),'EXP_LIST':([174,176,],[189,190,]),'ALTS':([187,202,],[194,205,]),'ALT':([187,202,],[195,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',20),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',26),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',27),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',39),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',48),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',53),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',62),
  ('TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',63),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',64),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',74),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',75),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',83),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',87),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',88),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',96),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',97),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',105),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',106),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',107),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',117),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',118),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',119),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',127),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',128),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',129),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',134),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',135),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',143),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',144),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',152),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',153),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',154),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',155),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',168),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',169),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',170),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',182),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',183),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',184),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',185),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',198),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',199),
  ('GUARDS -> PIPE GUARD','GUARDS',2,'p_GUARDS','funky_parser.py',207),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',212),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',218),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',224),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',225),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',226),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',244),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',245),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',246),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',247),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',248),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',263),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',264),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',272),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',273),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',274),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',275),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',276),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',277),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',278),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',299),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',300),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',308),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',309),
  ('PAT -> LPAT LIST_CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',314),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',315),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',323),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',324),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',325),
  ('LPAT -> GCON APAT APATS','LPAT',3,'p_LPAT','funky_parser.py',326),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',336),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',337),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',338),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',339),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',340),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',341),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',356),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',357),
  ('GCON -> TYPENAME','GCON',1,'p_GCON','funky_parser.py',358),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',368),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',369),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',379),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',384),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',385),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',393),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',394),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',402),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',403),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',412),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',413),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',414),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',415),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',416),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',417),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',418),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',419),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',420),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',421),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',422),
  ('VARSYM -> CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',423),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',428),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',429),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',437),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',438),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',439),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',440),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',441),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',446),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',450),
]
