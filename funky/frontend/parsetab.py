
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEQ LESS LET MATCH MINUS MODULE NEWTYPE OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           |\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,32,110,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,118,119,121,123,126,131,132,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[3,12,34,35,62,-94,-93,-64,-65,-66,35,-95,-96,-97,12,12,-99,35,35,95,95,35,-72,101,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,35,35,-71,35,95,35,95,95,95,-47,-48,-49,-50,95,95,-98,95,35,-67,35,-69,35,95,-74,35,12,-46,-73,35,95,95,-51,95,-53,95,-68,95,12,35,95,95,-52,-54,35,95,]),'WHERE':([3,22,23,28,29,30,42,60,66,80,81,82,88,89,90,91,92,95,120,126,130,143,151,153,155,160,168,175,176,177,178,],[4,-94,-93,-95,-96,-97,96,-70,-71,117,-37,-40,-45,-47,-48,-49,-50,-98,-39,-46,-33,-38,-51,-53,-34,-42,-41,-52,-54,-43,-44,]),'OPEN_BRACE':([4,85,96,117,150,],[6,123,123,123,164,]),'IMPORT':([6,31,],[11,11,]),'NEWTYPE':([6,31,33,],[13,13,13,]),'CLOSE_BRACE':([6,8,10,14,15,22,23,28,29,30,31,33,40,42,45,60,66,68,70,71,72,73,80,81,82,88,89,90,91,92,95,116,120,123,126,129,130,137,138,140,141,142,143,146,147,148,151,153,155,160,161,162,164,168,169,171,172,175,176,177,178,179,182,183,],[-19,32,-8,-10,-15,-94,-93,-95,-96,-97,-19,-19,-16,-31,-17,-70,-71,110,-7,-18,-20,-22,-29,-37,-40,-45,-47,-48,-49,-50,-98,-9,-39,147,-46,-32,-33,-21,-23,-24,-25,-30,-38,161,-12,-14,-51,-53,-34,-42,-11,-19,-58,-41,-13,178,-56,-52,-54,-43,-44,-58,-55,-57,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,22,23,28,29,30,31,33,34,40,42,45,60,66,68,69,70,71,72,73,80,81,82,88,89,90,91,92,95,116,120,123,126,129,130,137,138,140,141,142,143,147,148,151,153,155,160,161,162,164,168,172,175,176,177,178,179,183,],[-19,31,33,-5,-8,-10,-15,-94,-93,-95,-96,-97,-19,-19,-6,-16,-31,-17,-70,-71,33,-4,-7,-18,-20,-22,-29,-37,-40,-45,-47,-48,-49,-50,-98,-9,-39,-19,-46,-32,-33,-21,-23,-24,-25,-30,-38,-12,162,-51,-53,-34,-42,-11,-19,-58,-41,179,-52,-54,-43,-44,-58,-57,]),'OPEN_PAREN':([6,12,19,21,22,23,24,25,26,27,28,29,30,31,33,35,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,74,75,76,79,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,111,118,119,121,123,126,131,132,139,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[19,38,19,64,-94,-93,-64,-65,-66,38,-95,-96,-97,19,19,-99,74,38,38,93,93,38,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,38,38,-71,74,74,38,74,93,38,93,93,93,-47,-48,-49,-50,93,93,-98,93,38,-67,38,-69,38,74,93,-74,38,19,-46,-73,38,74,93,93,-51,93,-53,93,-68,93,19,38,93,93,-52,-54,38,93,]),'MINUS':([6,12,17,18,19,20,22,23,24,25,26,27,28,29,30,31,33,35,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,61,62,63,66,81,82,83,86,87,88,89,90,91,92,93,94,95,97,103,104,105,108,109,118,119,120,123,126,131,134,135,143,145,149,151,152,153,154,157,159,160,162,164,168,170,174,175,176,177,178,179,180,],[21,-99,50,-61,21,-60,-94,-93,-64,-65,-66,21,-95,-96,-97,21,21,-99,21,83,83,21,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,50,-99,21,-71,-37,50,83,83,83,-45,-47,-48,-49,-50,83,83,-98,83,-67,21,-59,-69,21,83,-74,-39,21,-46,-73,-62,-63,-38,83,83,-51,83,-53,83,-68,83,-42,21,21,-41,83,83,-52,-54,-43,-44,21,83,]),'OPEN_SQUARE':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,74,75,76,79,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,111,118,119,121,123,126,131,132,139,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[27,27,27,-94,-93,-64,-65,-66,27,-95,-96,-97,27,27,-99,75,27,27,94,94,27,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,27,27,-71,75,75,27,75,94,27,94,94,94,-47,-48,-49,-50,94,94,-98,94,27,-67,27,-69,27,75,94,-74,27,27,-46,-73,27,75,94,94,-51,94,-53,94,-68,94,27,27,94,94,-52,-54,27,94,]),'FLOAT':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,64,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,118,119,121,123,126,131,132,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[23,23,23,-94,-93,-64,-65,-66,23,-95,-96,-97,23,23,-99,23,23,23,23,23,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,23,23,107,-71,23,23,23,23,23,23,-47,-48,-49,-50,23,23,-98,23,23,-67,23,-69,23,23,-74,23,23,-46,-73,23,23,23,-51,23,-53,23,-68,23,23,23,23,23,-52,-54,23,23,]),'INTEGER':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,64,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,118,119,121,123,126,131,132,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[22,22,22,-94,-93,-64,-65,-66,22,-95,-96,-97,22,22,-99,22,22,22,22,22,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,22,22,106,-71,22,22,22,22,22,22,-47,-48,-49,-50,22,22,-98,22,22,-67,22,-69,22,22,-74,22,22,-46,-73,22,22,22,-51,22,-53,22,-68,22,22,22,22,22,-52,-54,22,22,]),'BOOL':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,118,119,121,123,126,131,132,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[28,28,28,-94,-93,-64,-65,-66,28,-95,-96,-97,28,28,-99,28,28,28,28,28,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,28,28,-71,28,28,28,28,28,28,-47,-48,-49,-50,28,28,-98,28,28,-67,28,-69,28,28,-74,28,28,-46,-73,28,28,28,-51,28,-53,28,-68,28,28,28,28,28,-52,-54,28,28,]),'CHAR':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,118,119,121,123,126,131,132,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[29,29,29,-94,-93,-64,-65,-66,29,-95,-96,-97,29,29,-99,29,29,29,29,29,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,29,29,-71,29,29,29,29,29,29,-47,-48,-49,-50,29,29,-98,29,29,-67,29,-69,29,29,-74,29,29,-46,-73,29,29,29,-51,29,-53,29,-68,29,29,29,29,29,-52,-54,29,29,]),'STRING':([6,12,19,22,23,24,25,26,27,28,29,30,31,33,35,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,60,62,63,66,76,83,84,86,87,88,89,90,91,92,93,94,95,97,102,103,104,108,109,118,119,121,123,126,131,132,145,149,151,152,153,154,157,159,162,164,170,174,175,176,179,180,],[30,30,30,-94,-93,-64,-65,-66,30,-95,-96,-97,30,30,-99,30,30,30,30,30,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-70,30,30,-71,30,30,30,30,30,30,-47,-48,-49,-50,30,30,-98,30,30,-67,30,-69,30,30,-74,30,30,-46,-73,30,30,30,-51,30,-53,30,-68,30,30,30,30,30,-52,-54,30,30,]),'TYPESIG':([12,],[36,]),'CONSTRUCTOR':([12,18,20,22,23,24,25,26,28,29,30,35,60,62,66,103,108,134,135,157,],[-99,-61,63,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,-99,-71,-67,-69,-62,-63,-68,]),'EQUALS':([12,16,17,18,20,22,23,24,25,26,28,29,30,35,37,39,43,60,66,76,77,81,82,88,89,90,91,92,95,98,99,100,103,105,108,115,120,126,132,134,135,143,151,153,156,157,160,168,175,176,177,178,],[-99,41,41,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-78,79,97,-70,-71,-78,-26,-37,-40,-45,-47,-48,-49,-50,-98,-35,-36,-27,-67,-59,-69,-77,-39,-46,-78,-62,-63,-38,-51,-53,-28,-68,-42,-41,-52,-54,-43,-44,]),'BACKTICK':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,101,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,48,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,48,-99,-71,-37,48,-45,-47,-48,-49,-50,-98,131,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'PLUS':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,49,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,49,-99,-71,-37,49,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'TIMES':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,51,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,51,-99,-71,-37,51,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'DIVIDE':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,52,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,52,-99,-71,-37,52,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'POW':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,53,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,53,-99,-71,-37,53,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'EQUALITY':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,54,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,54,-99,-71,-37,54,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'LESS':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,55,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,55,-99,-71,-37,55,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'LEQ':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,56,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,56,-99,-71,-37,56,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'GREATER':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,57,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,57,-99,-71,-37,57,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'GEQ':([12,17,18,20,22,23,24,25,26,28,29,30,35,60,61,62,66,81,82,88,89,90,91,92,95,103,105,108,120,126,134,135,143,151,153,157,160,168,175,176,177,178,],[-99,58,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,58,-99,-71,-37,58,-45,-47,-48,-49,-50,-98,-67,-59,-69,-39,-46,-62,-63,-38,-51,-53,-68,-42,-41,-52,-54,-43,-44,]),'PIPE':([12,16,17,18,20,22,23,24,25,26,28,29,30,35,37,60,66,76,77,81,82,88,89,90,91,92,95,100,103,105,108,115,120,126,130,132,134,135,143,151,153,156,157,160,168,175,176,177,178,],[-99,44,44,-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-78,-70,-71,-78,-26,-37,-40,-45,-47,-48,-49,-50,-98,-27,-67,-59,-69,-77,-39,-46,44,-78,-62,-63,-38,-51,-53,-28,-68,-42,-41,-52,-54,-43,-44,]),'TYPENAME':([13,36,74,75,79,111,139,],[39,73,73,73,73,73,73,]),'CLOSE_PAREN':([18,19,20,22,23,24,25,26,28,29,30,35,37,38,59,60,61,62,66,67,72,73,76,77,78,81,82,88,89,90,91,92,93,95,100,103,105,106,107,108,112,113,115,120,126,127,132,133,134,135,136,137,138,140,141,143,151,153,156,157,158,160,165,166,168,175,176,177,178,181,],[-61,60,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-78,60,102,-70,103,-99,-71,-80,-20,-22,-78,-26,103,-37,-40,-45,-47,-48,-49,-50,60,-98,-27,-67,-59,134,135,-69,138,140,-77,-39,-46,151,-78,157,-62,-63,-79,-21,-23,-24,-25,-38,-51,-53,-28,-68,-91,-42,-76,175,-41,-52,-54,-43,-44,-75,]),'COMMA':([18,20,22,23,24,25,26,28,29,30,35,60,61,62,65,66,67,72,73,78,81,82,88,89,90,91,92,95,103,105,108,112,113,120,126,127,128,133,134,135,136,137,138,140,141,143,151,153,157,158,160,165,166,167,168,175,176,177,178,181,],[-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,104,-99,109,-71,-80,-20,-22,104,-37,-40,-45,-47,-48,-49,-50,-98,-67,-59,-69,139,-92,-39,-46,152,154,109,-62,-63,-79,-21,-23,-24,-25,-38,-51,-53,-68,-91,-42,-76,174,174,-41,-52,-54,-43,-44,-75,]),'CLOSE_SQUARE':([18,20,22,23,24,25,26,27,28,29,30,35,60,65,66,67,72,73,81,82,88,89,90,91,92,94,95,103,105,108,114,120,126,128,134,135,136,137,138,140,141,143,151,153,157,160,165,167,168,175,176,177,178,181,],[-61,-60,-94,-93,-64,-65,-66,66,-95,-96,-97,-99,-70,108,-71,-80,-20,-22,-37,-40,-45,-47,-48,-49,-50,66,-98,-67,-59,-69,141,-39,-46,153,-62,-63,-79,-21,-23,-24,-25,-38,-51,-53,-68,-42,-76,176,-41,-52,-54,-43,-44,-75,]),'ARROW':([18,20,22,23,24,25,26,28,29,30,35,60,66,72,73,76,103,105,108,115,121,134,135,138,140,141,144,157,173,],[-61,-60,-94,-93,-64,-65,-66,-95,-96,-97,-99,-70,-71,111,-22,-78,-67,-59,-69,-77,-78,-62,-63,-23,-24,-25,159,-68,180,]),'THEN':([22,23,28,29,30,60,66,81,82,88,89,90,91,92,95,120,124,126,143,151,153,160,168,175,176,177,178,],[-94,-93,-95,-96,-97,-70,-71,-37,-40,-45,-47,-48,-49,-50,-98,-39,149,-46,-38,-51,-53,-42,-41,-52,-54,-43,-44,]),'OF':([22,23,28,29,30,60,66,81,82,88,89,90,91,92,95,120,125,126,143,151,153,160,168,175,176,177,178,],[-94,-93,-95,-96,-97,-70,-71,-37,-40,-45,-47,-48,-49,-50,-98,-39,150,-46,-38,-51,-53,-42,-41,-52,-54,-43,-44,]),'ELSE':([22,23,28,29,30,60,66,81,82,88,89,90,91,92,95,120,126,143,151,153,160,163,168,175,176,177,178,],[-94,-93,-95,-96,-97,-70,-71,-37,-40,-45,-47,-48,-49,-50,-98,-39,-46,-38,-51,-53,-42,170,-41,-52,-54,-43,-44,]),'LAMBDA':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,118,119,131,145,149,152,154,159,170,174,180,],[84,84,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,84,84,84,84,84,84,84,-74,-73,84,84,84,84,84,84,84,84,]),'LET':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,118,119,131,145,149,152,154,159,170,174,180,],[85,85,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,85,85,85,85,85,85,85,-74,-73,85,85,85,85,85,85,85,85,]),'IF':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,118,119,131,145,149,152,154,159,170,174,180,],[86,86,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,86,86,86,86,86,86,86,-74,-73,86,86,86,86,86,86,86,86,]),'MATCH':([41,44,47,49,50,51,52,53,54,55,56,57,58,83,86,87,93,94,97,118,119,131,145,149,152,154,159,170,174,180,],[87,87,-72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,87,87,87,87,87,87,87,-74,-73,87,87,87,87,87,87,87,87,]),'IN':([122,147,161,],[145,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,31,],[8,68,]),'IMPORT_DECLARATION':([6,31,],[9,69,]),'TOP_DECLARATION':([6,31,33,],[10,10,70,]),'DECLARATION':([6,31,33,123,162,],[14,14,14,148,148,]),'GEN_DECLARATION':([6,31,33,123,162,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,19,31,33,123,162,],[16,59,16,16,16,16,]),'PAT':([6,19,27,31,33,38,46,63,104,109,123,162,164,179,],[17,61,67,17,17,78,100,105,67,136,17,17,173,173,]),'APAT':([6,12,19,27,31,33,37,38,46,62,63,76,84,102,104,109,121,123,132,162,164,179,],[18,37,18,18,18,18,76,18,18,37,18,76,121,132,18,18,76,18,76,18,18,18,]),'LPAT':([6,19,27,31,33,38,46,63,104,109,123,162,164,179,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'PARAM':([6,12,19,27,31,33,37,38,46,62,63,76,84,102,104,109,121,123,132,162,164,179,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'GCON':([6,12,19,27,31,33,37,38,41,44,46,62,63,76,83,84,86,87,88,93,94,97,102,104,109,118,121,123,132,145,149,152,154,159,162,164,170,174,179,180,],[25,25,25,25,25,25,25,25,91,91,25,25,25,25,91,25,91,91,91,91,91,91,25,25,25,91,25,25,25,91,91,91,91,91,25,25,91,91,25,91,]),'LITERAL':([6,12,19,27,31,33,37,38,41,44,46,62,63,76,83,84,86,87,88,93,94,97,102,104,109,118,121,123,132,145,149,152,154,159,162,164,170,174,179,180,],[26,26,26,26,26,26,26,26,92,92,26,26,26,26,92,26,92,92,92,92,92,92,26,26,26,92,26,26,26,92,92,92,92,92,26,26,92,92,26,92,]),'RHS':([16,17,],[40,45,]),'GDRHS':([16,17,130,],[42,42,155,]),'GUARDS':([16,17,130,],[43,43,43,]),'VAROP':([17,61,82,],[46,46,119,]),'VARSYM':([17,61,82,],[47,47,47,]),'PAT_LIST':([27,104,],[65,133,]),'TYPE':([36,74,75,79,111,139,],[71,113,114,116,137,158,]),'ATYPE':([36,74,75,79,111,139,],[72,72,72,72,72,72,]),'APATS':([37,76,121,132,],[77,115,144,156,]),'EXP':([41,86,87,93,94,97,145,149,152,154,159,170,174,180,],[80,124,125,127,128,130,160,163,165,165,168,177,181,183,]),'INFIX_EXP':([41,44,83,86,87,93,94,97,118,145,149,152,154,159,170,174,180,],[81,99,120,81,81,81,81,81,143,81,81,81,81,81,81,81,81,]),'LEXP':([41,44,83,86,87,93,94,97,118,145,149,152,154,159,170,174,180,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'FEXP':([41,44,83,86,87,93,94,97,118,145,149,152,154,159,170,174,180,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'AEXP':([41,44,83,86,87,88,93,94,97,118,145,149,152,154,159,170,174,180,],[89,89,89,89,89,126,89,89,89,89,89,89,89,89,89,89,89,89,]),'USED_VAR':([41,44,83,86,87,88,93,94,97,118,145,149,152,154,159,170,174,180,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'GUARD':([44,],[98,]),'TYPES_LIST':([74,],[112,]),'OP':([82,],[118,]),'DECLARATIONS':([85,96,117,],[122,129,142,]),'DECLARATIONS_LIST':([123,162,],[146,169,]),'EXP_LIST':([152,154,],[166,167,]),'ALTS':([164,179,],[171,182,]),'ALT':([164,179,],[172,172,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',16),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',22),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',23),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',35),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',36),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',44),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',49),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',50),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',58),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',59),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',67),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',68),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',76),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',77),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',85),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',86),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',87),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',97),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',98),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',106),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',107),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',115),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',116),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',117),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',118),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',131),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',132),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',133),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',145),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',146),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',147),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',148),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',161),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',162),
  ('GUARDS -> PIPE GUARD','GUARDS',2,'p_GUARDS','funky_parser.py',170),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',175),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',181),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',187),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',188),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',189),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',207),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',208),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',209),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',210),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',211),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',226),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',227),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',235),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',236),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',237),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',238),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',239),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',240),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',241),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',262),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',263),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',271),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',272),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',277),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',278),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',286),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',287),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',288),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',296),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',297),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',298),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',299),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',300),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',301),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',316),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',317),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',325),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',326),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',334),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',339),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',340),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',348),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',349),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',357),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',358),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',367),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',368),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',369),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',370),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',371),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',372),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',373),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',374),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',375),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',376),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',381),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',382),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',390),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',391),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',392),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',393),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',394),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',399),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',403),
]
