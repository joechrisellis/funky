
module intlist where

    import "stdlib.fky"

    newtype IntList = Cons Integer IntList | Nil

    # basic functions
    Nil         `concatenate` ys = ys
    (Cons x xs) `concatenate` ys = Cons x (xs `concatenate` ys)

    head (Cons x _) = x
    head _          = error "No head element of empty list!"

    tail (Cons _ xs) = xs
    tail _           = error "No tail of empty list!"

    last (Cons x Nil) = x
    last (Cons _ xs)  = last xs
    last _            = error "No last element of empty list!"

    init (Cons x Nil) = Nil
    init (Cons x xs)  = Cons x (init xs)

    null Nil = True
    null _   = False

    length Nil         = 0
    length (Cons _ xs) = 1 + length xs

    # list transformations
    map f Nil         = Nil
    map f (Cons x xs) = Cons (f x) (map f xs)

    reverse (Cons x xs) = reverse xs `concatenate` (Cons x Nil)

    # list folds
    foldr f z Nil         = z 
    foldr f z (Cons x xs) = f x (foldr f z xs) 

    foldl f z Nil         = z                  
    foldl f z (Cons x xs) = foldl f (f z x) xs

    any p Nil                         = False
    any p (Cons x xs) given p x       = True
                      given otherwise = any p xs

    all p Nil                         = True
    all p (Cons x xs) given p x       = all p xs
                      given otherwise = False

    sum     = foldr (+) 0
    product = foldr (*) 1

    maximum xs = foldr (lambda a b -> a if a >= b else b) (head xs) xs
    minimum xs = foldr (lambda a b -> a if a <  b else b) (head xs) xs

    repeat x = Cons x (repeat x)

    replicate 0 x = Nil
    replicate n x = Cons x (replicate (n - 1) x)

    take 0 _           = Nil
    take n Nil         = error "Not enough elements in list."
    take n (Cons x xs) = Cons x (take (n - 1) xs)

    drop 0 xs          = xs
    drop n (Cons x xs) = drop (n - 1) xs
    drop n _           = Nil

    takewhile p Nil         = Nil
    takewhile p (Cons x xs) given p x       = Cons x (takewhile p xs)
                            given otherwise = Nil

    dropwhile p xs = drop (length (takewhile p xs)) xs

    x `elem`    ys = any ((==) x) ys
    x `notelem` ys = not (x `elem` ys)

    filter p Nil = Nil
    filter p (Cons x xs) given p x       = Cons x rest
                         given otherwise = rest
                         where rest = filter p xs

    nth 0 (Cons x xs) = x
    nth n (Cons x xs) given n > 0     = nth (n - 1) xs
                      given otherwise = error "Negative list index."
    nth _ _           = error "List index out of bounds."

    zipwith f (Cons x xs) (Cons y ys) = Cons (f x y) (zipwith f xs ys)
    zipwith _ _ _                     = Nil
