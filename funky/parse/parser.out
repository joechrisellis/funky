Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT IDENTIFIER
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> TYPE_DECLARATION
Rule 10    TOP_DECLARATION -> DECLARATION
Rule 11    TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
Rule 12    TYVARS -> TYVARS IDENTIFIER
Rule 13    TYVARS -> <empty>
Rule 14    CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR
Rule 15    CONSTRUCTORS -> CONSTRUCTOR
Rule 16    CONSTRUCTOR -> TYPENAME ATYPES
Rule 17    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 18    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 19    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 20    DECLARATIONS_LIST -> DECLARATION
Rule 21    DECLARATION -> GEN_DECLARATION
Rule 22    DECLARATION -> FUNCTION_DEFINITION
Rule 23    DECLARATION -> VARIABLE_DEFINITION
Rule 24    FUNCTION_DEFINITION -> FUNCTION_LHS RHS
Rule 25    VARIABLE_DEFINITION -> PARAM RHS
Rule 26    GEN_DECLARATION -> FIXITY_DECLARATION
Rule 27    GEN_DECLARATION -> <empty>
Rule 28    FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP
Rule 29    ASSOCIATIVITY -> LEFTASSOC
Rule 30    ASSOCIATIVITY -> RIGHTASSOC
Rule 31    ASSOCIATIVITY -> NONASSOC
Rule 32    TYPE -> ATYPE
Rule 33    TYPE -> ATYPE ARROW TYPE
Rule 34    ATYPES -> ATYPES ATYPE
Rule 35    ATYPES -> <empty>
Rule 36    ATYPE -> TYPENAME
Rule 37    ATYPE -> IDENTIFIER
Rule 38    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 39    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 40    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 41    FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION
Rule 42    INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT
Rule 43    RHS -> EQUALS EXP
Rule 44    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 45    RHS -> GDRHS
Rule 46    RHS -> GDRHS WHERE DECLARATIONS
Rule 47    GDRHS -> GIVEN EXP EQUALS EXP
Rule 48    GDRHS -> GIVEN EXP EQUALS EXP GDRHS
Rule 49    EXP -> INFIX_EXP
Rule 50    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 51    INFIX_EXP -> MINUS INFIX_EXP
Rule 52    INFIX_EXP -> LEXP
Rule 53    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 54    LEXP -> LET DECLARATIONS IN EXP
Rule 55    LEXP -> EXP IF EXP ELSE EXP
Rule 56    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 57    LEXP -> FEXP
Rule 58    FEXP -> FEXP AEXP
Rule 59    FEXP -> AEXP
Rule 60    AEXP -> USED_VAR
Rule 61    AEXP -> USED_TYPENAME
Rule 62    AEXP -> LITERAL
Rule 63    AEXP -> OPERATOR_FUNC
Rule 64    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 65    OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN
Rule 66    ALTS -> ALT ENDSTATEMENT ALTS
Rule 67    ALTS -> ALT
Rule 68    ALT -> LPAT ARROW EXP
Rule 69    ALT -> <empty>
Rule 70    LPAT -> APAT
Rule 71    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 72    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 73    LPAT -> TYPENAME APAT APATS
Rule 74    APAT -> PARAM
Rule 75    APAT -> TYPENAME
Rule 76    APAT -> LITERAL
Rule 77    APAT -> OPEN_PAREN LPAT CLOSE_PAREN
Rule 78    VAROP -> VARSYM
Rule 79    VAROP -> INFIX_FUNCTION
Rule 80    INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK
Rule 81    OP -> VAROP
Rule 82    APATS -> APAT APATS
Rule 83    APATS -> <empty>
Rule 84    VARSYM -> PLUS
Rule 85    VARSYM -> MINUS
Rule 86    VARSYM -> TIMES
Rule 87    VARSYM -> DIVIDE
Rule 88    VARSYM -> MODULO
Rule 89    VARSYM -> POW
Rule 90    VARSYM -> EQUALITY
Rule 91    VARSYM -> INEQUALITY
Rule 92    VARSYM -> LESS
Rule 93    VARSYM -> LEQ
Rule 94    VARSYM -> GREATER
Rule 95    VARSYM -> GEQ
Rule 96    VARSYM -> AND
Rule 97    VARSYM -> OR
Rule 98    LITERAL -> FLOAT
Rule 99    LITERAL -> INTEGER
Rule 100   LITERAL -> BOOL
Rule 101   LITERAL -> CHAR
Rule 102   LITERAL -> STRING
Rule 103   USED_VAR -> IDENTIFIER
Rule 104   USED_TYPENAME -> TYPENAME
Rule 105   PARAM -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 96
ARROW                : 33 53 68
BACKTICK             : 80 80
BOOL                 : 100
CHAR                 : 101
CLOSE_BRACE          : 2 3 17 18 56
CLOSE_PAREN          : 38 40 64 65 71 72 77
DIVIDE               : 87
ELSE                 : 55
ENDSTATEMENT         : 2 4 7 19 66
EQUALITY             : 90
EQUALS               : 11 43 44 47 48
FLOAT                : 72 98
GEQ                  : 95
GIVEN                : 47 48
GREATER              : 94
IDENTIFIER           : 1 6 12 37 39 80 103 105
IF                   : 55
IMPORT               : 6
IN                   : 54
INEQUALITY           : 91
INTEGER              : 28 71 99
LAMBDA               : 53
LEFTASSOC            : 29
LEQ                  : 93
LESS                 : 92
LET                  : 54
MATCH                : 56
MINUS                : 51 71 72 85
MODULE               : 1
MODULO               : 88
NEWTYPE              : 11
NONASSOC             : 31
OF                   : 56
OPEN_BRACE           : 2 3 17 18 56
OPEN_PAREN           : 38 40 64 65 71 72 77
OR                   : 97
PIPE                 : 14
PLUS                 : 84
POW                  : 89
RIGHTASSOC           : 30
SETFIX               : 28
STRING               : 102
TIMES                : 86
TYPENAME             : 11 16 36 73 75 104
WHERE                : 1 44 46
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 58 59
ALT                  : 66 67
ALTS                 : 56 66
APAT                 : 39 40 53 70 73 82
APATS                : 39 40 53 73 82
ASSOCIATIVITY        : 28
ATYPE                : 32 33 34
ATYPES               : 16 34
BODY                 : 1
CONSTRUCTOR          : 14 15
CONSTRUCTORS         : 11 14
DECLARATION          : 10 19 20
DECLARATIONS         : 44 46 54
DECLARATIONS_LIST    : 17 19
EXP                  : 43 44 47 47 48 48 53 54 55 55 55 56 64 68
FEXP                 : 57 58
FIXITY_DECLARATION   : 26
FUNCTION_DEFINITION  : 22
FUNCTION_LHS         : 24 40
GDRHS                : 45 46 48
GEN_DECLARATION      : 21
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 49 50 51
INFIX_FUNCTION       : 42 79
INFIX_FUNCTION_DEFINITION : 41
LEXP                 : 50 52
LITERAL              : 62 76
LPAT                 : 42 42 68 77
MODULE_DEFINITION    : 0
OP                   : 28 50 65
OPERATOR_FUNC        : 63
PARAM                : 25 74
RHS                  : 24 25
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 33 38
TYPE_DECLARATION     : 9
TYVARS               : 11 12
USED_TYPENAME        : 61
USED_VAR             : 60
VARIABLE_DEFINITION  : 23
VAROP                : 81
VARSYM               : 78

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . TYPE_DECLARATION
    (10) TOP_DECLARATION -> . DECLARATION
    (11) TYPE_DECLARATION -> . NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
    (21) DECLARATION -> . GEN_DECLARATION
    (22) DECLARATION -> . FUNCTION_DEFINITION
    (23) DECLARATION -> . VARIABLE_DEFINITION
    (26) GEN_DECLARATION -> . FIXITY_DECLARATION
    (27) GEN_DECLARATION -> .
    (24) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (25) VARIABLE_DEFINITION -> . PARAM RHS
    (28) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (41) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (105) PARAM -> . IDENTIFIER
    (42) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 15
    CLOSE_BRACE     reduce using rule 27 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 27 (GEN_DECLARATION -> .)
    SETFIX          shift and go to state 23
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 26
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    TYPE_DECLARATION               shift and go to state 13
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_DEFINITION            shift and go to state 18
    VARIABLE_DEFINITION            shift and go to state 19
    FIXITY_DECLARATION             shift and go to state 20
    FUNCTION_LHS                   shift and go to state 21
    PARAM                          shift and go to state 22
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    LITERAL                        shift and go to state 31

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 35


state 8

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 36
    ENDSTATEMENT    shift and go to state 37


state 9

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (8) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (6) IMPORT_DECLARATION -> IMPORT . IDENTIFIER

    IDENTIFIER      shift and go to state 38


state 12

    (39) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (105) PARAM -> IDENTIFIER .
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    EQUALS          reduce using rule 105 (PARAM -> IDENTIFIER .)
    GIVEN           reduce using rule 105 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 105 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 105 (PARAM -> IDENTIFIER .)
    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 40
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 13

    (9) TOP_DECLARATION -> TYPE_DECLARATION .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATION -> TYPE_DECLARATION .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATION -> TYPE_DECLARATION .)


state 14

    (10) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)


state 15

    (11) TYPE_DECLARATION -> NEWTYPE . TYPENAME TYVARS EQUALS CONSTRUCTORS

    TYPENAME        shift and go to state 44


state 16

    (73) LPAT -> TYPENAME . APAT APATS
    (75) APAT -> TYPENAME .
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    BACKTICK        reduce using rule 75 (APAT -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 75 (APAT -> TYPENAME .)
    EQUALS          reduce using rule 75 (APAT -> TYPENAME .)
    GIVEN           reduce using rule 75 (APAT -> TYPENAME .)
    ARROW           reduce using rule 75 (APAT -> TYPENAME .)
    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 45
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 17

    (21) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 21 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 21 (DECLARATION -> GEN_DECLARATION .)


state 18

    (22) DECLARATION -> FUNCTION_DEFINITION .

    CLOSE_BRACE     reduce using rule 22 (DECLARATION -> FUNCTION_DEFINITION .)
    ENDSTATEMENT    reduce using rule 22 (DECLARATION -> FUNCTION_DEFINITION .)


state 19

    (23) DECLARATION -> VARIABLE_DEFINITION .

    CLOSE_BRACE     reduce using rule 23 (DECLARATION -> VARIABLE_DEFINITION .)
    ENDSTATEMENT    reduce using rule 23 (DECLARATION -> VARIABLE_DEFINITION .)


state 20

    (26) GEN_DECLARATION -> FIXITY_DECLARATION .

    CLOSE_BRACE     reduce using rule 26 (GEN_DECLARATION -> FIXITY_DECLARATION .)
    ENDSTATEMENT    reduce using rule 26 (GEN_DECLARATION -> FIXITY_DECLARATION .)


state 21

    (24) FUNCTION_DEFINITION -> FUNCTION_LHS . RHS
    (43) RHS -> . EQUALS EXP
    (44) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (45) RHS -> . GDRHS
    (46) RHS -> . GDRHS WHERE DECLARATIONS
    (47) GDRHS -> . GIVEN EXP EQUALS EXP
    (48) GDRHS -> . GIVEN EXP EQUALS EXP GDRHS

    EQUALS          shift and go to state 47
    GIVEN           shift and go to state 49

    RHS                            shift and go to state 46
    GDRHS                          shift and go to state 48

state 22

    (25) VARIABLE_DEFINITION -> PARAM . RHS
    (74) APAT -> PARAM .
    (43) RHS -> . EQUALS EXP
    (44) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (45) RHS -> . GDRHS
    (46) RHS -> . GDRHS WHERE DECLARATIONS
    (47) GDRHS -> . GIVEN EXP EQUALS EXP
    (48) GDRHS -> . GIVEN EXP EQUALS EXP GDRHS

    BACKTICK        reduce using rule 74 (APAT -> PARAM .)
    EQUALS          shift and go to state 47
    GIVEN           shift and go to state 49

    RHS                            shift and go to state 50
    GDRHS                          shift and go to state 48

state 23

    (28) FIXITY_DECLARATION -> SETFIX . ASSOCIATIVITY INTEGER OP
    (29) ASSOCIATIVITY -> . LEFTASSOC
    (30) ASSOCIATIVITY -> . RIGHTASSOC
    (31) ASSOCIATIVITY -> . NONASSOC

    LEFTASSOC       shift and go to state 52
    RIGHTASSOC      shift and go to state 53
    NONASSOC        shift and go to state 54

    ASSOCIATIVITY                  shift and go to state 51

state 24

    (99) LITERAL -> INTEGER .

    BACKTICK        reduce using rule 99 (LITERAL -> INTEGER .)
    TYPENAME        reduce using rule 99 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 99 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 99 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 99 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 99 (LITERAL -> INTEGER .)
    BOOL            reduce using rule 99 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 99 (LITERAL -> INTEGER .)
    STRING          reduce using rule 99 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 99 (LITERAL -> INTEGER .)
    GIVEN           reduce using rule 99 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 99 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 99 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 99 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 99 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 99 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 99 (LITERAL -> INTEGER .)
    MODULO          reduce using rule 99 (LITERAL -> INTEGER .)
    POW             reduce using rule 99 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 99 (LITERAL -> INTEGER .)
    INEQUALITY      reduce using rule 99 (LITERAL -> INTEGER .)
    LESS            reduce using rule 99 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 99 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 99 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 99 (LITERAL -> INTEGER .)
    AND             reduce using rule 99 (LITERAL -> INTEGER .)
    OR              reduce using rule 99 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 99 (LITERAL -> INTEGER .)
    IF              reduce using rule 99 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 99 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 99 (LITERAL -> INTEGER .)
    OF              reduce using rule 99 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 99 (LITERAL -> INTEGER .)


state 25

    (70) LPAT -> APAT .

    BACKTICK        reduce using rule 70 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 70 (LPAT -> APAT .)
    EQUALS          reduce using rule 70 (LPAT -> APAT .)
    GIVEN           reduce using rule 70 (LPAT -> APAT .)
    ARROW           reduce using rule 70 (LPAT -> APAT .)


state 26

    (40) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (77) APAT -> OPEN_PAREN . LPAT CLOSE_PAREN
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (41) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (42) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 26
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    FUNCTION_LHS                   shift and go to state 55
    APAT                           shift and go to state 25
    LPAT                           shift and go to state 56
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 27

    (41) FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .

    EQUALS          reduce using rule 41 (FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .)
    GIVEN           reduce using rule 41 (FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .)
    CLOSE_PAREN     reduce using rule 41 (FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .)


state 28

    (42) INFIX_FUNCTION_DEFINITION -> LPAT . INFIX_FUNCTION LPAT
    (80) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

    BACKTICK        shift and go to state 58

    INFIX_FUNCTION                 shift and go to state 57

state 29

    (71) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 59


state 30

    (98) LITERAL -> FLOAT .

    BACKTICK        reduce using rule 98 (LITERAL -> FLOAT .)
    TYPENAME        reduce using rule 98 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 98 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 98 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 98 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 98 (LITERAL -> FLOAT .)
    BOOL            reduce using rule 98 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 98 (LITERAL -> FLOAT .)
    STRING          reduce using rule 98 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 98 (LITERAL -> FLOAT .)
    GIVEN           reduce using rule 98 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 98 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 98 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 98 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 98 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 98 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 98 (LITERAL -> FLOAT .)
    MODULO          reduce using rule 98 (LITERAL -> FLOAT .)
    POW             reduce using rule 98 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 98 (LITERAL -> FLOAT .)
    INEQUALITY      reduce using rule 98 (LITERAL -> FLOAT .)
    LESS            reduce using rule 98 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 98 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 98 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 98 (LITERAL -> FLOAT .)
    AND             reduce using rule 98 (LITERAL -> FLOAT .)
    OR              reduce using rule 98 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 98 (LITERAL -> FLOAT .)
    IF              reduce using rule 98 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 98 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 98 (LITERAL -> FLOAT .)
    OF              reduce using rule 98 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 98 (LITERAL -> FLOAT .)


state 31

    (76) APAT -> LITERAL .

    BACKTICK        reduce using rule 76 (APAT -> LITERAL .)
    TYPENAME        reduce using rule 76 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 76 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 76 (APAT -> LITERAL .)
    FLOAT           reduce using rule 76 (APAT -> LITERAL .)
    INTEGER         reduce using rule 76 (APAT -> LITERAL .)
    BOOL            reduce using rule 76 (APAT -> LITERAL .)
    CHAR            reduce using rule 76 (APAT -> LITERAL .)
    STRING          reduce using rule 76 (APAT -> LITERAL .)
    EQUALS          reduce using rule 76 (APAT -> LITERAL .)
    GIVEN           reduce using rule 76 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 76 (APAT -> LITERAL .)
    ARROW           reduce using rule 76 (APAT -> LITERAL .)


state 32

    (100) LITERAL -> BOOL .

    BACKTICK        reduce using rule 100 (LITERAL -> BOOL .)
    TYPENAME        reduce using rule 100 (LITERAL -> BOOL .)
    OPEN_PAREN      reduce using rule 100 (LITERAL -> BOOL .)
    IDENTIFIER      reduce using rule 100 (LITERAL -> BOOL .)
    FLOAT           reduce using rule 100 (LITERAL -> BOOL .)
    INTEGER         reduce using rule 100 (LITERAL -> BOOL .)
    BOOL            reduce using rule 100 (LITERAL -> BOOL .)
    CHAR            reduce using rule 100 (LITERAL -> BOOL .)
    STRING          reduce using rule 100 (LITERAL -> BOOL .)
    EQUALS          reduce using rule 100 (LITERAL -> BOOL .)
    GIVEN           reduce using rule 100 (LITERAL -> BOOL .)
    CLOSE_PAREN     reduce using rule 100 (LITERAL -> BOOL .)
    ARROW           reduce using rule 100 (LITERAL -> BOOL .)
    PLUS            reduce using rule 100 (LITERAL -> BOOL .)
    MINUS           reduce using rule 100 (LITERAL -> BOOL .)
    TIMES           reduce using rule 100 (LITERAL -> BOOL .)
    DIVIDE          reduce using rule 100 (LITERAL -> BOOL .)
    MODULO          reduce using rule 100 (LITERAL -> BOOL .)
    POW             reduce using rule 100 (LITERAL -> BOOL .)
    EQUALITY        reduce using rule 100 (LITERAL -> BOOL .)
    INEQUALITY      reduce using rule 100 (LITERAL -> BOOL .)
    LESS            reduce using rule 100 (LITERAL -> BOOL .)
    LEQ             reduce using rule 100 (LITERAL -> BOOL .)
    GREATER         reduce using rule 100 (LITERAL -> BOOL .)
    GEQ             reduce using rule 100 (LITERAL -> BOOL .)
    AND             reduce using rule 100 (LITERAL -> BOOL .)
    OR              reduce using rule 100 (LITERAL -> BOOL .)
    WHERE           reduce using rule 100 (LITERAL -> BOOL .)
    IF              reduce using rule 100 (LITERAL -> BOOL .)
    CLOSE_BRACE     reduce using rule 100 (LITERAL -> BOOL .)
    ENDSTATEMENT    reduce using rule 100 (LITERAL -> BOOL .)
    OF              reduce using rule 100 (LITERAL -> BOOL .)
    ELSE            reduce using rule 100 (LITERAL -> BOOL .)


state 33

    (101) LITERAL -> CHAR .

    BACKTICK        reduce using rule 101 (LITERAL -> CHAR .)
    TYPENAME        reduce using rule 101 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 101 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 101 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 101 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 101 (LITERAL -> CHAR .)
    BOOL            reduce using rule 101 (LITERAL -> CHAR .)
    CHAR            reduce using rule 101 (LITERAL -> CHAR .)
    STRING          reduce using rule 101 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 101 (LITERAL -> CHAR .)
    GIVEN           reduce using rule 101 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 101 (LITERAL -> CHAR .)
    ARROW           reduce using rule 101 (LITERAL -> CHAR .)
    PLUS            reduce using rule 101 (LITERAL -> CHAR .)
    MINUS           reduce using rule 101 (LITERAL -> CHAR .)
    TIMES           reduce using rule 101 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 101 (LITERAL -> CHAR .)
    MODULO          reduce using rule 101 (LITERAL -> CHAR .)
    POW             reduce using rule 101 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 101 (LITERAL -> CHAR .)
    INEQUALITY      reduce using rule 101 (LITERAL -> CHAR .)
    LESS            reduce using rule 101 (LITERAL -> CHAR .)
    LEQ             reduce using rule 101 (LITERAL -> CHAR .)
    GREATER         reduce using rule 101 (LITERAL -> CHAR .)
    GEQ             reduce using rule 101 (LITERAL -> CHAR .)
    AND             reduce using rule 101 (LITERAL -> CHAR .)
    OR              reduce using rule 101 (LITERAL -> CHAR .)
    WHERE           reduce using rule 101 (LITERAL -> CHAR .)
    IF              reduce using rule 101 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 101 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 101 (LITERAL -> CHAR .)
    OF              reduce using rule 101 (LITERAL -> CHAR .)
    ELSE            reduce using rule 101 (LITERAL -> CHAR .)


state 34

    (102) LITERAL -> STRING .

    BACKTICK        reduce using rule 102 (LITERAL -> STRING .)
    TYPENAME        reduce using rule 102 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 102 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 102 (LITERAL -> STRING .)
    FLOAT           reduce using rule 102 (LITERAL -> STRING .)
    INTEGER         reduce using rule 102 (LITERAL -> STRING .)
    BOOL            reduce using rule 102 (LITERAL -> STRING .)
    CHAR            reduce using rule 102 (LITERAL -> STRING .)
    STRING          reduce using rule 102 (LITERAL -> STRING .)
    EQUALS          reduce using rule 102 (LITERAL -> STRING .)
    GIVEN           reduce using rule 102 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 102 (LITERAL -> STRING .)
    ARROW           reduce using rule 102 (LITERAL -> STRING .)
    PLUS            reduce using rule 102 (LITERAL -> STRING .)
    MINUS           reduce using rule 102 (LITERAL -> STRING .)
    TIMES           reduce using rule 102 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 102 (LITERAL -> STRING .)
    MODULO          reduce using rule 102 (LITERAL -> STRING .)
    POW             reduce using rule 102 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 102 (LITERAL -> STRING .)
    INEQUALITY      reduce using rule 102 (LITERAL -> STRING .)
    LESS            reduce using rule 102 (LITERAL -> STRING .)
    LEQ             reduce using rule 102 (LITERAL -> STRING .)
    GREATER         reduce using rule 102 (LITERAL -> STRING .)
    GEQ             reduce using rule 102 (LITERAL -> STRING .)
    AND             reduce using rule 102 (LITERAL -> STRING .)
    OR              reduce using rule 102 (LITERAL -> STRING .)
    WHERE           reduce using rule 102 (LITERAL -> STRING .)
    IF              reduce using rule 102 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 102 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 102 (LITERAL -> STRING .)
    OF              reduce using rule 102 (LITERAL -> STRING .)
    ELSE            reduce using rule 102 (LITERAL -> STRING .)


state 35

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . TYPE_DECLARATION
    (10) TOP_DECLARATION -> . DECLARATION
    (11) TYPE_DECLARATION -> . NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
    (21) DECLARATION -> . GEN_DECLARATION
    (22) DECLARATION -> . FUNCTION_DEFINITION
    (23) DECLARATION -> . VARIABLE_DEFINITION
    (26) GEN_DECLARATION -> . FIXITY_DECLARATION
    (27) GEN_DECLARATION -> .
    (24) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (25) VARIABLE_DEFINITION -> . PARAM RHS
    (28) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (41) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (105) PARAM -> . IDENTIFIER
    (42) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 15
    CLOSE_BRACE     reduce using rule 27 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 27 (GEN_DECLARATION -> .)
    SETFIX          shift and go to state 23
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 26
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    TOP_DECLARATIONS               shift and go to state 60
    IMPORT_DECLARATION             shift and go to state 61
    TOP_DECLARATION                shift and go to state 10
    TYPE_DECLARATION               shift and go to state 13
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_DEFINITION            shift and go to state 18
    VARIABLE_DEFINITION            shift and go to state 19
    FIXITY_DECLARATION             shift and go to state 20
    FUNCTION_LHS                   shift and go to state 21
    PARAM                          shift and go to state 22
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    LITERAL                        shift and go to state 31

state 36

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 37

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (9) TOP_DECLARATION -> . TYPE_DECLARATION
    (10) TOP_DECLARATION -> . DECLARATION
    (11) TYPE_DECLARATION -> . NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
    (21) DECLARATION -> . GEN_DECLARATION
    (22) DECLARATION -> . FUNCTION_DEFINITION
    (23) DECLARATION -> . VARIABLE_DEFINITION
    (26) GEN_DECLARATION -> . FIXITY_DECLARATION
    (27) GEN_DECLARATION -> .
    (24) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (25) VARIABLE_DEFINITION -> . PARAM RHS
    (28) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (41) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (105) PARAM -> . IDENTIFIER
    (42) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    NEWTYPE         shift and go to state 15
    CLOSE_BRACE     reduce using rule 27 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 27 (GEN_DECLARATION -> .)
    SETFIX          shift and go to state 23
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 26
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    TOP_DECLARATION                shift and go to state 62
    TYPE_DECLARATION               shift and go to state 13
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_DEFINITION            shift and go to state 18
    VARIABLE_DEFINITION            shift and go to state 19
    FIXITY_DECLARATION             shift and go to state 20
    FUNCTION_LHS                   shift and go to state 21
    PARAM                          shift and go to state 22
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    LITERAL                        shift and go to state 31

state 38

    (6) IMPORT_DECLARATION -> IMPORT IDENTIFIER .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATION -> IMPORT IDENTIFIER .)


state 39

    (105) PARAM -> IDENTIFIER .

    TYPENAME        reduce using rule 105 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 105 (PARAM -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 105 (PARAM -> IDENTIFIER .)
    FLOAT           reduce using rule 105 (PARAM -> IDENTIFIER .)
    INTEGER         reduce using rule 105 (PARAM -> IDENTIFIER .)
    BOOL            reduce using rule 105 (PARAM -> IDENTIFIER .)
    CHAR            reduce using rule 105 (PARAM -> IDENTIFIER .)
    STRING          reduce using rule 105 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 105 (PARAM -> IDENTIFIER .)
    GIVEN           reduce using rule 105 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 105 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 105 (PARAM -> IDENTIFIER .)
    ARROW           reduce using rule 105 (PARAM -> IDENTIFIER .)


state 40

    (39) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (82) APATS -> . APAT APATS
    (83) APATS -> .
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    EQUALS          reduce using rule 83 (APATS -> .)
    GIVEN           reduce using rule 83 (APATS -> .)
    CLOSE_PAREN     reduce using rule 83 (APATS -> .)
    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 63
    APATS                          shift and go to state 64
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 41

    (74) APAT -> PARAM .

    TYPENAME        reduce using rule 74 (APAT -> PARAM .)
    OPEN_PAREN      reduce using rule 74 (APAT -> PARAM .)
    IDENTIFIER      reduce using rule 74 (APAT -> PARAM .)
    FLOAT           reduce using rule 74 (APAT -> PARAM .)
    INTEGER         reduce using rule 74 (APAT -> PARAM .)
    BOOL            reduce using rule 74 (APAT -> PARAM .)
    CHAR            reduce using rule 74 (APAT -> PARAM .)
    STRING          reduce using rule 74 (APAT -> PARAM .)
    EQUALS          reduce using rule 74 (APAT -> PARAM .)
    GIVEN           reduce using rule 74 (APAT -> PARAM .)
    CLOSE_PAREN     reduce using rule 74 (APAT -> PARAM .)
    BACKTICK        reduce using rule 74 (APAT -> PARAM .)
    ARROW           reduce using rule 74 (APAT -> PARAM .)


state 42

    (75) APAT -> TYPENAME .

    TYPENAME        reduce using rule 75 (APAT -> TYPENAME .)
    OPEN_PAREN      reduce using rule 75 (APAT -> TYPENAME .)
    IDENTIFIER      reduce using rule 75 (APAT -> TYPENAME .)
    FLOAT           reduce using rule 75 (APAT -> TYPENAME .)
    INTEGER         reduce using rule 75 (APAT -> TYPENAME .)
    BOOL            reduce using rule 75 (APAT -> TYPENAME .)
    CHAR            reduce using rule 75 (APAT -> TYPENAME .)
    STRING          reduce using rule 75 (APAT -> TYPENAME .)
    EQUALS          reduce using rule 75 (APAT -> TYPENAME .)
    GIVEN           reduce using rule 75 (APAT -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 75 (APAT -> TYPENAME .)
    BACKTICK        reduce using rule 75 (APAT -> TYPENAME .)
    ARROW           reduce using rule 75 (APAT -> TYPENAME .)


state 43

    (77) APAT -> OPEN_PAREN . LPAT CLOSE_PAREN
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    LPAT                           shift and go to state 65
    APAT                           shift and go to state 25
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 44

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME . TYVARS EQUALS CONSTRUCTORS
    (12) TYVARS -> . TYVARS IDENTIFIER
    (13) TYVARS -> .

    EQUALS          reduce using rule 13 (TYVARS -> .)
    IDENTIFIER      reduce using rule 13 (TYVARS -> .)

    TYVARS                         shift and go to state 66

state 45

    (73) LPAT -> TYPENAME APAT . APATS
    (82) APATS -> . APAT APATS
    (83) APATS -> .
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    BACKTICK        reduce using rule 83 (APATS -> .)
    CLOSE_PAREN     reduce using rule 83 (APATS -> .)
    EQUALS          reduce using rule 83 (APATS -> .)
    GIVEN           reduce using rule 83 (APATS -> .)
    ARROW           reduce using rule 83 (APATS -> .)
    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 63
    APATS                          shift and go to state 67
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 46

    (24) FUNCTION_DEFINITION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 24 (FUNCTION_DEFINITION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 24 (FUNCTION_DEFINITION -> FUNCTION_LHS RHS .)


state 47

    (43) RHS -> EQUALS . EXP
    (44) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 68
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 48

    (45) RHS -> GDRHS .
    (46) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 45 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 45 (RHS -> GDRHS .)
    WHERE           shift and go to state 84


state 49

    (47) GDRHS -> GIVEN . EXP EQUALS EXP
    (48) GDRHS -> GIVEN . EXP EQUALS EXP GDRHS
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 85
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 50

    (25) VARIABLE_DEFINITION -> PARAM RHS .

    CLOSE_BRACE     reduce using rule 25 (VARIABLE_DEFINITION -> PARAM RHS .)
    ENDSTATEMENT    reduce using rule 25 (VARIABLE_DEFINITION -> PARAM RHS .)


state 51

    (28) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY . INTEGER OP

    INTEGER         shift and go to state 86


state 52

    (29) ASSOCIATIVITY -> LEFTASSOC .

    INTEGER         reduce using rule 29 (ASSOCIATIVITY -> LEFTASSOC .)


state 53

    (30) ASSOCIATIVITY -> RIGHTASSOC .

    INTEGER         reduce using rule 30 (ASSOCIATIVITY -> RIGHTASSOC .)


state 54

    (31) ASSOCIATIVITY -> NONASSOC .

    INTEGER         reduce using rule 31 (ASSOCIATIVITY -> NONASSOC .)


state 55

    (40) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 87


state 56

    (77) APAT -> OPEN_PAREN LPAT . CLOSE_PAREN
    (42) INFIX_FUNCTION_DEFINITION -> LPAT . INFIX_FUNCTION LPAT
    (80) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

    CLOSE_PAREN     shift and go to state 88
    BACKTICK        shift and go to state 58

    INFIX_FUNCTION                 shift and go to state 57

state 57

    (42) INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION . LPAT
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    LPAT                           shift and go to state 89
    APAT                           shift and go to state 25
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 58

    (80) INFIX_FUNCTION -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 90


state 59

    (71) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (72) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 91
    FLOAT           shift and go to state 92


state 60

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 93
    ENDSTATEMENT    shift and go to state 37


state 61

    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 4 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 62

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 63

    (82) APATS -> APAT . APATS
    (82) APATS -> . APAT APATS
    (83) APATS -> .
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    EQUALS          reduce using rule 83 (APATS -> .)
    GIVEN           reduce using rule 83 (APATS -> .)
    CLOSE_PAREN     reduce using rule 83 (APATS -> .)
    BACKTICK        reduce using rule 83 (APATS -> .)
    ARROW           reduce using rule 83 (APATS -> .)
    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 63
    APATS                          shift and go to state 94
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 64

    (39) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 39 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    GIVEN           reduce using rule 39 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 39 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 65

    (77) APAT -> OPEN_PAREN LPAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 88


state 66

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS . EQUALS CONSTRUCTORS
    (12) TYVARS -> TYVARS . IDENTIFIER

    EQUALS          shift and go to state 95
    IDENTIFIER      shift and go to state 96


state 67

    (73) LPAT -> TYPENAME APAT APATS .

    BACKTICK        reduce using rule 73 (LPAT -> TYPENAME APAT APATS .)
    CLOSE_PAREN     reduce using rule 73 (LPAT -> TYPENAME APAT APATS .)
    EQUALS          reduce using rule 73 (LPAT -> TYPENAME APAT APATS .)
    GIVEN           reduce using rule 73 (LPAT -> TYPENAME APAT APATS .)
    ARROW           reduce using rule 73 (LPAT -> TYPENAME APAT APATS .)


state 68

    (43) RHS -> EQUALS EXP .
    (44) RHS -> EQUALS EXP . WHERE DECLARATIONS
    (55) LEXP -> EXP . IF EXP ELSE EXP

    CLOSE_BRACE     reduce using rule 43 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 43 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 97
    IF              shift and go to state 98


state 69

    (49) EXP -> INFIX_EXP .

    WHERE           reduce using rule 49 (EXP -> INFIX_EXP .)
    IF              reduce using rule 49 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 49 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 49 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 49 (EXP -> INFIX_EXP .)
    OF              reduce using rule 49 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 49 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 49 (EXP -> INFIX_EXP .)
    GIVEN           reduce using rule 49 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 49 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 49 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 49 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 49 (EXP -> INFIX_EXP .)
    MODULO          reduce using rule 49 (EXP -> INFIX_EXP .)
    POW             reduce using rule 49 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 49 (EXP -> INFIX_EXP .)
    INEQUALITY      reduce using rule 49 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 49 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 49 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 49 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 49 (EXP -> INFIX_EXP .)
    AND             reduce using rule 49 (EXP -> INFIX_EXP .)
    OR              reduce using rule 49 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 49 (EXP -> INFIX_EXP .)


state 70

    (50) INFIX_EXP -> LEXP . OP INFIX_EXP
    (52) INFIX_EXP -> LEXP .
    (81) OP -> . VAROP
    (78) VAROP -> . VARSYM
    (79) VAROP -> . INFIX_FUNCTION
    (84) VARSYM -> . PLUS
    (85) VARSYM -> . MINUS
    (86) VARSYM -> . TIMES
    (87) VARSYM -> . DIVIDE
    (88) VARSYM -> . MODULO
    (89) VARSYM -> . POW
    (90) VARSYM -> . EQUALITY
    (91) VARSYM -> . INEQUALITY
    (92) VARSYM -> . LESS
    (93) VARSYM -> . LEQ
    (94) VARSYM -> . GREATER
    (95) VARSYM -> . GEQ
    (96) VARSYM -> . AND
    (97) VARSYM -> . OR
    (80) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for BACKTICK resolved as shift
    WHERE           reduce using rule 52 (INFIX_EXP -> LEXP .)
    IF              reduce using rule 52 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 52 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 52 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 52 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 52 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 52 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 52 (INFIX_EXP -> LEXP .)
    GIVEN           reduce using rule 52 (INFIX_EXP -> LEXP .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULO          shift and go to state 107
    POW             shift and go to state 108
    EQUALITY        shift and go to state 109
    INEQUALITY      shift and go to state 110
    LESS            shift and go to state 111
    LEQ             shift and go to state 112
    GREATER         shift and go to state 113
    GEQ             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    BACKTICK        shift and go to state 58

  ! PLUS            [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! MINUS           [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! MODULO          [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! INEQUALITY      [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! AND             [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! OR              [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]
  ! BACKTICK        [ reduce using rule 52 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 99
    VAROP                          shift and go to state 100
    VARSYM                         shift and go to state 101
    INFIX_FUNCTION                 shift and go to state 102

state 71

    (51) INFIX_EXP -> MINUS . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (49) EXP -> . INFIX_EXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    INFIX_EXP                      shift and go to state 117
    LEXP                           shift and go to state 70
    EXP                            shift and go to state 118
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 72

    (53) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 119
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 73

    (54) LEXP -> LET . DECLARATIONS IN EXP
    (17) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 121

    DECLARATIONS                   shift and go to state 120

state 74

    (56) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 122
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 75

    (57) LEXP -> FEXP .
    (58) FEXP -> FEXP . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    PLUS            reduce using rule 57 (LEXP -> FEXP .)
    MINUS           reduce using rule 57 (LEXP -> FEXP .)
    TIMES           reduce using rule 57 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 57 (LEXP -> FEXP .)
    MODULO          reduce using rule 57 (LEXP -> FEXP .)
    POW             reduce using rule 57 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 57 (LEXP -> FEXP .)
    INEQUALITY      reduce using rule 57 (LEXP -> FEXP .)
    LESS            reduce using rule 57 (LEXP -> FEXP .)
    LEQ             reduce using rule 57 (LEXP -> FEXP .)
    GREATER         reduce using rule 57 (LEXP -> FEXP .)
    GEQ             reduce using rule 57 (LEXP -> FEXP .)
    AND             reduce using rule 57 (LEXP -> FEXP .)
    OR              reduce using rule 57 (LEXP -> FEXP .)
    BACKTICK        reduce using rule 57 (LEXP -> FEXP .)
    WHERE           reduce using rule 57 (LEXP -> FEXP .)
    IF              reduce using rule 57 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 57 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 57 (LEXP -> FEXP .)
    EQUALS          reduce using rule 57 (LEXP -> FEXP .)
    OF              reduce using rule 57 (LEXP -> FEXP .)
    ELSE            reduce using rule 57 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 57 (LEXP -> FEXP .)
    GIVEN           reduce using rule 57 (LEXP -> FEXP .)
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    AEXP                           shift and go to state 123
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 76

    (59) FEXP -> AEXP .

    OPEN_PAREN      reduce using rule 59 (FEXP -> AEXP .)
    IDENTIFIER      reduce using rule 59 (FEXP -> AEXP .)
    TYPENAME        reduce using rule 59 (FEXP -> AEXP .)
    FLOAT           reduce using rule 59 (FEXP -> AEXP .)
    INTEGER         reduce using rule 59 (FEXP -> AEXP .)
    BOOL            reduce using rule 59 (FEXP -> AEXP .)
    CHAR            reduce using rule 59 (FEXP -> AEXP .)
    STRING          reduce using rule 59 (FEXP -> AEXP .)
    PLUS            reduce using rule 59 (FEXP -> AEXP .)
    MINUS           reduce using rule 59 (FEXP -> AEXP .)
    TIMES           reduce using rule 59 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 59 (FEXP -> AEXP .)
    MODULO          reduce using rule 59 (FEXP -> AEXP .)
    POW             reduce using rule 59 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 59 (FEXP -> AEXP .)
    INEQUALITY      reduce using rule 59 (FEXP -> AEXP .)
    LESS            reduce using rule 59 (FEXP -> AEXP .)
    LEQ             reduce using rule 59 (FEXP -> AEXP .)
    GREATER         reduce using rule 59 (FEXP -> AEXP .)
    GEQ             reduce using rule 59 (FEXP -> AEXP .)
    AND             reduce using rule 59 (FEXP -> AEXP .)
    OR              reduce using rule 59 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 59 (FEXP -> AEXP .)
    WHERE           reduce using rule 59 (FEXP -> AEXP .)
    IF              reduce using rule 59 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 59 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 59 (FEXP -> AEXP .)
    EQUALS          reduce using rule 59 (FEXP -> AEXP .)
    OF              reduce using rule 59 (FEXP -> AEXP .)
    ELSE            reduce using rule 59 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 59 (FEXP -> AEXP .)
    GIVEN           reduce using rule 59 (FEXP -> AEXP .)


state 77

    (60) AEXP -> USED_VAR .

    OPEN_PAREN      reduce using rule 60 (AEXP -> USED_VAR .)
    IDENTIFIER      reduce using rule 60 (AEXP -> USED_VAR .)
    TYPENAME        reduce using rule 60 (AEXP -> USED_VAR .)
    FLOAT           reduce using rule 60 (AEXP -> USED_VAR .)
    INTEGER         reduce using rule 60 (AEXP -> USED_VAR .)
    BOOL            reduce using rule 60 (AEXP -> USED_VAR .)
    CHAR            reduce using rule 60 (AEXP -> USED_VAR .)
    STRING          reduce using rule 60 (AEXP -> USED_VAR .)
    PLUS            reduce using rule 60 (AEXP -> USED_VAR .)
    MINUS           reduce using rule 60 (AEXP -> USED_VAR .)
    TIMES           reduce using rule 60 (AEXP -> USED_VAR .)
    DIVIDE          reduce using rule 60 (AEXP -> USED_VAR .)
    MODULO          reduce using rule 60 (AEXP -> USED_VAR .)
    POW             reduce using rule 60 (AEXP -> USED_VAR .)
    EQUALITY        reduce using rule 60 (AEXP -> USED_VAR .)
    INEQUALITY      reduce using rule 60 (AEXP -> USED_VAR .)
    LESS            reduce using rule 60 (AEXP -> USED_VAR .)
    LEQ             reduce using rule 60 (AEXP -> USED_VAR .)
    GREATER         reduce using rule 60 (AEXP -> USED_VAR .)
    GEQ             reduce using rule 60 (AEXP -> USED_VAR .)
    AND             reduce using rule 60 (AEXP -> USED_VAR .)
    OR              reduce using rule 60 (AEXP -> USED_VAR .)
    BACKTICK        reduce using rule 60 (AEXP -> USED_VAR .)
    WHERE           reduce using rule 60 (AEXP -> USED_VAR .)
    IF              reduce using rule 60 (AEXP -> USED_VAR .)
    CLOSE_BRACE     reduce using rule 60 (AEXP -> USED_VAR .)
    ENDSTATEMENT    reduce using rule 60 (AEXP -> USED_VAR .)
    EQUALS          reduce using rule 60 (AEXP -> USED_VAR .)
    OF              reduce using rule 60 (AEXP -> USED_VAR .)
    ELSE            reduce using rule 60 (AEXP -> USED_VAR .)
    CLOSE_PAREN     reduce using rule 60 (AEXP -> USED_VAR .)
    GIVEN           reduce using rule 60 (AEXP -> USED_VAR .)


state 78

    (61) AEXP -> USED_TYPENAME .

    OPEN_PAREN      reduce using rule 61 (AEXP -> USED_TYPENAME .)
    IDENTIFIER      reduce using rule 61 (AEXP -> USED_TYPENAME .)
    TYPENAME        reduce using rule 61 (AEXP -> USED_TYPENAME .)
    FLOAT           reduce using rule 61 (AEXP -> USED_TYPENAME .)
    INTEGER         reduce using rule 61 (AEXP -> USED_TYPENAME .)
    BOOL            reduce using rule 61 (AEXP -> USED_TYPENAME .)
    CHAR            reduce using rule 61 (AEXP -> USED_TYPENAME .)
    STRING          reduce using rule 61 (AEXP -> USED_TYPENAME .)
    PLUS            reduce using rule 61 (AEXP -> USED_TYPENAME .)
    MINUS           reduce using rule 61 (AEXP -> USED_TYPENAME .)
    TIMES           reduce using rule 61 (AEXP -> USED_TYPENAME .)
    DIVIDE          reduce using rule 61 (AEXP -> USED_TYPENAME .)
    MODULO          reduce using rule 61 (AEXP -> USED_TYPENAME .)
    POW             reduce using rule 61 (AEXP -> USED_TYPENAME .)
    EQUALITY        reduce using rule 61 (AEXP -> USED_TYPENAME .)
    INEQUALITY      reduce using rule 61 (AEXP -> USED_TYPENAME .)
    LESS            reduce using rule 61 (AEXP -> USED_TYPENAME .)
    LEQ             reduce using rule 61 (AEXP -> USED_TYPENAME .)
    GREATER         reduce using rule 61 (AEXP -> USED_TYPENAME .)
    GEQ             reduce using rule 61 (AEXP -> USED_TYPENAME .)
    AND             reduce using rule 61 (AEXP -> USED_TYPENAME .)
    OR              reduce using rule 61 (AEXP -> USED_TYPENAME .)
    BACKTICK        reduce using rule 61 (AEXP -> USED_TYPENAME .)
    WHERE           reduce using rule 61 (AEXP -> USED_TYPENAME .)
    IF              reduce using rule 61 (AEXP -> USED_TYPENAME .)
    CLOSE_BRACE     reduce using rule 61 (AEXP -> USED_TYPENAME .)
    ENDSTATEMENT    reduce using rule 61 (AEXP -> USED_TYPENAME .)
    EQUALS          reduce using rule 61 (AEXP -> USED_TYPENAME .)
    OF              reduce using rule 61 (AEXP -> USED_TYPENAME .)
    ELSE            reduce using rule 61 (AEXP -> USED_TYPENAME .)
    CLOSE_PAREN     reduce using rule 61 (AEXP -> USED_TYPENAME .)
    GIVEN           reduce using rule 61 (AEXP -> USED_TYPENAME .)


state 79

    (62) AEXP -> LITERAL .

    OPEN_PAREN      reduce using rule 62 (AEXP -> LITERAL .)
    IDENTIFIER      reduce using rule 62 (AEXP -> LITERAL .)
    TYPENAME        reduce using rule 62 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 62 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 62 (AEXP -> LITERAL .)
    BOOL            reduce using rule 62 (AEXP -> LITERAL .)
    CHAR            reduce using rule 62 (AEXP -> LITERAL .)
    STRING          reduce using rule 62 (AEXP -> LITERAL .)
    PLUS            reduce using rule 62 (AEXP -> LITERAL .)
    MINUS           reduce using rule 62 (AEXP -> LITERAL .)
    TIMES           reduce using rule 62 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 62 (AEXP -> LITERAL .)
    MODULO          reduce using rule 62 (AEXP -> LITERAL .)
    POW             reduce using rule 62 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 62 (AEXP -> LITERAL .)
    INEQUALITY      reduce using rule 62 (AEXP -> LITERAL .)
    LESS            reduce using rule 62 (AEXP -> LITERAL .)
    LEQ             reduce using rule 62 (AEXP -> LITERAL .)
    GREATER         reduce using rule 62 (AEXP -> LITERAL .)
    GEQ             reduce using rule 62 (AEXP -> LITERAL .)
    AND             reduce using rule 62 (AEXP -> LITERAL .)
    OR              reduce using rule 62 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 62 (AEXP -> LITERAL .)
    WHERE           reduce using rule 62 (AEXP -> LITERAL .)
    IF              reduce using rule 62 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 62 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 62 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 62 (AEXP -> LITERAL .)
    OF              reduce using rule 62 (AEXP -> LITERAL .)
    ELSE            reduce using rule 62 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 62 (AEXP -> LITERAL .)
    GIVEN           reduce using rule 62 (AEXP -> LITERAL .)


state 80

    (63) AEXP -> OPERATOR_FUNC .

    OPEN_PAREN      reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    IDENTIFIER      reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    TYPENAME        reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    FLOAT           reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    INTEGER         reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    BOOL            reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    CHAR            reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    STRING          reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    PLUS            reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    MINUS           reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    TIMES           reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    DIVIDE          reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    MODULO          reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    POW             reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    EQUALITY        reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    INEQUALITY      reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    LESS            reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    LEQ             reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    GREATER         reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    GEQ             reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    AND             reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    OR              reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    BACKTICK        reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    WHERE           reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    IF              reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    CLOSE_BRACE     reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    ENDSTATEMENT    reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    EQUALS          reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    OF              reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    ELSE            reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    CLOSE_PAREN     reduce using rule 63 (AEXP -> OPERATOR_FUNC .)
    GIVEN           reduce using rule 63 (AEXP -> OPERATOR_FUNC .)


state 81

    (64) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (65) OPERATOR_FUNC -> OPEN_PAREN . OP CLOSE_PAREN
    (49) EXP -> . INFIX_EXP
    (81) OP -> . VAROP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (78) VAROP -> . VARSYM
    (79) VAROP -> . INFIX_FUNCTION
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (84) VARSYM -> . PLUS
    (85) VARSYM -> . MINUS
    (86) VARSYM -> . TIMES
    (87) VARSYM -> . DIVIDE
    (88) VARSYM -> . MODULO
    (89) VARSYM -> . POW
    (90) VARSYM -> . EQUALITY
    (91) VARSYM -> . INEQUALITY
    (92) VARSYM -> . LESS
    (93) VARSYM -> . LEQ
    (94) VARSYM -> . GREATER
    (95) VARSYM -> . GEQ
    (96) VARSYM -> . AND
    (97) VARSYM -> . OR
    (80) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 126
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    PLUS            shift and go to state 103
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULO          shift and go to state 107
    POW             shift and go to state 108
    EQUALITY        shift and go to state 109
    INEQUALITY      shift and go to state 110
    LESS            shift and go to state 111
    LEQ             shift and go to state 112
    GREATER         shift and go to state 113
    GEQ             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    BACKTICK        shift and go to state 58
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 124
    OP                             shift and go to state 125
    INFIX_EXP                      shift and go to state 69
    VAROP                          shift and go to state 100
    LEXP                           shift and go to state 70
    VARSYM                         shift and go to state 101
    INFIX_FUNCTION                 shift and go to state 102
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 82

    (103) USED_VAR -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    TYPENAME        reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    FLOAT           reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    INTEGER         reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    BOOL            reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    CHAR            reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    STRING          reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    PLUS            reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    MINUS           reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    TIMES           reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    DIVIDE          reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    MODULO          reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    POW             reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    EQUALITY        reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    INEQUALITY      reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    LESS            reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    LEQ             reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    GREATER         reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    GEQ             reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    AND             reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    OR              reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    BACKTICK        reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    WHERE           reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    IF              reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    EQUALS          reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    OF              reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    ELSE            reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 103 (USED_VAR -> IDENTIFIER .)
    GIVEN           reduce using rule 103 (USED_VAR -> IDENTIFIER .)


state 83

    (104) USED_TYPENAME -> TYPENAME .

    OPEN_PAREN      reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    IDENTIFIER      reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    TYPENAME        reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    FLOAT           reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    INTEGER         reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    BOOL            reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    CHAR            reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    STRING          reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    PLUS            reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    MINUS           reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    TIMES           reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    DIVIDE          reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    MODULO          reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    POW             reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    EQUALITY        reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    INEQUALITY      reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    LESS            reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    LEQ             reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    GREATER         reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    GEQ             reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    AND             reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    OR              reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    BACKTICK        reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    WHERE           reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    IF              reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    EQUALS          reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    OF              reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    ELSE            reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 104 (USED_TYPENAME -> TYPENAME .)
    GIVEN           reduce using rule 104 (USED_TYPENAME -> TYPENAME .)


state 84

    (46) RHS -> GDRHS WHERE . DECLARATIONS
    (17) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 121

    DECLARATIONS                   shift and go to state 127

state 85

    (47) GDRHS -> GIVEN EXP . EQUALS EXP
    (48) GDRHS -> GIVEN EXP . EQUALS EXP GDRHS
    (55) LEXP -> EXP . IF EXP ELSE EXP

    EQUALS          shift and go to state 128
    IF              shift and go to state 98


state 86

    (28) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER . OP
    (81) OP -> . VAROP
    (78) VAROP -> . VARSYM
    (79) VAROP -> . INFIX_FUNCTION
    (84) VARSYM -> . PLUS
    (85) VARSYM -> . MINUS
    (86) VARSYM -> . TIMES
    (87) VARSYM -> . DIVIDE
    (88) VARSYM -> . MODULO
    (89) VARSYM -> . POW
    (90) VARSYM -> . EQUALITY
    (91) VARSYM -> . INEQUALITY
    (92) VARSYM -> . LESS
    (93) VARSYM -> . LEQ
    (94) VARSYM -> . GREATER
    (95) VARSYM -> . GEQ
    (96) VARSYM -> . AND
    (97) VARSYM -> . OR
    (80) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULO          shift and go to state 107
    POW             shift and go to state 108
    EQUALITY        shift and go to state 109
    INEQUALITY      shift and go to state 110
    LESS            shift and go to state 111
    LEQ             shift and go to state 112
    GREATER         shift and go to state 113
    GEQ             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    BACKTICK        shift and go to state 58

    OP                             shift and go to state 129
    VAROP                          shift and go to state 100
    VARSYM                         shift and go to state 101
    INFIX_FUNCTION                 shift and go to state 102

state 87

    (40) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 130
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 88

    (77) APAT -> OPEN_PAREN LPAT CLOSE_PAREN .

    BACKTICK        reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    TYPENAME        reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    FLOAT           reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    INTEGER         reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    BOOL            reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    CHAR            reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    STRING          reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    EQUALS          reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    GIVEN           reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    ARROW           reduce using rule 77 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)


state 89

    (42) INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .

    EQUALS          reduce using rule 42 (INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .)
    GIVEN           reduce using rule 42 (INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .)
    CLOSE_PAREN     reduce using rule 42 (INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .)


state 90

    (80) INFIX_FUNCTION -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 131


state 91

    (71) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 132


state 92

    (72) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 133


state 93

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 94

    (82) APATS -> APAT APATS .

    EQUALS          reduce using rule 82 (APATS -> APAT APATS .)
    GIVEN           reduce using rule 82 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 82 (APATS -> APAT APATS .)
    BACKTICK        reduce using rule 82 (APATS -> APAT APATS .)
    ARROW           reduce using rule 82 (APATS -> APAT APATS .)


state 95

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS . CONSTRUCTORS
    (14) CONSTRUCTORS -> . CONSTRUCTORS PIPE CONSTRUCTOR
    (15) CONSTRUCTORS -> . CONSTRUCTOR
    (16) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 134

    CONSTRUCTORS                   shift and go to state 135
    CONSTRUCTOR                    shift and go to state 136

state 96

    (12) TYVARS -> TYVARS IDENTIFIER .

    EQUALS          reduce using rule 12 (TYVARS -> TYVARS IDENTIFIER .)
    IDENTIFIER      reduce using rule 12 (TYVARS -> TYVARS IDENTIFIER .)


state 97

    (44) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (17) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 121

    DECLARATIONS                   shift and go to state 137

state 98

    (55) LEXP -> EXP IF . EXP ELSE EXP
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 138
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 99

    (50) INFIX_EXP -> LEXP OP . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (49) EXP -> . INFIX_EXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    LEXP                           shift and go to state 70
    INFIX_EXP                      shift and go to state 139
    EXP                            shift and go to state 118
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 100

    (81) OP -> VAROP .

    MINUS           reduce using rule 81 (OP -> VAROP .)
    LAMBDA          reduce using rule 81 (OP -> VAROP .)
    LET             reduce using rule 81 (OP -> VAROP .)
    MATCH           reduce using rule 81 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 81 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 81 (OP -> VAROP .)
    TYPENAME        reduce using rule 81 (OP -> VAROP .)
    FLOAT           reduce using rule 81 (OP -> VAROP .)
    INTEGER         reduce using rule 81 (OP -> VAROP .)
    BOOL            reduce using rule 81 (OP -> VAROP .)
    CHAR            reduce using rule 81 (OP -> VAROP .)
    STRING          reduce using rule 81 (OP -> VAROP .)
    CLOSE_PAREN     reduce using rule 81 (OP -> VAROP .)
    CLOSE_BRACE     reduce using rule 81 (OP -> VAROP .)
    ENDSTATEMENT    reduce using rule 81 (OP -> VAROP .)


state 101

    (78) VAROP -> VARSYM .

    MINUS           reduce using rule 78 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 78 (VAROP -> VARSYM .)
    LET             reduce using rule 78 (VAROP -> VARSYM .)
    MATCH           reduce using rule 78 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 78 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 78 (VAROP -> VARSYM .)
    TYPENAME        reduce using rule 78 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 78 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 78 (VAROP -> VARSYM .)
    BOOL            reduce using rule 78 (VAROP -> VARSYM .)
    CHAR            reduce using rule 78 (VAROP -> VARSYM .)
    STRING          reduce using rule 78 (VAROP -> VARSYM .)
    CLOSE_PAREN     reduce using rule 78 (VAROP -> VARSYM .)
    CLOSE_BRACE     reduce using rule 78 (VAROP -> VARSYM .)
    ENDSTATEMENT    reduce using rule 78 (VAROP -> VARSYM .)


state 102

    (79) VAROP -> INFIX_FUNCTION .

    MINUS           reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    LAMBDA          reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    LET             reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    MATCH           reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    OPEN_PAREN      reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    IDENTIFIER      reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    TYPENAME        reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    FLOAT           reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    INTEGER         reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    BOOL            reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    CHAR            reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    STRING          reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    CLOSE_PAREN     reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    CLOSE_BRACE     reduce using rule 79 (VAROP -> INFIX_FUNCTION .)
    ENDSTATEMENT    reduce using rule 79 (VAROP -> INFIX_FUNCTION .)


state 103

    (84) VARSYM -> PLUS .

    MINUS           reduce using rule 84 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 84 (VARSYM -> PLUS .)
    LET             reduce using rule 84 (VARSYM -> PLUS .)
    MATCH           reduce using rule 84 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 84 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 84 (VARSYM -> PLUS .)
    TYPENAME        reduce using rule 84 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 84 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 84 (VARSYM -> PLUS .)
    BOOL            reduce using rule 84 (VARSYM -> PLUS .)
    CHAR            reduce using rule 84 (VARSYM -> PLUS .)
    STRING          reduce using rule 84 (VARSYM -> PLUS .)
    CLOSE_PAREN     reduce using rule 84 (VARSYM -> PLUS .)
    CLOSE_BRACE     reduce using rule 84 (VARSYM -> PLUS .)
    ENDSTATEMENT    reduce using rule 84 (VARSYM -> PLUS .)


state 104

    (85) VARSYM -> MINUS .

    MINUS           reduce using rule 85 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 85 (VARSYM -> MINUS .)
    LET             reduce using rule 85 (VARSYM -> MINUS .)
    MATCH           reduce using rule 85 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 85 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 85 (VARSYM -> MINUS .)
    TYPENAME        reduce using rule 85 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 85 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 85 (VARSYM -> MINUS .)
    BOOL            reduce using rule 85 (VARSYM -> MINUS .)
    CHAR            reduce using rule 85 (VARSYM -> MINUS .)
    STRING          reduce using rule 85 (VARSYM -> MINUS .)
    CLOSE_BRACE     reduce using rule 85 (VARSYM -> MINUS .)
    ENDSTATEMENT    reduce using rule 85 (VARSYM -> MINUS .)


state 105

    (86) VARSYM -> TIMES .

    MINUS           reduce using rule 86 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 86 (VARSYM -> TIMES .)
    LET             reduce using rule 86 (VARSYM -> TIMES .)
    MATCH           reduce using rule 86 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 86 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 86 (VARSYM -> TIMES .)
    TYPENAME        reduce using rule 86 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 86 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 86 (VARSYM -> TIMES .)
    BOOL            reduce using rule 86 (VARSYM -> TIMES .)
    CHAR            reduce using rule 86 (VARSYM -> TIMES .)
    STRING          reduce using rule 86 (VARSYM -> TIMES .)
    CLOSE_PAREN     reduce using rule 86 (VARSYM -> TIMES .)
    CLOSE_BRACE     reduce using rule 86 (VARSYM -> TIMES .)
    ENDSTATEMENT    reduce using rule 86 (VARSYM -> TIMES .)


state 106

    (87) VARSYM -> DIVIDE .

    MINUS           reduce using rule 87 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 87 (VARSYM -> DIVIDE .)
    LET             reduce using rule 87 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 87 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 87 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 87 (VARSYM -> DIVIDE .)
    TYPENAME        reduce using rule 87 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 87 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 87 (VARSYM -> DIVIDE .)
    BOOL            reduce using rule 87 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 87 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 87 (VARSYM -> DIVIDE .)
    CLOSE_PAREN     reduce using rule 87 (VARSYM -> DIVIDE .)
    CLOSE_BRACE     reduce using rule 87 (VARSYM -> DIVIDE .)
    ENDSTATEMENT    reduce using rule 87 (VARSYM -> DIVIDE .)


state 107

    (88) VARSYM -> MODULO .

    MINUS           reduce using rule 88 (VARSYM -> MODULO .)
    LAMBDA          reduce using rule 88 (VARSYM -> MODULO .)
    LET             reduce using rule 88 (VARSYM -> MODULO .)
    MATCH           reduce using rule 88 (VARSYM -> MODULO .)
    OPEN_PAREN      reduce using rule 88 (VARSYM -> MODULO .)
    IDENTIFIER      reduce using rule 88 (VARSYM -> MODULO .)
    TYPENAME        reduce using rule 88 (VARSYM -> MODULO .)
    FLOAT           reduce using rule 88 (VARSYM -> MODULO .)
    INTEGER         reduce using rule 88 (VARSYM -> MODULO .)
    BOOL            reduce using rule 88 (VARSYM -> MODULO .)
    CHAR            reduce using rule 88 (VARSYM -> MODULO .)
    STRING          reduce using rule 88 (VARSYM -> MODULO .)
    CLOSE_PAREN     reduce using rule 88 (VARSYM -> MODULO .)
    CLOSE_BRACE     reduce using rule 88 (VARSYM -> MODULO .)
    ENDSTATEMENT    reduce using rule 88 (VARSYM -> MODULO .)


state 108

    (89) VARSYM -> POW .

    MINUS           reduce using rule 89 (VARSYM -> POW .)
    LAMBDA          reduce using rule 89 (VARSYM -> POW .)
    LET             reduce using rule 89 (VARSYM -> POW .)
    MATCH           reduce using rule 89 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 89 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 89 (VARSYM -> POW .)
    TYPENAME        reduce using rule 89 (VARSYM -> POW .)
    FLOAT           reduce using rule 89 (VARSYM -> POW .)
    INTEGER         reduce using rule 89 (VARSYM -> POW .)
    BOOL            reduce using rule 89 (VARSYM -> POW .)
    CHAR            reduce using rule 89 (VARSYM -> POW .)
    STRING          reduce using rule 89 (VARSYM -> POW .)
    CLOSE_PAREN     reduce using rule 89 (VARSYM -> POW .)
    CLOSE_BRACE     reduce using rule 89 (VARSYM -> POW .)
    ENDSTATEMENT    reduce using rule 89 (VARSYM -> POW .)


state 109

    (90) VARSYM -> EQUALITY .

    MINUS           reduce using rule 90 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 90 (VARSYM -> EQUALITY .)
    LET             reduce using rule 90 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 90 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 90 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 90 (VARSYM -> EQUALITY .)
    TYPENAME        reduce using rule 90 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 90 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 90 (VARSYM -> EQUALITY .)
    BOOL            reduce using rule 90 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 90 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 90 (VARSYM -> EQUALITY .)
    CLOSE_PAREN     reduce using rule 90 (VARSYM -> EQUALITY .)
    CLOSE_BRACE     reduce using rule 90 (VARSYM -> EQUALITY .)
    ENDSTATEMENT    reduce using rule 90 (VARSYM -> EQUALITY .)


state 110

    (91) VARSYM -> INEQUALITY .

    MINUS           reduce using rule 91 (VARSYM -> INEQUALITY .)
    LAMBDA          reduce using rule 91 (VARSYM -> INEQUALITY .)
    LET             reduce using rule 91 (VARSYM -> INEQUALITY .)
    MATCH           reduce using rule 91 (VARSYM -> INEQUALITY .)
    OPEN_PAREN      reduce using rule 91 (VARSYM -> INEQUALITY .)
    IDENTIFIER      reduce using rule 91 (VARSYM -> INEQUALITY .)
    TYPENAME        reduce using rule 91 (VARSYM -> INEQUALITY .)
    FLOAT           reduce using rule 91 (VARSYM -> INEQUALITY .)
    INTEGER         reduce using rule 91 (VARSYM -> INEQUALITY .)
    BOOL            reduce using rule 91 (VARSYM -> INEQUALITY .)
    CHAR            reduce using rule 91 (VARSYM -> INEQUALITY .)
    STRING          reduce using rule 91 (VARSYM -> INEQUALITY .)
    CLOSE_PAREN     reduce using rule 91 (VARSYM -> INEQUALITY .)
    CLOSE_BRACE     reduce using rule 91 (VARSYM -> INEQUALITY .)
    ENDSTATEMENT    reduce using rule 91 (VARSYM -> INEQUALITY .)


state 111

    (92) VARSYM -> LESS .

    MINUS           reduce using rule 92 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 92 (VARSYM -> LESS .)
    LET             reduce using rule 92 (VARSYM -> LESS .)
    MATCH           reduce using rule 92 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 92 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 92 (VARSYM -> LESS .)
    TYPENAME        reduce using rule 92 (VARSYM -> LESS .)
    FLOAT           reduce using rule 92 (VARSYM -> LESS .)
    INTEGER         reduce using rule 92 (VARSYM -> LESS .)
    BOOL            reduce using rule 92 (VARSYM -> LESS .)
    CHAR            reduce using rule 92 (VARSYM -> LESS .)
    STRING          reduce using rule 92 (VARSYM -> LESS .)
    CLOSE_PAREN     reduce using rule 92 (VARSYM -> LESS .)
    CLOSE_BRACE     reduce using rule 92 (VARSYM -> LESS .)
    ENDSTATEMENT    reduce using rule 92 (VARSYM -> LESS .)


state 112

    (93) VARSYM -> LEQ .

    MINUS           reduce using rule 93 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 93 (VARSYM -> LEQ .)
    LET             reduce using rule 93 (VARSYM -> LEQ .)
    MATCH           reduce using rule 93 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 93 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 93 (VARSYM -> LEQ .)
    TYPENAME        reduce using rule 93 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 93 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 93 (VARSYM -> LEQ .)
    BOOL            reduce using rule 93 (VARSYM -> LEQ .)
    CHAR            reduce using rule 93 (VARSYM -> LEQ .)
    STRING          reduce using rule 93 (VARSYM -> LEQ .)
    CLOSE_PAREN     reduce using rule 93 (VARSYM -> LEQ .)
    CLOSE_BRACE     reduce using rule 93 (VARSYM -> LEQ .)
    ENDSTATEMENT    reduce using rule 93 (VARSYM -> LEQ .)


state 113

    (94) VARSYM -> GREATER .

    MINUS           reduce using rule 94 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 94 (VARSYM -> GREATER .)
    LET             reduce using rule 94 (VARSYM -> GREATER .)
    MATCH           reduce using rule 94 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 94 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 94 (VARSYM -> GREATER .)
    TYPENAME        reduce using rule 94 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 94 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 94 (VARSYM -> GREATER .)
    BOOL            reduce using rule 94 (VARSYM -> GREATER .)
    CHAR            reduce using rule 94 (VARSYM -> GREATER .)
    STRING          reduce using rule 94 (VARSYM -> GREATER .)
    CLOSE_PAREN     reduce using rule 94 (VARSYM -> GREATER .)
    CLOSE_BRACE     reduce using rule 94 (VARSYM -> GREATER .)
    ENDSTATEMENT    reduce using rule 94 (VARSYM -> GREATER .)


state 114

    (95) VARSYM -> GEQ .

    MINUS           reduce using rule 95 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 95 (VARSYM -> GEQ .)
    LET             reduce using rule 95 (VARSYM -> GEQ .)
    MATCH           reduce using rule 95 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 95 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 95 (VARSYM -> GEQ .)
    TYPENAME        reduce using rule 95 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 95 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 95 (VARSYM -> GEQ .)
    BOOL            reduce using rule 95 (VARSYM -> GEQ .)
    CHAR            reduce using rule 95 (VARSYM -> GEQ .)
    STRING          reduce using rule 95 (VARSYM -> GEQ .)
    CLOSE_PAREN     reduce using rule 95 (VARSYM -> GEQ .)
    CLOSE_BRACE     reduce using rule 95 (VARSYM -> GEQ .)
    ENDSTATEMENT    reduce using rule 95 (VARSYM -> GEQ .)


state 115

    (96) VARSYM -> AND .

    MINUS           reduce using rule 96 (VARSYM -> AND .)
    LAMBDA          reduce using rule 96 (VARSYM -> AND .)
    LET             reduce using rule 96 (VARSYM -> AND .)
    MATCH           reduce using rule 96 (VARSYM -> AND .)
    OPEN_PAREN      reduce using rule 96 (VARSYM -> AND .)
    IDENTIFIER      reduce using rule 96 (VARSYM -> AND .)
    TYPENAME        reduce using rule 96 (VARSYM -> AND .)
    FLOAT           reduce using rule 96 (VARSYM -> AND .)
    INTEGER         reduce using rule 96 (VARSYM -> AND .)
    BOOL            reduce using rule 96 (VARSYM -> AND .)
    CHAR            reduce using rule 96 (VARSYM -> AND .)
    STRING          reduce using rule 96 (VARSYM -> AND .)
    CLOSE_PAREN     reduce using rule 96 (VARSYM -> AND .)
    CLOSE_BRACE     reduce using rule 96 (VARSYM -> AND .)
    ENDSTATEMENT    reduce using rule 96 (VARSYM -> AND .)


state 116

    (97) VARSYM -> OR .

    MINUS           reduce using rule 97 (VARSYM -> OR .)
    LAMBDA          reduce using rule 97 (VARSYM -> OR .)
    LET             reduce using rule 97 (VARSYM -> OR .)
    MATCH           reduce using rule 97 (VARSYM -> OR .)
    OPEN_PAREN      reduce using rule 97 (VARSYM -> OR .)
    IDENTIFIER      reduce using rule 97 (VARSYM -> OR .)
    TYPENAME        reduce using rule 97 (VARSYM -> OR .)
    FLOAT           reduce using rule 97 (VARSYM -> OR .)
    INTEGER         reduce using rule 97 (VARSYM -> OR .)
    BOOL            reduce using rule 97 (VARSYM -> OR .)
    CHAR            reduce using rule 97 (VARSYM -> OR .)
    STRING          reduce using rule 97 (VARSYM -> OR .)
    CLOSE_PAREN     reduce using rule 97 (VARSYM -> OR .)
    CLOSE_BRACE     reduce using rule 97 (VARSYM -> OR .)
    ENDSTATEMENT    reduce using rule 97 (VARSYM -> OR .)


state 117

    (51) INFIX_EXP -> MINUS INFIX_EXP .
    (49) EXP -> INFIX_EXP .

  ! reduce/reduce conflict for IF resolved using rule 49 (EXP -> INFIX_EXP .)
    WHERE           reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    GIVEN           reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    MODULO          reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    INEQUALITY      reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    AND             reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    OR              reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .)
    IF              reduce using rule 49 (EXP -> INFIX_EXP .)

  ! IF              [ reduce using rule 51 (INFIX_EXP -> MINUS INFIX_EXP .) ]


state 118

    (55) LEXP -> EXP . IF EXP ELSE EXP

    IF              shift and go to state 98


state 119

    (53) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (82) APATS -> . APAT APATS
    (83) APATS -> .
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    ARROW           reduce using rule 83 (APATS -> .)
    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 63
    APATS                          shift and go to state 140
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 120

    (54) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 141


state 121

    (17) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (19) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (20) DECLARATIONS_LIST -> . DECLARATION
    (21) DECLARATION -> . GEN_DECLARATION
    (22) DECLARATION -> . FUNCTION_DEFINITION
    (23) DECLARATION -> . VARIABLE_DEFINITION
    (26) GEN_DECLARATION -> . FIXITY_DECLARATION
    (27) GEN_DECLARATION -> .
    (24) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (25) VARIABLE_DEFINITION -> . PARAM RHS
    (28) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (41) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (105) PARAM -> . IDENTIFIER
    (42) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 143
    ENDSTATEMENT    reduce using rule 27 (GEN_DECLARATION -> .)
    SETFIX          shift and go to state 23
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 26
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

  ! CLOSE_BRACE     [ reduce using rule 27 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 142
    DECLARATION                    shift and go to state 144
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_DEFINITION            shift and go to state 18
    VARIABLE_DEFINITION            shift and go to state 19
    FIXITY_DECLARATION             shift and go to state 20
    FUNCTION_LHS                   shift and go to state 21
    PARAM                          shift and go to state 22
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    LITERAL                        shift and go to state 31

state 122

    (56) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> EXP . IF EXP ELSE EXP

    OF              shift and go to state 145
    IF              shift and go to state 98


state 123

    (58) FEXP -> FEXP AEXP .

    OPEN_PAREN      reduce using rule 58 (FEXP -> FEXP AEXP .)
    IDENTIFIER      reduce using rule 58 (FEXP -> FEXP AEXP .)
    TYPENAME        reduce using rule 58 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 58 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 58 (FEXP -> FEXP AEXP .)
    BOOL            reduce using rule 58 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 58 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 58 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 58 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 58 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 58 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 58 (FEXP -> FEXP AEXP .)
    MODULO          reduce using rule 58 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 58 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 58 (FEXP -> FEXP AEXP .)
    INEQUALITY      reduce using rule 58 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 58 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 58 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 58 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 58 (FEXP -> FEXP AEXP .)
    AND             reduce using rule 58 (FEXP -> FEXP AEXP .)
    OR              reduce using rule 58 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 58 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 58 (FEXP -> FEXP AEXP .)
    IF              reduce using rule 58 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 58 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 58 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 58 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 58 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 58 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 58 (FEXP -> FEXP AEXP .)
    GIVEN           reduce using rule 58 (FEXP -> FEXP AEXP .)


state 124

    (64) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (55) LEXP -> EXP . IF EXP ELSE EXP

    CLOSE_PAREN     shift and go to state 146
    IF              shift and go to state 98


state 125

    (65) OPERATOR_FUNC -> OPEN_PAREN OP . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 147


state 126

    (51) INFIX_EXP -> MINUS . INFIX_EXP
    (85) VARSYM -> MINUS .
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (49) EXP -> . INFIX_EXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 85 (VARSYM -> MINUS .)
    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    INFIX_EXP                      shift and go to state 117
    LEXP                           shift and go to state 70
    EXP                            shift and go to state 118
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 127

    (46) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 46 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 46 (RHS -> GDRHS WHERE DECLARATIONS .)


state 128

    (47) GDRHS -> GIVEN EXP EQUALS . EXP
    (48) GDRHS -> GIVEN EXP EQUALS . EXP GDRHS
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 148
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 129

    (28) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .

    CLOSE_BRACE     reduce using rule 28 (FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)
    ENDSTATEMENT    reduce using rule 28 (FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)


state 130

    (40) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (82) APATS -> . APAT APATS
    (83) APATS -> .
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    EQUALS          reduce using rule 83 (APATS -> .)
    GIVEN           reduce using rule 83 (APATS -> .)
    CLOSE_PAREN     reduce using rule 83 (APATS -> .)
    TYPENAME        shift and go to state 42
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 63
    APATS                          shift and go to state 149
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 131

    (80) INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    TYPENAME        reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    BOOL            reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_PAREN     reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_BRACE     reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    ENDSTATEMENT    reduce using rule 80 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)


state 132

    (71) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    BACKTICK        reduce using rule 71 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 71 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 71 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GIVEN           reduce using rule 71 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 71 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 133

    (72) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    BACKTICK        reduce using rule 72 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 72 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 72 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GIVEN           reduce using rule 72 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 72 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 134

    (16) CONSTRUCTOR -> TYPENAME . ATYPES
    (34) ATYPES -> . ATYPES ATYPE
    (35) ATYPES -> .

    TYPENAME        reduce using rule 35 (ATYPES -> .)
    IDENTIFIER      reduce using rule 35 (ATYPES -> .)
    OPEN_PAREN      reduce using rule 35 (ATYPES -> .)
    PIPE            reduce using rule 35 (ATYPES -> .)
    CLOSE_BRACE     reduce using rule 35 (ATYPES -> .)
    ENDSTATEMENT    reduce using rule 35 (ATYPES -> .)

    ATYPES                         shift and go to state 150

state 135

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS .
    (14) CONSTRUCTORS -> CONSTRUCTORS . PIPE CONSTRUCTOR

    CLOSE_BRACE     reduce using rule 11 (TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS .)
    ENDSTATEMENT    reduce using rule 11 (TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS .)
    PIPE            shift and go to state 151


state 136

    (15) CONSTRUCTORS -> CONSTRUCTOR .

    PIPE            reduce using rule 15 (CONSTRUCTORS -> CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 15 (CONSTRUCTORS -> CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 15 (CONSTRUCTORS -> CONSTRUCTOR .)


state 137

    (44) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 44 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 44 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 138

    (55) LEXP -> EXP IF EXP . ELSE EXP
    (55) LEXP -> EXP . IF EXP ELSE EXP

    ELSE            shift and go to state 152
    IF              shift and go to state 98


state 139

    (50) INFIX_EXP -> LEXP OP INFIX_EXP .
    (49) EXP -> INFIX_EXP .

  ! reduce/reduce conflict for IF resolved using rule 49 (EXP -> INFIX_EXP .)
    WHERE           reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GIVEN           reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MODULO          reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INEQUALITY      reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    AND             reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OR              reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IF              reduce using rule 49 (EXP -> INFIX_EXP .)

  ! IF              [ reduce using rule 50 (INFIX_EXP -> LEXP OP INFIX_EXP .) ]


state 140

    (53) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 153


state 141

    (54) LEXP -> LET DECLARATIONS IN . EXP
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 154
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 142

    (17) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 155


state 143

    (18) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 18 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 18 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 18 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 144

    (19) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (20) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 156
    CLOSE_BRACE     reduce using rule 20 (DECLARATIONS_LIST -> DECLARATION .)


state 145

    (56) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 157


state 146

    (64) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TYPENAME        reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BOOL            reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MODULO          reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INEQUALITY      reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    AND             reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OR              reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IF              reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GIVEN           reduce using rule 64 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 147

    (65) OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    TYPENAME        reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    FLOAT           reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    INTEGER         reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    BOOL            reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    CHAR            reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    STRING          reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    PLUS            reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    MINUS           reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    TIMES           reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    DIVIDE          reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    MODULO          reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    POW             reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    EQUALITY        reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    INEQUALITY      reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    LESS            reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    LEQ             reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    GREATER         reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    GEQ             reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    AND             reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    OR              reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    BACKTICK        reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    WHERE           reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    IF              reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    EQUALS          reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    OF              reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    ELSE            reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    GIVEN           reduce using rule 65 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)


state 148

    (47) GDRHS -> GIVEN EXP EQUALS EXP .
    (48) GDRHS -> GIVEN EXP EQUALS EXP . GDRHS
    (55) LEXP -> EXP . IF EXP ELSE EXP
    (47) GDRHS -> . GIVEN EXP EQUALS EXP
    (48) GDRHS -> . GIVEN EXP EQUALS EXP GDRHS

    WHERE           reduce using rule 47 (GDRHS -> GIVEN EXP EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 47 (GDRHS -> GIVEN EXP EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 47 (GDRHS -> GIVEN EXP EQUALS EXP .)
    IF              shift and go to state 98
    GIVEN           shift and go to state 49

    GDRHS                          shift and go to state 158

state 149

    (40) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 40 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    GIVEN           reduce using rule 40 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 40 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 150

    (16) CONSTRUCTOR -> TYPENAME ATYPES .
    (34) ATYPES -> ATYPES . ATYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . IDENTIFIER
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    PIPE            reduce using rule 16 (CONSTRUCTOR -> TYPENAME ATYPES .)
    CLOSE_BRACE     reduce using rule 16 (CONSTRUCTOR -> TYPENAME ATYPES .)
    ENDSTATEMENT    reduce using rule 16 (CONSTRUCTOR -> TYPENAME ATYPES .)
    TYPENAME        shift and go to state 159
    IDENTIFIER      shift and go to state 161
    OPEN_PAREN      shift and go to state 162

    ATYPE                          shift and go to state 160

state 151

    (14) CONSTRUCTORS -> CONSTRUCTORS PIPE . CONSTRUCTOR
    (16) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 134

    CONSTRUCTOR                    shift and go to state 163

state 152

    (55) LEXP -> EXP IF EXP ELSE . EXP
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 164
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 153

    (53) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 165
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 154

    (54) LEXP -> LET DECLARATIONS IN EXP .
    (55) LEXP -> EXP . IF EXP ELSE EXP

  ! shift/reduce conflict for IF resolved as shift
    PLUS            reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    MODULO          reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    INEQUALITY      reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    AND             reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    OR              reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    BACKTICK        reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    GIVEN           reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .)
    IF              shift and go to state 98

  ! IF              [ reduce using rule 54 (LEXP -> LET DECLARATIONS IN EXP .) ]


state 155

    (17) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 17 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 17 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 17 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 156

    (19) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (19) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (20) DECLARATIONS_LIST -> . DECLARATION
    (21) DECLARATION -> . GEN_DECLARATION
    (22) DECLARATION -> . FUNCTION_DEFINITION
    (23) DECLARATION -> . VARIABLE_DEFINITION
    (26) GEN_DECLARATION -> . FIXITY_DECLARATION
    (27) GEN_DECLARATION -> .
    (24) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (25) VARIABLE_DEFINITION -> . PARAM RHS
    (28) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (41) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (105) PARAM -> . IDENTIFIER
    (42) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 27 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 27 (GEN_DECLARATION -> .)
    SETFIX          shift and go to state 23
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 26
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    DECLARATION                    shift and go to state 144
    DECLARATIONS_LIST              shift and go to state 166
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_DEFINITION            shift and go to state 18
    VARIABLE_DEFINITION            shift and go to state 19
    FIXITY_DECLARATION             shift and go to state 20
    FUNCTION_LHS                   shift and go to state 21
    PARAM                          shift and go to state 22
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    LITERAL                        shift and go to state 31

state 157

    (56) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (66) ALTS -> . ALT ENDSTATEMENT ALTS
    (67) ALTS -> . ALT
    (68) ALT -> . LPAT ARROW EXP
    (69) ALT -> .
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 69 (ALT -> .)
    CLOSE_BRACE     reduce using rule 69 (ALT -> .)
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    ALTS                           shift and go to state 167
    ALT                            shift and go to state 168
    LPAT                           shift and go to state 169
    APAT                           shift and go to state 25
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 158

    (48) GDRHS -> GIVEN EXP EQUALS EXP GDRHS .

    WHERE           reduce using rule 48 (GDRHS -> GIVEN EXP EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 48 (GDRHS -> GIVEN EXP EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 48 (GDRHS -> GIVEN EXP EQUALS EXP GDRHS .)


state 159

    (36) ATYPE -> TYPENAME .

    TYPENAME        reduce using rule 36 (ATYPE -> TYPENAME .)
    IDENTIFIER      reduce using rule 36 (ATYPE -> TYPENAME .)
    OPEN_PAREN      reduce using rule 36 (ATYPE -> TYPENAME .)
    PIPE            reduce using rule 36 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 36 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 36 (ATYPE -> TYPENAME .)
    ARROW           reduce using rule 36 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 36 (ATYPE -> TYPENAME .)


state 160

    (34) ATYPES -> ATYPES ATYPE .

    TYPENAME        reduce using rule 34 (ATYPES -> ATYPES ATYPE .)
    IDENTIFIER      reduce using rule 34 (ATYPES -> ATYPES ATYPE .)
    OPEN_PAREN      reduce using rule 34 (ATYPES -> ATYPES ATYPE .)
    PIPE            reduce using rule 34 (ATYPES -> ATYPES ATYPE .)
    CLOSE_BRACE     reduce using rule 34 (ATYPES -> ATYPES ATYPE .)
    ENDSTATEMENT    reduce using rule 34 (ATYPES -> ATYPES ATYPE .)


state 161

    (37) ATYPE -> IDENTIFIER .

    TYPENAME        reduce using rule 37 (ATYPE -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (ATYPE -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 37 (ATYPE -> IDENTIFIER .)
    PIPE            reduce using rule 37 (ATYPE -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 37 (ATYPE -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 37 (ATYPE -> IDENTIFIER .)
    ARROW           reduce using rule 37 (ATYPE -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 37 (ATYPE -> IDENTIFIER .)


state 162

    (38) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (32) TYPE -> . ATYPE
    (33) TYPE -> . ATYPE ARROW TYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . IDENTIFIER
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    TYPENAME        shift and go to state 159
    IDENTIFIER      shift and go to state 161
    OPEN_PAREN      shift and go to state 162

    TYPE                           shift and go to state 170
    ATYPE                          shift and go to state 171

state 163

    (14) CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .

    PIPE            reduce using rule 14 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 14 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 14 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)


state 164

    (55) LEXP -> EXP IF EXP ELSE EXP .
    (55) LEXP -> EXP . IF EXP ELSE EXP

  ! shift/reduce conflict for IF resolved as shift
    PLUS            reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    MINUS           reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    TIMES           reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    DIVIDE          reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    MODULO          reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    POW             reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    EQUALITY        reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    INEQUALITY      reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    LESS            reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    LEQ             reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    GREATER         reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    GEQ             reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    AND             reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    OR              reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    BACKTICK        reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    WHERE           reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    EQUALS          reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    OF              reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    ELSE            reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    GIVEN           reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .)
    IF              shift and go to state 98

  ! IF              [ reduce using rule 55 (LEXP -> EXP IF EXP ELSE EXP .) ]


state 165

    (53) LEXP -> LAMBDA APAT APATS ARROW EXP .
    (55) LEXP -> EXP . IF EXP ELSE EXP

  ! shift/reduce conflict for IF resolved as shift
    PLUS            reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MODULO          reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    INEQUALITY      reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    AND             reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OR              reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    BACKTICK        reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GIVEN           reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    IF              shift and go to state 98

  ! IF              [ reduce using rule 53 (LEXP -> LAMBDA APAT APATS ARROW EXP .) ]


state 166

    (19) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 19 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 167

    (56) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 172


state 168

    (66) ALTS -> ALT . ENDSTATEMENT ALTS
    (67) ALTS -> ALT .

    ENDSTATEMENT    shift and go to state 173
    CLOSE_BRACE     reduce using rule 67 (ALTS -> ALT .)


state 169

    (68) ALT -> LPAT . ARROW EXP

    ARROW           shift and go to state 174


state 170

    (38) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 175


state 171

    (32) TYPE -> ATYPE .
    (33) TYPE -> ATYPE . ARROW TYPE

    CLOSE_PAREN     reduce using rule 32 (TYPE -> ATYPE .)
    ARROW           shift and go to state 176


state 172

    (56) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    PLUS            reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MODULO          reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INEQUALITY      reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    AND             reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OR              reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    BACKTICK        reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IF              reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GIVEN           reduce using rule 56 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 173

    (66) ALTS -> ALT ENDSTATEMENT . ALTS
    (66) ALTS -> . ALT ENDSTATEMENT ALTS
    (67) ALTS -> . ALT
    (68) ALT -> . LPAT ARROW EXP
    (69) ALT -> .
    (70) LPAT -> . APAT
    (71) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (72) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (73) LPAT -> . TYPENAME APAT APATS
    (74) APAT -> . PARAM
    (75) APAT -> . TYPENAME
    (76) APAT -> . LITERAL
    (77) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (105) PARAM -> . IDENTIFIER
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 69 (ALT -> .)
    CLOSE_BRACE     reduce using rule 69 (ALT -> .)
    MINUS           shift and go to state 29
    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 39
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    ALT                            shift and go to state 168
    ALTS                           shift and go to state 177
    LPAT                           shift and go to state 169
    APAT                           shift and go to state 25
    PARAM                          shift and go to state 41
    LITERAL                        shift and go to state 31

state 174

    (68) ALT -> LPAT ARROW . EXP
    (49) EXP -> . INFIX_EXP
    (50) INFIX_EXP -> . LEXP OP INFIX_EXP
    (51) INFIX_EXP -> . MINUS INFIX_EXP
    (52) INFIX_EXP -> . LEXP
    (53) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (54) LEXP -> . LET DECLARATIONS IN EXP
    (55) LEXP -> . EXP IF EXP ELSE EXP
    (56) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (57) LEXP -> . FEXP
    (58) FEXP -> . FEXP AEXP
    (59) FEXP -> . AEXP
    (60) AEXP -> . USED_VAR
    (61) AEXP -> . USED_TYPENAME
    (62) AEXP -> . LITERAL
    (63) AEXP -> . OPERATOR_FUNC
    (64) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (103) USED_VAR -> . IDENTIFIER
    (104) USED_TYPENAME -> . TYPENAME
    (98) LITERAL -> . FLOAT
    (99) LITERAL -> . INTEGER
    (100) LITERAL -> . BOOL
    (101) LITERAL -> . CHAR
    (102) LITERAL -> . STRING
    (65) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 72
    LET             shift and go to state 73
    MATCH           shift and go to state 74
    OPEN_PAREN      shift and go to state 81
    IDENTIFIER      shift and go to state 82
    TYPENAME        shift and go to state 83
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 24
    BOOL            shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 178
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    FEXP                           shift and go to state 75
    AEXP                           shift and go to state 76
    USED_VAR                       shift and go to state 77
    USED_TYPENAME                  shift and go to state 78
    LITERAL                        shift and go to state 79
    OPERATOR_FUNC                  shift and go to state 80

state 175

    (38) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    TYPENAME        reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    PIPE            reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ARROW           reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 176

    (33) TYPE -> ATYPE ARROW . TYPE
    (32) TYPE -> . ATYPE
    (33) TYPE -> . ATYPE ARROW TYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . IDENTIFIER
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    TYPENAME        shift and go to state 159
    IDENTIFIER      shift and go to state 161
    OPEN_PAREN      shift and go to state 162

    ATYPE                          shift and go to state 171
    TYPE                           shift and go to state 179

state 177

    (66) ALTS -> ALT ENDSTATEMENT ALTS .

    CLOSE_BRACE     reduce using rule 66 (ALTS -> ALT ENDSTATEMENT ALTS .)


state 178

    (68) ALT -> LPAT ARROW EXP .
    (55) LEXP -> EXP . IF EXP ELSE EXP

    ENDSTATEMENT    reduce using rule 68 (ALT -> LPAT ARROW EXP .)
    CLOSE_BRACE     reduce using rule 68 (ALT -> LPAT ARROW EXP .)
    IF              shift and go to state 98


state 179

    (33) TYPE -> ATYPE ARROW TYPE .

    CLOSE_PAREN     reduce using rule 33 (TYPE -> ATYPE ARROW TYPE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 70 resolved as shift
WARNING: shift/reduce conflict for POW in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 70 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for BACKTICK in state 70 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 121 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 165 resolved as shift
WARNING: reduce/reduce conflict in state 117 resolved using rule (EXP -> INFIX_EXP)
WARNING: rejected rule (INFIX_EXP -> MINUS INFIX_EXP) in state 117
WARNING: reduce/reduce conflict in state 139 resolved using rule (EXP -> INFIX_EXP)
WARNING: rejected rule (INFIX_EXP -> LEXP OP INFIX_EXP) in state 139
