Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    CLOSE_SQUARE
    COMMA
    NEWTYPE
    OPEN_SQUARE
    WHITESPACE

Grammar

Rule 0     S' -> NEW_CONS
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT IDENTIFIER
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> NEW_CONS
Rule 10    TOP_DECLARATION -> DECLARATION
Rule 11    NEW_CONS -> NEWCONS TYPENAME EQUALS CONSTRUCTORS
Rule 12    CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR
Rule 13    CONSTRUCTORS -> CONSTRUCTOR
Rule 14    CONSTRUCTOR -> TYPENAME ATYPES
Rule 15    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 16    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 17    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 18    DECLARATIONS_LIST -> DECLARATION
Rule 19    DECLARATION -> GEN_DECLARATION
Rule 20    DECLARATION -> FUNCTION_LHS RHS
Rule 21    DECLARATION -> LPAT RHS
Rule 22    GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE
Rule 23    GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP
Rule 24    GEN_DECLARATION -> <empty>
Rule 25    ASSOCIATIVITY -> LEFTASSOC
Rule 26    ASSOCIATIVITY -> RIGHTASSOC
Rule 27    ASSOCIATIVITY -> NONASSOC
Rule 28    TYPE -> ATYPE
Rule 29    TYPE -> ATYPE ARROW TYPE
Rule 30    ATYPES -> ATYPES ATYPE
Rule 31    ATYPES -> <empty>
Rule 32    ATYPE -> TYPENAME
Rule 33    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 34    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 35    FUNCTION_LHS -> LPAT VAROP LPAT
Rule 36    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 37    RHS -> EQUALS EXP
Rule 38    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 39    RHS -> GDRHS
Rule 40    RHS -> GDRHS WHERE DECLARATIONS
Rule 41    GDRHS -> PIPE EXP EQUALS EXP
Rule 42    GDRHS -> PIPE EXP EQUALS EXP GDRHS
Rule 43    EXP -> INFIX_EXP
Rule 44    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 45    INFIX_EXP -> MINUS INFIX_EXP
Rule 46    INFIX_EXP -> LEXP
Rule 47    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 48    LEXP -> LET DECLARATIONS IN EXP
Rule 49    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 50    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 51    LEXP -> FEXP
Rule 52    FEXP -> FEXP AEXP
Rule 53    FEXP -> AEXP
Rule 54    AEXP -> USED_VAR
Rule 55    AEXP -> TYPENAME
Rule 56    AEXP -> LITERAL
Rule 57    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 58    CONSTRUCTION_PARAMS -> CONSTRUCTION_PARAMS AEXP
Rule 59    CONSTRUCTION_PARAMS -> AEXP
Rule 60    ALTS -> ALT ENDSTATEMENT ALTS
Rule 61    ALTS -> ALT
Rule 62    ALT -> LPAT ARROW EXP
Rule 63    ALT -> <empty>
Rule 64    LPAT -> APAT
Rule 65    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 66    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 67    LPAT -> TYPENAME APAT APATS
Rule 68    APAT -> PARAM
Rule 69    APAT -> TYPENAME
Rule 70    APAT -> LITERAL
Rule 71    APAT -> OPEN_PAREN LPAT CLOSE_PAREN
Rule 72    VAROP -> VARSYM
Rule 73    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 74    OP -> VAROP
Rule 75    APATS -> APAT APATS
Rule 76    APATS -> <empty>
Rule 77    VARSYM -> PLUS
Rule 78    VARSYM -> MINUS
Rule 79    VARSYM -> TIMES
Rule 80    VARSYM -> DIVIDE
Rule 81    VARSYM -> MODULO
Rule 82    VARSYM -> POW
Rule 83    VARSYM -> EQUALITY
Rule 84    VARSYM -> INEQUALITY
Rule 85    VARSYM -> LESS
Rule 86    VARSYM -> LEQ
Rule 87    VARSYM -> GREATER
Rule 88    VARSYM -> GEQ
Rule 89    VARSYM -> AND
Rule 90    VARSYM -> OR
Rule 91    VARSYM -> LIST_CONSTRUCTOR
Rule 92    LITERAL -> FLOAT
Rule 93    LITERAL -> INTEGER
Rule 94    LITERAL -> BOOL
Rule 95    LITERAL -> CHAR
Rule 96    LITERAL -> STRING
Rule 97    USED_VAR -> IDENTIFIER
Rule 98    PARAM -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 89
ARROW                : 29 47 62
AS                   : 
BACKTICK             : 73 73
BOOL                 : 94
CHAR                 : 95
CLOSE_BRACE          : 2 3 15 16 50
CLOSE_PAREN          : 33 36 57 65 66 71
CLOSE_SQUARE         : 
COMMA                : 
DIVIDE               : 80
ELSE                 : 49
ENDSTATEMENT         : 2 4 7 17 60
EQUALITY             : 83
EQUALS               : 11 37 38 41 42
FLOAT                : 66 92
GEQ                  : 88
GREATER              : 87
IDENTIFIER           : 1 6 22 34 73 97 98
IF                   : 49
IMPORT               : 6
IN                   : 48
INEQUALITY           : 84
INTEGER              : 23 65 93
LAMBDA               : 47
LEFTASSOC            : 25
LEQ                  : 86
LESS                 : 85
LET                  : 48
LIST_CONSTRUCTOR     : 91
MATCH                : 50
MINUS                : 45 65 66 78
MODULE               : 1
MODULO               : 81
NEWCONS              : 11
NEWTYPE              : 
NONASSOC             : 27
OF                   : 50
OPEN_BRACE           : 2 3 15 16 50
OPEN_PAREN           : 33 36 57 65 66 71
OPEN_SQUARE          : 
OR                   : 90
PIPE                 : 12 41 42
PLUS                 : 77
POW                  : 82
RIGHTASSOC           : 26
SETFIX               : 23
STRING               : 96
THEN                 : 49
TIMES                : 79
TYPENAME             : 11 14 32 55 67 69
TYPESIG              : 22
WHERE                : 1 38 40
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 52 53 58 59
ALT                  : 60 61
ALTS                 : 50 60
APAT                 : 34 36 47 64 67 75
APATS                : 34 36 47 67 75
ASSOCIATIVITY        : 23
ATYPE                : 28 29 30
ATYPES               : 14 30
BODY                 : 1
CONSTRUCTION_PARAMS  : 58
CONSTRUCTOR          : 12 13
CONSTRUCTORS         : 11 12
DECLARATION          : 10 17 18
DECLARATIONS         : 38 40 48
DECLARATIONS_LIST    : 15 17
EXP                  : 37 38 41 41 42 42 47 48 49 49 49 50 57 62
FEXP                 : 51 52
FUNCTION_LHS         : 20 36
GDRHS                : 39 40 42
GEN_DECLARATION      : 19
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 43 44 45
LEXP                 : 44 46
LITERAL              : 56 70
LPAT                 : 21 35 35 62 71
MODULE_DEFINITION    : 
NEW_CONS             : 9 0
OP                   : 23 44
PARAM                : 68
RHS                  : 20 21
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 22 29 33
USED_VAR             : 54
VAROP                : 35 74
VARSYM               : 72

Parsing method: LALR

state 0

    (0) S' -> . NEW_CONS
    (11) NEW_CONS -> . NEWCONS TYPENAME EQUALS CONSTRUCTORS

    NEWCONS         shift and go to state 2

    NEW_CONS                       shift and go to state 1

state 1

    (0) S' -> NEW_CONS .



state 2

    (11) NEW_CONS -> NEWCONS . TYPENAME EQUALS CONSTRUCTORS

    TYPENAME        shift and go to state 3


state 3

    (11) NEW_CONS -> NEWCONS TYPENAME . EQUALS CONSTRUCTORS

    EQUALS          shift and go to state 4


state 4

    (11) NEW_CONS -> NEWCONS TYPENAME EQUALS . CONSTRUCTORS
    (12) CONSTRUCTORS -> . CONSTRUCTORS PIPE CONSTRUCTOR
    (13) CONSTRUCTORS -> . CONSTRUCTOR
    (14) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 5

    CONSTRUCTORS                   shift and go to state 6
    CONSTRUCTOR                    shift and go to state 7

state 5

    (14) CONSTRUCTOR -> TYPENAME . ATYPES
    (30) ATYPES -> . ATYPES ATYPE
    (31) ATYPES -> .

    TYPENAME        reduce using rule 31 (ATYPES -> .)
    OPEN_PAREN      reduce using rule 31 (ATYPES -> .)
    PIPE            reduce using rule 31 (ATYPES -> .)
    $end            reduce using rule 31 (ATYPES -> .)

    ATYPES                         shift and go to state 8

state 6

    (11) NEW_CONS -> NEWCONS TYPENAME EQUALS CONSTRUCTORS .
    (12) CONSTRUCTORS -> CONSTRUCTORS . PIPE CONSTRUCTOR

    $end            reduce using rule 11 (NEW_CONS -> NEWCONS TYPENAME EQUALS CONSTRUCTORS .)
    PIPE            shift and go to state 9


state 7

    (13) CONSTRUCTORS -> CONSTRUCTOR .

    PIPE            reduce using rule 13 (CONSTRUCTORS -> CONSTRUCTOR .)
    $end            reduce using rule 13 (CONSTRUCTORS -> CONSTRUCTOR .)


state 8

    (14) CONSTRUCTOR -> TYPENAME ATYPES .
    (30) ATYPES -> ATYPES . ATYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    PIPE            reduce using rule 14 (CONSTRUCTOR -> TYPENAME ATYPES .)
    $end            reduce using rule 14 (CONSTRUCTOR -> TYPENAME ATYPES .)
    TYPENAME        shift and go to state 10
    OPEN_PAREN      shift and go to state 12

    ATYPE                          shift and go to state 11

state 9

    (12) CONSTRUCTORS -> CONSTRUCTORS PIPE . CONSTRUCTOR
    (14) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 5

    CONSTRUCTOR                    shift and go to state 13

state 10

    (32) ATYPE -> TYPENAME .

    TYPENAME        reduce using rule 32 (ATYPE -> TYPENAME .)
    OPEN_PAREN      reduce using rule 32 (ATYPE -> TYPENAME .)
    PIPE            reduce using rule 32 (ATYPE -> TYPENAME .)
    $end            reduce using rule 32 (ATYPE -> TYPENAME .)
    ARROW           reduce using rule 32 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 32 (ATYPE -> TYPENAME .)


state 11

    (30) ATYPES -> ATYPES ATYPE .

    TYPENAME        reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    OPEN_PAREN      reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    PIPE            reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    $end            reduce using rule 30 (ATYPES -> ATYPES ATYPE .)


state 12

    (33) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    TYPENAME        shift and go to state 10
    OPEN_PAREN      shift and go to state 12

    TYPE                           shift and go to state 14
    ATYPE                          shift and go to state 15

state 13

    (12) CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .

    PIPE            reduce using rule 12 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)
    $end            reduce using rule 12 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)


state 14

    (33) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 16


state 15

    (28) TYPE -> ATYPE .
    (29) TYPE -> ATYPE . ARROW TYPE

    CLOSE_PAREN     reduce using rule 28 (TYPE -> ATYPE .)
    ARROW           shift and go to state 17


state 16

    (33) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    TYPENAME        reduce using rule 33 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 33 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    PIPE            reduce using rule 33 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    $end            reduce using rule 33 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ARROW           reduce using rule 33 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 33 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 17

    (29) TYPE -> ATYPE ARROW . TYPE
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    TYPENAME        shift and go to state 10
    OPEN_PAREN      shift and go to state 12

    ATYPE                          shift and go to state 15
    TYPE                           shift and go to state 18

state 18

    (29) TYPE -> ATYPE ARROW TYPE .

    CLOSE_PAREN     reduce using rule 29 (TYPE -> ATYPE ARROW TYPE .)

