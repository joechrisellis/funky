Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT STRING
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> TYPE_DECLARATION
Rule 10    TOP_DECLARATION -> DECLARATION
Rule 11    TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
Rule 12    TYVARS -> TYVARS IDENTIFIER
Rule 13    TYVARS -> <empty>
Rule 14    CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR
Rule 15    CONSTRUCTORS -> CONSTRUCTOR
Rule 16    CONSTRUCTOR -> TYPENAME ATYPES
Rule 17    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 18    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 19    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 20    DECLARATIONS_LIST -> DECLARATION
Rule 21    DECLARATION -> FUNCTION_DEFINITION
Rule 22    DECLARATION -> VARIABLE_DEFINITION
Rule 23    DECLARATION -> FIXITY_DECLARATION
Rule 24    DECLARATION -> <empty>
Rule 25    FUNCTION_DEFINITION -> FUNCTION_LHS RHS
Rule 26    VARIABLE_DEFINITION -> PARAM RHS
Rule 27    FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP
Rule 28    ASSOCIATIVITY -> LEFTASSOC
Rule 29    ASSOCIATIVITY -> RIGHTASSOC
Rule 30    ASSOCIATIVITY -> NONASSOC
Rule 31    TYPE -> ATYPE
Rule 32    TYPE -> ATYPE ARROW TYPE
Rule 33    ATYPES -> ATYPES ATYPE
Rule 34    ATYPES -> <empty>
Rule 35    ATYPE -> TYPENAME
Rule 36    ATYPE -> IDENTIFIER
Rule 37    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 38    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 39    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 40    FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION
Rule 41    INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT
Rule 42    RHS -> EQUALS EXP
Rule 43    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 44    RHS -> GDRHS
Rule 45    RHS -> GDRHS WHERE DECLARATIONS
Rule 46    GDRHS -> GIVEN EXP EQUALS EXP
Rule 47    GDRHS -> GIVEN EXP EQUALS EXP GDRHS
Rule 48    EXP -> INFIX_EXP
Rule 49    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 50    INFIX_EXP -> MINUS INFIX_EXP
Rule 51    INFIX_EXP -> LEXP
Rule 52    LEXP -> LAMBDA_ABSTRACTION
Rule 53    LEXP -> LET_EXPR
Rule 54    LEXP -> IF_EXPR
Rule 55    LEXP -> MATCH_EXPR
Rule 56    LEXP -> FUNCTION_EXPR
Rule 57    LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP
Rule 58    LET_EXPR -> LET DECLARATIONS IN EXP
Rule 59    IF_EXPR -> EXP IF EXP ELSE EXP
Rule 60    MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 61    FUNCTION_EXPR -> FUNCTION_EXPR AEXP
Rule 62    FUNCTION_EXPR -> AEXP
Rule 63    AEXP -> USED_VAR
Rule 64    AEXP -> USED_TYPENAME
Rule 65    AEXP -> LITERAL
Rule 66    AEXP -> OPERATOR_FUNC
Rule 67    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 68    OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN
Rule 69    ALTS -> ALT ENDSTATEMENT ALTS
Rule 70    ALTS -> ALT
Rule 71    ALT -> LPAT ARROW EXP
Rule 72    ALT -> <empty>
Rule 73    LPAT -> APAT
Rule 74    LPAT -> CONSTRUCTOR_PATTERN
Rule 75    LPAT -> NEGATIVE_LITERAL
Rule 76    CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS
Rule 77    NEGATIVE_LITERAL -> MINUS INTEGER
Rule 78    NEGATIVE_LITERAL -> MINUS FLOAT
Rule 79    APAT -> PARAM
Rule 80    APAT -> TYPENAME
Rule 81    APAT -> LITERAL
Rule 82    APAT -> OPEN_PAREN LPAT CLOSE_PAREN
Rule 83    OP -> VARSYM
Rule 84    OP -> INFIX_FUNCTION
Rule 85    INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK
Rule 86    APATS -> APAT APATS
Rule 87    APATS -> <empty>
Rule 88    VARSYM -> PLUS
Rule 89    VARSYM -> MINUS
Rule 90    VARSYM -> TIMES
Rule 91    VARSYM -> DIVIDE
Rule 92    VARSYM -> MODULO
Rule 93    VARSYM -> POW
Rule 94    VARSYM -> EQUALITY
Rule 95    VARSYM -> INEQUALITY
Rule 96    VARSYM -> LESS
Rule 97    VARSYM -> LEQ
Rule 98    VARSYM -> GREATER
Rule 99    VARSYM -> GEQ
Rule 100   VARSYM -> CONCAT
Rule 101   VARSYM -> AND
Rule 102   VARSYM -> OR
Rule 103   LITERAL -> FLOAT
Rule 104   LITERAL -> INTEGER
Rule 105   LITERAL -> BOOL
Rule 106   LITERAL -> STRING
Rule 107   USED_VAR -> IDENTIFIER
Rule 108   USED_TYPENAME -> TYPENAME
Rule 109   PARAM -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 101
ARROW                : 32 57 71
BACKTICK             : 85 85
BOOL                 : 105
CLOSE_BRACE          : 2 3 17 18 60
CLOSE_PAREN          : 37 39 67 68 82
CONCAT               : 100
DIVIDE               : 91
ELSE                 : 59
ENDSTATEMENT         : 2 4 7 19 69
EQUALITY             : 94
EQUALS               : 11 42 43 46 47
FLOAT                : 78 103
GEQ                  : 99
GIVEN                : 46 47
GREATER              : 98
IDENTIFIER           : 1 12 36 38 85 107 109
IF                   : 59
IMPORT               : 6
IN                   : 58
INEQUALITY           : 95
INTEGER              : 27 77 104
LAMBDA               : 57
LEFTASSOC            : 28
LEQ                  : 97
LESS                 : 96
LET                  : 58
MATCH                : 60
MINUS                : 50 77 78 89
MODULE               : 1
MODULO               : 92
NEWTYPE              : 11
NONASSOC             : 30
OF                   : 60
OPEN_BRACE           : 2 3 17 18 60
OPEN_PAREN           : 37 39 67 68 82
OR                   : 102
PIPE                 : 14
PLUS                 : 88
POW                  : 93
RIGHTASSOC           : 29
SETFIX               : 27
STRING               : 6 106
TIMES                : 90
TYPENAME             : 11 16 35 76 80 108
WHERE                : 1 43 45
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 61 62
ALT                  : 69 70
ALTS                 : 60 69
APAT                 : 38 39 57 73 76 86
APATS                : 38 39 57 76 86
ASSOCIATIVITY        : 27
ATYPE                : 31 32 33
ATYPES               : 16 33
BODY                 : 1
CONSTRUCTOR          : 14 15
CONSTRUCTORS         : 11 14
CONSTRUCTOR_PATTERN  : 74
DECLARATION          : 10 19 20
DECLARATIONS         : 43 45 58
DECLARATIONS_LIST    : 17 19
EXP                  : 42 43 46 46 47 47 57 58 59 59 59 60 67 71
FIXITY_DECLARATION   : 23
FUNCTION_DEFINITION  : 21
FUNCTION_EXPR        : 56 61
FUNCTION_LHS         : 25 39
GDRHS                : 44 45 47
IF_EXPR              : 54
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 48 49 50
INFIX_FUNCTION       : 41 84
INFIX_FUNCTION_DEFINITION : 40
LAMBDA_ABSTRACTION   : 52
LET_EXPR             : 53
LEXP                 : 49 51
LITERAL              : 65 81
LPAT                 : 41 41 71 82
MATCH_EXPR           : 55
MODULE_DEFINITION    : 0
NEGATIVE_LITERAL     : 75
OP                   : 27 49 68
OPERATOR_FUNC        : 66
PARAM                : 26 79
RHS                  : 25 26
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 32 37
TYPE_DECLARATION     : 9
TYVARS               : 11 12
USED_TYPENAME        : 64
USED_VAR             : 63
VARIABLE_DEFINITION  : 22
VARSYM               : 83

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT STRING
    (9) TOP_DECLARATION -> . TYPE_DECLARATION
    (10) TOP_DECLARATION -> . DECLARATION
    (11) TYPE_DECLARATION -> . NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
    (21) DECLARATION -> . FUNCTION_DEFINITION
    (22) DECLARATION -> . VARIABLE_DEFINITION
    (23) DECLARATION -> . FIXITY_DECLARATION
    (24) DECLARATION -> .
    (25) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (26) VARIABLE_DEFINITION -> . PARAM RHS
    (27) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (38) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (39) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (40) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (109) PARAM -> . IDENTIFIER
    (41) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 15
    CLOSE_BRACE     reduce using rule 24 (DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (DECLARATION -> .)
    SETFIX          shift and go to state 22
    IDENTIFIER      shift and go to state 24
    OPEN_PAREN      shift and go to state 26
    TYPENAME        shift and go to state 16
    MINUS           shift and go to state 32
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    TYPE_DECLARATION               shift and go to state 13
    DECLARATION                    shift and go to state 14
    FUNCTION_DEFINITION            shift and go to state 17
    VARIABLE_DEFINITION            shift and go to state 18
    FIXITY_DECLARATION             shift and go to state 19
    FUNCTION_LHS                   shift and go to state 20
    PARAM                          shift and go to state 21
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    LITERAL                        shift and go to state 31

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 35


state 8

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 36
    ENDSTATEMENT    shift and go to state 37


state 9

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (8) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (6) IMPORT_DECLARATION -> IMPORT . STRING

    STRING          shift and go to state 38


state 12

    (106) LITERAL -> STRING .

    BACKTICK        reduce using rule 106 (LITERAL -> STRING .)
    TYPENAME        reduce using rule 106 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 106 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 106 (LITERAL -> STRING .)
    FLOAT           reduce using rule 106 (LITERAL -> STRING .)
    INTEGER         reduce using rule 106 (LITERAL -> STRING .)
    BOOL            reduce using rule 106 (LITERAL -> STRING .)
    STRING          reduce using rule 106 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 106 (LITERAL -> STRING .)
    EQUALS          reduce using rule 106 (LITERAL -> STRING .)
    GIVEN           reduce using rule 106 (LITERAL -> STRING .)
    ARROW           reduce using rule 106 (LITERAL -> STRING .)
    PLUS            reduce using rule 106 (LITERAL -> STRING .)
    MINUS           reduce using rule 106 (LITERAL -> STRING .)
    TIMES           reduce using rule 106 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 106 (LITERAL -> STRING .)
    MODULO          reduce using rule 106 (LITERAL -> STRING .)
    POW             reduce using rule 106 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 106 (LITERAL -> STRING .)
    INEQUALITY      reduce using rule 106 (LITERAL -> STRING .)
    LESS            reduce using rule 106 (LITERAL -> STRING .)
    LEQ             reduce using rule 106 (LITERAL -> STRING .)
    GREATER         reduce using rule 106 (LITERAL -> STRING .)
    GEQ             reduce using rule 106 (LITERAL -> STRING .)
    CONCAT          reduce using rule 106 (LITERAL -> STRING .)
    AND             reduce using rule 106 (LITERAL -> STRING .)
    OR              reduce using rule 106 (LITERAL -> STRING .)
    WHERE           reduce using rule 106 (LITERAL -> STRING .)
    IF              reduce using rule 106 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 106 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 106 (LITERAL -> STRING .)
    OF              reduce using rule 106 (LITERAL -> STRING .)
    ELSE            reduce using rule 106 (LITERAL -> STRING .)


state 13

    (9) TOP_DECLARATION -> TYPE_DECLARATION .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATION -> TYPE_DECLARATION .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATION -> TYPE_DECLARATION .)


state 14

    (10) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)


state 15

    (11) TYPE_DECLARATION -> NEWTYPE . TYPENAME TYVARS EQUALS CONSTRUCTORS

    TYPENAME        shift and go to state 39


state 16

    (80) APAT -> TYPENAME .
    (76) CONSTRUCTOR_PATTERN -> TYPENAME . APAT APATS
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    BACKTICK        reduce using rule 80 (APAT -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 80 (APAT -> TYPENAME .)
    EQUALS          reduce using rule 80 (APAT -> TYPENAME .)
    GIVEN           reduce using rule 80 (APAT -> TYPENAME .)
    ARROW           reduce using rule 80 (APAT -> TYPENAME .)
    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 41
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 17

    (21) DECLARATION -> FUNCTION_DEFINITION .

    CLOSE_BRACE     reduce using rule 21 (DECLARATION -> FUNCTION_DEFINITION .)
    ENDSTATEMENT    reduce using rule 21 (DECLARATION -> FUNCTION_DEFINITION .)


state 18

    (22) DECLARATION -> VARIABLE_DEFINITION .

    CLOSE_BRACE     reduce using rule 22 (DECLARATION -> VARIABLE_DEFINITION .)
    ENDSTATEMENT    reduce using rule 22 (DECLARATION -> VARIABLE_DEFINITION .)


state 19

    (23) DECLARATION -> FIXITY_DECLARATION .

    CLOSE_BRACE     reduce using rule 23 (DECLARATION -> FIXITY_DECLARATION .)
    ENDSTATEMENT    reduce using rule 23 (DECLARATION -> FIXITY_DECLARATION .)


state 20

    (25) FUNCTION_DEFINITION -> FUNCTION_LHS . RHS
    (42) RHS -> . EQUALS EXP
    (43) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (44) RHS -> . GDRHS
    (45) RHS -> . GDRHS WHERE DECLARATIONS
    (46) GDRHS -> . GIVEN EXP EQUALS EXP
    (47) GDRHS -> . GIVEN EXP EQUALS EXP GDRHS

    EQUALS          shift and go to state 46
    GIVEN           shift and go to state 48

    RHS                            shift and go to state 45
    GDRHS                          shift and go to state 47

state 21

    (26) VARIABLE_DEFINITION -> PARAM . RHS
    (79) APAT -> PARAM .
    (42) RHS -> . EQUALS EXP
    (43) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (44) RHS -> . GDRHS
    (45) RHS -> . GDRHS WHERE DECLARATIONS
    (46) GDRHS -> . GIVEN EXP EQUALS EXP
    (47) GDRHS -> . GIVEN EXP EQUALS EXP GDRHS

    BACKTICK        reduce using rule 79 (APAT -> PARAM .)
    EQUALS          shift and go to state 46
    GIVEN           shift and go to state 48

    RHS                            shift and go to state 49
    GDRHS                          shift and go to state 47

state 22

    (27) FIXITY_DECLARATION -> SETFIX . ASSOCIATIVITY INTEGER OP
    (28) ASSOCIATIVITY -> . LEFTASSOC
    (29) ASSOCIATIVITY -> . RIGHTASSOC
    (30) ASSOCIATIVITY -> . NONASSOC

    LEFTASSOC       shift and go to state 51
    RIGHTASSOC      shift and go to state 52
    NONASSOC        shift and go to state 53

    ASSOCIATIVITY                  shift and go to state 50

state 23

    (104) LITERAL -> INTEGER .

    BACKTICK        reduce using rule 104 (LITERAL -> INTEGER .)
    TYPENAME        reduce using rule 104 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 104 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 104 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 104 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 104 (LITERAL -> INTEGER .)
    BOOL            reduce using rule 104 (LITERAL -> INTEGER .)
    STRING          reduce using rule 104 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 104 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 104 (LITERAL -> INTEGER .)
    GIVEN           reduce using rule 104 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 104 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 104 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 104 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 104 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 104 (LITERAL -> INTEGER .)
    MODULO          reduce using rule 104 (LITERAL -> INTEGER .)
    POW             reduce using rule 104 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 104 (LITERAL -> INTEGER .)
    INEQUALITY      reduce using rule 104 (LITERAL -> INTEGER .)
    LESS            reduce using rule 104 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 104 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 104 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 104 (LITERAL -> INTEGER .)
    CONCAT          reduce using rule 104 (LITERAL -> INTEGER .)
    AND             reduce using rule 104 (LITERAL -> INTEGER .)
    OR              reduce using rule 104 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 104 (LITERAL -> INTEGER .)
    IF              reduce using rule 104 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 104 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 104 (LITERAL -> INTEGER .)
    OF              reduce using rule 104 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 104 (LITERAL -> INTEGER .)


state 24

    (38) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (109) PARAM -> IDENTIFIER .
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    EQUALS          reduce using rule 109 (PARAM -> IDENTIFIER .)
    GIVEN           reduce using rule 109 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 109 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 109 (PARAM -> IDENTIFIER .)
    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 54
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 25

    (73) LPAT -> APAT .

    BACKTICK        reduce using rule 73 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 73 (LPAT -> APAT .)
    EQUALS          reduce using rule 73 (LPAT -> APAT .)
    GIVEN           reduce using rule 73 (LPAT -> APAT .)
    ARROW           reduce using rule 73 (LPAT -> APAT .)


state 26

    (39) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (82) APAT -> OPEN_PAREN . LPAT CLOSE_PAREN
    (38) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (39) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (40) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (41) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 24
    OPEN_PAREN      shift and go to state 26
    TYPENAME        shift and go to state 16
    MINUS           shift and go to state 32
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    FUNCTION_LHS                   shift and go to state 55
    APAT                           shift and go to state 25
    LPAT                           shift and go to state 56
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 27

    (40) FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .

    EQUALS          reduce using rule 40 (FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .)
    GIVEN           reduce using rule 40 (FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .)
    CLOSE_PAREN     reduce using rule 40 (FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION .)


state 28

    (41) INFIX_FUNCTION_DEFINITION -> LPAT . INFIX_FUNCTION LPAT
    (85) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

    BACKTICK        shift and go to state 58

    INFIX_FUNCTION                 shift and go to state 57

state 29

    (74) LPAT -> CONSTRUCTOR_PATTERN .

    BACKTICK        reduce using rule 74 (LPAT -> CONSTRUCTOR_PATTERN .)
    CLOSE_PAREN     reduce using rule 74 (LPAT -> CONSTRUCTOR_PATTERN .)
    EQUALS          reduce using rule 74 (LPAT -> CONSTRUCTOR_PATTERN .)
    GIVEN           reduce using rule 74 (LPAT -> CONSTRUCTOR_PATTERN .)
    ARROW           reduce using rule 74 (LPAT -> CONSTRUCTOR_PATTERN .)


state 30

    (75) LPAT -> NEGATIVE_LITERAL .

    BACKTICK        reduce using rule 75 (LPAT -> NEGATIVE_LITERAL .)
    CLOSE_PAREN     reduce using rule 75 (LPAT -> NEGATIVE_LITERAL .)
    EQUALS          reduce using rule 75 (LPAT -> NEGATIVE_LITERAL .)
    GIVEN           reduce using rule 75 (LPAT -> NEGATIVE_LITERAL .)
    ARROW           reduce using rule 75 (LPAT -> NEGATIVE_LITERAL .)


state 31

    (81) APAT -> LITERAL .

    BACKTICK        reduce using rule 81 (APAT -> LITERAL .)
    TYPENAME        reduce using rule 81 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 81 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 81 (APAT -> LITERAL .)
    FLOAT           reduce using rule 81 (APAT -> LITERAL .)
    INTEGER         reduce using rule 81 (APAT -> LITERAL .)
    BOOL            reduce using rule 81 (APAT -> LITERAL .)
    STRING          reduce using rule 81 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 81 (APAT -> LITERAL .)
    EQUALS          reduce using rule 81 (APAT -> LITERAL .)
    GIVEN           reduce using rule 81 (APAT -> LITERAL .)
    ARROW           reduce using rule 81 (APAT -> LITERAL .)


state 32

    (77) NEGATIVE_LITERAL -> MINUS . INTEGER
    (78) NEGATIVE_LITERAL -> MINUS . FLOAT

    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60


state 33

    (103) LITERAL -> FLOAT .

    BACKTICK        reduce using rule 103 (LITERAL -> FLOAT .)
    TYPENAME        reduce using rule 103 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 103 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 103 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 103 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 103 (LITERAL -> FLOAT .)
    BOOL            reduce using rule 103 (LITERAL -> FLOAT .)
    STRING          reduce using rule 103 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 103 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 103 (LITERAL -> FLOAT .)
    GIVEN           reduce using rule 103 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 103 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 103 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 103 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 103 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 103 (LITERAL -> FLOAT .)
    MODULO          reduce using rule 103 (LITERAL -> FLOAT .)
    POW             reduce using rule 103 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 103 (LITERAL -> FLOAT .)
    INEQUALITY      reduce using rule 103 (LITERAL -> FLOAT .)
    LESS            reduce using rule 103 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 103 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 103 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 103 (LITERAL -> FLOAT .)
    CONCAT          reduce using rule 103 (LITERAL -> FLOAT .)
    AND             reduce using rule 103 (LITERAL -> FLOAT .)
    OR              reduce using rule 103 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 103 (LITERAL -> FLOAT .)
    IF              reduce using rule 103 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 103 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 103 (LITERAL -> FLOAT .)
    OF              reduce using rule 103 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 103 (LITERAL -> FLOAT .)


state 34

    (105) LITERAL -> BOOL .

    BACKTICK        reduce using rule 105 (LITERAL -> BOOL .)
    TYPENAME        reduce using rule 105 (LITERAL -> BOOL .)
    OPEN_PAREN      reduce using rule 105 (LITERAL -> BOOL .)
    IDENTIFIER      reduce using rule 105 (LITERAL -> BOOL .)
    FLOAT           reduce using rule 105 (LITERAL -> BOOL .)
    INTEGER         reduce using rule 105 (LITERAL -> BOOL .)
    BOOL            reduce using rule 105 (LITERAL -> BOOL .)
    STRING          reduce using rule 105 (LITERAL -> BOOL .)
    CLOSE_PAREN     reduce using rule 105 (LITERAL -> BOOL .)
    EQUALS          reduce using rule 105 (LITERAL -> BOOL .)
    GIVEN           reduce using rule 105 (LITERAL -> BOOL .)
    ARROW           reduce using rule 105 (LITERAL -> BOOL .)
    PLUS            reduce using rule 105 (LITERAL -> BOOL .)
    MINUS           reduce using rule 105 (LITERAL -> BOOL .)
    TIMES           reduce using rule 105 (LITERAL -> BOOL .)
    DIVIDE          reduce using rule 105 (LITERAL -> BOOL .)
    MODULO          reduce using rule 105 (LITERAL -> BOOL .)
    POW             reduce using rule 105 (LITERAL -> BOOL .)
    EQUALITY        reduce using rule 105 (LITERAL -> BOOL .)
    INEQUALITY      reduce using rule 105 (LITERAL -> BOOL .)
    LESS            reduce using rule 105 (LITERAL -> BOOL .)
    LEQ             reduce using rule 105 (LITERAL -> BOOL .)
    GREATER         reduce using rule 105 (LITERAL -> BOOL .)
    GEQ             reduce using rule 105 (LITERAL -> BOOL .)
    CONCAT          reduce using rule 105 (LITERAL -> BOOL .)
    AND             reduce using rule 105 (LITERAL -> BOOL .)
    OR              reduce using rule 105 (LITERAL -> BOOL .)
    WHERE           reduce using rule 105 (LITERAL -> BOOL .)
    IF              reduce using rule 105 (LITERAL -> BOOL .)
    CLOSE_BRACE     reduce using rule 105 (LITERAL -> BOOL .)
    ENDSTATEMENT    reduce using rule 105 (LITERAL -> BOOL .)
    OF              reduce using rule 105 (LITERAL -> BOOL .)
    ELSE            reduce using rule 105 (LITERAL -> BOOL .)


state 35

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT STRING
    (9) TOP_DECLARATION -> . TYPE_DECLARATION
    (10) TOP_DECLARATION -> . DECLARATION
    (11) TYPE_DECLARATION -> . NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
    (21) DECLARATION -> . FUNCTION_DEFINITION
    (22) DECLARATION -> . VARIABLE_DEFINITION
    (23) DECLARATION -> . FIXITY_DECLARATION
    (24) DECLARATION -> .
    (25) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (26) VARIABLE_DEFINITION -> . PARAM RHS
    (27) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (38) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (39) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (40) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (109) PARAM -> . IDENTIFIER
    (41) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 15
    CLOSE_BRACE     reduce using rule 24 (DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (DECLARATION -> .)
    SETFIX          shift and go to state 22
    IDENTIFIER      shift and go to state 24
    OPEN_PAREN      shift and go to state 26
    TYPENAME        shift and go to state 16
    MINUS           shift and go to state 32
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    TOP_DECLARATIONS               shift and go to state 61
    IMPORT_DECLARATION             shift and go to state 62
    TOP_DECLARATION                shift and go to state 10
    TYPE_DECLARATION               shift and go to state 13
    DECLARATION                    shift and go to state 14
    FUNCTION_DEFINITION            shift and go to state 17
    VARIABLE_DEFINITION            shift and go to state 18
    FIXITY_DECLARATION             shift and go to state 19
    FUNCTION_LHS                   shift and go to state 20
    PARAM                          shift and go to state 21
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    LITERAL                        shift and go to state 31

state 36

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 37

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (9) TOP_DECLARATION -> . TYPE_DECLARATION
    (10) TOP_DECLARATION -> . DECLARATION
    (11) TYPE_DECLARATION -> . NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
    (21) DECLARATION -> . FUNCTION_DEFINITION
    (22) DECLARATION -> . VARIABLE_DEFINITION
    (23) DECLARATION -> . FIXITY_DECLARATION
    (24) DECLARATION -> .
    (25) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (26) VARIABLE_DEFINITION -> . PARAM RHS
    (27) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (38) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (39) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (40) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (109) PARAM -> . IDENTIFIER
    (41) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    NEWTYPE         shift and go to state 15
    CLOSE_BRACE     reduce using rule 24 (DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (DECLARATION -> .)
    SETFIX          shift and go to state 22
    IDENTIFIER      shift and go to state 24
    OPEN_PAREN      shift and go to state 26
    TYPENAME        shift and go to state 16
    MINUS           shift and go to state 32
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    TOP_DECLARATION                shift and go to state 63
    TYPE_DECLARATION               shift and go to state 13
    DECLARATION                    shift and go to state 14
    FUNCTION_DEFINITION            shift and go to state 17
    VARIABLE_DEFINITION            shift and go to state 18
    FIXITY_DECLARATION             shift and go to state 19
    FUNCTION_LHS                   shift and go to state 20
    PARAM                          shift and go to state 21
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    LITERAL                        shift and go to state 31

state 38

    (6) IMPORT_DECLARATION -> IMPORT STRING .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATION -> IMPORT STRING .)


state 39

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME . TYVARS EQUALS CONSTRUCTORS
    (12) TYVARS -> . TYVARS IDENTIFIER
    (13) TYVARS -> .

    EQUALS          reduce using rule 13 (TYVARS -> .)
    IDENTIFIER      reduce using rule 13 (TYVARS -> .)

    TYVARS                         shift and go to state 64

state 40

    (80) APAT -> TYPENAME .

    TYPENAME        reduce using rule 80 (APAT -> TYPENAME .)
    OPEN_PAREN      reduce using rule 80 (APAT -> TYPENAME .)
    IDENTIFIER      reduce using rule 80 (APAT -> TYPENAME .)
    FLOAT           reduce using rule 80 (APAT -> TYPENAME .)
    INTEGER         reduce using rule 80 (APAT -> TYPENAME .)
    BOOL            reduce using rule 80 (APAT -> TYPENAME .)
    STRING          reduce using rule 80 (APAT -> TYPENAME .)
    BACKTICK        reduce using rule 80 (APAT -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 80 (APAT -> TYPENAME .)
    EQUALS          reduce using rule 80 (APAT -> TYPENAME .)
    GIVEN           reduce using rule 80 (APAT -> TYPENAME .)
    ARROW           reduce using rule 80 (APAT -> TYPENAME .)


state 41

    (76) CONSTRUCTOR_PATTERN -> TYPENAME APAT . APATS
    (86) APATS -> . APAT APATS
    (87) APATS -> .
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    BACKTICK        reduce using rule 87 (APATS -> .)
    CLOSE_PAREN     reduce using rule 87 (APATS -> .)
    EQUALS          reduce using rule 87 (APATS -> .)
    GIVEN           reduce using rule 87 (APATS -> .)
    ARROW           reduce using rule 87 (APATS -> .)
    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 65
    APATS                          shift and go to state 66
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 42

    (79) APAT -> PARAM .

    TYPENAME        reduce using rule 79 (APAT -> PARAM .)
    OPEN_PAREN      reduce using rule 79 (APAT -> PARAM .)
    IDENTIFIER      reduce using rule 79 (APAT -> PARAM .)
    FLOAT           reduce using rule 79 (APAT -> PARAM .)
    INTEGER         reduce using rule 79 (APAT -> PARAM .)
    BOOL            reduce using rule 79 (APAT -> PARAM .)
    STRING          reduce using rule 79 (APAT -> PARAM .)
    BACKTICK        reduce using rule 79 (APAT -> PARAM .)
    CLOSE_PAREN     reduce using rule 79 (APAT -> PARAM .)
    EQUALS          reduce using rule 79 (APAT -> PARAM .)
    GIVEN           reduce using rule 79 (APAT -> PARAM .)
    ARROW           reduce using rule 79 (APAT -> PARAM .)


state 43

    (82) APAT -> OPEN_PAREN . LPAT CLOSE_PAREN
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    MINUS           shift and go to state 32
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    LPAT                           shift and go to state 67
    APAT                           shift and go to state 25
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 44

    (109) PARAM -> IDENTIFIER .

    TYPENAME        reduce using rule 109 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 109 (PARAM -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (PARAM -> IDENTIFIER .)
    FLOAT           reduce using rule 109 (PARAM -> IDENTIFIER .)
    INTEGER         reduce using rule 109 (PARAM -> IDENTIFIER .)
    BOOL            reduce using rule 109 (PARAM -> IDENTIFIER .)
    STRING          reduce using rule 109 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 109 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 109 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 109 (PARAM -> IDENTIFIER .)
    GIVEN           reduce using rule 109 (PARAM -> IDENTIFIER .)
    ARROW           reduce using rule 109 (PARAM -> IDENTIFIER .)


state 45

    (25) FUNCTION_DEFINITION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 25 (FUNCTION_DEFINITION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 25 (FUNCTION_DEFINITION -> FUNCTION_LHS RHS .)


state 46

    (42) RHS -> EQUALS . EXP
    (43) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 68
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 47

    (44) RHS -> GDRHS .
    (45) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 44 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 44 (RHS -> GDRHS .)
    WHERE           shift and go to state 88


state 48

    (46) GDRHS -> GIVEN . EXP EQUALS EXP
    (47) GDRHS -> GIVEN . EXP EQUALS EXP GDRHS
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 89
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 49

    (26) VARIABLE_DEFINITION -> PARAM RHS .

    CLOSE_BRACE     reduce using rule 26 (VARIABLE_DEFINITION -> PARAM RHS .)
    ENDSTATEMENT    reduce using rule 26 (VARIABLE_DEFINITION -> PARAM RHS .)


state 50

    (27) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY . INTEGER OP

    INTEGER         shift and go to state 90


state 51

    (28) ASSOCIATIVITY -> LEFTASSOC .

    INTEGER         reduce using rule 28 (ASSOCIATIVITY -> LEFTASSOC .)


state 52

    (29) ASSOCIATIVITY -> RIGHTASSOC .

    INTEGER         reduce using rule 29 (ASSOCIATIVITY -> RIGHTASSOC .)


state 53

    (30) ASSOCIATIVITY -> NONASSOC .

    INTEGER         reduce using rule 30 (ASSOCIATIVITY -> NONASSOC .)


state 54

    (38) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (86) APATS -> . APAT APATS
    (87) APATS -> .
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    EQUALS          reduce using rule 87 (APATS -> .)
    GIVEN           reduce using rule 87 (APATS -> .)
    CLOSE_PAREN     reduce using rule 87 (APATS -> .)
    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 65
    APATS                          shift and go to state 91
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 55

    (39) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 92


state 56

    (82) APAT -> OPEN_PAREN LPAT . CLOSE_PAREN
    (41) INFIX_FUNCTION_DEFINITION -> LPAT . INFIX_FUNCTION LPAT
    (85) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

    CLOSE_PAREN     shift and go to state 93
    BACKTICK        shift and go to state 58

    INFIX_FUNCTION                 shift and go to state 57

state 57

    (41) INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    MINUS           shift and go to state 32
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    LPAT                           shift and go to state 94
    APAT                           shift and go to state 25
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 58

    (85) INFIX_FUNCTION -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 95


state 59

    (77) NEGATIVE_LITERAL -> MINUS INTEGER .

    BACKTICK        reduce using rule 77 (NEGATIVE_LITERAL -> MINUS INTEGER .)
    CLOSE_PAREN     reduce using rule 77 (NEGATIVE_LITERAL -> MINUS INTEGER .)
    EQUALS          reduce using rule 77 (NEGATIVE_LITERAL -> MINUS INTEGER .)
    GIVEN           reduce using rule 77 (NEGATIVE_LITERAL -> MINUS INTEGER .)
    ARROW           reduce using rule 77 (NEGATIVE_LITERAL -> MINUS INTEGER .)


state 60

    (78) NEGATIVE_LITERAL -> MINUS FLOAT .

    BACKTICK        reduce using rule 78 (NEGATIVE_LITERAL -> MINUS FLOAT .)
    CLOSE_PAREN     reduce using rule 78 (NEGATIVE_LITERAL -> MINUS FLOAT .)
    EQUALS          reduce using rule 78 (NEGATIVE_LITERAL -> MINUS FLOAT .)
    GIVEN           reduce using rule 78 (NEGATIVE_LITERAL -> MINUS FLOAT .)
    ARROW           reduce using rule 78 (NEGATIVE_LITERAL -> MINUS FLOAT .)


state 61

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 96
    ENDSTATEMENT    shift and go to state 37


state 62

    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 4 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 63

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 64

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS . EQUALS CONSTRUCTORS
    (12) TYVARS -> TYVARS . IDENTIFIER

    EQUALS          shift and go to state 97
    IDENTIFIER      shift and go to state 98


state 65

    (86) APATS -> APAT . APATS
    (86) APATS -> . APAT APATS
    (87) APATS -> .
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    BACKTICK        reduce using rule 87 (APATS -> .)
    CLOSE_PAREN     reduce using rule 87 (APATS -> .)
    EQUALS          reduce using rule 87 (APATS -> .)
    GIVEN           reduce using rule 87 (APATS -> .)
    ARROW           reduce using rule 87 (APATS -> .)
    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 65
    APATS                          shift and go to state 99
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 66

    (76) CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS .

    BACKTICK        reduce using rule 76 (CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS .)
    CLOSE_PAREN     reduce using rule 76 (CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS .)
    EQUALS          reduce using rule 76 (CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS .)
    GIVEN           reduce using rule 76 (CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS .)
    ARROW           reduce using rule 76 (CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS .)


state 67

    (82) APAT -> OPEN_PAREN LPAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 93


state 68

    (42) RHS -> EQUALS EXP .
    (43) RHS -> EQUALS EXP . WHERE DECLARATIONS
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

    CLOSE_BRACE     reduce using rule 42 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 42 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 100
    IF              shift and go to state 101


state 69

    (48) EXP -> INFIX_EXP .

    WHERE           reduce using rule 48 (EXP -> INFIX_EXP .)
    IF              reduce using rule 48 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 48 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 48 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 48 (EXP -> INFIX_EXP .)
    OF              reduce using rule 48 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 48 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 48 (EXP -> INFIX_EXP .)
    GIVEN           reduce using rule 48 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 48 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 48 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 48 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 48 (EXP -> INFIX_EXP .)
    MODULO          reduce using rule 48 (EXP -> INFIX_EXP .)
    POW             reduce using rule 48 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 48 (EXP -> INFIX_EXP .)
    INEQUALITY      reduce using rule 48 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 48 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 48 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 48 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 48 (EXP -> INFIX_EXP .)
    CONCAT          reduce using rule 48 (EXP -> INFIX_EXP .)
    AND             reduce using rule 48 (EXP -> INFIX_EXP .)
    OR              reduce using rule 48 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 48 (EXP -> INFIX_EXP .)


state 70

    (49) INFIX_EXP -> LEXP . OP INFIX_EXP
    (51) INFIX_EXP -> LEXP .
    (83) OP -> . VARSYM
    (84) OP -> . INFIX_FUNCTION
    (88) VARSYM -> . PLUS
    (89) VARSYM -> . MINUS
    (90) VARSYM -> . TIMES
    (91) VARSYM -> . DIVIDE
    (92) VARSYM -> . MODULO
    (93) VARSYM -> . POW
    (94) VARSYM -> . EQUALITY
    (95) VARSYM -> . INEQUALITY
    (96) VARSYM -> . LESS
    (97) VARSYM -> . LEQ
    (98) VARSYM -> . GREATER
    (99) VARSYM -> . GEQ
    (100) VARSYM -> . CONCAT
    (101) VARSYM -> . AND
    (102) VARSYM -> . OR
    (85) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for BACKTICK resolved as shift
    WHERE           reduce using rule 51 (INFIX_EXP -> LEXP .)
    IF              reduce using rule 51 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 51 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 51 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 51 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 51 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 51 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 51 (INFIX_EXP -> LEXP .)
    GIVEN           reduce using rule 51 (INFIX_EXP -> LEXP .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MODULO          shift and go to state 109
    POW             shift and go to state 110
    EQUALITY        shift and go to state 111
    INEQUALITY      shift and go to state 112
    LESS            shift and go to state 113
    LEQ             shift and go to state 114
    GREATER         shift and go to state 115
    GEQ             shift and go to state 116
    CONCAT          shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    BACKTICK        shift and go to state 58

  ! PLUS            [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! MINUS           [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! MODULO          [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! INEQUALITY      [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! CONCAT          [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! AND             [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! OR              [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]
  ! BACKTICK        [ reduce using rule 51 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 102
    VARSYM                         shift and go to state 103
    INFIX_FUNCTION                 shift and go to state 104

state 71

    (50) INFIX_EXP -> MINUS . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (48) EXP -> . INFIX_EXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    INFIX_EXP                      shift and go to state 120
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    EXP                            shift and go to state 121
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 72

    (52) LEXP -> LAMBDA_ABSTRACTION .

    PLUS            reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    MINUS           reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    TIMES           reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    DIVIDE          reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    MODULO          reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    POW             reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    EQUALITY        reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    INEQUALITY      reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    LESS            reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    LEQ             reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    GREATER         reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    GEQ             reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    CONCAT          reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    AND             reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    OR              reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    BACKTICK        reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    WHERE           reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    IF              reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    CLOSE_BRACE     reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    ENDSTATEMENT    reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    EQUALS          reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    OF              reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    ELSE            reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    CLOSE_PAREN     reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)
    GIVEN           reduce using rule 52 (LEXP -> LAMBDA_ABSTRACTION .)


state 73

    (53) LEXP -> LET_EXPR .

    PLUS            reduce using rule 53 (LEXP -> LET_EXPR .)
    MINUS           reduce using rule 53 (LEXP -> LET_EXPR .)
    TIMES           reduce using rule 53 (LEXP -> LET_EXPR .)
    DIVIDE          reduce using rule 53 (LEXP -> LET_EXPR .)
    MODULO          reduce using rule 53 (LEXP -> LET_EXPR .)
    POW             reduce using rule 53 (LEXP -> LET_EXPR .)
    EQUALITY        reduce using rule 53 (LEXP -> LET_EXPR .)
    INEQUALITY      reduce using rule 53 (LEXP -> LET_EXPR .)
    LESS            reduce using rule 53 (LEXP -> LET_EXPR .)
    LEQ             reduce using rule 53 (LEXP -> LET_EXPR .)
    GREATER         reduce using rule 53 (LEXP -> LET_EXPR .)
    GEQ             reduce using rule 53 (LEXP -> LET_EXPR .)
    CONCAT          reduce using rule 53 (LEXP -> LET_EXPR .)
    AND             reduce using rule 53 (LEXP -> LET_EXPR .)
    OR              reduce using rule 53 (LEXP -> LET_EXPR .)
    BACKTICK        reduce using rule 53 (LEXP -> LET_EXPR .)
    WHERE           reduce using rule 53 (LEXP -> LET_EXPR .)
    IF              reduce using rule 53 (LEXP -> LET_EXPR .)
    CLOSE_BRACE     reduce using rule 53 (LEXP -> LET_EXPR .)
    ENDSTATEMENT    reduce using rule 53 (LEXP -> LET_EXPR .)
    EQUALS          reduce using rule 53 (LEXP -> LET_EXPR .)
    OF              reduce using rule 53 (LEXP -> LET_EXPR .)
    ELSE            reduce using rule 53 (LEXP -> LET_EXPR .)
    CLOSE_PAREN     reduce using rule 53 (LEXP -> LET_EXPR .)
    GIVEN           reduce using rule 53 (LEXP -> LET_EXPR .)


state 74

    (54) LEXP -> IF_EXPR .

    PLUS            reduce using rule 54 (LEXP -> IF_EXPR .)
    MINUS           reduce using rule 54 (LEXP -> IF_EXPR .)
    TIMES           reduce using rule 54 (LEXP -> IF_EXPR .)
    DIVIDE          reduce using rule 54 (LEXP -> IF_EXPR .)
    MODULO          reduce using rule 54 (LEXP -> IF_EXPR .)
    POW             reduce using rule 54 (LEXP -> IF_EXPR .)
    EQUALITY        reduce using rule 54 (LEXP -> IF_EXPR .)
    INEQUALITY      reduce using rule 54 (LEXP -> IF_EXPR .)
    LESS            reduce using rule 54 (LEXP -> IF_EXPR .)
    LEQ             reduce using rule 54 (LEXP -> IF_EXPR .)
    GREATER         reduce using rule 54 (LEXP -> IF_EXPR .)
    GEQ             reduce using rule 54 (LEXP -> IF_EXPR .)
    CONCAT          reduce using rule 54 (LEXP -> IF_EXPR .)
    AND             reduce using rule 54 (LEXP -> IF_EXPR .)
    OR              reduce using rule 54 (LEXP -> IF_EXPR .)
    BACKTICK        reduce using rule 54 (LEXP -> IF_EXPR .)
    WHERE           reduce using rule 54 (LEXP -> IF_EXPR .)
    IF              reduce using rule 54 (LEXP -> IF_EXPR .)
    CLOSE_BRACE     reduce using rule 54 (LEXP -> IF_EXPR .)
    ENDSTATEMENT    reduce using rule 54 (LEXP -> IF_EXPR .)
    EQUALS          reduce using rule 54 (LEXP -> IF_EXPR .)
    OF              reduce using rule 54 (LEXP -> IF_EXPR .)
    ELSE            reduce using rule 54 (LEXP -> IF_EXPR .)
    CLOSE_PAREN     reduce using rule 54 (LEXP -> IF_EXPR .)
    GIVEN           reduce using rule 54 (LEXP -> IF_EXPR .)


state 75

    (55) LEXP -> MATCH_EXPR .

    PLUS            reduce using rule 55 (LEXP -> MATCH_EXPR .)
    MINUS           reduce using rule 55 (LEXP -> MATCH_EXPR .)
    TIMES           reduce using rule 55 (LEXP -> MATCH_EXPR .)
    DIVIDE          reduce using rule 55 (LEXP -> MATCH_EXPR .)
    MODULO          reduce using rule 55 (LEXP -> MATCH_EXPR .)
    POW             reduce using rule 55 (LEXP -> MATCH_EXPR .)
    EQUALITY        reduce using rule 55 (LEXP -> MATCH_EXPR .)
    INEQUALITY      reduce using rule 55 (LEXP -> MATCH_EXPR .)
    LESS            reduce using rule 55 (LEXP -> MATCH_EXPR .)
    LEQ             reduce using rule 55 (LEXP -> MATCH_EXPR .)
    GREATER         reduce using rule 55 (LEXP -> MATCH_EXPR .)
    GEQ             reduce using rule 55 (LEXP -> MATCH_EXPR .)
    CONCAT          reduce using rule 55 (LEXP -> MATCH_EXPR .)
    AND             reduce using rule 55 (LEXP -> MATCH_EXPR .)
    OR              reduce using rule 55 (LEXP -> MATCH_EXPR .)
    BACKTICK        reduce using rule 55 (LEXP -> MATCH_EXPR .)
    WHERE           reduce using rule 55 (LEXP -> MATCH_EXPR .)
    IF              reduce using rule 55 (LEXP -> MATCH_EXPR .)
    CLOSE_BRACE     reduce using rule 55 (LEXP -> MATCH_EXPR .)
    ENDSTATEMENT    reduce using rule 55 (LEXP -> MATCH_EXPR .)
    EQUALS          reduce using rule 55 (LEXP -> MATCH_EXPR .)
    OF              reduce using rule 55 (LEXP -> MATCH_EXPR .)
    ELSE            reduce using rule 55 (LEXP -> MATCH_EXPR .)
    CLOSE_PAREN     reduce using rule 55 (LEXP -> MATCH_EXPR .)
    GIVEN           reduce using rule 55 (LEXP -> MATCH_EXPR .)


state 76

    (56) LEXP -> FUNCTION_EXPR .
    (61) FUNCTION_EXPR -> FUNCTION_EXPR . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    PLUS            reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    MINUS           reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    TIMES           reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    DIVIDE          reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    MODULO          reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    POW             reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    EQUALITY        reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    INEQUALITY      reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    LESS            reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    LEQ             reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    GREATER         reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    GEQ             reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    CONCAT          reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    AND             reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    OR              reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    BACKTICK        reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    WHERE           reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    IF              reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    CLOSE_BRACE     reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    ENDSTATEMENT    reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    EQUALS          reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    OF              reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    ELSE            reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    CLOSE_PAREN     reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    GIVEN           reduce using rule 56 (LEXP -> FUNCTION_EXPR .)
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    AEXP                           shift and go to state 122
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 77

    (57) LAMBDA_ABSTRACTION -> LAMBDA . APAT APATS ARROW EXP
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 123
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 78

    (58) LET_EXPR -> LET . DECLARATIONS IN EXP
    (17) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 125

    DECLARATIONS                   shift and go to state 124

state 79

    (60) MATCH_EXPR -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 126
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 80

    (62) FUNCTION_EXPR -> AEXP .

    OPEN_PAREN      reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    IDENTIFIER      reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    TYPENAME        reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    FLOAT           reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    INTEGER         reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    BOOL            reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    STRING          reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    PLUS            reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    MINUS           reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    TIMES           reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    DIVIDE          reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    MODULO          reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    POW             reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    EQUALITY        reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    INEQUALITY      reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    LESS            reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    LEQ             reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    GREATER         reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    GEQ             reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    CONCAT          reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    AND             reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    OR              reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    BACKTICK        reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    WHERE           reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    IF              reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    CLOSE_BRACE     reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    ENDSTATEMENT    reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    EQUALS          reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    OF              reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    ELSE            reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    CLOSE_PAREN     reduce using rule 62 (FUNCTION_EXPR -> AEXP .)
    GIVEN           reduce using rule 62 (FUNCTION_EXPR -> AEXP .)


state 81

    (63) AEXP -> USED_VAR .

    OPEN_PAREN      reduce using rule 63 (AEXP -> USED_VAR .)
    IDENTIFIER      reduce using rule 63 (AEXP -> USED_VAR .)
    TYPENAME        reduce using rule 63 (AEXP -> USED_VAR .)
    FLOAT           reduce using rule 63 (AEXP -> USED_VAR .)
    INTEGER         reduce using rule 63 (AEXP -> USED_VAR .)
    BOOL            reduce using rule 63 (AEXP -> USED_VAR .)
    STRING          reduce using rule 63 (AEXP -> USED_VAR .)
    PLUS            reduce using rule 63 (AEXP -> USED_VAR .)
    MINUS           reduce using rule 63 (AEXP -> USED_VAR .)
    TIMES           reduce using rule 63 (AEXP -> USED_VAR .)
    DIVIDE          reduce using rule 63 (AEXP -> USED_VAR .)
    MODULO          reduce using rule 63 (AEXP -> USED_VAR .)
    POW             reduce using rule 63 (AEXP -> USED_VAR .)
    EQUALITY        reduce using rule 63 (AEXP -> USED_VAR .)
    INEQUALITY      reduce using rule 63 (AEXP -> USED_VAR .)
    LESS            reduce using rule 63 (AEXP -> USED_VAR .)
    LEQ             reduce using rule 63 (AEXP -> USED_VAR .)
    GREATER         reduce using rule 63 (AEXP -> USED_VAR .)
    GEQ             reduce using rule 63 (AEXP -> USED_VAR .)
    CONCAT          reduce using rule 63 (AEXP -> USED_VAR .)
    AND             reduce using rule 63 (AEXP -> USED_VAR .)
    OR              reduce using rule 63 (AEXP -> USED_VAR .)
    BACKTICK        reduce using rule 63 (AEXP -> USED_VAR .)
    WHERE           reduce using rule 63 (AEXP -> USED_VAR .)
    IF              reduce using rule 63 (AEXP -> USED_VAR .)
    CLOSE_BRACE     reduce using rule 63 (AEXP -> USED_VAR .)
    ENDSTATEMENT    reduce using rule 63 (AEXP -> USED_VAR .)
    EQUALS          reduce using rule 63 (AEXP -> USED_VAR .)
    OF              reduce using rule 63 (AEXP -> USED_VAR .)
    ELSE            reduce using rule 63 (AEXP -> USED_VAR .)
    CLOSE_PAREN     reduce using rule 63 (AEXP -> USED_VAR .)
    GIVEN           reduce using rule 63 (AEXP -> USED_VAR .)


state 82

    (64) AEXP -> USED_TYPENAME .

    OPEN_PAREN      reduce using rule 64 (AEXP -> USED_TYPENAME .)
    IDENTIFIER      reduce using rule 64 (AEXP -> USED_TYPENAME .)
    TYPENAME        reduce using rule 64 (AEXP -> USED_TYPENAME .)
    FLOAT           reduce using rule 64 (AEXP -> USED_TYPENAME .)
    INTEGER         reduce using rule 64 (AEXP -> USED_TYPENAME .)
    BOOL            reduce using rule 64 (AEXP -> USED_TYPENAME .)
    STRING          reduce using rule 64 (AEXP -> USED_TYPENAME .)
    PLUS            reduce using rule 64 (AEXP -> USED_TYPENAME .)
    MINUS           reduce using rule 64 (AEXP -> USED_TYPENAME .)
    TIMES           reduce using rule 64 (AEXP -> USED_TYPENAME .)
    DIVIDE          reduce using rule 64 (AEXP -> USED_TYPENAME .)
    MODULO          reduce using rule 64 (AEXP -> USED_TYPENAME .)
    POW             reduce using rule 64 (AEXP -> USED_TYPENAME .)
    EQUALITY        reduce using rule 64 (AEXP -> USED_TYPENAME .)
    INEQUALITY      reduce using rule 64 (AEXP -> USED_TYPENAME .)
    LESS            reduce using rule 64 (AEXP -> USED_TYPENAME .)
    LEQ             reduce using rule 64 (AEXP -> USED_TYPENAME .)
    GREATER         reduce using rule 64 (AEXP -> USED_TYPENAME .)
    GEQ             reduce using rule 64 (AEXP -> USED_TYPENAME .)
    CONCAT          reduce using rule 64 (AEXP -> USED_TYPENAME .)
    AND             reduce using rule 64 (AEXP -> USED_TYPENAME .)
    OR              reduce using rule 64 (AEXP -> USED_TYPENAME .)
    BACKTICK        reduce using rule 64 (AEXP -> USED_TYPENAME .)
    WHERE           reduce using rule 64 (AEXP -> USED_TYPENAME .)
    IF              reduce using rule 64 (AEXP -> USED_TYPENAME .)
    CLOSE_BRACE     reduce using rule 64 (AEXP -> USED_TYPENAME .)
    ENDSTATEMENT    reduce using rule 64 (AEXP -> USED_TYPENAME .)
    EQUALS          reduce using rule 64 (AEXP -> USED_TYPENAME .)
    OF              reduce using rule 64 (AEXP -> USED_TYPENAME .)
    ELSE            reduce using rule 64 (AEXP -> USED_TYPENAME .)
    CLOSE_PAREN     reduce using rule 64 (AEXP -> USED_TYPENAME .)
    GIVEN           reduce using rule 64 (AEXP -> USED_TYPENAME .)


state 83

    (65) AEXP -> LITERAL .

    OPEN_PAREN      reduce using rule 65 (AEXP -> LITERAL .)
    IDENTIFIER      reduce using rule 65 (AEXP -> LITERAL .)
    TYPENAME        reduce using rule 65 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 65 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 65 (AEXP -> LITERAL .)
    BOOL            reduce using rule 65 (AEXP -> LITERAL .)
    STRING          reduce using rule 65 (AEXP -> LITERAL .)
    PLUS            reduce using rule 65 (AEXP -> LITERAL .)
    MINUS           reduce using rule 65 (AEXP -> LITERAL .)
    TIMES           reduce using rule 65 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 65 (AEXP -> LITERAL .)
    MODULO          reduce using rule 65 (AEXP -> LITERAL .)
    POW             reduce using rule 65 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 65 (AEXP -> LITERAL .)
    INEQUALITY      reduce using rule 65 (AEXP -> LITERAL .)
    LESS            reduce using rule 65 (AEXP -> LITERAL .)
    LEQ             reduce using rule 65 (AEXP -> LITERAL .)
    GREATER         reduce using rule 65 (AEXP -> LITERAL .)
    GEQ             reduce using rule 65 (AEXP -> LITERAL .)
    CONCAT          reduce using rule 65 (AEXP -> LITERAL .)
    AND             reduce using rule 65 (AEXP -> LITERAL .)
    OR              reduce using rule 65 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 65 (AEXP -> LITERAL .)
    WHERE           reduce using rule 65 (AEXP -> LITERAL .)
    IF              reduce using rule 65 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 65 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 65 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 65 (AEXP -> LITERAL .)
    OF              reduce using rule 65 (AEXP -> LITERAL .)
    ELSE            reduce using rule 65 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 65 (AEXP -> LITERAL .)
    GIVEN           reduce using rule 65 (AEXP -> LITERAL .)


state 84

    (66) AEXP -> OPERATOR_FUNC .

    OPEN_PAREN      reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    IDENTIFIER      reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    TYPENAME        reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    FLOAT           reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    INTEGER         reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    BOOL            reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    STRING          reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    PLUS            reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    MINUS           reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    TIMES           reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    DIVIDE          reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    MODULO          reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    POW             reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    EQUALITY        reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    INEQUALITY      reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    LESS            reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    LEQ             reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    GREATER         reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    GEQ             reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    CONCAT          reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    AND             reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    OR              reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    BACKTICK        reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    WHERE           reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    IF              reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    CLOSE_BRACE     reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    ENDSTATEMENT    reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    EQUALS          reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    OF              reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    ELSE            reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    CLOSE_PAREN     reduce using rule 66 (AEXP -> OPERATOR_FUNC .)
    GIVEN           reduce using rule 66 (AEXP -> OPERATOR_FUNC .)


state 85

    (67) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (68) OPERATOR_FUNC -> OPEN_PAREN . OP CLOSE_PAREN
    (48) EXP -> . INFIX_EXP
    (83) OP -> . VARSYM
    (84) OP -> . INFIX_FUNCTION
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (88) VARSYM -> . PLUS
    (89) VARSYM -> . MINUS
    (90) VARSYM -> . TIMES
    (91) VARSYM -> . DIVIDE
    (92) VARSYM -> . MODULO
    (93) VARSYM -> . POW
    (94) VARSYM -> . EQUALITY
    (95) VARSYM -> . INEQUALITY
    (96) VARSYM -> . LESS
    (97) VARSYM -> . LEQ
    (98) VARSYM -> . GREATER
    (99) VARSYM -> . GEQ
    (100) VARSYM -> . CONCAT
    (101) VARSYM -> . AND
    (102) VARSYM -> . OR
    (85) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 129
    PLUS            shift and go to state 105
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MODULO          shift and go to state 109
    POW             shift and go to state 110
    EQUALITY        shift and go to state 111
    INEQUALITY      shift and go to state 112
    LESS            shift and go to state 113
    LEQ             shift and go to state 114
    GREATER         shift and go to state 115
    GEQ             shift and go to state 116
    CONCAT          shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    BACKTICK        shift and go to state 58
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 127
    OP                             shift and go to state 128
    INFIX_EXP                      shift and go to state 69
    VARSYM                         shift and go to state 103
    INFIX_FUNCTION                 shift and go to state 104
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 86

    (107) USED_VAR -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    TYPENAME        reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    FLOAT           reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    INTEGER         reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    BOOL            reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    STRING          reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    PLUS            reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    MINUS           reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    TIMES           reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    DIVIDE          reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    MODULO          reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    POW             reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    EQUALITY        reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    INEQUALITY      reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    LESS            reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    LEQ             reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    GREATER         reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    GEQ             reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    CONCAT          reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    AND             reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    OR              reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    BACKTICK        reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    WHERE           reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    IF              reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    EQUALS          reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    OF              reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    ELSE            reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 107 (USED_VAR -> IDENTIFIER .)
    GIVEN           reduce using rule 107 (USED_VAR -> IDENTIFIER .)


state 87

    (108) USED_TYPENAME -> TYPENAME .

    OPEN_PAREN      reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    IDENTIFIER      reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    TYPENAME        reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    FLOAT           reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    INTEGER         reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    BOOL            reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    STRING          reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    PLUS            reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    MINUS           reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    TIMES           reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    DIVIDE          reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    MODULO          reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    POW             reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    EQUALITY        reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    INEQUALITY      reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    LESS            reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    LEQ             reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    GREATER         reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    GEQ             reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    CONCAT          reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    AND             reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    OR              reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    BACKTICK        reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    WHERE           reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    IF              reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    EQUALS          reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    OF              reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    ELSE            reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 108 (USED_TYPENAME -> TYPENAME .)
    GIVEN           reduce using rule 108 (USED_TYPENAME -> TYPENAME .)


state 88

    (45) RHS -> GDRHS WHERE . DECLARATIONS
    (17) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 125

    DECLARATIONS                   shift and go to state 130

state 89

    (46) GDRHS -> GIVEN EXP . EQUALS EXP
    (47) GDRHS -> GIVEN EXP . EQUALS EXP GDRHS
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

    EQUALS          shift and go to state 131
    IF              shift and go to state 101


state 90

    (27) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER . OP
    (83) OP -> . VARSYM
    (84) OP -> . INFIX_FUNCTION
    (88) VARSYM -> . PLUS
    (89) VARSYM -> . MINUS
    (90) VARSYM -> . TIMES
    (91) VARSYM -> . DIVIDE
    (92) VARSYM -> . MODULO
    (93) VARSYM -> . POW
    (94) VARSYM -> . EQUALITY
    (95) VARSYM -> . INEQUALITY
    (96) VARSYM -> . LESS
    (97) VARSYM -> . LEQ
    (98) VARSYM -> . GREATER
    (99) VARSYM -> . GEQ
    (100) VARSYM -> . CONCAT
    (101) VARSYM -> . AND
    (102) VARSYM -> . OR
    (85) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MODULO          shift and go to state 109
    POW             shift and go to state 110
    EQUALITY        shift and go to state 111
    INEQUALITY      shift and go to state 112
    LESS            shift and go to state 113
    LEQ             shift and go to state 114
    GREATER         shift and go to state 115
    GEQ             shift and go to state 116
    CONCAT          shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    BACKTICK        shift and go to state 58

    OP                             shift and go to state 132
    VARSYM                         shift and go to state 103
    INFIX_FUNCTION                 shift and go to state 104

state 91

    (38) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 38 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    GIVEN           reduce using rule 38 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 38 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 92

    (39) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 133
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 93

    (82) APAT -> OPEN_PAREN LPAT CLOSE_PAREN .

    BACKTICK        reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    TYPENAME        reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    FLOAT           reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    INTEGER         reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    BOOL            reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    STRING          reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    EQUALS          reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    GIVEN           reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)
    ARROW           reduce using rule 82 (APAT -> OPEN_PAREN LPAT CLOSE_PAREN .)


state 94

    (41) INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .

    EQUALS          reduce using rule 41 (INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .)
    GIVEN           reduce using rule 41 (INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .)
    CLOSE_PAREN     reduce using rule 41 (INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT .)


state 95

    (85) INFIX_FUNCTION -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 134


state 96

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 97

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS . CONSTRUCTORS
    (14) CONSTRUCTORS -> . CONSTRUCTORS PIPE CONSTRUCTOR
    (15) CONSTRUCTORS -> . CONSTRUCTOR
    (16) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 135

    CONSTRUCTORS                   shift and go to state 136
    CONSTRUCTOR                    shift and go to state 137

state 98

    (12) TYVARS -> TYVARS IDENTIFIER .

    EQUALS          reduce using rule 12 (TYVARS -> TYVARS IDENTIFIER .)
    IDENTIFIER      reduce using rule 12 (TYVARS -> TYVARS IDENTIFIER .)


state 99

    (86) APATS -> APAT APATS .

    BACKTICK        reduce using rule 86 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 86 (APATS -> APAT APATS .)
    EQUALS          reduce using rule 86 (APATS -> APAT APATS .)
    GIVEN           reduce using rule 86 (APATS -> APAT APATS .)
    ARROW           reduce using rule 86 (APATS -> APAT APATS .)


state 100

    (43) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (17) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 125

    DECLARATIONS                   shift and go to state 138

state 101

    (59) IF_EXPR -> EXP IF . EXP ELSE EXP
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 139
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 102

    (49) INFIX_EXP -> LEXP OP . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (48) EXP -> . INFIX_EXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    LEXP                           shift and go to state 70
    INFIX_EXP                      shift and go to state 140
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    EXP                            shift and go to state 121
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 103

    (83) OP -> VARSYM .

    MINUS           reduce using rule 83 (OP -> VARSYM .)
    LAMBDA          reduce using rule 83 (OP -> VARSYM .)
    LET             reduce using rule 83 (OP -> VARSYM .)
    MATCH           reduce using rule 83 (OP -> VARSYM .)
    OPEN_PAREN      reduce using rule 83 (OP -> VARSYM .)
    IDENTIFIER      reduce using rule 83 (OP -> VARSYM .)
    TYPENAME        reduce using rule 83 (OP -> VARSYM .)
    FLOAT           reduce using rule 83 (OP -> VARSYM .)
    INTEGER         reduce using rule 83 (OP -> VARSYM .)
    BOOL            reduce using rule 83 (OP -> VARSYM .)
    STRING          reduce using rule 83 (OP -> VARSYM .)
    CLOSE_PAREN     reduce using rule 83 (OP -> VARSYM .)
    CLOSE_BRACE     reduce using rule 83 (OP -> VARSYM .)
    ENDSTATEMENT    reduce using rule 83 (OP -> VARSYM .)


state 104

    (84) OP -> INFIX_FUNCTION .

    MINUS           reduce using rule 84 (OP -> INFIX_FUNCTION .)
    LAMBDA          reduce using rule 84 (OP -> INFIX_FUNCTION .)
    LET             reduce using rule 84 (OP -> INFIX_FUNCTION .)
    MATCH           reduce using rule 84 (OP -> INFIX_FUNCTION .)
    OPEN_PAREN      reduce using rule 84 (OP -> INFIX_FUNCTION .)
    IDENTIFIER      reduce using rule 84 (OP -> INFIX_FUNCTION .)
    TYPENAME        reduce using rule 84 (OP -> INFIX_FUNCTION .)
    FLOAT           reduce using rule 84 (OP -> INFIX_FUNCTION .)
    INTEGER         reduce using rule 84 (OP -> INFIX_FUNCTION .)
    BOOL            reduce using rule 84 (OP -> INFIX_FUNCTION .)
    STRING          reduce using rule 84 (OP -> INFIX_FUNCTION .)
    CLOSE_PAREN     reduce using rule 84 (OP -> INFIX_FUNCTION .)
    CLOSE_BRACE     reduce using rule 84 (OP -> INFIX_FUNCTION .)
    ENDSTATEMENT    reduce using rule 84 (OP -> INFIX_FUNCTION .)


state 105

    (88) VARSYM -> PLUS .

    MINUS           reduce using rule 88 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 88 (VARSYM -> PLUS .)
    LET             reduce using rule 88 (VARSYM -> PLUS .)
    MATCH           reduce using rule 88 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 88 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 88 (VARSYM -> PLUS .)
    TYPENAME        reduce using rule 88 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 88 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 88 (VARSYM -> PLUS .)
    BOOL            reduce using rule 88 (VARSYM -> PLUS .)
    STRING          reduce using rule 88 (VARSYM -> PLUS .)
    CLOSE_PAREN     reduce using rule 88 (VARSYM -> PLUS .)
    CLOSE_BRACE     reduce using rule 88 (VARSYM -> PLUS .)
    ENDSTATEMENT    reduce using rule 88 (VARSYM -> PLUS .)


state 106

    (89) VARSYM -> MINUS .

    MINUS           reduce using rule 89 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 89 (VARSYM -> MINUS .)
    LET             reduce using rule 89 (VARSYM -> MINUS .)
    MATCH           reduce using rule 89 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 89 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 89 (VARSYM -> MINUS .)
    TYPENAME        reduce using rule 89 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 89 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 89 (VARSYM -> MINUS .)
    BOOL            reduce using rule 89 (VARSYM -> MINUS .)
    STRING          reduce using rule 89 (VARSYM -> MINUS .)
    CLOSE_BRACE     reduce using rule 89 (VARSYM -> MINUS .)
    ENDSTATEMENT    reduce using rule 89 (VARSYM -> MINUS .)


state 107

    (90) VARSYM -> TIMES .

    MINUS           reduce using rule 90 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 90 (VARSYM -> TIMES .)
    LET             reduce using rule 90 (VARSYM -> TIMES .)
    MATCH           reduce using rule 90 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 90 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 90 (VARSYM -> TIMES .)
    TYPENAME        reduce using rule 90 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 90 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 90 (VARSYM -> TIMES .)
    BOOL            reduce using rule 90 (VARSYM -> TIMES .)
    STRING          reduce using rule 90 (VARSYM -> TIMES .)
    CLOSE_PAREN     reduce using rule 90 (VARSYM -> TIMES .)
    CLOSE_BRACE     reduce using rule 90 (VARSYM -> TIMES .)
    ENDSTATEMENT    reduce using rule 90 (VARSYM -> TIMES .)


state 108

    (91) VARSYM -> DIVIDE .

    MINUS           reduce using rule 91 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 91 (VARSYM -> DIVIDE .)
    LET             reduce using rule 91 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 91 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 91 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 91 (VARSYM -> DIVIDE .)
    TYPENAME        reduce using rule 91 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 91 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 91 (VARSYM -> DIVIDE .)
    BOOL            reduce using rule 91 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 91 (VARSYM -> DIVIDE .)
    CLOSE_PAREN     reduce using rule 91 (VARSYM -> DIVIDE .)
    CLOSE_BRACE     reduce using rule 91 (VARSYM -> DIVIDE .)
    ENDSTATEMENT    reduce using rule 91 (VARSYM -> DIVIDE .)


state 109

    (92) VARSYM -> MODULO .

    MINUS           reduce using rule 92 (VARSYM -> MODULO .)
    LAMBDA          reduce using rule 92 (VARSYM -> MODULO .)
    LET             reduce using rule 92 (VARSYM -> MODULO .)
    MATCH           reduce using rule 92 (VARSYM -> MODULO .)
    OPEN_PAREN      reduce using rule 92 (VARSYM -> MODULO .)
    IDENTIFIER      reduce using rule 92 (VARSYM -> MODULO .)
    TYPENAME        reduce using rule 92 (VARSYM -> MODULO .)
    FLOAT           reduce using rule 92 (VARSYM -> MODULO .)
    INTEGER         reduce using rule 92 (VARSYM -> MODULO .)
    BOOL            reduce using rule 92 (VARSYM -> MODULO .)
    STRING          reduce using rule 92 (VARSYM -> MODULO .)
    CLOSE_PAREN     reduce using rule 92 (VARSYM -> MODULO .)
    CLOSE_BRACE     reduce using rule 92 (VARSYM -> MODULO .)
    ENDSTATEMENT    reduce using rule 92 (VARSYM -> MODULO .)


state 110

    (93) VARSYM -> POW .

    MINUS           reduce using rule 93 (VARSYM -> POW .)
    LAMBDA          reduce using rule 93 (VARSYM -> POW .)
    LET             reduce using rule 93 (VARSYM -> POW .)
    MATCH           reduce using rule 93 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 93 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 93 (VARSYM -> POW .)
    TYPENAME        reduce using rule 93 (VARSYM -> POW .)
    FLOAT           reduce using rule 93 (VARSYM -> POW .)
    INTEGER         reduce using rule 93 (VARSYM -> POW .)
    BOOL            reduce using rule 93 (VARSYM -> POW .)
    STRING          reduce using rule 93 (VARSYM -> POW .)
    CLOSE_PAREN     reduce using rule 93 (VARSYM -> POW .)
    CLOSE_BRACE     reduce using rule 93 (VARSYM -> POW .)
    ENDSTATEMENT    reduce using rule 93 (VARSYM -> POW .)


state 111

    (94) VARSYM -> EQUALITY .

    MINUS           reduce using rule 94 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 94 (VARSYM -> EQUALITY .)
    LET             reduce using rule 94 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 94 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 94 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 94 (VARSYM -> EQUALITY .)
    TYPENAME        reduce using rule 94 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 94 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 94 (VARSYM -> EQUALITY .)
    BOOL            reduce using rule 94 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 94 (VARSYM -> EQUALITY .)
    CLOSE_PAREN     reduce using rule 94 (VARSYM -> EQUALITY .)
    CLOSE_BRACE     reduce using rule 94 (VARSYM -> EQUALITY .)
    ENDSTATEMENT    reduce using rule 94 (VARSYM -> EQUALITY .)


state 112

    (95) VARSYM -> INEQUALITY .

    MINUS           reduce using rule 95 (VARSYM -> INEQUALITY .)
    LAMBDA          reduce using rule 95 (VARSYM -> INEQUALITY .)
    LET             reduce using rule 95 (VARSYM -> INEQUALITY .)
    MATCH           reduce using rule 95 (VARSYM -> INEQUALITY .)
    OPEN_PAREN      reduce using rule 95 (VARSYM -> INEQUALITY .)
    IDENTIFIER      reduce using rule 95 (VARSYM -> INEQUALITY .)
    TYPENAME        reduce using rule 95 (VARSYM -> INEQUALITY .)
    FLOAT           reduce using rule 95 (VARSYM -> INEQUALITY .)
    INTEGER         reduce using rule 95 (VARSYM -> INEQUALITY .)
    BOOL            reduce using rule 95 (VARSYM -> INEQUALITY .)
    STRING          reduce using rule 95 (VARSYM -> INEQUALITY .)
    CLOSE_PAREN     reduce using rule 95 (VARSYM -> INEQUALITY .)
    CLOSE_BRACE     reduce using rule 95 (VARSYM -> INEQUALITY .)
    ENDSTATEMENT    reduce using rule 95 (VARSYM -> INEQUALITY .)


state 113

    (96) VARSYM -> LESS .

    MINUS           reduce using rule 96 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 96 (VARSYM -> LESS .)
    LET             reduce using rule 96 (VARSYM -> LESS .)
    MATCH           reduce using rule 96 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 96 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 96 (VARSYM -> LESS .)
    TYPENAME        reduce using rule 96 (VARSYM -> LESS .)
    FLOAT           reduce using rule 96 (VARSYM -> LESS .)
    INTEGER         reduce using rule 96 (VARSYM -> LESS .)
    BOOL            reduce using rule 96 (VARSYM -> LESS .)
    STRING          reduce using rule 96 (VARSYM -> LESS .)
    CLOSE_PAREN     reduce using rule 96 (VARSYM -> LESS .)
    CLOSE_BRACE     reduce using rule 96 (VARSYM -> LESS .)
    ENDSTATEMENT    reduce using rule 96 (VARSYM -> LESS .)


state 114

    (97) VARSYM -> LEQ .

    MINUS           reduce using rule 97 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 97 (VARSYM -> LEQ .)
    LET             reduce using rule 97 (VARSYM -> LEQ .)
    MATCH           reduce using rule 97 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 97 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 97 (VARSYM -> LEQ .)
    TYPENAME        reduce using rule 97 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 97 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 97 (VARSYM -> LEQ .)
    BOOL            reduce using rule 97 (VARSYM -> LEQ .)
    STRING          reduce using rule 97 (VARSYM -> LEQ .)
    CLOSE_PAREN     reduce using rule 97 (VARSYM -> LEQ .)
    CLOSE_BRACE     reduce using rule 97 (VARSYM -> LEQ .)
    ENDSTATEMENT    reduce using rule 97 (VARSYM -> LEQ .)


state 115

    (98) VARSYM -> GREATER .

    MINUS           reduce using rule 98 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 98 (VARSYM -> GREATER .)
    LET             reduce using rule 98 (VARSYM -> GREATER .)
    MATCH           reduce using rule 98 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 98 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 98 (VARSYM -> GREATER .)
    TYPENAME        reduce using rule 98 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 98 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 98 (VARSYM -> GREATER .)
    BOOL            reduce using rule 98 (VARSYM -> GREATER .)
    STRING          reduce using rule 98 (VARSYM -> GREATER .)
    CLOSE_PAREN     reduce using rule 98 (VARSYM -> GREATER .)
    CLOSE_BRACE     reduce using rule 98 (VARSYM -> GREATER .)
    ENDSTATEMENT    reduce using rule 98 (VARSYM -> GREATER .)


state 116

    (99) VARSYM -> GEQ .

    MINUS           reduce using rule 99 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 99 (VARSYM -> GEQ .)
    LET             reduce using rule 99 (VARSYM -> GEQ .)
    MATCH           reduce using rule 99 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 99 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 99 (VARSYM -> GEQ .)
    TYPENAME        reduce using rule 99 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 99 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 99 (VARSYM -> GEQ .)
    BOOL            reduce using rule 99 (VARSYM -> GEQ .)
    STRING          reduce using rule 99 (VARSYM -> GEQ .)
    CLOSE_PAREN     reduce using rule 99 (VARSYM -> GEQ .)
    CLOSE_BRACE     reduce using rule 99 (VARSYM -> GEQ .)
    ENDSTATEMENT    reduce using rule 99 (VARSYM -> GEQ .)


state 117

    (100) VARSYM -> CONCAT .

    MINUS           reduce using rule 100 (VARSYM -> CONCAT .)
    LAMBDA          reduce using rule 100 (VARSYM -> CONCAT .)
    LET             reduce using rule 100 (VARSYM -> CONCAT .)
    MATCH           reduce using rule 100 (VARSYM -> CONCAT .)
    OPEN_PAREN      reduce using rule 100 (VARSYM -> CONCAT .)
    IDENTIFIER      reduce using rule 100 (VARSYM -> CONCAT .)
    TYPENAME        reduce using rule 100 (VARSYM -> CONCAT .)
    FLOAT           reduce using rule 100 (VARSYM -> CONCAT .)
    INTEGER         reduce using rule 100 (VARSYM -> CONCAT .)
    BOOL            reduce using rule 100 (VARSYM -> CONCAT .)
    STRING          reduce using rule 100 (VARSYM -> CONCAT .)
    CLOSE_PAREN     reduce using rule 100 (VARSYM -> CONCAT .)
    CLOSE_BRACE     reduce using rule 100 (VARSYM -> CONCAT .)
    ENDSTATEMENT    reduce using rule 100 (VARSYM -> CONCAT .)


state 118

    (101) VARSYM -> AND .

    MINUS           reduce using rule 101 (VARSYM -> AND .)
    LAMBDA          reduce using rule 101 (VARSYM -> AND .)
    LET             reduce using rule 101 (VARSYM -> AND .)
    MATCH           reduce using rule 101 (VARSYM -> AND .)
    OPEN_PAREN      reduce using rule 101 (VARSYM -> AND .)
    IDENTIFIER      reduce using rule 101 (VARSYM -> AND .)
    TYPENAME        reduce using rule 101 (VARSYM -> AND .)
    FLOAT           reduce using rule 101 (VARSYM -> AND .)
    INTEGER         reduce using rule 101 (VARSYM -> AND .)
    BOOL            reduce using rule 101 (VARSYM -> AND .)
    STRING          reduce using rule 101 (VARSYM -> AND .)
    CLOSE_PAREN     reduce using rule 101 (VARSYM -> AND .)
    CLOSE_BRACE     reduce using rule 101 (VARSYM -> AND .)
    ENDSTATEMENT    reduce using rule 101 (VARSYM -> AND .)


state 119

    (102) VARSYM -> OR .

    MINUS           reduce using rule 102 (VARSYM -> OR .)
    LAMBDA          reduce using rule 102 (VARSYM -> OR .)
    LET             reduce using rule 102 (VARSYM -> OR .)
    MATCH           reduce using rule 102 (VARSYM -> OR .)
    OPEN_PAREN      reduce using rule 102 (VARSYM -> OR .)
    IDENTIFIER      reduce using rule 102 (VARSYM -> OR .)
    TYPENAME        reduce using rule 102 (VARSYM -> OR .)
    FLOAT           reduce using rule 102 (VARSYM -> OR .)
    INTEGER         reduce using rule 102 (VARSYM -> OR .)
    BOOL            reduce using rule 102 (VARSYM -> OR .)
    STRING          reduce using rule 102 (VARSYM -> OR .)
    CLOSE_PAREN     reduce using rule 102 (VARSYM -> OR .)
    CLOSE_BRACE     reduce using rule 102 (VARSYM -> OR .)
    ENDSTATEMENT    reduce using rule 102 (VARSYM -> OR .)


state 120

    (50) INFIX_EXP -> MINUS INFIX_EXP .
    (48) EXP -> INFIX_EXP .

  ! reduce/reduce conflict for IF resolved using rule 48 (EXP -> INFIX_EXP .)
    WHERE           reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    GIVEN           reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    MODULO          reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    INEQUALITY      reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    CONCAT          reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    AND             reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    OR              reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .)
    IF              reduce using rule 48 (EXP -> INFIX_EXP .)

  ! IF              [ reduce using rule 50 (INFIX_EXP -> MINUS INFIX_EXP .) ]


state 121

    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

    IF              shift and go to state 101


state 122

    (61) FUNCTION_EXPR -> FUNCTION_EXPR AEXP .

    OPEN_PAREN      reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    IDENTIFIER      reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    TYPENAME        reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    FLOAT           reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    INTEGER         reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    BOOL            reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    STRING          reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    PLUS            reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    MINUS           reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    TIMES           reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    DIVIDE          reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    MODULO          reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    POW             reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    EQUALITY        reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    INEQUALITY      reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    LESS            reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    LEQ             reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    GREATER         reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    GEQ             reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    CONCAT          reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    AND             reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    OR              reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    BACKTICK        reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    WHERE           reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    IF              reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    CLOSE_BRACE     reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    ENDSTATEMENT    reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    EQUALS          reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    OF              reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    ELSE            reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    CLOSE_PAREN     reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)
    GIVEN           reduce using rule 61 (FUNCTION_EXPR -> FUNCTION_EXPR AEXP .)


state 123

    (57) LAMBDA_ABSTRACTION -> LAMBDA APAT . APATS ARROW EXP
    (86) APATS -> . APAT APATS
    (87) APATS -> .
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    ARROW           reduce using rule 87 (APATS -> .)
    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 65
    APATS                          shift and go to state 141
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 124

    (58) LET_EXPR -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 142


state 125

    (17) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (18) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (19) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (20) DECLARATIONS_LIST -> . DECLARATION
    (21) DECLARATION -> . FUNCTION_DEFINITION
    (22) DECLARATION -> . VARIABLE_DEFINITION
    (23) DECLARATION -> . FIXITY_DECLARATION
    (24) DECLARATION -> .
    (25) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (26) VARIABLE_DEFINITION -> . PARAM RHS
    (27) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (38) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (39) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (40) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (109) PARAM -> . IDENTIFIER
    (41) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 144
    ENDSTATEMENT    reduce using rule 24 (DECLARATION -> .)
    SETFIX          shift and go to state 22
    IDENTIFIER      shift and go to state 24
    OPEN_PAREN      shift and go to state 26
    TYPENAME        shift and go to state 16
    MINUS           shift and go to state 32
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

  ! CLOSE_BRACE     [ reduce using rule 24 (DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 143
    DECLARATION                    shift and go to state 145
    FUNCTION_DEFINITION            shift and go to state 17
    VARIABLE_DEFINITION            shift and go to state 18
    FIXITY_DECLARATION             shift and go to state 19
    FUNCTION_LHS                   shift and go to state 20
    PARAM                          shift and go to state 21
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    LITERAL                        shift and go to state 31

state 126

    (60) MATCH_EXPR -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

    OF              shift and go to state 146
    IF              shift and go to state 101


state 127

    (67) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

    CLOSE_PAREN     shift and go to state 147
    IF              shift and go to state 101


state 128

    (68) OPERATOR_FUNC -> OPEN_PAREN OP . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 148


state 129

    (50) INFIX_EXP -> MINUS . INFIX_EXP
    (89) VARSYM -> MINUS .
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (48) EXP -> . INFIX_EXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    CLOSE_PAREN     reduce using rule 89 (VARSYM -> MINUS .)
    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    INFIX_EXP                      shift and go to state 120
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    EXP                            shift and go to state 121
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 130

    (45) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 45 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 45 (RHS -> GDRHS WHERE DECLARATIONS .)


state 131

    (46) GDRHS -> GIVEN EXP EQUALS . EXP
    (47) GDRHS -> GIVEN EXP EQUALS . EXP GDRHS
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 149
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 132

    (27) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .

    CLOSE_BRACE     reduce using rule 27 (FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)
    ENDSTATEMENT    reduce using rule 27 (FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)


state 133

    (39) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (86) APATS -> . APAT APATS
    (87) APATS -> .
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    EQUALS          reduce using rule 87 (APATS -> .)
    GIVEN           reduce using rule 87 (APATS -> .)
    CLOSE_PAREN     reduce using rule 87 (APATS -> .)
    TYPENAME        shift and go to state 40
    OPEN_PAREN      shift and go to state 43
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    APAT                           shift and go to state 65
    APATS                          shift and go to state 150
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 134

    (85) INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .

    TYPENAME        reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    MINUS           reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    BOOL            reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_PAREN     reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_BRACE     reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)
    ENDSTATEMENT    reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)


state 135

    (16) CONSTRUCTOR -> TYPENAME . ATYPES
    (33) ATYPES -> . ATYPES ATYPE
    (34) ATYPES -> .

    TYPENAME        reduce using rule 34 (ATYPES -> .)
    IDENTIFIER      reduce using rule 34 (ATYPES -> .)
    OPEN_PAREN      reduce using rule 34 (ATYPES -> .)
    PIPE            reduce using rule 34 (ATYPES -> .)
    CLOSE_BRACE     reduce using rule 34 (ATYPES -> .)
    ENDSTATEMENT    reduce using rule 34 (ATYPES -> .)

    ATYPES                         shift and go to state 151

state 136

    (11) TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS .
    (14) CONSTRUCTORS -> CONSTRUCTORS . PIPE CONSTRUCTOR

    CLOSE_BRACE     reduce using rule 11 (TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS .)
    ENDSTATEMENT    reduce using rule 11 (TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS .)
    PIPE            shift and go to state 152


state 137

    (15) CONSTRUCTORS -> CONSTRUCTOR .

    PIPE            reduce using rule 15 (CONSTRUCTORS -> CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 15 (CONSTRUCTORS -> CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 15 (CONSTRUCTORS -> CONSTRUCTOR .)


state 138

    (43) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 43 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 43 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 139

    (59) IF_EXPR -> EXP IF EXP . ELSE EXP
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

    ELSE            shift and go to state 153
    IF              shift and go to state 101


state 140

    (49) INFIX_EXP -> LEXP OP INFIX_EXP .
    (48) EXP -> INFIX_EXP .

  ! reduce/reduce conflict for IF resolved using rule 48 (EXP -> INFIX_EXP .)
    WHERE           reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GIVEN           reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MODULO          reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INEQUALITY      reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CONCAT          reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    AND             reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OR              reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IF              reduce using rule 48 (EXP -> INFIX_EXP .)

  ! IF              [ reduce using rule 49 (INFIX_EXP -> LEXP OP INFIX_EXP .) ]


state 141

    (57) LAMBDA_ABSTRACTION -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 154


state 142

    (58) LET_EXPR -> LET DECLARATIONS IN . EXP
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 155
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 143

    (17) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 156


state 144

    (18) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 18 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 18 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 18 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 145

    (19) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (20) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 157
    CLOSE_BRACE     reduce using rule 20 (DECLARATIONS_LIST -> DECLARATION .)


state 146

    (60) MATCH_EXPR -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 158


state 147

    (67) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TYPENAME        reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BOOL            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MODULO          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INEQUALITY      reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CONCAT          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    AND             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OR              reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IF              reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GIVEN           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 148

    (68) OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    TYPENAME        reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    FLOAT           reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    INTEGER         reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    BOOL            reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    STRING          reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    PLUS            reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    MINUS           reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    TIMES           reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    DIVIDE          reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    MODULO          reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    POW             reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    EQUALITY        reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    INEQUALITY      reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    LESS            reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    LEQ             reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    GREATER         reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    GEQ             reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    CONCAT          reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    AND             reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    OR              reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    BACKTICK        reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    WHERE           reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    IF              reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    EQUALS          reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    OF              reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    ELSE            reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)
    GIVEN           reduce using rule 68 (OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN .)


state 149

    (46) GDRHS -> GIVEN EXP EQUALS EXP .
    (47) GDRHS -> GIVEN EXP EQUALS EXP . GDRHS
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP
    (46) GDRHS -> . GIVEN EXP EQUALS EXP
    (47) GDRHS -> . GIVEN EXP EQUALS EXP GDRHS

    WHERE           reduce using rule 46 (GDRHS -> GIVEN EXP EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 46 (GDRHS -> GIVEN EXP EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 46 (GDRHS -> GIVEN EXP EQUALS EXP .)
    IF              shift and go to state 101
    GIVEN           shift and go to state 48

    GDRHS                          shift and go to state 159

state 150

    (39) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 39 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    GIVEN           reduce using rule 39 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 39 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 151

    (16) CONSTRUCTOR -> TYPENAME ATYPES .
    (33) ATYPES -> ATYPES . ATYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . IDENTIFIER
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    PIPE            reduce using rule 16 (CONSTRUCTOR -> TYPENAME ATYPES .)
    CLOSE_BRACE     reduce using rule 16 (CONSTRUCTOR -> TYPENAME ATYPES .)
    ENDSTATEMENT    reduce using rule 16 (CONSTRUCTOR -> TYPENAME ATYPES .)
    TYPENAME        shift and go to state 160
    IDENTIFIER      shift and go to state 162
    OPEN_PAREN      shift and go to state 163

    ATYPE                          shift and go to state 161

state 152

    (14) CONSTRUCTORS -> CONSTRUCTORS PIPE . CONSTRUCTOR
    (16) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 135

    CONSTRUCTOR                    shift and go to state 164

state 153

    (59) IF_EXPR -> EXP IF EXP ELSE . EXP
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 165
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 154

    (57) LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW . EXP
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 166
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 155

    (58) LET_EXPR -> LET DECLARATIONS IN EXP .
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

  ! shift/reduce conflict for IF resolved as shift
    PLUS            reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    MODULO          reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    INEQUALITY      reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    CONCAT          reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    AND             reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    OR              reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    BACKTICK        reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    GIVEN           reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .)
    IF              shift and go to state 101

  ! IF              [ reduce using rule 58 (LET_EXPR -> LET DECLARATIONS IN EXP .) ]


state 156

    (17) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 17 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 17 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 17 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 157

    (19) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (19) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (20) DECLARATIONS_LIST -> . DECLARATION
    (21) DECLARATION -> . FUNCTION_DEFINITION
    (22) DECLARATION -> . VARIABLE_DEFINITION
    (23) DECLARATION -> . FIXITY_DECLARATION
    (24) DECLARATION -> .
    (25) FUNCTION_DEFINITION -> . FUNCTION_LHS RHS
    (26) VARIABLE_DEFINITION -> . PARAM RHS
    (27) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (38) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (39) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (40) FUNCTION_LHS -> . INFIX_FUNCTION_DEFINITION
    (109) PARAM -> . IDENTIFIER
    (41) INFIX_FUNCTION_DEFINITION -> . LPAT INFIX_FUNCTION LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 24 (DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 24 (DECLARATION -> .)
    SETFIX          shift and go to state 22
    IDENTIFIER      shift and go to state 24
    OPEN_PAREN      shift and go to state 26
    TYPENAME        shift and go to state 16
    MINUS           shift and go to state 32
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    DECLARATION                    shift and go to state 145
    DECLARATIONS_LIST              shift and go to state 167
    FUNCTION_DEFINITION            shift and go to state 17
    VARIABLE_DEFINITION            shift and go to state 18
    FIXITY_DECLARATION             shift and go to state 19
    FUNCTION_LHS                   shift and go to state 20
    PARAM                          shift and go to state 21
    APAT                           shift and go to state 25
    INFIX_FUNCTION_DEFINITION      shift and go to state 27
    LPAT                           shift and go to state 28
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    LITERAL                        shift and go to state 31

state 158

    (60) MATCH_EXPR -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (69) ALTS -> . ALT ENDSTATEMENT ALTS
    (70) ALTS -> . ALT
    (71) ALT -> . LPAT ARROW EXP
    (72) ALT -> .
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 72 (ALT -> .)
    CLOSE_BRACE     reduce using rule 72 (ALT -> .)
    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    MINUS           shift and go to state 32
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    ALTS                           shift and go to state 168
    ALT                            shift and go to state 169
    LPAT                           shift and go to state 170
    APAT                           shift and go to state 25
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 159

    (47) GDRHS -> GIVEN EXP EQUALS EXP GDRHS .

    WHERE           reduce using rule 47 (GDRHS -> GIVEN EXP EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 47 (GDRHS -> GIVEN EXP EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 47 (GDRHS -> GIVEN EXP EQUALS EXP GDRHS .)


state 160

    (35) ATYPE -> TYPENAME .

    TYPENAME        reduce using rule 35 (ATYPE -> TYPENAME .)
    IDENTIFIER      reduce using rule 35 (ATYPE -> TYPENAME .)
    OPEN_PAREN      reduce using rule 35 (ATYPE -> TYPENAME .)
    PIPE            reduce using rule 35 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 35 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 35 (ATYPE -> TYPENAME .)
    ARROW           reduce using rule 35 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 35 (ATYPE -> TYPENAME .)


state 161

    (33) ATYPES -> ATYPES ATYPE .

    TYPENAME        reduce using rule 33 (ATYPES -> ATYPES ATYPE .)
    IDENTIFIER      reduce using rule 33 (ATYPES -> ATYPES ATYPE .)
    OPEN_PAREN      reduce using rule 33 (ATYPES -> ATYPES ATYPE .)
    PIPE            reduce using rule 33 (ATYPES -> ATYPES ATYPE .)
    CLOSE_BRACE     reduce using rule 33 (ATYPES -> ATYPES ATYPE .)
    ENDSTATEMENT    reduce using rule 33 (ATYPES -> ATYPES ATYPE .)


state 162

    (36) ATYPE -> IDENTIFIER .

    TYPENAME        reduce using rule 36 (ATYPE -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (ATYPE -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 36 (ATYPE -> IDENTIFIER .)
    PIPE            reduce using rule 36 (ATYPE -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 36 (ATYPE -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 36 (ATYPE -> IDENTIFIER .)
    ARROW           reduce using rule 36 (ATYPE -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 36 (ATYPE -> IDENTIFIER .)


state 163

    (37) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (31) TYPE -> . ATYPE
    (32) TYPE -> . ATYPE ARROW TYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . IDENTIFIER
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    TYPENAME        shift and go to state 160
    IDENTIFIER      shift and go to state 162
    OPEN_PAREN      shift and go to state 163

    TYPE                           shift and go to state 171
    ATYPE                          shift and go to state 172

state 164

    (14) CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .

    PIPE            reduce using rule 14 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 14 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 14 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)


state 165

    (59) IF_EXPR -> EXP IF EXP ELSE EXP .
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

  ! shift/reduce conflict for IF resolved as shift
    PLUS            reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    MINUS           reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    TIMES           reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    DIVIDE          reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    MODULO          reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    POW             reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    EQUALITY        reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    INEQUALITY      reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    LESS            reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    LEQ             reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    GREATER         reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    GEQ             reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    CONCAT          reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    AND             reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    OR              reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    BACKTICK        reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    WHERE           reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    EQUALS          reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    OF              reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    ELSE            reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    GIVEN           reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .)
    IF              shift and go to state 101

  ! IF              [ reduce using rule 59 (IF_EXPR -> EXP IF EXP ELSE EXP .) ]


state 166

    (57) LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

  ! shift/reduce conflict for IF resolved as shift
    PLUS            reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    MODULO          reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    INEQUALITY      reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    CONCAT          reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    AND             reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    OR              reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    BACKTICK        reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    GIVEN           reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .)
    IF              shift and go to state 101

  ! IF              [ reduce using rule 57 (LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP .) ]


state 167

    (19) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 19 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 168

    (60) MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 173


state 169

    (69) ALTS -> ALT . ENDSTATEMENT ALTS
    (70) ALTS -> ALT .

    ENDSTATEMENT    shift and go to state 174
    CLOSE_BRACE     reduce using rule 70 (ALTS -> ALT .)


state 170

    (71) ALT -> LPAT . ARROW EXP

    ARROW           shift and go to state 175


state 171

    (37) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 176


state 172

    (31) TYPE -> ATYPE .
    (32) TYPE -> ATYPE . ARROW TYPE

    CLOSE_PAREN     reduce using rule 31 (TYPE -> ATYPE .)
    ARROW           shift and go to state 177


state 173

    (60) MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    PLUS            reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MODULO          reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INEQUALITY      reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CONCAT          reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    AND             reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OR              reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    BACKTICK        reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IF              reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GIVEN           reduce using rule 60 (MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 174

    (69) ALTS -> ALT ENDSTATEMENT . ALTS
    (69) ALTS -> . ALT ENDSTATEMENT ALTS
    (70) ALTS -> . ALT
    (71) ALT -> . LPAT ARROW EXP
    (72) ALT -> .
    (73) LPAT -> . APAT
    (74) LPAT -> . CONSTRUCTOR_PATTERN
    (75) LPAT -> . NEGATIVE_LITERAL
    (79) APAT -> . PARAM
    (80) APAT -> . TYPENAME
    (81) APAT -> . LITERAL
    (82) APAT -> . OPEN_PAREN LPAT CLOSE_PAREN
    (76) CONSTRUCTOR_PATTERN -> . TYPENAME APAT APATS
    (77) NEGATIVE_LITERAL -> . MINUS INTEGER
    (78) NEGATIVE_LITERAL -> . MINUS FLOAT
    (109) PARAM -> . IDENTIFIER
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 72 (ALT -> .)
    CLOSE_BRACE     reduce using rule 72 (ALT -> .)
    TYPENAME        shift and go to state 16
    OPEN_PAREN      shift and go to state 43
    MINUS           shift and go to state 32
    IDENTIFIER      shift and go to state 44
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    ALT                            shift and go to state 169
    ALTS                           shift and go to state 178
    LPAT                           shift and go to state 170
    APAT                           shift and go to state 25
    CONSTRUCTOR_PATTERN            shift and go to state 29
    NEGATIVE_LITERAL               shift and go to state 30
    PARAM                          shift and go to state 42
    LITERAL                        shift and go to state 31

state 175

    (71) ALT -> LPAT ARROW . EXP
    (48) EXP -> . INFIX_EXP
    (49) INFIX_EXP -> . LEXP OP INFIX_EXP
    (50) INFIX_EXP -> . MINUS INFIX_EXP
    (51) INFIX_EXP -> . LEXP
    (52) LEXP -> . LAMBDA_ABSTRACTION
    (53) LEXP -> . LET_EXPR
    (54) LEXP -> . IF_EXPR
    (55) LEXP -> . MATCH_EXPR
    (56) LEXP -> . FUNCTION_EXPR
    (57) LAMBDA_ABSTRACTION -> . LAMBDA APAT APATS ARROW EXP
    (58) LET_EXPR -> . LET DECLARATIONS IN EXP
    (59) IF_EXPR -> . EXP IF EXP ELSE EXP
    (60) MATCH_EXPR -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) FUNCTION_EXPR -> . FUNCTION_EXPR AEXP
    (62) FUNCTION_EXPR -> . AEXP
    (63) AEXP -> . USED_VAR
    (64) AEXP -> . USED_TYPENAME
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPERATOR_FUNC
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (107) USED_VAR -> . IDENTIFIER
    (108) USED_TYPENAME -> . TYPENAME
    (103) LITERAL -> . FLOAT
    (104) LITERAL -> . INTEGER
    (105) LITERAL -> . BOOL
    (106) LITERAL -> . STRING
    (68) OPERATOR_FUNC -> . OPEN_PAREN OP CLOSE_PAREN

    MINUS           shift and go to state 71
    LAMBDA          shift and go to state 77
    LET             shift and go to state 78
    MATCH           shift and go to state 79
    OPEN_PAREN      shift and go to state 85
    IDENTIFIER      shift and go to state 86
    TYPENAME        shift and go to state 87
    FLOAT           shift and go to state 33
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 34
    STRING          shift and go to state 12

    EXP                            shift and go to state 179
    INFIX_EXP                      shift and go to state 69
    LEXP                           shift and go to state 70
    LAMBDA_ABSTRACTION             shift and go to state 72
    LET_EXPR                       shift and go to state 73
    IF_EXPR                        shift and go to state 74
    MATCH_EXPR                     shift and go to state 75
    FUNCTION_EXPR                  shift and go to state 76
    AEXP                           shift and go to state 80
    USED_VAR                       shift and go to state 81
    USED_TYPENAME                  shift and go to state 82
    LITERAL                        shift and go to state 83
    OPERATOR_FUNC                  shift and go to state 84

state 176

    (37) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    TYPENAME        reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    PIPE            reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ARROW           reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 177

    (32) TYPE -> ATYPE ARROW . TYPE
    (31) TYPE -> . ATYPE
    (32) TYPE -> . ATYPE ARROW TYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . IDENTIFIER
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN

    TYPENAME        shift and go to state 160
    IDENTIFIER      shift and go to state 162
    OPEN_PAREN      shift and go to state 163

    ATYPE                          shift and go to state 172
    TYPE                           shift and go to state 180

state 178

    (69) ALTS -> ALT ENDSTATEMENT ALTS .

    CLOSE_BRACE     reduce using rule 69 (ALTS -> ALT ENDSTATEMENT ALTS .)


state 179

    (71) ALT -> LPAT ARROW EXP .
    (59) IF_EXPR -> EXP . IF EXP ELSE EXP

    ENDSTATEMENT    reduce using rule 71 (ALT -> LPAT ARROW EXP .)
    CLOSE_BRACE     reduce using rule 71 (ALT -> LPAT ARROW EXP .)
    IF              shift and go to state 101


state 180

    (32) TYPE -> ATYPE ARROW TYPE .

    CLOSE_PAREN     reduce using rule 32 (TYPE -> ATYPE ARROW TYPE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 70 resolved as shift
WARNING: shift/reduce conflict for POW in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 70 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for BACKTICK in state 70 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 165 resolved as shift
WARNING: shift/reduce conflict for IF in state 166 resolved as shift
WARNING: reduce/reduce conflict in state 120 resolved using rule (EXP -> INFIX_EXP)
WARNING: rejected rule (INFIX_EXP -> MINUS INFIX_EXP) in state 120
WARNING: reduce/reduce conflict in state 140 resolved using rule (EXP -> INFIX_EXP)
WARNING: rejected rule (INFIX_EXP -> LEXP OP INFIX_EXP) in state 140
