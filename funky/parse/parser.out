Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT IDENTIFIER
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE
Rule 10    TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS
Rule 11    TOP_DECLARATION -> DECLARATION
Rule 12    CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR
Rule 13    CONSTRUCTORS -> CONSTRUCTOR
Rule 14    CONSTRUCTOR -> TYPENAME ATYPES
Rule 15    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 16    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 17    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 18    DECLARATIONS_LIST -> DECLARATION
Rule 19    DECLARATION -> GEN_DECLARATION
Rule 20    DECLARATION -> FUNCTION_LHS RHS
Rule 21    DECLARATION -> PAT RHS
Rule 22    GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE
Rule 23    GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP
Rule 24    GEN_DECLARATION -> <empty>
Rule 25    ASSOCIATIVITY -> LEFTASSOC
Rule 26    ASSOCIATIVITY -> RIGHTASSOC
Rule 27    ASSOCIATIVITY -> NONASSOC
Rule 28    TYPE -> ATYPE
Rule 29    TYPE -> ATYPE ARROW TYPE
Rule 30    ATYPES -> ATYPES ATYPE
Rule 31    ATYPES -> <empty>
Rule 32    ATYPE -> TYPENAME
Rule 33    ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN
Rule 34    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 35    ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE
Rule 36    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 37    FUNCTION_LHS -> PAT VAROP PAT
Rule 38    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 39    RHS -> EQUALS EXP
Rule 40    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 41    RHS -> GDRHS
Rule 42    RHS -> GDRHS WHERE DECLARATIONS
Rule 43    GDRHS -> GUARDS EQUALS EXP
Rule 44    GDRHS -> GUARDS EQUALS EXP GDRHS
Rule 45    GUARDS -> PIPE GUARD
Rule 46    GUARD -> INFIX_EXP
Rule 47    EXP -> INFIX_EXP
Rule 48    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 49    INFIX_EXP -> MINUS INFIX_EXP
Rule 50    INFIX_EXP -> LEXP
Rule 51    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 52    LEXP -> LET DECLARATIONS IN EXP
Rule 53    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 54    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 55    LEXP -> FEXP
Rule 56    FEXP -> FEXP AEXP
Rule 57    FEXP -> AEXP
Rule 58    AEXP -> USED_VAR
Rule 59    AEXP -> GCON
Rule 60    AEXP -> LITERAL
Rule 61    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 62    AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
Rule 63    AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE
Rule 64    AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
Rule 65    CONSTRUCTION_PARAMS -> CONSTRUCTION_PARAMS AEXP
Rule 66    CONSTRUCTION_PARAMS -> AEXP
Rule 67    ALTS -> ALT ENDSTATEMENT ALTS
Rule 68    ALTS -> ALT
Rule 69    ALT -> PAT ARROW EXP
Rule 70    ALT -> <empty>
Rule 71    PAT -> LPAT LIST_CONSTRUCTOR PAT
Rule 72    PAT -> LPAT
Rule 73    LPAT -> APAT
Rule 74    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 75    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 76    LPAT -> GCON APAT APATS
Rule 77    APAT -> PARAM
Rule 78    APAT -> GCON
Rule 79    APAT -> LITERAL
Rule 80    APAT -> OPEN_PAREN PAT CLOSE_PAREN
Rule 81    APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
Rule 82    APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE
Rule 83    GCON -> OPEN_PAREN CLOSE_PAREN
Rule 84    GCON -> OPEN_SQUARE CLOSE_SQUARE
Rule 85    GCON -> TYPENAME
Rule 86    VAROP -> VARSYM
Rule 87    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 88    OP -> VAROP
Rule 89    EXP_LIST -> EXP_LIST COMMA EXP
Rule 90    EXP_LIST -> EXP
Rule 91    APATS -> APAT APATS
Rule 92    APATS -> <empty>
Rule 93    PAT_LIST -> PAT_LIST COMMA PAT
Rule 94    PAT_LIST -> PAT
Rule 95    VARSYM -> PLUS
Rule 96    VARSYM -> MINUS
Rule 97    VARSYM -> TIMES
Rule 98    VARSYM -> DIVIDE
Rule 99    VARSYM -> MODULO
Rule 100   VARSYM -> POW
Rule 101   VARSYM -> EQUALITY
Rule 102   VARSYM -> INEQUALITY
Rule 103   VARSYM -> LESS
Rule 104   VARSYM -> LEQ
Rule 105   VARSYM -> GREATER
Rule 106   VARSYM -> GEQ
Rule 107   VARSYM -> AND
Rule 108   VARSYM -> OR
Rule 109   VARSYM -> LIST_CONSTRUCTOR
Rule 110   TYPES_LIST -> TYPES_LIST COMMA TYPE
Rule 111   TYPES_LIST -> TYPE
Rule 112   LITERAL -> FLOAT
Rule 113   LITERAL -> INTEGER
Rule 114   LITERAL -> BOOL
Rule 115   LITERAL -> CHAR
Rule 116   LITERAL -> STRING
Rule 117   USED_VAR -> IDENTIFIER
Rule 118   PARAM -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 107
ARROW                : 29 51 69
AS                   : 
BACKTICK             : 87 87
BOOL                 : 114
CHAR                 : 115
CLOSE_BRACE          : 2 3 15 16 54
CLOSE_PAREN          : 33 34 38 61 62 74 75 80 81 83
CLOSE_SQUARE         : 35 63 64 82 84
COMMA                : 62 64 81 89 93 110
DIVIDE               : 98
ELSE                 : 53
ENDSTATEMENT         : 2 4 7 17 67
EQUALITY             : 101
EQUALS               : 9 10 39 40 43 44
FLOAT                : 75 112
GEQ                  : 106
GREATER              : 105
IDENTIFIER           : 1 6 22 36 87 117 118
IF                   : 53
IMPORT               : 6
IN                   : 52
INEQUALITY           : 102
INTEGER              : 23 74 113
LAMBDA               : 51
LEFTASSOC            : 25
LEQ                  : 104
LESS                 : 103
LET                  : 52
LIST_CONSTRUCTOR     : 71 109
MATCH                : 54
MINUS                : 49 74 75 96
MODULE               : 1
MODULO               : 99
NEWCONS              : 10
NEWTYPE              : 9
NONASSOC             : 27
OF                   : 54
OPEN_BRACE           : 2 3 15 16 54
OPEN_PAREN           : 33 34 38 61 62 74 75 80 81 83
OPEN_SQUARE          : 35 63 64 82 84
OR                   : 108
PIPE                 : 12 45
PLUS                 : 95
POW                  : 100
RIGHTASSOC           : 26
SETFIX               : 23
STRING               : 116
THEN                 : 53
TIMES                : 97
TYPENAME             : 9 10 14 32 85
TYPESIG              : 22
WHERE                : 1 40 42
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 56 57 65 66
ALT                  : 67 68
ALTS                 : 54 67
APAT                 : 36 38 51 73 76 91
APATS                : 36 38 51 76 91
ASSOCIATIVITY        : 23
ATYPE                : 28 29 30
ATYPES               : 14 30
BODY                 : 1
CONSTRUCTION_PARAMS  : 65
CONSTRUCTOR          : 12 13
CONSTRUCTORS         : 10 12
DECLARATION          : 11 17 18
DECLARATIONS         : 40 42 52
DECLARATIONS_LIST    : 15 17
EXP                  : 39 40 43 44 51 52 53 53 53 54 61 62 63 64 69 89 90
EXP_LIST             : 62 64 89
FEXP                 : 55 56
FUNCTION_LHS         : 20 38
GCON                 : 59 76 78
GDRHS                : 41 42 44
GEN_DECLARATION      : 19
GUARD                : 45
GUARDS               : 43 44
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 46 47 48 49
LEXP                 : 48 50
LITERAL              : 60 79
LPAT                 : 71 72
MODULE_DEFINITION    : 0
OP                   : 23 48
PARAM                : 77
PAT                  : 21 37 37 69 71 80 81 93 94
PAT_LIST             : 81 82 93
RHS                  : 20 21
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 9 22 29 34 35 110 111
TYPES_LIST           : 33 110
USED_VAR             : 58
VAROP                : 37 88
VARSYM               : 86

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . NEWCONS TYPENAME EQUALS CONSTRUCTORS
    (11) TOP_DECLARATION -> . DECLARATION
    (19) DECLARATION -> . GEN_DECLARATION
    (20) DECLARATION -> . FUNCTION_LHS RHS
    (21) DECLARATION -> . PAT RHS
    (22) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (23) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (24) GEN_DECLARATION -> .
    (36) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (37) FUNCTION_LHS -> . PAT VAROP PAT
    (38) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    NEWCONS         shift and go to state 15
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 20
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 23
    MINUS           shift and go to state 25
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 16
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_LHS                   shift and go to state 18
    PAT                            shift and go to state 19
    APAT                           shift and go to state 22
    LPAT                           shift and go to state 24
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 34


state 8

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 35
    ENDSTATEMENT    shift and go to state 36


state 9

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (8) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (6) IMPORT_DECLARATION -> IMPORT . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 12

    (22) GEN_DECLARATION -> IDENTIFIER . TYPESIG TYPE
    (36) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (118) PARAM -> IDENTIFIER .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    TYPESIG         shift and go to state 39
    LIST_CONSTRUCTOR reduce using rule 118 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 118 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 118 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 118 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 118 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 118 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (PARAM -> IDENTIFIER .)
    MODULO          reduce using rule 118 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 118 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 118 (PARAM -> IDENTIFIER .)
    INEQUALITY      reduce using rule 118 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 118 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 118 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 118 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 118 (PARAM -> IDENTIFIER .)
    AND             reduce using rule 118 (PARAM -> IDENTIFIER .)
    OR              reduce using rule 118 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 118 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 40
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 13

    (9) TOP_DECLARATION -> NEWTYPE . TYPENAME EQUALS TYPE

    TYPENAME        shift and go to state 43


state 14

    (85) GCON -> TYPENAME .

    OPEN_PAREN      reduce using rule 85 (GCON -> TYPENAME .)
    OPEN_SQUARE     reduce using rule 85 (GCON -> TYPENAME .)
    IDENTIFIER      reduce using rule 85 (GCON -> TYPENAME .)
    TYPENAME        reduce using rule 85 (GCON -> TYPENAME .)
    FLOAT           reduce using rule 85 (GCON -> TYPENAME .)
    INTEGER         reduce using rule 85 (GCON -> TYPENAME .)
    BOOL            reduce using rule 85 (GCON -> TYPENAME .)
    CHAR            reduce using rule 85 (GCON -> TYPENAME .)
    STRING          reduce using rule 85 (GCON -> TYPENAME .)
    LIST_CONSTRUCTOR reduce using rule 85 (GCON -> TYPENAME .)
    EQUALS          reduce using rule 85 (GCON -> TYPENAME .)
    BACKTICK        reduce using rule 85 (GCON -> TYPENAME .)
    PLUS            reduce using rule 85 (GCON -> TYPENAME .)
    MINUS           reduce using rule 85 (GCON -> TYPENAME .)
    TIMES           reduce using rule 85 (GCON -> TYPENAME .)
    DIVIDE          reduce using rule 85 (GCON -> TYPENAME .)
    MODULO          reduce using rule 85 (GCON -> TYPENAME .)
    POW             reduce using rule 85 (GCON -> TYPENAME .)
    EQUALITY        reduce using rule 85 (GCON -> TYPENAME .)
    INEQUALITY      reduce using rule 85 (GCON -> TYPENAME .)
    LESS            reduce using rule 85 (GCON -> TYPENAME .)
    LEQ             reduce using rule 85 (GCON -> TYPENAME .)
    GREATER         reduce using rule 85 (GCON -> TYPENAME .)
    GEQ             reduce using rule 85 (GCON -> TYPENAME .)
    AND             reduce using rule 85 (GCON -> TYPENAME .)
    OR              reduce using rule 85 (GCON -> TYPENAME .)
    PIPE            reduce using rule 85 (GCON -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 85 (GCON -> TYPENAME .)
    COMMA           reduce using rule 85 (GCON -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 85 (GCON -> TYPENAME .)
    ARROW           reduce using rule 85 (GCON -> TYPENAME .)
    WHERE           reduce using rule 85 (GCON -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 85 (GCON -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 85 (GCON -> TYPENAME .)
    THEN            reduce using rule 85 (GCON -> TYPENAME .)
    OF              reduce using rule 85 (GCON -> TYPENAME .)
    ELSE            reduce using rule 85 (GCON -> TYPENAME .)


state 15

    (10) TOP_DECLARATION -> NEWCONS . TYPENAME EQUALS CONSTRUCTORS

    TYPENAME        shift and go to state 44


state 16

    (11) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 11 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 11 (TOP_DECLARATION -> DECLARATION .)


state 17

    (19) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 19 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 19 (DECLARATION -> GEN_DECLARATION .)


state 18

    (20) DECLARATION -> FUNCTION_LHS . RHS
    (39) RHS -> . EQUALS EXP
    (40) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (41) RHS -> . GDRHS
    (42) RHS -> . GDRHS WHERE DECLARATIONS
    (43) GDRHS -> . GUARDS EQUALS EXP
    (44) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (45) GUARDS -> . PIPE GUARD

    EQUALS          shift and go to state 46
    PIPE            shift and go to state 49

    RHS                            shift and go to state 45
    GDRHS                          shift and go to state 47
    GUARDS                         shift and go to state 48

state 19

    (21) DECLARATION -> PAT . RHS
    (37) FUNCTION_LHS -> PAT . VAROP PAT
    (39) RHS -> . EQUALS EXP
    (40) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (41) RHS -> . GDRHS
    (42) RHS -> . GDRHS WHERE DECLARATIONS
    (86) VAROP -> . VARSYM
    (87) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (43) GDRHS -> . GUARDS EQUALS EXP
    (44) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (95) VARSYM -> . PLUS
    (96) VARSYM -> . MINUS
    (97) VARSYM -> . TIMES
    (98) VARSYM -> . DIVIDE
    (99) VARSYM -> . MODULO
    (100) VARSYM -> . POW
    (101) VARSYM -> . EQUALITY
    (102) VARSYM -> . INEQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ
    (107) VARSYM -> . AND
    (108) VARSYM -> . OR
    (109) VARSYM -> . LIST_CONSTRUCTOR
    (45) GUARDS -> . PIPE GUARD

    EQUALS          shift and go to state 46
    BACKTICK        shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    POW             shift and go to state 59
    EQUALITY        shift and go to state 60
    INEQUALITY      shift and go to state 61
    LESS            shift and go to state 62
    LEQ             shift and go to state 63
    GREATER         shift and go to state 64
    GEQ             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    LIST_CONSTRUCTOR shift and go to state 68
    PIPE            shift and go to state 49

    RHS                            shift and go to state 50
    VAROP                          shift and go to state 51
    GDRHS                          shift and go to state 47
    VARSYM                         shift and go to state 52
    GUARDS                         shift and go to state 48

state 20

    (23) GEN_DECLARATION -> SETFIX . ASSOCIATIVITY INTEGER OP
    (25) ASSOCIATIVITY -> . LEFTASSOC
    (26) ASSOCIATIVITY -> . RIGHTASSOC
    (27) ASSOCIATIVITY -> . NONASSOC

    LEFTASSOC       shift and go to state 70
    RIGHTASSOC      shift and go to state 71
    NONASSOC        shift and go to state 72

    ASSOCIATIVITY                  shift and go to state 69

state 21

    (113) LITERAL -> INTEGER .

    LIST_CONSTRUCTOR reduce using rule 113 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 113 (LITERAL -> INTEGER .)
    BACKTICK        reduce using rule 113 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 113 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 113 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 113 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 113 (LITERAL -> INTEGER .)
    MODULO          reduce using rule 113 (LITERAL -> INTEGER .)
    POW             reduce using rule 113 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 113 (LITERAL -> INTEGER .)
    INEQUALITY      reduce using rule 113 (LITERAL -> INTEGER .)
    LESS            reduce using rule 113 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 113 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 113 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 113 (LITERAL -> INTEGER .)
    AND             reduce using rule 113 (LITERAL -> INTEGER .)
    OR              reduce using rule 113 (LITERAL -> INTEGER .)
    PIPE            reduce using rule 113 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 113 (LITERAL -> INTEGER .)
    OPEN_SQUARE     reduce using rule 113 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 113 (LITERAL -> INTEGER .)
    TYPENAME        reduce using rule 113 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 113 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 113 (LITERAL -> INTEGER .)
    BOOL            reduce using rule 113 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 113 (LITERAL -> INTEGER .)
    STRING          reduce using rule 113 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 113 (LITERAL -> INTEGER .)
    COMMA           reduce using rule 113 (LITERAL -> INTEGER .)
    CLOSE_SQUARE    reduce using rule 113 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 113 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 113 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 113 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 113 (LITERAL -> INTEGER .)
    THEN            reduce using rule 113 (LITERAL -> INTEGER .)
    OF              reduce using rule 113 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 113 (LITERAL -> INTEGER .)


state 22

    (73) LPAT -> APAT .

    LIST_CONSTRUCTOR reduce using rule 73 (LPAT -> APAT .)
    EQUALS          reduce using rule 73 (LPAT -> APAT .)
    BACKTICK        reduce using rule 73 (LPAT -> APAT .)
    PLUS            reduce using rule 73 (LPAT -> APAT .)
    MINUS           reduce using rule 73 (LPAT -> APAT .)
    TIMES           reduce using rule 73 (LPAT -> APAT .)
    DIVIDE          reduce using rule 73 (LPAT -> APAT .)
    MODULO          reduce using rule 73 (LPAT -> APAT .)
    POW             reduce using rule 73 (LPAT -> APAT .)
    EQUALITY        reduce using rule 73 (LPAT -> APAT .)
    INEQUALITY      reduce using rule 73 (LPAT -> APAT .)
    LESS            reduce using rule 73 (LPAT -> APAT .)
    LEQ             reduce using rule 73 (LPAT -> APAT .)
    GREATER         reduce using rule 73 (LPAT -> APAT .)
    GEQ             reduce using rule 73 (LPAT -> APAT .)
    AND             reduce using rule 73 (LPAT -> APAT .)
    OR              reduce using rule 73 (LPAT -> APAT .)
    PIPE            reduce using rule 73 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 73 (LPAT -> APAT .)
    COMMA           reduce using rule 73 (LPAT -> APAT .)
    CLOSE_SQUARE    reduce using rule 73 (LPAT -> APAT .)
    ARROW           reduce using rule 73 (LPAT -> APAT .)


state 23

    (38) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (80) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (81) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (83) GCON -> OPEN_PAREN . CLOSE_PAREN
    (36) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (37) FUNCTION_LHS -> . PAT VAROP PAT
    (38) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 74
    IDENTIFIER      shift and go to state 76
    OPEN_PAREN      shift and go to state 23
    MINUS           shift and go to state 25
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    FUNCTION_LHS                   shift and go to state 73
    APAT                           shift and go to state 22
    PAT                            shift and go to state 75
    LPAT                           shift and go to state 24
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 24

    (71) PAT -> LPAT . LIST_CONSTRUCTOR PAT
    (72) PAT -> LPAT .

  ! shift/reduce conflict for LIST_CONSTRUCTOR resolved as shift
    LIST_CONSTRUCTOR shift and go to state 77
    EQUALS          reduce using rule 72 (PAT -> LPAT .)
    BACKTICK        reduce using rule 72 (PAT -> LPAT .)
    PLUS            reduce using rule 72 (PAT -> LPAT .)
    MINUS           reduce using rule 72 (PAT -> LPAT .)
    TIMES           reduce using rule 72 (PAT -> LPAT .)
    DIVIDE          reduce using rule 72 (PAT -> LPAT .)
    MODULO          reduce using rule 72 (PAT -> LPAT .)
    POW             reduce using rule 72 (PAT -> LPAT .)
    EQUALITY        reduce using rule 72 (PAT -> LPAT .)
    INEQUALITY      reduce using rule 72 (PAT -> LPAT .)
    LESS            reduce using rule 72 (PAT -> LPAT .)
    LEQ             reduce using rule 72 (PAT -> LPAT .)
    GREATER         reduce using rule 72 (PAT -> LPAT .)
    GEQ             reduce using rule 72 (PAT -> LPAT .)
    AND             reduce using rule 72 (PAT -> LPAT .)
    OR              reduce using rule 72 (PAT -> LPAT .)
    PIPE            reduce using rule 72 (PAT -> LPAT .)
    CLOSE_PAREN     reduce using rule 72 (PAT -> LPAT .)
    COMMA           reduce using rule 72 (PAT -> LPAT .)
    CLOSE_SQUARE    reduce using rule 72 (PAT -> LPAT .)
    ARROW           reduce using rule 72 (PAT -> LPAT .)

  ! LIST_CONSTRUCTOR [ reduce using rule 72 (PAT -> LPAT .) ]


state 25

    (74) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 78


state 26

    (112) LITERAL -> FLOAT .

    LIST_CONSTRUCTOR reduce using rule 112 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 112 (LITERAL -> FLOAT .)
    BACKTICK        reduce using rule 112 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 112 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 112 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 112 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 112 (LITERAL -> FLOAT .)
    MODULO          reduce using rule 112 (LITERAL -> FLOAT .)
    POW             reduce using rule 112 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 112 (LITERAL -> FLOAT .)
    INEQUALITY      reduce using rule 112 (LITERAL -> FLOAT .)
    LESS            reduce using rule 112 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 112 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 112 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 112 (LITERAL -> FLOAT .)
    AND             reduce using rule 112 (LITERAL -> FLOAT .)
    OR              reduce using rule 112 (LITERAL -> FLOAT .)
    PIPE            reduce using rule 112 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 112 (LITERAL -> FLOAT .)
    OPEN_SQUARE     reduce using rule 112 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 112 (LITERAL -> FLOAT .)
    TYPENAME        reduce using rule 112 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 112 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 112 (LITERAL -> FLOAT .)
    BOOL            reduce using rule 112 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 112 (LITERAL -> FLOAT .)
    STRING          reduce using rule 112 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 112 (LITERAL -> FLOAT .)
    COMMA           reduce using rule 112 (LITERAL -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 112 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 112 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 112 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 112 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 112 (LITERAL -> FLOAT .)
    THEN            reduce using rule 112 (LITERAL -> FLOAT .)
    OF              reduce using rule 112 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 112 (LITERAL -> FLOAT .)


state 27

    (76) LPAT -> GCON . APAT APATS
    (78) APAT -> GCON .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    LIST_CONSTRUCTOR reduce using rule 78 (APAT -> GCON .)
    EQUALS          reduce using rule 78 (APAT -> GCON .)
    BACKTICK        reduce using rule 78 (APAT -> GCON .)
    PLUS            reduce using rule 78 (APAT -> GCON .)
    MINUS           reduce using rule 78 (APAT -> GCON .)
    TIMES           reduce using rule 78 (APAT -> GCON .)
    DIVIDE          reduce using rule 78 (APAT -> GCON .)
    MODULO          reduce using rule 78 (APAT -> GCON .)
    POW             reduce using rule 78 (APAT -> GCON .)
    EQUALITY        reduce using rule 78 (APAT -> GCON .)
    INEQUALITY      reduce using rule 78 (APAT -> GCON .)
    LESS            reduce using rule 78 (APAT -> GCON .)
    LEQ             reduce using rule 78 (APAT -> GCON .)
    GREATER         reduce using rule 78 (APAT -> GCON .)
    GEQ             reduce using rule 78 (APAT -> GCON .)
    AND             reduce using rule 78 (APAT -> GCON .)
    OR              reduce using rule 78 (APAT -> GCON .)
    PIPE            reduce using rule 78 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 78 (APAT -> GCON .)
    COMMA           reduce using rule 78 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 78 (APAT -> GCON .)
    ARROW           reduce using rule 78 (APAT -> GCON .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    GCON                           shift and go to state 41
    APAT                           shift and go to state 79
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 28

    (77) APAT -> PARAM .

    LIST_CONSTRUCTOR reduce using rule 77 (APAT -> PARAM .)
    EQUALS          reduce using rule 77 (APAT -> PARAM .)
    BACKTICK        reduce using rule 77 (APAT -> PARAM .)
    PLUS            reduce using rule 77 (APAT -> PARAM .)
    MINUS           reduce using rule 77 (APAT -> PARAM .)
    TIMES           reduce using rule 77 (APAT -> PARAM .)
    DIVIDE          reduce using rule 77 (APAT -> PARAM .)
    MODULO          reduce using rule 77 (APAT -> PARAM .)
    POW             reduce using rule 77 (APAT -> PARAM .)
    EQUALITY        reduce using rule 77 (APAT -> PARAM .)
    INEQUALITY      reduce using rule 77 (APAT -> PARAM .)
    LESS            reduce using rule 77 (APAT -> PARAM .)
    LEQ             reduce using rule 77 (APAT -> PARAM .)
    GREATER         reduce using rule 77 (APAT -> PARAM .)
    GEQ             reduce using rule 77 (APAT -> PARAM .)
    AND             reduce using rule 77 (APAT -> PARAM .)
    OR              reduce using rule 77 (APAT -> PARAM .)
    PIPE            reduce using rule 77 (APAT -> PARAM .)
    OPEN_PAREN      reduce using rule 77 (APAT -> PARAM .)
    OPEN_SQUARE     reduce using rule 77 (APAT -> PARAM .)
    IDENTIFIER      reduce using rule 77 (APAT -> PARAM .)
    TYPENAME        reduce using rule 77 (APAT -> PARAM .)
    FLOAT           reduce using rule 77 (APAT -> PARAM .)
    INTEGER         reduce using rule 77 (APAT -> PARAM .)
    BOOL            reduce using rule 77 (APAT -> PARAM .)
    CHAR            reduce using rule 77 (APAT -> PARAM .)
    STRING          reduce using rule 77 (APAT -> PARAM .)
    CLOSE_PAREN     reduce using rule 77 (APAT -> PARAM .)
    COMMA           reduce using rule 77 (APAT -> PARAM .)
    CLOSE_SQUARE    reduce using rule 77 (APAT -> PARAM .)
    ARROW           reduce using rule 77 (APAT -> PARAM .)


state 29

    (79) APAT -> LITERAL .

    LIST_CONSTRUCTOR reduce using rule 79 (APAT -> LITERAL .)
    EQUALS          reduce using rule 79 (APAT -> LITERAL .)
    BACKTICK        reduce using rule 79 (APAT -> LITERAL .)
    PLUS            reduce using rule 79 (APAT -> LITERAL .)
    MINUS           reduce using rule 79 (APAT -> LITERAL .)
    TIMES           reduce using rule 79 (APAT -> LITERAL .)
    DIVIDE          reduce using rule 79 (APAT -> LITERAL .)
    MODULO          reduce using rule 79 (APAT -> LITERAL .)
    POW             reduce using rule 79 (APAT -> LITERAL .)
    EQUALITY        reduce using rule 79 (APAT -> LITERAL .)
    INEQUALITY      reduce using rule 79 (APAT -> LITERAL .)
    LESS            reduce using rule 79 (APAT -> LITERAL .)
    LEQ             reduce using rule 79 (APAT -> LITERAL .)
    GREATER         reduce using rule 79 (APAT -> LITERAL .)
    GEQ             reduce using rule 79 (APAT -> LITERAL .)
    AND             reduce using rule 79 (APAT -> LITERAL .)
    OR              reduce using rule 79 (APAT -> LITERAL .)
    PIPE            reduce using rule 79 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 79 (APAT -> LITERAL .)
    OPEN_SQUARE     reduce using rule 79 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 79 (APAT -> LITERAL .)
    TYPENAME        reduce using rule 79 (APAT -> LITERAL .)
    FLOAT           reduce using rule 79 (APAT -> LITERAL .)
    INTEGER         reduce using rule 79 (APAT -> LITERAL .)
    BOOL            reduce using rule 79 (APAT -> LITERAL .)
    CHAR            reduce using rule 79 (APAT -> LITERAL .)
    STRING          reduce using rule 79 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 79 (APAT -> LITERAL .)
    COMMA           reduce using rule 79 (APAT -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 79 (APAT -> LITERAL .)
    ARROW           reduce using rule 79 (APAT -> LITERAL .)


state 30

    (82) APAT -> OPEN_SQUARE . PAT_LIST CLOSE_SQUARE
    (84) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (93) PAT_LIST -> . PAT_LIST COMMA PAT
    (94) PAT_LIST -> . PAT
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 81
    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT_LIST                       shift and go to state 80
    PAT                            shift and go to state 82
    LPAT                           shift and go to state 24
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 31

    (114) LITERAL -> BOOL .

    LIST_CONSTRUCTOR reduce using rule 114 (LITERAL -> BOOL .)
    EQUALS          reduce using rule 114 (LITERAL -> BOOL .)
    BACKTICK        reduce using rule 114 (LITERAL -> BOOL .)
    PLUS            reduce using rule 114 (LITERAL -> BOOL .)
    MINUS           reduce using rule 114 (LITERAL -> BOOL .)
    TIMES           reduce using rule 114 (LITERAL -> BOOL .)
    DIVIDE          reduce using rule 114 (LITERAL -> BOOL .)
    MODULO          reduce using rule 114 (LITERAL -> BOOL .)
    POW             reduce using rule 114 (LITERAL -> BOOL .)
    EQUALITY        reduce using rule 114 (LITERAL -> BOOL .)
    INEQUALITY      reduce using rule 114 (LITERAL -> BOOL .)
    LESS            reduce using rule 114 (LITERAL -> BOOL .)
    LEQ             reduce using rule 114 (LITERAL -> BOOL .)
    GREATER         reduce using rule 114 (LITERAL -> BOOL .)
    GEQ             reduce using rule 114 (LITERAL -> BOOL .)
    AND             reduce using rule 114 (LITERAL -> BOOL .)
    OR              reduce using rule 114 (LITERAL -> BOOL .)
    PIPE            reduce using rule 114 (LITERAL -> BOOL .)
    OPEN_PAREN      reduce using rule 114 (LITERAL -> BOOL .)
    OPEN_SQUARE     reduce using rule 114 (LITERAL -> BOOL .)
    IDENTIFIER      reduce using rule 114 (LITERAL -> BOOL .)
    TYPENAME        reduce using rule 114 (LITERAL -> BOOL .)
    FLOAT           reduce using rule 114 (LITERAL -> BOOL .)
    INTEGER         reduce using rule 114 (LITERAL -> BOOL .)
    BOOL            reduce using rule 114 (LITERAL -> BOOL .)
    CHAR            reduce using rule 114 (LITERAL -> BOOL .)
    STRING          reduce using rule 114 (LITERAL -> BOOL .)
    CLOSE_PAREN     reduce using rule 114 (LITERAL -> BOOL .)
    COMMA           reduce using rule 114 (LITERAL -> BOOL .)
    CLOSE_SQUARE    reduce using rule 114 (LITERAL -> BOOL .)
    ARROW           reduce using rule 114 (LITERAL -> BOOL .)
    WHERE           reduce using rule 114 (LITERAL -> BOOL .)
    CLOSE_BRACE     reduce using rule 114 (LITERAL -> BOOL .)
    ENDSTATEMENT    reduce using rule 114 (LITERAL -> BOOL .)
    THEN            reduce using rule 114 (LITERAL -> BOOL .)
    OF              reduce using rule 114 (LITERAL -> BOOL .)
    ELSE            reduce using rule 114 (LITERAL -> BOOL .)


state 32

    (115) LITERAL -> CHAR .

    LIST_CONSTRUCTOR reduce using rule 115 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 115 (LITERAL -> CHAR .)
    BACKTICK        reduce using rule 115 (LITERAL -> CHAR .)
    PLUS            reduce using rule 115 (LITERAL -> CHAR .)
    MINUS           reduce using rule 115 (LITERAL -> CHAR .)
    TIMES           reduce using rule 115 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 115 (LITERAL -> CHAR .)
    MODULO          reduce using rule 115 (LITERAL -> CHAR .)
    POW             reduce using rule 115 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 115 (LITERAL -> CHAR .)
    INEQUALITY      reduce using rule 115 (LITERAL -> CHAR .)
    LESS            reduce using rule 115 (LITERAL -> CHAR .)
    LEQ             reduce using rule 115 (LITERAL -> CHAR .)
    GREATER         reduce using rule 115 (LITERAL -> CHAR .)
    GEQ             reduce using rule 115 (LITERAL -> CHAR .)
    AND             reduce using rule 115 (LITERAL -> CHAR .)
    OR              reduce using rule 115 (LITERAL -> CHAR .)
    PIPE            reduce using rule 115 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 115 (LITERAL -> CHAR .)
    OPEN_SQUARE     reduce using rule 115 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 115 (LITERAL -> CHAR .)
    TYPENAME        reduce using rule 115 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 115 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 115 (LITERAL -> CHAR .)
    BOOL            reduce using rule 115 (LITERAL -> CHAR .)
    CHAR            reduce using rule 115 (LITERAL -> CHAR .)
    STRING          reduce using rule 115 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 115 (LITERAL -> CHAR .)
    COMMA           reduce using rule 115 (LITERAL -> CHAR .)
    CLOSE_SQUARE    reduce using rule 115 (LITERAL -> CHAR .)
    ARROW           reduce using rule 115 (LITERAL -> CHAR .)
    WHERE           reduce using rule 115 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 115 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 115 (LITERAL -> CHAR .)
    THEN            reduce using rule 115 (LITERAL -> CHAR .)
    OF              reduce using rule 115 (LITERAL -> CHAR .)
    ELSE            reduce using rule 115 (LITERAL -> CHAR .)


state 33

    (116) LITERAL -> STRING .

    LIST_CONSTRUCTOR reduce using rule 116 (LITERAL -> STRING .)
    EQUALS          reduce using rule 116 (LITERAL -> STRING .)
    BACKTICK        reduce using rule 116 (LITERAL -> STRING .)
    PLUS            reduce using rule 116 (LITERAL -> STRING .)
    MINUS           reduce using rule 116 (LITERAL -> STRING .)
    TIMES           reduce using rule 116 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 116 (LITERAL -> STRING .)
    MODULO          reduce using rule 116 (LITERAL -> STRING .)
    POW             reduce using rule 116 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 116 (LITERAL -> STRING .)
    INEQUALITY      reduce using rule 116 (LITERAL -> STRING .)
    LESS            reduce using rule 116 (LITERAL -> STRING .)
    LEQ             reduce using rule 116 (LITERAL -> STRING .)
    GREATER         reduce using rule 116 (LITERAL -> STRING .)
    GEQ             reduce using rule 116 (LITERAL -> STRING .)
    AND             reduce using rule 116 (LITERAL -> STRING .)
    OR              reduce using rule 116 (LITERAL -> STRING .)
    PIPE            reduce using rule 116 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 116 (LITERAL -> STRING .)
    OPEN_SQUARE     reduce using rule 116 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 116 (LITERAL -> STRING .)
    TYPENAME        reduce using rule 116 (LITERAL -> STRING .)
    FLOAT           reduce using rule 116 (LITERAL -> STRING .)
    INTEGER         reduce using rule 116 (LITERAL -> STRING .)
    BOOL            reduce using rule 116 (LITERAL -> STRING .)
    CHAR            reduce using rule 116 (LITERAL -> STRING .)
    STRING          reduce using rule 116 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 116 (LITERAL -> STRING .)
    COMMA           reduce using rule 116 (LITERAL -> STRING .)
    CLOSE_SQUARE    reduce using rule 116 (LITERAL -> STRING .)
    ARROW           reduce using rule 116 (LITERAL -> STRING .)
    WHERE           reduce using rule 116 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 116 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 116 (LITERAL -> STRING .)
    THEN            reduce using rule 116 (LITERAL -> STRING .)
    OF              reduce using rule 116 (LITERAL -> STRING .)
    ELSE            reduce using rule 116 (LITERAL -> STRING .)


state 34

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . NEWCONS TYPENAME EQUALS CONSTRUCTORS
    (11) TOP_DECLARATION -> . DECLARATION
    (19) DECLARATION -> . GEN_DECLARATION
    (20) DECLARATION -> . FUNCTION_LHS RHS
    (21) DECLARATION -> . PAT RHS
    (22) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (23) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (24) GEN_DECLARATION -> .
    (36) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (37) FUNCTION_LHS -> . PAT VAROP PAT
    (38) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    NEWCONS         shift and go to state 15
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 20
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 23
    MINUS           shift and go to state 25
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    TOP_DECLARATIONS               shift and go to state 83
    IMPORT_DECLARATION             shift and go to state 84
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 16
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_LHS                   shift and go to state 18
    PAT                            shift and go to state 19
    APAT                           shift and go to state 22
    LPAT                           shift and go to state 24
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 35

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 36

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . NEWCONS TYPENAME EQUALS CONSTRUCTORS
    (11) TOP_DECLARATION -> . DECLARATION
    (19) DECLARATION -> . GEN_DECLARATION
    (20) DECLARATION -> . FUNCTION_LHS RHS
    (21) DECLARATION -> . PAT RHS
    (22) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (23) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (24) GEN_DECLARATION -> .
    (36) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (37) FUNCTION_LHS -> . PAT VAROP PAT
    (38) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    NEWTYPE         shift and go to state 13
    NEWCONS         shift and go to state 15
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 20
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 23
    MINUS           shift and go to state 25
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    TOP_DECLARATION                shift and go to state 85
    DECLARATION                    shift and go to state 16
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_LHS                   shift and go to state 18
    PAT                            shift and go to state 19
    APAT                           shift and go to state 22
    LPAT                           shift and go to state 24
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 37

    (6) IMPORT_DECLARATION -> IMPORT IDENTIFIER .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATION -> IMPORT IDENTIFIER .)


state 38

    (118) PARAM -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 118 (PARAM -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 118 (PARAM -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 118 (PARAM -> IDENTIFIER .)
    TYPENAME        reduce using rule 118 (PARAM -> IDENTIFIER .)
    FLOAT           reduce using rule 118 (PARAM -> IDENTIFIER .)
    INTEGER         reduce using rule 118 (PARAM -> IDENTIFIER .)
    BOOL            reduce using rule 118 (PARAM -> IDENTIFIER .)
    CHAR            reduce using rule 118 (PARAM -> IDENTIFIER .)
    STRING          reduce using rule 118 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 118 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 118 (PARAM -> IDENTIFIER .)
    LIST_CONSTRUCTOR reduce using rule 118 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 118 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 118 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 118 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 118 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (PARAM -> IDENTIFIER .)
    MODULO          reduce using rule 118 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 118 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 118 (PARAM -> IDENTIFIER .)
    INEQUALITY      reduce using rule 118 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 118 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 118 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 118 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 118 (PARAM -> IDENTIFIER .)
    AND             reduce using rule 118 (PARAM -> IDENTIFIER .)
    OR              reduce using rule 118 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 118 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 118 (PARAM -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 118 (PARAM -> IDENTIFIER .)
    ARROW           reduce using rule 118 (PARAM -> IDENTIFIER .)


state 39

    (22) GEN_DECLARATION -> IDENTIFIER TYPESIG . TYPE
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (35) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 88
    OPEN_PAREN      shift and go to state 89
    OPEN_SQUARE     shift and go to state 90

    TYPE                           shift and go to state 86
    ATYPE                          shift and go to state 87

state 40

    (36) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (91) APATS -> . APAT APATS
    (92) APATS -> .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    EQUALS          reduce using rule 92 (APATS -> .)
    PIPE            reduce using rule 92 (APATS -> .)
    CLOSE_PAREN     reduce using rule 92 (APATS -> .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 91
    APATS                          shift and go to state 92
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 41

    (78) APAT -> GCON .

    OPEN_PAREN      reduce using rule 78 (APAT -> GCON .)
    OPEN_SQUARE     reduce using rule 78 (APAT -> GCON .)
    IDENTIFIER      reduce using rule 78 (APAT -> GCON .)
    TYPENAME        reduce using rule 78 (APAT -> GCON .)
    FLOAT           reduce using rule 78 (APAT -> GCON .)
    INTEGER         reduce using rule 78 (APAT -> GCON .)
    BOOL            reduce using rule 78 (APAT -> GCON .)
    CHAR            reduce using rule 78 (APAT -> GCON .)
    STRING          reduce using rule 78 (APAT -> GCON .)
    EQUALS          reduce using rule 78 (APAT -> GCON .)
    PIPE            reduce using rule 78 (APAT -> GCON .)
    LIST_CONSTRUCTOR reduce using rule 78 (APAT -> GCON .)
    BACKTICK        reduce using rule 78 (APAT -> GCON .)
    PLUS            reduce using rule 78 (APAT -> GCON .)
    MINUS           reduce using rule 78 (APAT -> GCON .)
    TIMES           reduce using rule 78 (APAT -> GCON .)
    DIVIDE          reduce using rule 78 (APAT -> GCON .)
    MODULO          reduce using rule 78 (APAT -> GCON .)
    POW             reduce using rule 78 (APAT -> GCON .)
    EQUALITY        reduce using rule 78 (APAT -> GCON .)
    INEQUALITY      reduce using rule 78 (APAT -> GCON .)
    LESS            reduce using rule 78 (APAT -> GCON .)
    LEQ             reduce using rule 78 (APAT -> GCON .)
    GREATER         reduce using rule 78 (APAT -> GCON .)
    GEQ             reduce using rule 78 (APAT -> GCON .)
    AND             reduce using rule 78 (APAT -> GCON .)
    OR              reduce using rule 78 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 78 (APAT -> GCON .)
    COMMA           reduce using rule 78 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 78 (APAT -> GCON .)
    ARROW           reduce using rule 78 (APAT -> GCON .)


state 42

    (80) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (81) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (83) GCON -> OPEN_PAREN . CLOSE_PAREN
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 74
    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 93
    LPAT                           shift and go to state 24
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 43

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME . EQUALS TYPE

    EQUALS          shift and go to state 94


state 44

    (10) TOP_DECLARATION -> NEWCONS TYPENAME . EQUALS CONSTRUCTORS

    EQUALS          shift and go to state 95


state 45

    (20) DECLARATION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 20 (DECLARATION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 20 (DECLARATION -> FUNCTION_LHS RHS .)


state 46

    (39) RHS -> EQUALS . EXP
    (40) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 96
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 47

    (41) RHS -> GDRHS .
    (42) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 41 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 41 (RHS -> GDRHS .)
    WHERE           shift and go to state 112


state 48

    (43) GDRHS -> GUARDS . EQUALS EXP
    (44) GDRHS -> GUARDS . EQUALS EXP GDRHS

    EQUALS          shift and go to state 113


state 49

    (45) GUARDS -> PIPE . GUARD
    (46) GUARD -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    GUARD                          shift and go to state 114
    INFIX_EXP                      shift and go to state 115
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 50

    (21) DECLARATION -> PAT RHS .

    CLOSE_BRACE     reduce using rule 21 (DECLARATION -> PAT RHS .)
    ENDSTATEMENT    reduce using rule 21 (DECLARATION -> PAT RHS .)


state 51

    (37) FUNCTION_LHS -> PAT VAROP . PAT
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 116
    LPAT                           shift and go to state 24
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 52

    (86) VAROP -> VARSYM .

    MINUS           reduce using rule 86 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 86 (VAROP -> VARSYM .)
    OPEN_SQUARE     reduce using rule 86 (VAROP -> VARSYM .)
    TYPENAME        reduce using rule 86 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 86 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 86 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 86 (VAROP -> VARSYM .)
    BOOL            reduce using rule 86 (VAROP -> VARSYM .)
    CHAR            reduce using rule 86 (VAROP -> VARSYM .)
    STRING          reduce using rule 86 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 86 (VAROP -> VARSYM .)
    LET             reduce using rule 86 (VAROP -> VARSYM .)
    IF              reduce using rule 86 (VAROP -> VARSYM .)
    MATCH           reduce using rule 86 (VAROP -> VARSYM .)
    CLOSE_BRACE     reduce using rule 86 (VAROP -> VARSYM .)
    ENDSTATEMENT    reduce using rule 86 (VAROP -> VARSYM .)


state 53

    (87) VAROP -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 117


state 54

    (95) VARSYM -> PLUS .

    MINUS           reduce using rule 95 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 95 (VARSYM -> PLUS .)
    OPEN_SQUARE     reduce using rule 95 (VARSYM -> PLUS .)
    TYPENAME        reduce using rule 95 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 95 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 95 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 95 (VARSYM -> PLUS .)
    BOOL            reduce using rule 95 (VARSYM -> PLUS .)
    CHAR            reduce using rule 95 (VARSYM -> PLUS .)
    STRING          reduce using rule 95 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 95 (VARSYM -> PLUS .)
    LET             reduce using rule 95 (VARSYM -> PLUS .)
    IF              reduce using rule 95 (VARSYM -> PLUS .)
    MATCH           reduce using rule 95 (VARSYM -> PLUS .)
    CLOSE_BRACE     reduce using rule 95 (VARSYM -> PLUS .)
    ENDSTATEMENT    reduce using rule 95 (VARSYM -> PLUS .)


state 55

    (96) VARSYM -> MINUS .

    MINUS           reduce using rule 96 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 96 (VARSYM -> MINUS .)
    OPEN_SQUARE     reduce using rule 96 (VARSYM -> MINUS .)
    TYPENAME        reduce using rule 96 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 96 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 96 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 96 (VARSYM -> MINUS .)
    BOOL            reduce using rule 96 (VARSYM -> MINUS .)
    CHAR            reduce using rule 96 (VARSYM -> MINUS .)
    STRING          reduce using rule 96 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 96 (VARSYM -> MINUS .)
    LET             reduce using rule 96 (VARSYM -> MINUS .)
    IF              reduce using rule 96 (VARSYM -> MINUS .)
    MATCH           reduce using rule 96 (VARSYM -> MINUS .)
    CLOSE_BRACE     reduce using rule 96 (VARSYM -> MINUS .)
    ENDSTATEMENT    reduce using rule 96 (VARSYM -> MINUS .)


state 56

    (97) VARSYM -> TIMES .

    MINUS           reduce using rule 97 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 97 (VARSYM -> TIMES .)
    OPEN_SQUARE     reduce using rule 97 (VARSYM -> TIMES .)
    TYPENAME        reduce using rule 97 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 97 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 97 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 97 (VARSYM -> TIMES .)
    BOOL            reduce using rule 97 (VARSYM -> TIMES .)
    CHAR            reduce using rule 97 (VARSYM -> TIMES .)
    STRING          reduce using rule 97 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 97 (VARSYM -> TIMES .)
    LET             reduce using rule 97 (VARSYM -> TIMES .)
    IF              reduce using rule 97 (VARSYM -> TIMES .)
    MATCH           reduce using rule 97 (VARSYM -> TIMES .)
    CLOSE_BRACE     reduce using rule 97 (VARSYM -> TIMES .)
    ENDSTATEMENT    reduce using rule 97 (VARSYM -> TIMES .)


state 57

    (98) VARSYM -> DIVIDE .

    MINUS           reduce using rule 98 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 98 (VARSYM -> DIVIDE .)
    OPEN_SQUARE     reduce using rule 98 (VARSYM -> DIVIDE .)
    TYPENAME        reduce using rule 98 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 98 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 98 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 98 (VARSYM -> DIVIDE .)
    BOOL            reduce using rule 98 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 98 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 98 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 98 (VARSYM -> DIVIDE .)
    LET             reduce using rule 98 (VARSYM -> DIVIDE .)
    IF              reduce using rule 98 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 98 (VARSYM -> DIVIDE .)
    CLOSE_BRACE     reduce using rule 98 (VARSYM -> DIVIDE .)
    ENDSTATEMENT    reduce using rule 98 (VARSYM -> DIVIDE .)


state 58

    (99) VARSYM -> MODULO .

    MINUS           reduce using rule 99 (VARSYM -> MODULO .)
    OPEN_PAREN      reduce using rule 99 (VARSYM -> MODULO .)
    OPEN_SQUARE     reduce using rule 99 (VARSYM -> MODULO .)
    TYPENAME        reduce using rule 99 (VARSYM -> MODULO .)
    IDENTIFIER      reduce using rule 99 (VARSYM -> MODULO .)
    FLOAT           reduce using rule 99 (VARSYM -> MODULO .)
    INTEGER         reduce using rule 99 (VARSYM -> MODULO .)
    BOOL            reduce using rule 99 (VARSYM -> MODULO .)
    CHAR            reduce using rule 99 (VARSYM -> MODULO .)
    STRING          reduce using rule 99 (VARSYM -> MODULO .)
    LAMBDA          reduce using rule 99 (VARSYM -> MODULO .)
    LET             reduce using rule 99 (VARSYM -> MODULO .)
    IF              reduce using rule 99 (VARSYM -> MODULO .)
    MATCH           reduce using rule 99 (VARSYM -> MODULO .)
    CLOSE_BRACE     reduce using rule 99 (VARSYM -> MODULO .)
    ENDSTATEMENT    reduce using rule 99 (VARSYM -> MODULO .)


state 59

    (100) VARSYM -> POW .

    MINUS           reduce using rule 100 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 100 (VARSYM -> POW .)
    OPEN_SQUARE     reduce using rule 100 (VARSYM -> POW .)
    TYPENAME        reduce using rule 100 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 100 (VARSYM -> POW .)
    FLOAT           reduce using rule 100 (VARSYM -> POW .)
    INTEGER         reduce using rule 100 (VARSYM -> POW .)
    BOOL            reduce using rule 100 (VARSYM -> POW .)
    CHAR            reduce using rule 100 (VARSYM -> POW .)
    STRING          reduce using rule 100 (VARSYM -> POW .)
    LAMBDA          reduce using rule 100 (VARSYM -> POW .)
    LET             reduce using rule 100 (VARSYM -> POW .)
    IF              reduce using rule 100 (VARSYM -> POW .)
    MATCH           reduce using rule 100 (VARSYM -> POW .)
    CLOSE_BRACE     reduce using rule 100 (VARSYM -> POW .)
    ENDSTATEMENT    reduce using rule 100 (VARSYM -> POW .)


state 60

    (101) VARSYM -> EQUALITY .

    MINUS           reduce using rule 101 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 101 (VARSYM -> EQUALITY .)
    OPEN_SQUARE     reduce using rule 101 (VARSYM -> EQUALITY .)
    TYPENAME        reduce using rule 101 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 101 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 101 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 101 (VARSYM -> EQUALITY .)
    BOOL            reduce using rule 101 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 101 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 101 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 101 (VARSYM -> EQUALITY .)
    LET             reduce using rule 101 (VARSYM -> EQUALITY .)
    IF              reduce using rule 101 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 101 (VARSYM -> EQUALITY .)
    CLOSE_BRACE     reduce using rule 101 (VARSYM -> EQUALITY .)
    ENDSTATEMENT    reduce using rule 101 (VARSYM -> EQUALITY .)


state 61

    (102) VARSYM -> INEQUALITY .

    MINUS           reduce using rule 102 (VARSYM -> INEQUALITY .)
    OPEN_PAREN      reduce using rule 102 (VARSYM -> INEQUALITY .)
    OPEN_SQUARE     reduce using rule 102 (VARSYM -> INEQUALITY .)
    TYPENAME        reduce using rule 102 (VARSYM -> INEQUALITY .)
    IDENTIFIER      reduce using rule 102 (VARSYM -> INEQUALITY .)
    FLOAT           reduce using rule 102 (VARSYM -> INEQUALITY .)
    INTEGER         reduce using rule 102 (VARSYM -> INEQUALITY .)
    BOOL            reduce using rule 102 (VARSYM -> INEQUALITY .)
    CHAR            reduce using rule 102 (VARSYM -> INEQUALITY .)
    STRING          reduce using rule 102 (VARSYM -> INEQUALITY .)
    LAMBDA          reduce using rule 102 (VARSYM -> INEQUALITY .)
    LET             reduce using rule 102 (VARSYM -> INEQUALITY .)
    IF              reduce using rule 102 (VARSYM -> INEQUALITY .)
    MATCH           reduce using rule 102 (VARSYM -> INEQUALITY .)
    CLOSE_BRACE     reduce using rule 102 (VARSYM -> INEQUALITY .)
    ENDSTATEMENT    reduce using rule 102 (VARSYM -> INEQUALITY .)


state 62

    (103) VARSYM -> LESS .

    MINUS           reduce using rule 103 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 103 (VARSYM -> LESS .)
    OPEN_SQUARE     reduce using rule 103 (VARSYM -> LESS .)
    TYPENAME        reduce using rule 103 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 103 (VARSYM -> LESS .)
    FLOAT           reduce using rule 103 (VARSYM -> LESS .)
    INTEGER         reduce using rule 103 (VARSYM -> LESS .)
    BOOL            reduce using rule 103 (VARSYM -> LESS .)
    CHAR            reduce using rule 103 (VARSYM -> LESS .)
    STRING          reduce using rule 103 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 103 (VARSYM -> LESS .)
    LET             reduce using rule 103 (VARSYM -> LESS .)
    IF              reduce using rule 103 (VARSYM -> LESS .)
    MATCH           reduce using rule 103 (VARSYM -> LESS .)
    CLOSE_BRACE     reduce using rule 103 (VARSYM -> LESS .)
    ENDSTATEMENT    reduce using rule 103 (VARSYM -> LESS .)


state 63

    (104) VARSYM -> LEQ .

    MINUS           reduce using rule 104 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 104 (VARSYM -> LEQ .)
    OPEN_SQUARE     reduce using rule 104 (VARSYM -> LEQ .)
    TYPENAME        reduce using rule 104 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 104 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 104 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 104 (VARSYM -> LEQ .)
    BOOL            reduce using rule 104 (VARSYM -> LEQ .)
    CHAR            reduce using rule 104 (VARSYM -> LEQ .)
    STRING          reduce using rule 104 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 104 (VARSYM -> LEQ .)
    LET             reduce using rule 104 (VARSYM -> LEQ .)
    IF              reduce using rule 104 (VARSYM -> LEQ .)
    MATCH           reduce using rule 104 (VARSYM -> LEQ .)
    CLOSE_BRACE     reduce using rule 104 (VARSYM -> LEQ .)
    ENDSTATEMENT    reduce using rule 104 (VARSYM -> LEQ .)


state 64

    (105) VARSYM -> GREATER .

    MINUS           reduce using rule 105 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 105 (VARSYM -> GREATER .)
    OPEN_SQUARE     reduce using rule 105 (VARSYM -> GREATER .)
    TYPENAME        reduce using rule 105 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 105 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 105 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 105 (VARSYM -> GREATER .)
    BOOL            reduce using rule 105 (VARSYM -> GREATER .)
    CHAR            reduce using rule 105 (VARSYM -> GREATER .)
    STRING          reduce using rule 105 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 105 (VARSYM -> GREATER .)
    LET             reduce using rule 105 (VARSYM -> GREATER .)
    IF              reduce using rule 105 (VARSYM -> GREATER .)
    MATCH           reduce using rule 105 (VARSYM -> GREATER .)
    CLOSE_BRACE     reduce using rule 105 (VARSYM -> GREATER .)
    ENDSTATEMENT    reduce using rule 105 (VARSYM -> GREATER .)


state 65

    (106) VARSYM -> GEQ .

    MINUS           reduce using rule 106 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 106 (VARSYM -> GEQ .)
    OPEN_SQUARE     reduce using rule 106 (VARSYM -> GEQ .)
    TYPENAME        reduce using rule 106 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 106 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 106 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 106 (VARSYM -> GEQ .)
    BOOL            reduce using rule 106 (VARSYM -> GEQ .)
    CHAR            reduce using rule 106 (VARSYM -> GEQ .)
    STRING          reduce using rule 106 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 106 (VARSYM -> GEQ .)
    LET             reduce using rule 106 (VARSYM -> GEQ .)
    IF              reduce using rule 106 (VARSYM -> GEQ .)
    MATCH           reduce using rule 106 (VARSYM -> GEQ .)
    CLOSE_BRACE     reduce using rule 106 (VARSYM -> GEQ .)
    ENDSTATEMENT    reduce using rule 106 (VARSYM -> GEQ .)


state 66

    (107) VARSYM -> AND .

    MINUS           reduce using rule 107 (VARSYM -> AND .)
    OPEN_PAREN      reduce using rule 107 (VARSYM -> AND .)
    OPEN_SQUARE     reduce using rule 107 (VARSYM -> AND .)
    TYPENAME        reduce using rule 107 (VARSYM -> AND .)
    IDENTIFIER      reduce using rule 107 (VARSYM -> AND .)
    FLOAT           reduce using rule 107 (VARSYM -> AND .)
    INTEGER         reduce using rule 107 (VARSYM -> AND .)
    BOOL            reduce using rule 107 (VARSYM -> AND .)
    CHAR            reduce using rule 107 (VARSYM -> AND .)
    STRING          reduce using rule 107 (VARSYM -> AND .)
    LAMBDA          reduce using rule 107 (VARSYM -> AND .)
    LET             reduce using rule 107 (VARSYM -> AND .)
    IF              reduce using rule 107 (VARSYM -> AND .)
    MATCH           reduce using rule 107 (VARSYM -> AND .)
    CLOSE_BRACE     reduce using rule 107 (VARSYM -> AND .)
    ENDSTATEMENT    reduce using rule 107 (VARSYM -> AND .)


state 67

    (108) VARSYM -> OR .

    MINUS           reduce using rule 108 (VARSYM -> OR .)
    OPEN_PAREN      reduce using rule 108 (VARSYM -> OR .)
    OPEN_SQUARE     reduce using rule 108 (VARSYM -> OR .)
    TYPENAME        reduce using rule 108 (VARSYM -> OR .)
    IDENTIFIER      reduce using rule 108 (VARSYM -> OR .)
    FLOAT           reduce using rule 108 (VARSYM -> OR .)
    INTEGER         reduce using rule 108 (VARSYM -> OR .)
    BOOL            reduce using rule 108 (VARSYM -> OR .)
    CHAR            reduce using rule 108 (VARSYM -> OR .)
    STRING          reduce using rule 108 (VARSYM -> OR .)
    LAMBDA          reduce using rule 108 (VARSYM -> OR .)
    LET             reduce using rule 108 (VARSYM -> OR .)
    IF              reduce using rule 108 (VARSYM -> OR .)
    MATCH           reduce using rule 108 (VARSYM -> OR .)
    CLOSE_BRACE     reduce using rule 108 (VARSYM -> OR .)
    ENDSTATEMENT    reduce using rule 108 (VARSYM -> OR .)


state 68

    (109) VARSYM -> LIST_CONSTRUCTOR .

    MINUS           reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    OPEN_PAREN      reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    OPEN_SQUARE     reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    TYPENAME        reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    IDENTIFIER      reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    FLOAT           reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    INTEGER         reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    BOOL            reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    CHAR            reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    STRING          reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    LAMBDA          reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    LET             reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    IF              reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    MATCH           reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 109 (VARSYM -> LIST_CONSTRUCTOR .)


state 69

    (23) GEN_DECLARATION -> SETFIX ASSOCIATIVITY . INTEGER OP

    INTEGER         shift and go to state 118


state 70

    (25) ASSOCIATIVITY -> LEFTASSOC .

    INTEGER         reduce using rule 25 (ASSOCIATIVITY -> LEFTASSOC .)


state 71

    (26) ASSOCIATIVITY -> RIGHTASSOC .

    INTEGER         reduce using rule 26 (ASSOCIATIVITY -> RIGHTASSOC .)


state 72

    (27) ASSOCIATIVITY -> NONASSOC .

    INTEGER         reduce using rule 27 (ASSOCIATIVITY -> NONASSOC .)


state 73

    (38) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 119


state 74

    (83) GCON -> OPEN_PAREN CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TYPENAME        reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BOOL            reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LIST_CONSTRUCTOR reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BACKTICK        reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TIMES           reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MODULO          reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    POW             reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALITY        reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INEQUALITY      reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LESS            reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LEQ             reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GREATER         reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GEQ             reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    AND             reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OR              reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PIPE            reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WHERE           reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    THEN            reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OF              reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 83 (GCON -> OPEN_PAREN CLOSE_PAREN .)


state 75

    (80) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (81) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN
    (37) FUNCTION_LHS -> PAT . VAROP PAT
    (86) VAROP -> . VARSYM
    (87) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (95) VARSYM -> . PLUS
    (96) VARSYM -> . MINUS
    (97) VARSYM -> . TIMES
    (98) VARSYM -> . DIVIDE
    (99) VARSYM -> . MODULO
    (100) VARSYM -> . POW
    (101) VARSYM -> . EQUALITY
    (102) VARSYM -> . INEQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ
    (107) VARSYM -> . AND
    (108) VARSYM -> . OR
    (109) VARSYM -> . LIST_CONSTRUCTOR

    CLOSE_PAREN     shift and go to state 120
    COMMA           shift and go to state 121
    BACKTICK        shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    POW             shift and go to state 59
    EQUALITY        shift and go to state 60
    INEQUALITY      shift and go to state 61
    LESS            shift and go to state 62
    LEQ             shift and go to state 63
    GREATER         shift and go to state 64
    GEQ             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    LIST_CONSTRUCTOR shift and go to state 68

    VAROP                          shift and go to state 51
    VARSYM                         shift and go to state 52

state 76

    (36) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (118) PARAM -> IDENTIFIER .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    LIST_CONSTRUCTOR reduce using rule 118 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 118 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 118 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 118 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 118 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 118 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 118 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (PARAM -> IDENTIFIER .)
    MODULO          reduce using rule 118 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 118 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 118 (PARAM -> IDENTIFIER .)
    INEQUALITY      reduce using rule 118 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 118 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 118 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 118 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 118 (PARAM -> IDENTIFIER .)
    AND             reduce using rule 118 (PARAM -> IDENTIFIER .)
    OR              reduce using rule 118 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 40
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 77

    (71) PAT -> LPAT LIST_CONSTRUCTOR . PAT
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    LPAT                           shift and go to state 24
    PAT                            shift and go to state 122
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 78

    (74) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (75) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 123
    FLOAT           shift and go to state 124


state 79

    (76) LPAT -> GCON APAT . APATS
    (91) APATS -> . APAT APATS
    (92) APATS -> .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    LIST_CONSTRUCTOR reduce using rule 92 (APATS -> .)
    EQUALS          reduce using rule 92 (APATS -> .)
    BACKTICK        reduce using rule 92 (APATS -> .)
    PLUS            reduce using rule 92 (APATS -> .)
    MINUS           reduce using rule 92 (APATS -> .)
    TIMES           reduce using rule 92 (APATS -> .)
    DIVIDE          reduce using rule 92 (APATS -> .)
    MODULO          reduce using rule 92 (APATS -> .)
    POW             reduce using rule 92 (APATS -> .)
    EQUALITY        reduce using rule 92 (APATS -> .)
    INEQUALITY      reduce using rule 92 (APATS -> .)
    LESS            reduce using rule 92 (APATS -> .)
    LEQ             reduce using rule 92 (APATS -> .)
    GREATER         reduce using rule 92 (APATS -> .)
    GEQ             reduce using rule 92 (APATS -> .)
    AND             reduce using rule 92 (APATS -> .)
    OR              reduce using rule 92 (APATS -> .)
    PIPE            reduce using rule 92 (APATS -> .)
    CLOSE_PAREN     reduce using rule 92 (APATS -> .)
    COMMA           reduce using rule 92 (APATS -> .)
    CLOSE_SQUARE    reduce using rule 92 (APATS -> .)
    ARROW           reduce using rule 92 (APATS -> .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    GCON                           shift and go to state 41
    APAT                           shift and go to state 91
    APATS                          shift and go to state 125
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 80

    (82) APAT -> OPEN_SQUARE PAT_LIST . CLOSE_SQUARE
    (93) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_SQUARE    shift and go to state 126
    COMMA           shift and go to state 127


state 81

    (84) GCON -> OPEN_SQUARE CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TYPENAME        reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INTEGER         reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BOOL            reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CHAR            reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LIST_CONSTRUCTOR reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BACKTICK        reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TIMES           reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MODULO          reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    POW             reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALITY        reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LEQ             reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GEQ             reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    AND             reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OR              reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PIPE            reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ARROW           reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WHERE           reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    THEN            reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OF              reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ELSE            reduce using rule 84 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)


state 82

    (94) PAT_LIST -> PAT .

    CLOSE_SQUARE    reduce using rule 94 (PAT_LIST -> PAT .)
    COMMA           reduce using rule 94 (PAT_LIST -> PAT .)
    CLOSE_PAREN     reduce using rule 94 (PAT_LIST -> PAT .)


state 83

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 128
    ENDSTATEMENT    shift and go to state 36


state 84

    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 4 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 85

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 86

    (22) GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .

    CLOSE_BRACE     reduce using rule 22 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)
    ENDSTATEMENT    reduce using rule 22 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)


state 87

    (28) TYPE -> ATYPE .
    (29) TYPE -> ATYPE . ARROW TYPE

    CLOSE_BRACE     reduce using rule 28 (TYPE -> ATYPE .)
    ENDSTATEMENT    reduce using rule 28 (TYPE -> ATYPE .)
    CLOSE_PAREN     reduce using rule 28 (TYPE -> ATYPE .)
    COMMA           reduce using rule 28 (TYPE -> ATYPE .)
    CLOSE_SQUARE    reduce using rule 28 (TYPE -> ATYPE .)
    ARROW           shift and go to state 129


state 88

    (32) ATYPE -> TYPENAME .

    ARROW           reduce using rule 32 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 32 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 32 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 32 (ATYPE -> TYPENAME .)
    COMMA           reduce using rule 32 (ATYPE -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 32 (ATYPE -> TYPENAME .)
    TYPENAME        reduce using rule 32 (ATYPE -> TYPENAME .)
    OPEN_PAREN      reduce using rule 32 (ATYPE -> TYPENAME .)
    OPEN_SQUARE     reduce using rule 32 (ATYPE -> TYPENAME .)
    PIPE            reduce using rule 32 (ATYPE -> TYPENAME .)


state 89

    (33) ATYPE -> OPEN_PAREN . TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (110) TYPES_LIST -> . TYPES_LIST COMMA TYPE
    (111) TYPES_LIST -> . TYPE
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (35) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 88
    OPEN_PAREN      shift and go to state 89
    OPEN_SQUARE     shift and go to state 90

    TYPES_LIST                     shift and go to state 130
    TYPE                           shift and go to state 131
    ATYPE                          shift and go to state 87

state 90

    (35) ATYPE -> OPEN_SQUARE . TYPE CLOSE_SQUARE
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (35) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 88
    OPEN_PAREN      shift and go to state 89
    OPEN_SQUARE     shift and go to state 90

    TYPE                           shift and go to state 132
    ATYPE                          shift and go to state 87

state 91

    (91) APATS -> APAT . APATS
    (91) APATS -> . APAT APATS
    (92) APATS -> .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    EQUALS          reduce using rule 92 (APATS -> .)
    PIPE            reduce using rule 92 (APATS -> .)
    CLOSE_PAREN     reduce using rule 92 (APATS -> .)
    LIST_CONSTRUCTOR reduce using rule 92 (APATS -> .)
    BACKTICK        reduce using rule 92 (APATS -> .)
    PLUS            reduce using rule 92 (APATS -> .)
    MINUS           reduce using rule 92 (APATS -> .)
    TIMES           reduce using rule 92 (APATS -> .)
    DIVIDE          reduce using rule 92 (APATS -> .)
    MODULO          reduce using rule 92 (APATS -> .)
    POW             reduce using rule 92 (APATS -> .)
    EQUALITY        reduce using rule 92 (APATS -> .)
    INEQUALITY      reduce using rule 92 (APATS -> .)
    LESS            reduce using rule 92 (APATS -> .)
    LEQ             reduce using rule 92 (APATS -> .)
    GREATER         reduce using rule 92 (APATS -> .)
    GEQ             reduce using rule 92 (APATS -> .)
    AND             reduce using rule 92 (APATS -> .)
    OR              reduce using rule 92 (APATS -> .)
    COMMA           reduce using rule 92 (APATS -> .)
    CLOSE_SQUARE    reduce using rule 92 (APATS -> .)
    ARROW           reduce using rule 92 (APATS -> .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 91
    APATS                          shift and go to state 133
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 92

    (36) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 36 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    PIPE            reduce using rule 36 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 36 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 93

    (80) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (81) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 120
    COMMA           shift and go to state 121


state 94

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS . TYPE
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (35) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 88
    OPEN_PAREN      shift and go to state 89
    OPEN_SQUARE     shift and go to state 90

    TYPE                           shift and go to state 134
    ATYPE                          shift and go to state 87

state 95

    (10) TOP_DECLARATION -> NEWCONS TYPENAME EQUALS . CONSTRUCTORS
    (12) CONSTRUCTORS -> . CONSTRUCTORS PIPE CONSTRUCTOR
    (13) CONSTRUCTORS -> . CONSTRUCTOR
    (14) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 135

    CONSTRUCTORS                   shift and go to state 136
    CONSTRUCTOR                    shift and go to state 137

state 96

    (39) RHS -> EQUALS EXP .
    (40) RHS -> EQUALS EXP . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 39 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 39 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 138


state 97

    (47) EXP -> INFIX_EXP .

    WHERE           reduce using rule 47 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 47 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 47 (EXP -> INFIX_EXP .)
    THEN            reduce using rule 47 (EXP -> INFIX_EXP .)
    OF              reduce using rule 47 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 47 (EXP -> INFIX_EXP .)
    COMMA           reduce using rule 47 (EXP -> INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 47 (EXP -> INFIX_EXP .)
    PIPE            reduce using rule 47 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 47 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 47 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 47 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 47 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 47 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 47 (EXP -> INFIX_EXP .)
    MODULO          reduce using rule 47 (EXP -> INFIX_EXP .)
    POW             reduce using rule 47 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 47 (EXP -> INFIX_EXP .)
    INEQUALITY      reduce using rule 47 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 47 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 47 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 47 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 47 (EXP -> INFIX_EXP .)
    AND             reduce using rule 47 (EXP -> INFIX_EXP .)
    OR              reduce using rule 47 (EXP -> INFIX_EXP .)
    LIST_CONSTRUCTOR reduce using rule 47 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 47 (EXP -> INFIX_EXP .)


state 98

    (48) INFIX_EXP -> LEXP . OP INFIX_EXP
    (50) INFIX_EXP -> LEXP .
    (88) OP -> . VAROP
    (86) VAROP -> . VARSYM
    (87) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (95) VARSYM -> . PLUS
    (96) VARSYM -> . MINUS
    (97) VARSYM -> . TIMES
    (98) VARSYM -> . DIVIDE
    (99) VARSYM -> . MODULO
    (100) VARSYM -> . POW
    (101) VARSYM -> . EQUALITY
    (102) VARSYM -> . INEQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ
    (107) VARSYM -> . AND
    (108) VARSYM -> . OR
    (109) VARSYM -> . LIST_CONSTRUCTOR

  ! shift/reduce conflict for BACKTICK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LIST_CONSTRUCTOR resolved as shift
    WHERE           reduce using rule 50 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 50 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 50 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 50 (INFIX_EXP -> LEXP .)
    THEN            reduce using rule 50 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 50 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 50 (INFIX_EXP -> LEXP .)
    COMMA           reduce using rule 50 (INFIX_EXP -> LEXP .)
    CLOSE_SQUARE    reduce using rule 50 (INFIX_EXP -> LEXP .)
    PIPE            reduce using rule 50 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 50 (INFIX_EXP -> LEXP .)
    BACKTICK        shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    POW             shift and go to state 59
    EQUALITY        shift and go to state 60
    INEQUALITY      shift and go to state 61
    LESS            shift and go to state 62
    LEQ             shift and go to state 63
    GREATER         shift and go to state 64
    GEQ             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    LIST_CONSTRUCTOR shift and go to state 68

  ! BACKTICK        [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! PLUS            [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! MINUS           [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! MODULO          [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! INEQUALITY      [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! AND             [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! OR              [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]
  ! LIST_CONSTRUCTOR [ reduce using rule 50 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 139
    VAROP                          shift and go to state 140
    VARSYM                         shift and go to state 52

state 99

    (49) INFIX_EXP -> MINUS . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    INFIX_EXP                      shift and go to state 141
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 100

    (51) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 142
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 101

    (52) LEXP -> LET . DECLARATIONS IN EXP
    (15) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (16) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 144

    DECLARATIONS                   shift and go to state 143

state 102

    (53) LEXP -> IF . EXP THEN EXP ELSE EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 145
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 103

    (54) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 146
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 104

    (55) LEXP -> FEXP .
    (56) FEXP -> FEXP . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    BACKTICK        reduce using rule 55 (LEXP -> FEXP .)
    PLUS            reduce using rule 55 (LEXP -> FEXP .)
    MINUS           reduce using rule 55 (LEXP -> FEXP .)
    TIMES           reduce using rule 55 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 55 (LEXP -> FEXP .)
    MODULO          reduce using rule 55 (LEXP -> FEXP .)
    POW             reduce using rule 55 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 55 (LEXP -> FEXP .)
    INEQUALITY      reduce using rule 55 (LEXP -> FEXP .)
    LESS            reduce using rule 55 (LEXP -> FEXP .)
    LEQ             reduce using rule 55 (LEXP -> FEXP .)
    GREATER         reduce using rule 55 (LEXP -> FEXP .)
    GEQ             reduce using rule 55 (LEXP -> FEXP .)
    AND             reduce using rule 55 (LEXP -> FEXP .)
    OR              reduce using rule 55 (LEXP -> FEXP .)
    LIST_CONSTRUCTOR reduce using rule 55 (LEXP -> FEXP .)
    WHERE           reduce using rule 55 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 55 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 55 (LEXP -> FEXP .)
    EQUALS          reduce using rule 55 (LEXP -> FEXP .)
    THEN            reduce using rule 55 (LEXP -> FEXP .)
    OF              reduce using rule 55 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 55 (LEXP -> FEXP .)
    COMMA           reduce using rule 55 (LEXP -> FEXP .)
    CLOSE_SQUARE    reduce using rule 55 (LEXP -> FEXP .)
    PIPE            reduce using rule 55 (LEXP -> FEXP .)
    ELSE            reduce using rule 55 (LEXP -> FEXP .)
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    AEXP                           shift and go to state 147
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 105

    (57) FEXP -> AEXP .

    OPEN_PAREN      reduce using rule 57 (FEXP -> AEXP .)
    OPEN_SQUARE     reduce using rule 57 (FEXP -> AEXP .)
    IDENTIFIER      reduce using rule 57 (FEXP -> AEXP .)
    TYPENAME        reduce using rule 57 (FEXP -> AEXP .)
    FLOAT           reduce using rule 57 (FEXP -> AEXP .)
    INTEGER         reduce using rule 57 (FEXP -> AEXP .)
    BOOL            reduce using rule 57 (FEXP -> AEXP .)
    CHAR            reduce using rule 57 (FEXP -> AEXP .)
    STRING          reduce using rule 57 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 57 (FEXP -> AEXP .)
    PLUS            reduce using rule 57 (FEXP -> AEXP .)
    MINUS           reduce using rule 57 (FEXP -> AEXP .)
    TIMES           reduce using rule 57 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 57 (FEXP -> AEXP .)
    MODULO          reduce using rule 57 (FEXP -> AEXP .)
    POW             reduce using rule 57 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 57 (FEXP -> AEXP .)
    INEQUALITY      reduce using rule 57 (FEXP -> AEXP .)
    LESS            reduce using rule 57 (FEXP -> AEXP .)
    LEQ             reduce using rule 57 (FEXP -> AEXP .)
    GREATER         reduce using rule 57 (FEXP -> AEXP .)
    GEQ             reduce using rule 57 (FEXP -> AEXP .)
    AND             reduce using rule 57 (FEXP -> AEXP .)
    OR              reduce using rule 57 (FEXP -> AEXP .)
    LIST_CONSTRUCTOR reduce using rule 57 (FEXP -> AEXP .)
    WHERE           reduce using rule 57 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 57 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 57 (FEXP -> AEXP .)
    EQUALS          reduce using rule 57 (FEXP -> AEXP .)
    THEN            reduce using rule 57 (FEXP -> AEXP .)
    OF              reduce using rule 57 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 57 (FEXP -> AEXP .)
    COMMA           reduce using rule 57 (FEXP -> AEXP .)
    CLOSE_SQUARE    reduce using rule 57 (FEXP -> AEXP .)
    PIPE            reduce using rule 57 (FEXP -> AEXP .)
    ELSE            reduce using rule 57 (FEXP -> AEXP .)


state 106

    (58) AEXP -> USED_VAR .

    OPEN_PAREN      reduce using rule 58 (AEXP -> USED_VAR .)
    OPEN_SQUARE     reduce using rule 58 (AEXP -> USED_VAR .)
    IDENTIFIER      reduce using rule 58 (AEXP -> USED_VAR .)
    TYPENAME        reduce using rule 58 (AEXP -> USED_VAR .)
    FLOAT           reduce using rule 58 (AEXP -> USED_VAR .)
    INTEGER         reduce using rule 58 (AEXP -> USED_VAR .)
    BOOL            reduce using rule 58 (AEXP -> USED_VAR .)
    CHAR            reduce using rule 58 (AEXP -> USED_VAR .)
    STRING          reduce using rule 58 (AEXP -> USED_VAR .)
    BACKTICK        reduce using rule 58 (AEXP -> USED_VAR .)
    PLUS            reduce using rule 58 (AEXP -> USED_VAR .)
    MINUS           reduce using rule 58 (AEXP -> USED_VAR .)
    TIMES           reduce using rule 58 (AEXP -> USED_VAR .)
    DIVIDE          reduce using rule 58 (AEXP -> USED_VAR .)
    MODULO          reduce using rule 58 (AEXP -> USED_VAR .)
    POW             reduce using rule 58 (AEXP -> USED_VAR .)
    EQUALITY        reduce using rule 58 (AEXP -> USED_VAR .)
    INEQUALITY      reduce using rule 58 (AEXP -> USED_VAR .)
    LESS            reduce using rule 58 (AEXP -> USED_VAR .)
    LEQ             reduce using rule 58 (AEXP -> USED_VAR .)
    GREATER         reduce using rule 58 (AEXP -> USED_VAR .)
    GEQ             reduce using rule 58 (AEXP -> USED_VAR .)
    AND             reduce using rule 58 (AEXP -> USED_VAR .)
    OR              reduce using rule 58 (AEXP -> USED_VAR .)
    LIST_CONSTRUCTOR reduce using rule 58 (AEXP -> USED_VAR .)
    WHERE           reduce using rule 58 (AEXP -> USED_VAR .)
    CLOSE_BRACE     reduce using rule 58 (AEXP -> USED_VAR .)
    ENDSTATEMENT    reduce using rule 58 (AEXP -> USED_VAR .)
    EQUALS          reduce using rule 58 (AEXP -> USED_VAR .)
    THEN            reduce using rule 58 (AEXP -> USED_VAR .)
    OF              reduce using rule 58 (AEXP -> USED_VAR .)
    CLOSE_PAREN     reduce using rule 58 (AEXP -> USED_VAR .)
    COMMA           reduce using rule 58 (AEXP -> USED_VAR .)
    CLOSE_SQUARE    reduce using rule 58 (AEXP -> USED_VAR .)
    PIPE            reduce using rule 58 (AEXP -> USED_VAR .)
    ELSE            reduce using rule 58 (AEXP -> USED_VAR .)


state 107

    (59) AEXP -> GCON .

    OPEN_PAREN      reduce using rule 59 (AEXP -> GCON .)
    OPEN_SQUARE     reduce using rule 59 (AEXP -> GCON .)
    IDENTIFIER      reduce using rule 59 (AEXP -> GCON .)
    TYPENAME        reduce using rule 59 (AEXP -> GCON .)
    FLOAT           reduce using rule 59 (AEXP -> GCON .)
    INTEGER         reduce using rule 59 (AEXP -> GCON .)
    BOOL            reduce using rule 59 (AEXP -> GCON .)
    CHAR            reduce using rule 59 (AEXP -> GCON .)
    STRING          reduce using rule 59 (AEXP -> GCON .)
    BACKTICK        reduce using rule 59 (AEXP -> GCON .)
    PLUS            reduce using rule 59 (AEXP -> GCON .)
    MINUS           reduce using rule 59 (AEXP -> GCON .)
    TIMES           reduce using rule 59 (AEXP -> GCON .)
    DIVIDE          reduce using rule 59 (AEXP -> GCON .)
    MODULO          reduce using rule 59 (AEXP -> GCON .)
    POW             reduce using rule 59 (AEXP -> GCON .)
    EQUALITY        reduce using rule 59 (AEXP -> GCON .)
    INEQUALITY      reduce using rule 59 (AEXP -> GCON .)
    LESS            reduce using rule 59 (AEXP -> GCON .)
    LEQ             reduce using rule 59 (AEXP -> GCON .)
    GREATER         reduce using rule 59 (AEXP -> GCON .)
    GEQ             reduce using rule 59 (AEXP -> GCON .)
    AND             reduce using rule 59 (AEXP -> GCON .)
    OR              reduce using rule 59 (AEXP -> GCON .)
    LIST_CONSTRUCTOR reduce using rule 59 (AEXP -> GCON .)
    WHERE           reduce using rule 59 (AEXP -> GCON .)
    CLOSE_BRACE     reduce using rule 59 (AEXP -> GCON .)
    ENDSTATEMENT    reduce using rule 59 (AEXP -> GCON .)
    EQUALS          reduce using rule 59 (AEXP -> GCON .)
    THEN            reduce using rule 59 (AEXP -> GCON .)
    OF              reduce using rule 59 (AEXP -> GCON .)
    CLOSE_PAREN     reduce using rule 59 (AEXP -> GCON .)
    COMMA           reduce using rule 59 (AEXP -> GCON .)
    CLOSE_SQUARE    reduce using rule 59 (AEXP -> GCON .)
    PIPE            reduce using rule 59 (AEXP -> GCON .)
    ELSE            reduce using rule 59 (AEXP -> GCON .)


state 108

    (60) AEXP -> LITERAL .

    OPEN_PAREN      reduce using rule 60 (AEXP -> LITERAL .)
    OPEN_SQUARE     reduce using rule 60 (AEXP -> LITERAL .)
    IDENTIFIER      reduce using rule 60 (AEXP -> LITERAL .)
    TYPENAME        reduce using rule 60 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 60 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 60 (AEXP -> LITERAL .)
    BOOL            reduce using rule 60 (AEXP -> LITERAL .)
    CHAR            reduce using rule 60 (AEXP -> LITERAL .)
    STRING          reduce using rule 60 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 60 (AEXP -> LITERAL .)
    PLUS            reduce using rule 60 (AEXP -> LITERAL .)
    MINUS           reduce using rule 60 (AEXP -> LITERAL .)
    TIMES           reduce using rule 60 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 60 (AEXP -> LITERAL .)
    MODULO          reduce using rule 60 (AEXP -> LITERAL .)
    POW             reduce using rule 60 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 60 (AEXP -> LITERAL .)
    INEQUALITY      reduce using rule 60 (AEXP -> LITERAL .)
    LESS            reduce using rule 60 (AEXP -> LITERAL .)
    LEQ             reduce using rule 60 (AEXP -> LITERAL .)
    GREATER         reduce using rule 60 (AEXP -> LITERAL .)
    GEQ             reduce using rule 60 (AEXP -> LITERAL .)
    AND             reduce using rule 60 (AEXP -> LITERAL .)
    OR              reduce using rule 60 (AEXP -> LITERAL .)
    LIST_CONSTRUCTOR reduce using rule 60 (AEXP -> LITERAL .)
    WHERE           reduce using rule 60 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 60 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 60 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 60 (AEXP -> LITERAL .)
    THEN            reduce using rule 60 (AEXP -> LITERAL .)
    OF              reduce using rule 60 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 60 (AEXP -> LITERAL .)
    COMMA           reduce using rule 60 (AEXP -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 60 (AEXP -> LITERAL .)
    PIPE            reduce using rule 60 (AEXP -> LITERAL .)
    ELSE            reduce using rule 60 (AEXP -> LITERAL .)


state 109

    (61) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (62) AEXP -> OPEN_PAREN . EXP COMMA EXP_LIST CLOSE_PAREN
    (83) GCON -> OPEN_PAREN . CLOSE_PAREN
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 74
    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 148
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 110

    (63) AEXP -> OPEN_SQUARE . EXP CLOSE_SQUARE
    (64) AEXP -> OPEN_SQUARE . EXP COMMA EXP_LIST CLOSE_SQUARE
    (84) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 81
    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 149
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 111

    (117) USED_VAR -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    TYPENAME        reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    FLOAT           reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    INTEGER         reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    BOOL            reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    CHAR            reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    STRING          reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    BACKTICK        reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    PLUS            reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    MINUS           reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    TIMES           reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    DIVIDE          reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    MODULO          reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    POW             reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    EQUALITY        reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    INEQUALITY      reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    LESS            reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    LEQ             reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    GREATER         reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    GEQ             reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    AND             reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    OR              reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    LIST_CONSTRUCTOR reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    WHERE           reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    EQUALS          reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    THEN            reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    OF              reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    COMMA           reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    PIPE            reduce using rule 117 (USED_VAR -> IDENTIFIER .)
    ELSE            reduce using rule 117 (USED_VAR -> IDENTIFIER .)


state 112

    (42) RHS -> GDRHS WHERE . DECLARATIONS
    (15) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (16) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 144

    DECLARATIONS                   shift and go to state 150

state 113

    (43) GDRHS -> GUARDS EQUALS . EXP
    (44) GDRHS -> GUARDS EQUALS . EXP GDRHS
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 151
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 114

    (45) GUARDS -> PIPE GUARD .

    EQUALS          reduce using rule 45 (GUARDS -> PIPE GUARD .)


state 115

    (46) GUARD -> INFIX_EXP .

    EQUALS          reduce using rule 46 (GUARD -> INFIX_EXP .)


state 116

    (37) FUNCTION_LHS -> PAT VAROP PAT .

    EQUALS          reduce using rule 37 (FUNCTION_LHS -> PAT VAROP PAT .)
    PIPE            reduce using rule 37 (FUNCTION_LHS -> PAT VAROP PAT .)
    CLOSE_PAREN     reduce using rule 37 (FUNCTION_LHS -> PAT VAROP PAT .)


state 117

    (87) VAROP -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 152


state 118

    (23) GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER . OP
    (88) OP -> . VAROP
    (86) VAROP -> . VARSYM
    (87) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (95) VARSYM -> . PLUS
    (96) VARSYM -> . MINUS
    (97) VARSYM -> . TIMES
    (98) VARSYM -> . DIVIDE
    (99) VARSYM -> . MODULO
    (100) VARSYM -> . POW
    (101) VARSYM -> . EQUALITY
    (102) VARSYM -> . INEQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ
    (107) VARSYM -> . AND
    (108) VARSYM -> . OR
    (109) VARSYM -> . LIST_CONSTRUCTOR

    BACKTICK        shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    POW             shift and go to state 59
    EQUALITY        shift and go to state 60
    INEQUALITY      shift and go to state 61
    LESS            shift and go to state 62
    LEQ             shift and go to state 63
    GREATER         shift and go to state 64
    GEQ             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    LIST_CONSTRUCTOR shift and go to state 68

    OP                             shift and go to state 153
    VAROP                          shift and go to state 140
    VARSYM                         shift and go to state 52

state 119

    (38) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 154
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 120

    (80) APAT -> OPEN_PAREN PAT CLOSE_PAREN .

    LIST_CONSTRUCTOR reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALS          reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PLUS            reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MINUS           reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TIMES           reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MODULO          reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    POW             reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INEQUALITY      reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LESS            reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LEQ             reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GREATER         reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GEQ             reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    AND             reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OR              reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PIPE            reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TYPENAME        reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    FLOAT           reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INTEGER         reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BOOL            reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CHAR            reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    STRING          reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    COMMA           reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    ARROW           reduce using rule 80 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)


state 121

    (81) APAT -> OPEN_PAREN PAT COMMA . PAT_LIST CLOSE_PAREN
    (93) PAT_LIST -> . PAT_LIST COMMA PAT
    (94) PAT_LIST -> . PAT
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 82
    PAT_LIST                       shift and go to state 155
    LPAT                           shift and go to state 24
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 122

    (71) PAT -> LPAT LIST_CONSTRUCTOR PAT .

    EQUALS          reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    BACKTICK        reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    PLUS            reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    MINUS           reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    TIMES           reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    DIVIDE          reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    MODULO          reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    POW             reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    EQUALITY        reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    INEQUALITY      reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    LESS            reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    LEQ             reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    GREATER         reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    GEQ             reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    AND             reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    OR              reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    LIST_CONSTRUCTOR reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    PIPE            reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    CLOSE_PAREN     reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    COMMA           reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    CLOSE_SQUARE    reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)
    ARROW           reduce using rule 71 (PAT -> LPAT LIST_CONSTRUCTOR PAT .)


state 123

    (74) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 156


state 124

    (75) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 157


state 125

    (76) LPAT -> GCON APAT APATS .

    LIST_CONSTRUCTOR reduce using rule 76 (LPAT -> GCON APAT APATS .)
    EQUALS          reduce using rule 76 (LPAT -> GCON APAT APATS .)
    BACKTICK        reduce using rule 76 (LPAT -> GCON APAT APATS .)
    PLUS            reduce using rule 76 (LPAT -> GCON APAT APATS .)
    MINUS           reduce using rule 76 (LPAT -> GCON APAT APATS .)
    TIMES           reduce using rule 76 (LPAT -> GCON APAT APATS .)
    DIVIDE          reduce using rule 76 (LPAT -> GCON APAT APATS .)
    MODULO          reduce using rule 76 (LPAT -> GCON APAT APATS .)
    POW             reduce using rule 76 (LPAT -> GCON APAT APATS .)
    EQUALITY        reduce using rule 76 (LPAT -> GCON APAT APATS .)
    INEQUALITY      reduce using rule 76 (LPAT -> GCON APAT APATS .)
    LESS            reduce using rule 76 (LPAT -> GCON APAT APATS .)
    LEQ             reduce using rule 76 (LPAT -> GCON APAT APATS .)
    GREATER         reduce using rule 76 (LPAT -> GCON APAT APATS .)
    GEQ             reduce using rule 76 (LPAT -> GCON APAT APATS .)
    AND             reduce using rule 76 (LPAT -> GCON APAT APATS .)
    OR              reduce using rule 76 (LPAT -> GCON APAT APATS .)
    PIPE            reduce using rule 76 (LPAT -> GCON APAT APATS .)
    CLOSE_PAREN     reduce using rule 76 (LPAT -> GCON APAT APATS .)
    COMMA           reduce using rule 76 (LPAT -> GCON APAT APATS .)
    CLOSE_SQUARE    reduce using rule 76 (LPAT -> GCON APAT APATS .)
    ARROW           reduce using rule 76 (LPAT -> GCON APAT APATS .)


state 126

    (82) APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .

    LIST_CONSTRUCTOR reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MODULO          reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    POW             reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    AND             reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OR              reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TYPENAME        reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    ARROW           reduce using rule 82 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)


state 127

    (93) PAT_LIST -> PAT_LIST COMMA . PAT
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 158
    LPAT                           shift and go to state 24
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 128

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 129

    (29) TYPE -> ATYPE ARROW . TYPE
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (35) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 88
    OPEN_PAREN      shift and go to state 89
    OPEN_SQUARE     shift and go to state 90

    ATYPE                          shift and go to state 87
    TYPE                           shift and go to state 159

state 130

    (33) ATYPE -> OPEN_PAREN TYPES_LIST . CLOSE_PAREN
    (110) TYPES_LIST -> TYPES_LIST . COMMA TYPE

    CLOSE_PAREN     shift and go to state 160
    COMMA           shift and go to state 161


state 131

    (34) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN
    (111) TYPES_LIST -> TYPE .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 162
    COMMA           reduce using rule 111 (TYPES_LIST -> TYPE .)

  ! CLOSE_PAREN     [ reduce using rule 111 (TYPES_LIST -> TYPE .) ]


state 132

    (35) ATYPE -> OPEN_SQUARE TYPE . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 163


state 133

    (91) APATS -> APAT APATS .

    EQUALS          reduce using rule 91 (APATS -> APAT APATS .)
    PIPE            reduce using rule 91 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 91 (APATS -> APAT APATS .)
    LIST_CONSTRUCTOR reduce using rule 91 (APATS -> APAT APATS .)
    BACKTICK        reduce using rule 91 (APATS -> APAT APATS .)
    PLUS            reduce using rule 91 (APATS -> APAT APATS .)
    MINUS           reduce using rule 91 (APATS -> APAT APATS .)
    TIMES           reduce using rule 91 (APATS -> APAT APATS .)
    DIVIDE          reduce using rule 91 (APATS -> APAT APATS .)
    MODULO          reduce using rule 91 (APATS -> APAT APATS .)
    POW             reduce using rule 91 (APATS -> APAT APATS .)
    EQUALITY        reduce using rule 91 (APATS -> APAT APATS .)
    INEQUALITY      reduce using rule 91 (APATS -> APAT APATS .)
    LESS            reduce using rule 91 (APATS -> APAT APATS .)
    LEQ             reduce using rule 91 (APATS -> APAT APATS .)
    GREATER         reduce using rule 91 (APATS -> APAT APATS .)
    GEQ             reduce using rule 91 (APATS -> APAT APATS .)
    AND             reduce using rule 91 (APATS -> APAT APATS .)
    OR              reduce using rule 91 (APATS -> APAT APATS .)
    COMMA           reduce using rule 91 (APATS -> APAT APATS .)
    CLOSE_SQUARE    reduce using rule 91 (APATS -> APAT APATS .)
    ARROW           reduce using rule 91 (APATS -> APAT APATS .)


state 134

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)


state 135

    (14) CONSTRUCTOR -> TYPENAME . ATYPES
    (30) ATYPES -> . ATYPES ATYPE
    (31) ATYPES -> .

    TYPENAME        reduce using rule 31 (ATYPES -> .)
    OPEN_PAREN      reduce using rule 31 (ATYPES -> .)
    OPEN_SQUARE     reduce using rule 31 (ATYPES -> .)
    PIPE            reduce using rule 31 (ATYPES -> .)
    CLOSE_BRACE     reduce using rule 31 (ATYPES -> .)
    ENDSTATEMENT    reduce using rule 31 (ATYPES -> .)

    ATYPES                         shift and go to state 164

state 136

    (10) TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS .
    (12) CONSTRUCTORS -> CONSTRUCTORS . PIPE CONSTRUCTOR

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS .)
    PIPE            shift and go to state 165


state 137

    (13) CONSTRUCTORS -> CONSTRUCTOR .

    PIPE            reduce using rule 13 (CONSTRUCTORS -> CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 13 (CONSTRUCTORS -> CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 13 (CONSTRUCTORS -> CONSTRUCTOR .)


state 138

    (40) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (15) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (16) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 144

    DECLARATIONS                   shift and go to state 166

state 139

    (48) INFIX_EXP -> LEXP OP . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    LEXP                           shift and go to state 98
    INFIX_EXP                      shift and go to state 167
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 140

    (88) OP -> VAROP .

    MINUS           reduce using rule 88 (OP -> VAROP .)
    LAMBDA          reduce using rule 88 (OP -> VAROP .)
    LET             reduce using rule 88 (OP -> VAROP .)
    IF              reduce using rule 88 (OP -> VAROP .)
    MATCH           reduce using rule 88 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 88 (OP -> VAROP .)
    OPEN_SQUARE     reduce using rule 88 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 88 (OP -> VAROP .)
    TYPENAME        reduce using rule 88 (OP -> VAROP .)
    FLOAT           reduce using rule 88 (OP -> VAROP .)
    INTEGER         reduce using rule 88 (OP -> VAROP .)
    BOOL            reduce using rule 88 (OP -> VAROP .)
    CHAR            reduce using rule 88 (OP -> VAROP .)
    STRING          reduce using rule 88 (OP -> VAROP .)
    CLOSE_BRACE     reduce using rule 88 (OP -> VAROP .)
    ENDSTATEMENT    reduce using rule 88 (OP -> VAROP .)


state 141

    (49) INFIX_EXP -> MINUS INFIX_EXP .

    WHERE           reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    THEN            reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    COMMA           reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    PIPE            reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    MODULO          reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    INEQUALITY      reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    AND             reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    OR              reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    LIST_CONSTRUCTOR reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 49 (INFIX_EXP -> MINUS INFIX_EXP .)


state 142

    (51) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (91) APATS -> . APAT APATS
    (92) APATS -> .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    ARROW           reduce using rule 92 (APATS -> .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 91
    APATS                          shift and go to state 168
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 143

    (52) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 169


state 144

    (15) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (16) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (17) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (18) DECLARATIONS_LIST -> . DECLARATION
    (19) DECLARATION -> . GEN_DECLARATION
    (20) DECLARATION -> . FUNCTION_LHS RHS
    (21) DECLARATION -> . PAT RHS
    (22) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (23) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (24) GEN_DECLARATION -> .
    (36) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (37) FUNCTION_LHS -> . PAT VAROP PAT
    (38) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 171
    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 20
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 23
    MINUS           shift and go to state 25
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

  ! CLOSE_BRACE     [ reduce using rule 24 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 170
    DECLARATION                    shift and go to state 172
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_LHS                   shift and go to state 18
    PAT                            shift and go to state 19
    APAT                           shift and go to state 22
    LPAT                           shift and go to state 24
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 145

    (53) LEXP -> IF EXP . THEN EXP ELSE EXP

    THEN            shift and go to state 173


state 146

    (54) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE

    OF              shift and go to state 174


state 147

    (56) FEXP -> FEXP AEXP .

    OPEN_PAREN      reduce using rule 56 (FEXP -> FEXP AEXP .)
    OPEN_SQUARE     reduce using rule 56 (FEXP -> FEXP AEXP .)
    IDENTIFIER      reduce using rule 56 (FEXP -> FEXP AEXP .)
    TYPENAME        reduce using rule 56 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 56 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 56 (FEXP -> FEXP AEXP .)
    BOOL            reduce using rule 56 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 56 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 56 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 56 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 56 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 56 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 56 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 56 (FEXP -> FEXP AEXP .)
    MODULO          reduce using rule 56 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 56 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 56 (FEXP -> FEXP AEXP .)
    INEQUALITY      reduce using rule 56 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 56 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 56 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 56 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 56 (FEXP -> FEXP AEXP .)
    AND             reduce using rule 56 (FEXP -> FEXP AEXP .)
    OR              reduce using rule 56 (FEXP -> FEXP AEXP .)
    LIST_CONSTRUCTOR reduce using rule 56 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 56 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 56 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 56 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 56 (FEXP -> FEXP AEXP .)
    THEN            reduce using rule 56 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 56 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 56 (FEXP -> FEXP AEXP .)
    COMMA           reduce using rule 56 (FEXP -> FEXP AEXP .)
    CLOSE_SQUARE    reduce using rule 56 (FEXP -> FEXP AEXP .)
    PIPE            reduce using rule 56 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 56 (FEXP -> FEXP AEXP .)


state 148

    (61) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (62) AEXP -> OPEN_PAREN EXP . COMMA EXP_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 175
    COMMA           shift and go to state 176


state 149

    (63) AEXP -> OPEN_SQUARE EXP . CLOSE_SQUARE
    (64) AEXP -> OPEN_SQUARE EXP . COMMA EXP_LIST CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 177
    COMMA           shift and go to state 178


state 150

    (42) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 42 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 42 (RHS -> GDRHS WHERE DECLARATIONS .)


state 151

    (43) GDRHS -> GUARDS EQUALS EXP .
    (44) GDRHS -> GUARDS EQUALS EXP . GDRHS
    (43) GDRHS -> . GUARDS EQUALS EXP
    (44) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (45) GUARDS -> . PIPE GUARD

    WHERE           reduce using rule 43 (GDRHS -> GUARDS EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 43 (GDRHS -> GUARDS EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 43 (GDRHS -> GUARDS EQUALS EXP .)
    PIPE            shift and go to state 49

    GUARDS                         shift and go to state 48
    GDRHS                          shift and go to state 179

state 152

    (87) VAROP -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_SQUARE     reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    TYPENAME        reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    BOOL            reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IF              reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_BRACE     reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    ENDSTATEMENT    reduce using rule 87 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)


state 153

    (23) GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .

    CLOSE_BRACE     reduce using rule 23 (GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)
    ENDSTATEMENT    reduce using rule 23 (GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)


state 154

    (38) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (91) APATS -> . APAT APATS
    (92) APATS -> .
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (118) PARAM -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    EQUALS          reduce using rule 92 (APATS -> .)
    PIPE            reduce using rule 92 (APATS -> .)
    CLOSE_PAREN     reduce using rule 92 (APATS -> .)
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    IDENTIFIER      shift and go to state 38
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 91
    APATS                          shift and go to state 180
    PARAM                          shift and go to state 28
    GCON                           shift and go to state 41
    LITERAL                        shift and go to state 29

state 155

    (81) APAT -> OPEN_PAREN PAT COMMA PAT_LIST . CLOSE_PAREN
    (93) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_PAREN     shift and go to state 181
    COMMA           shift and go to state 127


state 156

    (74) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    LIST_CONSTRUCTOR reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    BACKTICK        reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PLUS            reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MINUS           reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    TIMES           reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    DIVIDE          reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MODULO          reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    POW             reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALITY        reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    INEQUALITY      reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LESS            reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LEQ             reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GREATER         reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GEQ             reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    AND             reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    OR              reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PIPE            reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    COMMA           reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 74 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 157

    (75) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    LIST_CONSTRUCTOR reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PLUS            reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MINUS           reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    TIMES           reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MODULO          reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    POW             reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    INEQUALITY      reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LESS            reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LEQ             reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GREATER         reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GEQ             reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    AND             reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    OR              reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PIPE            reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    COMMA           reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 75 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 158

    (93) PAT_LIST -> PAT_LIST COMMA PAT .

    CLOSE_SQUARE    reduce using rule 93 (PAT_LIST -> PAT_LIST COMMA PAT .)
    COMMA           reduce using rule 93 (PAT_LIST -> PAT_LIST COMMA PAT .)
    CLOSE_PAREN     reduce using rule 93 (PAT_LIST -> PAT_LIST COMMA PAT .)


state 159

    (29) TYPE -> ATYPE ARROW TYPE .

    CLOSE_BRACE     reduce using rule 29 (TYPE -> ATYPE ARROW TYPE .)
    ENDSTATEMENT    reduce using rule 29 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_PAREN     reduce using rule 29 (TYPE -> ATYPE ARROW TYPE .)
    COMMA           reduce using rule 29 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_SQUARE    reduce using rule 29 (TYPE -> ATYPE ARROW TYPE .)


state 160

    (33) ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .

    ARROW           reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    TYPENAME        reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 33 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)


state 161

    (110) TYPES_LIST -> TYPES_LIST COMMA . TYPE
    (28) TYPE -> . ATYPE
    (29) TYPE -> . ATYPE ARROW TYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (35) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 88
    OPEN_PAREN      shift and go to state 89
    OPEN_SQUARE     shift and go to state 90

    TYPE                           shift and go to state 182
    ATYPE                          shift and go to state 87

state 162

    (34) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    ARROW           reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    COMMA           reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    TYPENAME        reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    PIPE            reduce using rule 34 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 163

    (35) ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .

    ARROW           reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    COMMA           reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    TYPENAME        reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    PIPE            reduce using rule 35 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)


state 164

    (14) CONSTRUCTOR -> TYPENAME ATYPES .
    (30) ATYPES -> ATYPES . ATYPE
    (32) ATYPE -> . TYPENAME
    (33) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (34) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (35) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    PIPE            reduce using rule 14 (CONSTRUCTOR -> TYPENAME ATYPES .)
    CLOSE_BRACE     reduce using rule 14 (CONSTRUCTOR -> TYPENAME ATYPES .)
    ENDSTATEMENT    reduce using rule 14 (CONSTRUCTOR -> TYPENAME ATYPES .)
    TYPENAME        shift and go to state 88
    OPEN_PAREN      shift and go to state 89
    OPEN_SQUARE     shift and go to state 90

    ATYPE                          shift and go to state 183

state 165

    (12) CONSTRUCTORS -> CONSTRUCTORS PIPE . CONSTRUCTOR
    (14) CONSTRUCTOR -> . TYPENAME ATYPES

    TYPENAME        shift and go to state 135

    CONSTRUCTOR                    shift and go to state 184

state 166

    (40) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 40 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 40 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 167

    (48) INFIX_EXP -> LEXP OP INFIX_EXP .

    WHERE           reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    THEN            reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    COMMA           reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PIPE            reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MODULO          reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INEQUALITY      reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    AND             reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OR              reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LIST_CONSTRUCTOR reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 48 (INFIX_EXP -> LEXP OP INFIX_EXP .)


state 168

    (51) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 185


state 169

    (52) LEXP -> LET DECLARATIONS IN . EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 186
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 170

    (15) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 187


state 171

    (16) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 16 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 16 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 16 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 172

    (17) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (18) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 188
    CLOSE_BRACE     reduce using rule 18 (DECLARATIONS_LIST -> DECLARATION .)


state 173

    (53) LEXP -> IF EXP THEN . EXP ELSE EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 189
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 174

    (54) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 190


state 175

    (61) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TYPENAME        reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BOOL            reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MODULO          reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INEQUALITY      reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    AND             reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OR              reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LIST_CONSTRUCTOR reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    THEN            reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    COMMA           reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PIPE            reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 61 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 176

    (62) AEXP -> OPEN_PAREN EXP COMMA . EXP_LIST CLOSE_PAREN
    (89) EXP_LIST -> . EXP_LIST COMMA EXP
    (90) EXP_LIST -> . EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 191
    EXP_LIST                       shift and go to state 192
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 177

    (63) AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TYPENAME        reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    FLOAT           reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INTEGER         reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BOOL            reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CHAR            reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    STRING          reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BACKTICK        reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PLUS            reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MINUS           reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TIMES           reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    DIVIDE          reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MODULO          reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    POW             reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALITY        reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LESS            reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LEQ             reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GREATER         reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GEQ             reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    AND             reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OR              reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LIST_CONSTRUCTOR reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WHERE           reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALS          reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    THEN            reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OF              reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    COMMA           reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PIPE            reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ELSE            reduce using rule 63 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)


state 178

    (64) AEXP -> OPEN_SQUARE EXP COMMA . EXP_LIST CLOSE_SQUARE
    (89) EXP_LIST -> . EXP_LIST COMMA EXP
    (90) EXP_LIST -> . EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 191
    EXP_LIST                       shift and go to state 193
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 179

    (44) GDRHS -> GUARDS EQUALS EXP GDRHS .

    WHERE           reduce using rule 44 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 44 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 44 (GDRHS -> GUARDS EQUALS EXP GDRHS .)


state 180

    (38) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 38 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    PIPE            reduce using rule 38 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 38 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 181

    (81) APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .

    LIST_CONSTRUCTOR reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MODULO          reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    POW             reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INEQUALITY      reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LESS            reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    AND             reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OR              reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TYPENAME        reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    STRING          reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    ARROW           reduce using rule 81 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)


state 182

    (110) TYPES_LIST -> TYPES_LIST COMMA TYPE .

    CLOSE_PAREN     reduce using rule 110 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)
    COMMA           reduce using rule 110 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)


state 183

    (30) ATYPES -> ATYPES ATYPE .

    TYPENAME        reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    OPEN_PAREN      reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    OPEN_SQUARE     reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    PIPE            reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    CLOSE_BRACE     reduce using rule 30 (ATYPES -> ATYPES ATYPE .)
    ENDSTATEMENT    reduce using rule 30 (ATYPES -> ATYPES ATYPE .)


state 184

    (12) CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .

    PIPE            reduce using rule 12 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)
    CLOSE_BRACE     reduce using rule 12 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)
    ENDSTATEMENT    reduce using rule 12 (CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR .)


state 185

    (51) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 194
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 186

    (52) LEXP -> LET DECLARATIONS IN EXP .

    BACKTICK        reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    PLUS            reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    MODULO          reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    INEQUALITY      reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    AND             reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    OR              reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    LIST_CONSTRUCTOR reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    THEN            reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    COMMA           reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_SQUARE    reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    PIPE            reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 52 (LEXP -> LET DECLARATIONS IN EXP .)


state 187

    (15) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 15 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 15 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 15 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 188

    (17) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (17) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (18) DECLARATIONS_LIST -> . DECLARATION
    (19) DECLARATION -> . GEN_DECLARATION
    (20) DECLARATION -> . FUNCTION_LHS RHS
    (21) DECLARATION -> . PAT RHS
    (22) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (23) GEN_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP
    (24) GEN_DECLARATION -> .
    (36) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (37) FUNCTION_LHS -> . PAT VAROP PAT
    (38) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 12
    SETFIX          shift and go to state 20
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 23
    MINUS           shift and go to state 25
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    DECLARATION                    shift and go to state 172
    DECLARATIONS_LIST              shift and go to state 195
    GEN_DECLARATION                shift and go to state 17
    FUNCTION_LHS                   shift and go to state 18
    PAT                            shift and go to state 19
    APAT                           shift and go to state 22
    LPAT                           shift and go to state 24
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 189

    (53) LEXP -> IF EXP THEN EXP . ELSE EXP

    ELSE            shift and go to state 196


state 190

    (54) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (67) ALTS -> . ALT ENDSTATEMENT ALTS
    (68) ALTS -> . ALT
    (69) ALT -> . PAT ARROW EXP
    (70) ALT -> .
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 70 (ALT -> .)
    CLOSE_BRACE     reduce using rule 70 (ALT -> .)
    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    ALTS                           shift and go to state 197
    ALT                            shift and go to state 198
    PAT                            shift and go to state 199
    LPAT                           shift and go to state 24
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 191

    (90) EXP_LIST -> EXP .

    CLOSE_PAREN     reduce using rule 90 (EXP_LIST -> EXP .)
    COMMA           reduce using rule 90 (EXP_LIST -> EXP .)
    CLOSE_SQUARE    reduce using rule 90 (EXP_LIST -> EXP .)


state 192

    (62) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST . CLOSE_PAREN
    (89) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_PAREN     shift and go to state 201
    COMMA           shift and go to state 200


state 193

    (64) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST . CLOSE_SQUARE
    (89) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_SQUARE    shift and go to state 202
    COMMA           shift and go to state 200


state 194

    (51) LEXP -> LAMBDA APAT APATS ARROW EXP .

    BACKTICK        reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PLUS            reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MODULO          reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    INEQUALITY      reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    AND             reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OR              reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LIST_CONSTRUCTOR reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    THEN            reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    COMMA           reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_SQUARE    reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PIPE            reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 51 (LEXP -> LAMBDA APAT APATS ARROW EXP .)


state 195

    (17) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 17 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 196

    (53) LEXP -> IF EXP THEN EXP ELSE . EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 203
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 197

    (54) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 204


state 198

    (67) ALTS -> ALT . ENDSTATEMENT ALTS
    (68) ALTS -> ALT .

    ENDSTATEMENT    shift and go to state 205
    CLOSE_BRACE     reduce using rule 68 (ALTS -> ALT .)


state 199

    (69) ALT -> PAT . ARROW EXP

    ARROW           shift and go to state 206


state 200

    (89) EXP_LIST -> EXP_LIST COMMA . EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 207
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 201

    (62) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TYPENAME        reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    STRING          reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MODULO          reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    POW             reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INEQUALITY      reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LESS            reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    AND             reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OR              reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LIST_CONSTRUCTOR reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WHERE           reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    THEN            reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OF              reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ELSE            reduce using rule 62 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)


state 202

    (64) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TYPENAME        reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MODULO          reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    POW             reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INEQUALITY      reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    AND             reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OR              reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LIST_CONSTRUCTOR reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WHERE           reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    THEN            reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OF              reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ELSE            reduce using rule 64 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)


state 203

    (53) LEXP -> IF EXP THEN EXP ELSE EXP .

    BACKTICK        reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PLUS            reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MINUS           reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    TIMES           reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    DIVIDE          reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MODULO          reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    POW             reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALITY        reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    INEQUALITY      reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LESS            reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LEQ             reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GREATER         reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GEQ             reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    AND             reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OR              reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LIST_CONSTRUCTOR reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WHERE           reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALS          reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    THEN            reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OF              reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    COMMA           reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_SQUARE    reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PIPE            reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ELSE            reduce using rule 53 (LEXP -> IF EXP THEN EXP ELSE EXP .)


state 204

    (54) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    BACKTICK        reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PLUS            reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MODULO          reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INEQUALITY      reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    AND             reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OR              reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LIST_CONSTRUCTOR reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    THEN            reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    COMMA           reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_SQUARE    reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PIPE            reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 54 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 205

    (67) ALTS -> ALT ENDSTATEMENT . ALTS
    (67) ALTS -> . ALT ENDSTATEMENT ALTS
    (68) ALTS -> . ALT
    (69) ALT -> . PAT ARROW EXP
    (70) ALT -> .
    (71) PAT -> . LPAT LIST_CONSTRUCTOR PAT
    (72) PAT -> . LPAT
    (73) LPAT -> . APAT
    (74) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (75) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (76) LPAT -> . GCON APAT APATS
    (77) APAT -> . PARAM
    (78) APAT -> . GCON
    (79) APAT -> . LITERAL
    (80) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (81) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (82) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (118) PARAM -> . IDENTIFIER
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 70 (ALT -> .)
    CLOSE_BRACE     reduce using rule 70 (ALT -> .)
    MINUS           shift and go to state 25
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 30
    TYPENAME        shift and go to state 14
    IDENTIFIER      shift and go to state 38
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    ALT                            shift and go to state 198
    ALTS                           shift and go to state 208
    PAT                            shift and go to state 199
    LPAT                           shift and go to state 24
    APAT                           shift and go to state 22
    GCON                           shift and go to state 27
    PARAM                          shift and go to state 28
    LITERAL                        shift and go to state 29

state 206

    (69) ALT -> PAT ARROW . EXP
    (47) EXP -> . INFIX_EXP
    (48) INFIX_EXP -> . LEXP OP INFIX_EXP
    (49) INFIX_EXP -> . MINUS INFIX_EXP
    (50) INFIX_EXP -> . LEXP
    (51) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (52) LEXP -> . LET DECLARATIONS IN EXP
    (53) LEXP -> . IF EXP THEN EXP ELSE EXP
    (54) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (55) LEXP -> . FEXP
    (56) FEXP -> . FEXP AEXP
    (57) FEXP -> . AEXP
    (58) AEXP -> . USED_VAR
    (59) AEXP -> . GCON
    (60) AEXP -> . LITERAL
    (61) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (62) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (63) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (64) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (117) USED_VAR -> . IDENTIFIER
    (83) GCON -> . OPEN_PAREN CLOSE_PAREN
    (84) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (85) GCON -> . TYPENAME
    (112) LITERAL -> . FLOAT
    (113) LITERAL -> . INTEGER
    (114) LITERAL -> . BOOL
    (115) LITERAL -> . CHAR
    (116) LITERAL -> . STRING

    MINUS           shift and go to state 99
    LAMBDA          shift and go to state 100
    LET             shift and go to state 101
    IF              shift and go to state 102
    MATCH           shift and go to state 103
    OPEN_PAREN      shift and go to state 109
    OPEN_SQUARE     shift and go to state 110
    IDENTIFIER      shift and go to state 111
    TYPENAME        shift and go to state 14
    FLOAT           shift and go to state 26
    INTEGER         shift and go to state 21
    BOOL            shift and go to state 31
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 209
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 98
    FEXP                           shift and go to state 104
    AEXP                           shift and go to state 105
    USED_VAR                       shift and go to state 106
    GCON                           shift and go to state 107
    LITERAL                        shift and go to state 108

state 207

    (89) EXP_LIST -> EXP_LIST COMMA EXP .

    CLOSE_PAREN     reduce using rule 89 (EXP_LIST -> EXP_LIST COMMA EXP .)
    COMMA           reduce using rule 89 (EXP_LIST -> EXP_LIST COMMA EXP .)
    CLOSE_SQUARE    reduce using rule 89 (EXP_LIST -> EXP_LIST COMMA EXP .)


state 208

    (67) ALTS -> ALT ENDSTATEMENT ALTS .

    CLOSE_BRACE     reduce using rule 67 (ALTS -> ALT ENDSTATEMENT ALTS .)


state 209

    (69) ALT -> PAT ARROW EXP .

    ENDSTATEMENT    reduce using rule 69 (ALT -> PAT ARROW EXP .)
    CLOSE_BRACE     reduce using rule 69 (ALT -> PAT ARROW EXP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LIST_CONSTRUCTOR in state 24 resolved as shift
WARNING: shift/reduce conflict for BACKTICK in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 98 resolved as shift
WARNING: shift/reduce conflict for POW in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 98 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS in state 98 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 98 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for LIST_CONSTRUCTOR in state 98 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 131 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 144 resolved as shift
