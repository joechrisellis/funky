Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE

Grammar

Rule 0     S' -> FIXITY_DECLARATION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT STRING
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> TYPE_DECLARATION
Rule 10    TOP_DECLARATION -> DECLARATION
Rule 11    TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS
Rule 12    TYVARS -> TYVARS IDENTIFIER
Rule 13    TYVARS -> <empty>
Rule 14    CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR
Rule 15    CONSTRUCTORS -> CONSTRUCTOR
Rule 16    CONSTRUCTOR -> TYPENAME ATYPES
Rule 17    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 18    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 19    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 20    DECLARATIONS_LIST -> DECLARATION
Rule 21    DECLARATION -> FUNCTION_DEFINITION
Rule 22    DECLARATION -> VARIABLE_DEFINITION
Rule 23    DECLARATION -> FIXITY_DECLARATION
Rule 24    DECLARATION -> <empty>
Rule 25    FUNCTION_DEFINITION -> FUNCTION_LHS RHS
Rule 26    VARIABLE_DEFINITION -> PARAM RHS
Rule 27    FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP
Rule 28    ASSOCIATIVITY -> LEFTASSOC
Rule 29    ASSOCIATIVITY -> RIGHTASSOC
Rule 30    ASSOCIATIVITY -> NONASSOC
Rule 31    TYPE -> ATYPE
Rule 32    TYPE -> ATYPE ARROW TYPE
Rule 33    ATYPES -> ATYPES ATYPE
Rule 34    ATYPES -> <empty>
Rule 35    ATYPE -> TYPENAME
Rule 36    ATYPE -> IDENTIFIER
Rule 37    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 38    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 39    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 40    FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION
Rule 41    INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT
Rule 42    RHS -> EQUALS EXP
Rule 43    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 44    RHS -> GDRHS
Rule 45    RHS -> GDRHS WHERE DECLARATIONS
Rule 46    GDRHS -> GIVEN EXP EQUALS EXP
Rule 47    GDRHS -> GIVEN EXP EQUALS EXP GDRHS
Rule 48    EXP -> INFIX_EXP
Rule 49    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 50    INFIX_EXP -> MINUS INFIX_EXP
Rule 51    INFIX_EXP -> LEXP
Rule 52    LEXP -> LAMBDA_ABSTRACTION
Rule 53    LEXP -> LET_EXPR
Rule 54    LEXP -> IF_EXPR
Rule 55    LEXP -> MATCH_EXPR
Rule 56    LEXP -> FUNCTION_EXPR
Rule 57    LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP
Rule 58    LET_EXPR -> LET DECLARATIONS IN EXP
Rule 59    IF_EXPR -> EXP IF EXP ELSE EXP
Rule 60    MATCH_EXPR -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 61    FUNCTION_EXPR -> FUNCTION_EXPR AEXP
Rule 62    FUNCTION_EXPR -> AEXP
Rule 63    AEXP -> USED_VAR
Rule 64    AEXP -> USED_TYPENAME
Rule 65    AEXP -> LITERAL
Rule 66    AEXP -> OPERATOR_FUNC
Rule 67    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 68    OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN
Rule 69    ALTS -> ALT ENDSTATEMENT ALTS
Rule 70    ALTS -> ALT
Rule 71    ALT -> LPAT ARROW EXP
Rule 72    ALT -> <empty>
Rule 73    LPAT -> APAT
Rule 74    LPAT -> CONSTRUCTOR_PATTERN
Rule 75    LPAT -> NEGATIVE_LITERAL
Rule 76    CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS
Rule 77    NEGATIVE_LITERAL -> MINUS INTEGER
Rule 78    NEGATIVE_LITERAL -> MINUS FLOAT
Rule 79    APAT -> PARAM
Rule 80    APAT -> TYPENAME
Rule 81    APAT -> LITERAL
Rule 82    APAT -> OPEN_PAREN LPAT CLOSE_PAREN
Rule 83    OP -> VARSYM
Rule 84    OP -> INFIX_FUNCTION
Rule 85    INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK
Rule 86    APATS -> APAT APATS
Rule 87    APATS -> <empty>
Rule 88    VARSYM -> PLUS
Rule 89    VARSYM -> MINUS
Rule 90    VARSYM -> TIMES
Rule 91    VARSYM -> DIVIDE
Rule 92    VARSYM -> MODULO
Rule 93    VARSYM -> POW
Rule 94    VARSYM -> EQUALITY
Rule 95    VARSYM -> INEQUALITY
Rule 96    VARSYM -> LESS
Rule 97    VARSYM -> LEQ
Rule 98    VARSYM -> GREATER
Rule 99    VARSYM -> GEQ
Rule 100   VARSYM -> CONCAT
Rule 101   VARSYM -> AND
Rule 102   VARSYM -> OR
Rule 103   LITERAL -> FLOAT
Rule 104   LITERAL -> INTEGER
Rule 105   LITERAL -> BOOL
Rule 106   LITERAL -> STRING
Rule 107   USED_VAR -> IDENTIFIER
Rule 108   USED_TYPENAME -> TYPENAME
Rule 109   PARAM -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 101
ARROW                : 32 57 71
BACKTICK             : 85 85
BOOL                 : 105
CLOSE_BRACE          : 2 3 17 18 60
CLOSE_PAREN          : 37 39 67 68 82
CONCAT               : 100
DIVIDE               : 91
ELSE                 : 59
ENDSTATEMENT         : 2 4 7 19 69
EQUALITY             : 94
EQUALS               : 11 42 43 46 47
FLOAT                : 78 103
GEQ                  : 99
GIVEN                : 46 47
GREATER              : 98
IDENTIFIER           : 1 12 36 38 85 107 109
IF                   : 59
IMPORT               : 6
IN                   : 58
INEQUALITY           : 95
INTEGER              : 27 77 104
LAMBDA               : 57
LEFTASSOC            : 28
LEQ                  : 97
LESS                 : 96
LET                  : 58
MATCH                : 60
MINUS                : 50 77 78 89
MODULE               : 1
MODULO               : 92
NEWTYPE              : 11
NONASSOC             : 30
OF                   : 60
OPEN_BRACE           : 2 3 17 18 60
OPEN_PAREN           : 37 39 67 68 82
OR                   : 102
PIPE                 : 14
PLUS                 : 88
POW                  : 93
RIGHTASSOC           : 29
SETFIX               : 27
STRING               : 6 106
TIMES                : 90
TYPENAME             : 11 16 35 76 80 108
WHERE                : 1 43 45
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 61 62
ALT                  : 69 70
ALTS                 : 60 69
APAT                 : 38 39 57 73 76 86
APATS                : 38 39 57 76 86
ASSOCIATIVITY        : 27
ATYPE                : 31 32 33
ATYPES               : 16 33
BODY                 : 1
CONSTRUCTOR          : 14 15
CONSTRUCTORS         : 11 14
CONSTRUCTOR_PATTERN  : 74
DECLARATION          : 10 19 20
DECLARATIONS         : 43 45 58
DECLARATIONS_LIST    : 17 19
EXP                  : 42 43 46 46 47 47 57 58 59 59 59 60 67 71
FIXITY_DECLARATION   : 23 0
FUNCTION_DEFINITION  : 21
FUNCTION_EXPR        : 56 61
FUNCTION_LHS         : 25 39
GDRHS                : 44 45 47
IF_EXPR              : 54
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 48 49 50
INFIX_FUNCTION       : 41 84
INFIX_FUNCTION_DEFINITION : 40
LAMBDA_ABSTRACTION   : 52
LET_EXPR             : 53
LEXP                 : 49 51
LITERAL              : 65 81
LPAT                 : 41 41 71 82
MATCH_EXPR           : 55
MODULE_DEFINITION    : 
NEGATIVE_LITERAL     : 75
OP                   : 27 49 68
OPERATOR_FUNC        : 66
PARAM                : 26 79
RHS                  : 25 26
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 32 37
TYPE_DECLARATION     : 9
TYVARS               : 11 12
USED_TYPENAME        : 64
USED_VAR             : 63
VARIABLE_DEFINITION  : 22
VARSYM               : 83

Parsing method: LALR

state 0

    (0) S' -> . FIXITY_DECLARATION
    (27) FIXITY_DECLARATION -> . SETFIX ASSOCIATIVITY INTEGER OP

    SETFIX          shift and go to state 2

    FIXITY_DECLARATION             shift and go to state 1

state 1

    (0) S' -> FIXITY_DECLARATION .



state 2

    (27) FIXITY_DECLARATION -> SETFIX . ASSOCIATIVITY INTEGER OP
    (28) ASSOCIATIVITY -> . LEFTASSOC
    (29) ASSOCIATIVITY -> . RIGHTASSOC
    (30) ASSOCIATIVITY -> . NONASSOC

    LEFTASSOC       shift and go to state 4
    RIGHTASSOC      shift and go to state 5
    NONASSOC        shift and go to state 6

    ASSOCIATIVITY                  shift and go to state 3

state 3

    (27) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY . INTEGER OP

    INTEGER         shift and go to state 7


state 4

    (28) ASSOCIATIVITY -> LEFTASSOC .

    INTEGER         reduce using rule 28 (ASSOCIATIVITY -> LEFTASSOC .)


state 5

    (29) ASSOCIATIVITY -> RIGHTASSOC .

    INTEGER         reduce using rule 29 (ASSOCIATIVITY -> RIGHTASSOC .)


state 6

    (30) ASSOCIATIVITY -> NONASSOC .

    INTEGER         reduce using rule 30 (ASSOCIATIVITY -> NONASSOC .)


state 7

    (27) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER . OP
    (83) OP -> . VARSYM
    (84) OP -> . INFIX_FUNCTION
    (88) VARSYM -> . PLUS
    (89) VARSYM -> . MINUS
    (90) VARSYM -> . TIMES
    (91) VARSYM -> . DIVIDE
    (92) VARSYM -> . MODULO
    (93) VARSYM -> . POW
    (94) VARSYM -> . EQUALITY
    (95) VARSYM -> . INEQUALITY
    (96) VARSYM -> . LESS
    (97) VARSYM -> . LEQ
    (98) VARSYM -> . GREATER
    (99) VARSYM -> . GEQ
    (100) VARSYM -> . CONCAT
    (101) VARSYM -> . AND
    (102) VARSYM -> . OR
    (85) INFIX_FUNCTION -> . BACKTICK IDENTIFIER BACKTICK

    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULO          shift and go to state 15
    POW             shift and go to state 16
    EQUALITY        shift and go to state 17
    INEQUALITY      shift and go to state 18
    LESS            shift and go to state 19
    LEQ             shift and go to state 20
    GREATER         shift and go to state 21
    GEQ             shift and go to state 22
    CONCAT          shift and go to state 23
    AND             shift and go to state 24
    OR              shift and go to state 25
    BACKTICK        shift and go to state 26

    OP                             shift and go to state 8
    VARSYM                         shift and go to state 9
    INFIX_FUNCTION                 shift and go to state 10

state 8

    (27) FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .

    $end            reduce using rule 27 (FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP .)


state 9

    (83) OP -> VARSYM .

    $end            reduce using rule 83 (OP -> VARSYM .)


state 10

    (84) OP -> INFIX_FUNCTION .

    $end            reduce using rule 84 (OP -> INFIX_FUNCTION .)


state 11

    (88) VARSYM -> PLUS .

    $end            reduce using rule 88 (VARSYM -> PLUS .)


state 12

    (89) VARSYM -> MINUS .

    $end            reduce using rule 89 (VARSYM -> MINUS .)


state 13

    (90) VARSYM -> TIMES .

    $end            reduce using rule 90 (VARSYM -> TIMES .)


state 14

    (91) VARSYM -> DIVIDE .

    $end            reduce using rule 91 (VARSYM -> DIVIDE .)


state 15

    (92) VARSYM -> MODULO .

    $end            reduce using rule 92 (VARSYM -> MODULO .)


state 16

    (93) VARSYM -> POW .

    $end            reduce using rule 93 (VARSYM -> POW .)


state 17

    (94) VARSYM -> EQUALITY .

    $end            reduce using rule 94 (VARSYM -> EQUALITY .)


state 18

    (95) VARSYM -> INEQUALITY .

    $end            reduce using rule 95 (VARSYM -> INEQUALITY .)


state 19

    (96) VARSYM -> LESS .

    $end            reduce using rule 96 (VARSYM -> LESS .)


state 20

    (97) VARSYM -> LEQ .

    $end            reduce using rule 97 (VARSYM -> LEQ .)


state 21

    (98) VARSYM -> GREATER .

    $end            reduce using rule 98 (VARSYM -> GREATER .)


state 22

    (99) VARSYM -> GEQ .

    $end            reduce using rule 99 (VARSYM -> GEQ .)


state 23

    (100) VARSYM -> CONCAT .

    $end            reduce using rule 100 (VARSYM -> CONCAT .)


state 24

    (101) VARSYM -> AND .

    $end            reduce using rule 101 (VARSYM -> AND .)


state 25

    (102) VARSYM -> OR .

    $end            reduce using rule 102 (VARSYM -> OR .)


state 26

    (85) INFIX_FUNCTION -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 27


state 27

    (85) INFIX_FUNCTION -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 28


state 28

    (85) INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .

    $end            reduce using rule 85 (INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK .)

