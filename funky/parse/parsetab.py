
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONAND ARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET LIST_CONSTRUCTOR MATCH MINUS MODULE MODULO NEWCONS NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE OR PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | NEWCONS TYPENAME EQUALS CONSTRUCTORS\n                           | DECLARATION\n        CONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        CONSTRUCTION_PARAMS : CONSTRUCTION_PARAMS AEXP\n                               | AEXP\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT LIST_CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n                | GCON APAT APATS\n        APAT : PARAM\n                | GCON\n                | LITERAL\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n                | TYPENAME\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | MODULO\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | AND\n                  | OR\n                  | LIST_CONSTRUCTOR\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,35,128,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,79,81,91,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,139,140,142,144,147,152,154,169,173,175,176,177,178,181,185,188,190,196,200,201,202,205,206,],[3,12,37,38,-85,-113,76,-112,38,-77,-79,38,-114,-115,-116,12,12,-118,38,-78,38,111,111,38,-86,117,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,38,38,38,-84,38,111,38,111,111,111,-57,-58,-59,-60,111,111,-117,111,38,-80,38,-82,38,111,-88,38,12,-56,-87,38,111,111,-61,111,-63,111,-81,111,12,38,111,111,-62,-64,38,111,]),'WHERE':([3,14,21,26,31,32,33,47,74,81,96,97,98,104,105,106,107,108,111,141,147,151,167,175,177,179,186,194,201,202,203,204,],[4,-85,-113,-112,-114,-115,-116,112,-83,-84,138,-47,-50,-55,-57,-58,-59,-60,-117,-49,-56,-43,-48,-61,-63,-44,-52,-51,-62,-64,-53,-54,]),'OPEN_BRACE':([4,101,112,138,174,],[6,144,144,144,190,]),'IMPORT':([6,34,],[11,11,]),'NEWTYPE':([6,34,36,],[13,13,13,]),'NEWCONS':([6,34,36,],[15,15,15,]),'SETFIX':([6,34,36,144,188,],[20,20,20,20,20,]),'CLOSE_BRACE':([6,8,10,14,16,17,21,26,31,32,33,34,36,45,47,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,81,83,85,86,87,88,96,97,98,104,105,106,107,108,111,134,135,136,137,140,141,144,147,150,151,152,153,159,160,162,163,164,166,167,170,171,172,175,177,179,183,184,186,187,188,190,194,195,197,198,201,202,203,204,205,208,209,],[-24,35,-8,-85,-11,-19,-113,-112,-114,-115,-116,-24,-24,-20,-41,-21,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,-84,128,-7,-22,-28,-32,-39,-47,-50,-55,-57,-58,-59,-60,-117,-9,-31,-10,-13,-88,-49,171,-56,-42,-43,-87,-23,-29,-33,-34,-35,-14,-40,-48,187,-16,-18,-61,-63,-44,-30,-12,-52,-15,-24,-70,-51,-17,204,-68,-62,-64,-53,-54,-70,-67,-69,]),'ENDSTATEMENT':([6,7,8,9,10,14,16,17,21,26,31,32,33,34,36,37,45,47,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,81,83,84,85,86,87,88,96,97,98,104,105,106,107,108,111,134,135,136,137,140,141,144,147,150,151,152,153,159,160,162,163,164,166,167,171,172,175,177,179,183,184,186,187,188,190,194,198,201,202,203,204,205,209,],[-24,34,36,-5,-8,-85,-11,-19,-113,-112,-114,-115,-116,-24,-24,-6,-20,-41,-21,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,-84,36,-4,-7,-22,-28,-32,-39,-47,-50,-55,-57,-58,-59,-60,-117,-9,-31,-10,-13,-88,-49,-24,-56,-42,-43,-87,-23,-29,-33,-34,-35,-14,-40,-48,-16,188,-61,-63,-44,-30,-12,-52,-15,-24,-70,-51,205,-62,-64,-53,-54,-70,-69,]),'OPEN_PAREN':([6,12,14,21,23,25,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,79,81,88,89,90,91,94,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,129,135,139,140,142,144,147,152,154,160,161,162,163,164,169,173,175,176,177,178,181,183,185,188,190,196,200,201,202,205,206,],[23,42,-85,-113,23,78,-112,42,-77,-79,42,-114,-115,-116,23,23,-118,89,42,-78,42,109,109,42,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,42,42,42,-84,-32,89,89,42,89,109,42,109,109,109,-57,-58,-59,-60,109,109,-117,109,42,-80,42,-82,42,89,-31,109,-88,42,23,-56,-87,42,-33,89,-34,-35,89,109,109,-61,109,-63,109,-81,-30,109,23,42,109,109,-62,-64,42,109,]),'MINUS':([6,12,14,19,21,22,23,24,26,27,28,29,30,31,32,33,34,36,38,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,75,76,77,79,81,91,97,98,99,102,103,104,105,106,107,108,109,110,111,113,118,120,121,122,125,126,127,133,139,140,141,144,147,152,156,157,167,169,173,175,176,177,178,181,185,186,188,190,194,196,200,201,202,203,204,205,206,],[25,-118,-85,55,-113,-73,25,-72,-112,-78,-77,-79,25,-114,-115,-116,25,25,-118,-78,25,99,99,25,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,55,-118,25,-92,-84,-92,-47,55,99,99,99,-55,-57,-58,-59,-60,99,99,-117,99,55,-80,25,-71,-76,-82,25,-91,99,-88,-49,25,-56,-87,-74,-75,-48,99,99,-61,99,-63,99,-81,99,-52,25,25,-51,99,99,-62,-64,-53,-54,25,99,]),'OPEN_SQUARE':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,79,81,88,89,90,91,94,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,129,135,139,140,142,144,147,152,154,160,161,162,163,164,169,173,175,176,177,178,181,183,185,188,190,196,200,201,202,205,206,],[30,30,-85,-113,30,-112,30,-77,-79,30,-114,-115,-116,30,30,-118,90,30,-78,30,110,110,30,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,30,30,30,-84,-32,90,90,30,90,110,30,110,110,110,-57,-58,-59,-60,110,110,-117,110,30,-80,30,-82,30,90,-31,110,-88,30,30,-56,-87,30,-33,90,-34,-35,90,110,110,-61,110,-63,110,-81,-30,110,30,30,110,110,-62,-64,30,110,]),'TYPENAME':([6,12,13,14,15,21,23,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,79,81,88,89,90,91,94,95,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,129,135,139,140,142,144,147,152,154,160,161,162,163,164,165,169,173,175,176,177,178,181,183,185,188,190,196,200,201,202,205,206,],[14,14,43,-85,44,-113,14,-112,14,-77,-79,14,-114,-115,-116,14,14,-118,88,14,-78,14,14,14,14,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,14,14,14,-84,-32,88,88,14,88,135,14,14,14,14,14,-57,-58,-59,-60,14,14,-117,14,14,-80,14,-82,14,88,-31,14,-88,14,14,-56,-87,14,-33,88,-34,-35,88,135,14,14,-61,14,-63,14,-81,-30,14,14,14,14,14,-62,-64,14,14,]),'FLOAT':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,78,79,81,91,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,139,140,142,144,147,152,154,169,173,175,176,177,178,181,185,188,190,196,200,201,202,205,206,],[26,26,-85,-113,26,-112,26,-77,-79,26,-114,-115,-116,26,26,-118,26,-78,26,26,26,26,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,26,26,124,26,-84,26,26,26,26,26,26,-57,-58,-59,-60,26,26,-117,26,26,-80,26,-82,26,26,-88,26,26,-56,-87,26,26,26,-61,26,-63,26,-81,26,26,26,26,26,-62,-64,26,26,]),'INTEGER':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,76,77,78,79,81,91,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,139,140,142,144,147,152,154,169,173,175,176,177,178,181,185,188,190,196,200,201,202,205,206,],[21,21,-85,-113,21,-112,21,-77,-79,21,-114,-115,-116,21,21,-118,21,-78,21,21,21,21,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,118,-25,-26,-27,-83,21,21,123,21,-84,21,21,21,21,21,21,-57,-58,-59,-60,21,21,-117,21,21,-80,21,-82,21,21,-88,21,21,-56,-87,21,21,21,-61,21,-63,21,-81,21,21,21,21,21,-62,-64,21,21,]),'BOOL':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,79,81,91,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,139,140,142,144,147,152,154,169,173,175,176,177,178,181,185,188,190,196,200,201,202,205,206,],[31,31,-85,-113,31,-112,31,-77,-79,31,-114,-115,-116,31,31,-118,31,-78,31,31,31,31,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,31,31,31,-84,31,31,31,31,31,31,-57,-58,-59,-60,31,31,-117,31,31,-80,31,-82,31,31,-88,31,31,-56,-87,31,31,31,-61,31,-63,31,-81,31,31,31,31,31,-62,-64,31,31,]),'CHAR':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,79,81,91,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,139,140,142,144,147,152,154,169,173,175,176,177,178,181,185,188,190,196,200,201,202,205,206,],[32,32,-85,-113,32,-112,32,-77,-79,32,-114,-115,-116,32,32,-118,32,-78,32,32,32,32,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,32,32,32,-84,32,32,32,32,32,32,-57,-58,-59,-60,32,32,-117,32,32,-80,32,-82,32,32,-88,32,32,-56,-87,32,32,32,-61,32,-63,32,-81,32,32,32,32,32,-62,-64,32,32,]),'STRING':([6,12,14,21,23,26,27,28,29,30,31,32,33,34,36,38,40,41,42,46,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,77,79,81,91,99,100,102,103,104,105,106,107,108,109,110,111,113,119,120,121,126,127,139,140,142,144,147,152,154,169,173,175,176,177,178,181,185,188,190,196,200,201,202,205,206,],[33,33,-85,-113,33,-112,33,-77,-79,33,-114,-115,-116,33,33,-118,33,-78,33,33,33,33,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-83,33,33,33,-84,33,33,33,33,33,33,-57,-58,-59,-60,33,33,-117,33,33,-80,33,-82,33,33,-88,33,33,-56,-87,33,33,33,-61,33,-63,33,-81,33,33,33,33,33,-62,-64,33,33,]),'TYPESIG':([12,],[39,]),'LIST_CONSTRUCTOR':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,68,-113,-73,77,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,68,-118,-92,-84,-92,-47,68,-55,-57,-58,-59,-60,-117,68,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'EQUALS':([12,14,18,19,21,22,24,26,27,28,29,31,32,33,38,40,41,43,44,48,74,79,81,91,92,97,98,104,105,106,107,108,111,114,115,116,120,122,125,126,133,141,147,154,156,157,167,175,177,180,181,186,194,201,202,203,204,],[-118,-85,46,46,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-92,-78,94,95,113,-83,-92,-84,-92,-36,-47,-50,-55,-57,-58,-59,-60,-117,-45,-46,-37,-80,-71,-76,-82,-91,-49,-56,-92,-74,-75,-48,-61,-63,-38,-81,-52,-51,-62,-64,-53,-54,]),'BACKTICK':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,117,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,53,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,53,-118,-92,-84,-92,-47,53,-55,-57,-58,-59,-60,-117,152,53,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'PLUS':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,54,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,54,-118,-92,-84,-92,-47,54,-55,-57,-58,-59,-60,-117,54,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'TIMES':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,56,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,56,-118,-92,-84,-92,-47,56,-55,-57,-58,-59,-60,-117,56,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'DIVIDE':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,57,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,57,-118,-92,-84,-92,-47,57,-55,-57,-58,-59,-60,-117,57,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'MODULO':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,58,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,58,-118,-92,-84,-92,-47,58,-55,-57,-58,-59,-60,-117,58,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'POW':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,59,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,59,-118,-92,-84,-92,-47,59,-55,-57,-58,-59,-60,-117,59,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'EQUALITY':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,60,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,60,-118,-92,-84,-92,-47,60,-55,-57,-58,-59,-60,-117,60,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'INEQUALITY':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,61,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,61,-118,-92,-84,-92,-47,61,-55,-57,-58,-59,-60,-117,61,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'LESS':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,62,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,62,-118,-92,-84,-92,-47,62,-55,-57,-58,-59,-60,-117,62,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'LEQ':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,63,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,63,-118,-92,-84,-92,-47,63,-55,-57,-58,-59,-60,-117,63,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'GREATER':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,64,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,64,-118,-92,-84,-92,-47,64,-55,-57,-58,-59,-60,-117,64,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'GEQ':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,65,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,65,-118,-92,-84,-92,-47,65,-55,-57,-58,-59,-60,-117,65,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'AND':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,66,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,66,-118,-92,-84,-92,-47,66,-55,-57,-58,-59,-60,-117,66,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'OR':([12,14,19,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,81,91,97,98,104,105,106,107,108,111,118,120,122,125,126,133,141,147,156,157,167,175,177,181,186,194,201,202,203,204,],[-118,-85,67,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,67,-118,-92,-84,-92,-47,67,-55,-57,-58,-59,-60,-117,67,-80,-71,-76,-82,-91,-49,-56,-74,-75,-48,-61,-63,-81,-52,-51,-62,-64,-53,-54,]),'PIPE':([12,14,18,19,21,22,24,26,27,28,29,31,32,33,38,40,41,74,79,81,88,91,92,97,98,104,105,106,107,108,111,116,120,122,125,126,133,135,136,137,141,147,151,154,156,157,160,162,163,164,167,175,177,180,181,183,184,186,194,201,202,203,204,],[-118,-85,49,49,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-92,-78,-83,-92,-84,-32,-92,-36,-47,-50,-55,-57,-58,-59,-60,-117,-37,-80,-71,-76,-82,-91,-31,165,-13,-49,-56,49,-92,-74,-75,-33,-34,-35,-14,-48,-61,-63,-38,-81,-30,-12,-52,-51,-62,-64,-53,-54,]),'CLOSE_PAREN':([14,21,22,23,24,26,27,28,29,31,32,33,38,40,41,42,73,74,75,76,79,81,82,87,88,91,92,93,97,98,104,105,106,107,108,109,111,116,120,122,123,124,125,126,130,131,133,141,147,148,154,155,156,157,158,159,160,162,163,167,175,177,180,181,182,186,191,192,194,201,202,203,204,207,],[-85,-113,-73,74,-72,-112,-78,-77,-79,-114,-115,-116,-118,-92,-78,74,119,-83,120,-118,-92,-84,-94,-28,-32,-92,-36,120,-47,-50,-55,-57,-58,-59,-60,74,-117,-37,-80,-71,156,157,-76,-82,160,162,-91,-49,-56,175,-92,181,-74,-75,-93,-29,-33,-34,-35,-48,-61,-63,-38,-81,-110,-52,-90,201,-51,-62,-64,-53,-54,-89,]),'COMMA':([14,21,22,24,26,27,28,29,31,32,33,38,41,74,75,76,79,80,81,82,87,88,91,93,97,98,104,105,106,107,108,111,120,122,125,126,130,131,133,141,147,148,149,155,156,157,158,159,160,162,163,167,175,177,181,182,186,191,192,193,194,201,202,203,204,207,],[-85,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,121,-118,-92,127,-84,-94,-28,-32,-92,121,-47,-50,-55,-57,-58,-59,-60,-117,-80,-71,-76,-82,161,-111,-91,-49,-56,176,178,127,-74,-75,-93,-29,-33,-34,-35,-48,-61,-63,-81,-110,-52,-90,200,200,-51,-62,-64,-53,-54,-89,]),'CLOSE_SQUARE':([14,21,22,24,26,27,28,29,30,31,32,33,38,41,74,79,80,81,82,87,88,91,97,98,104,105,106,107,108,110,111,120,122,125,126,132,133,141,147,149,156,157,158,159,160,162,163,167,175,177,181,186,191,193,194,201,202,203,204,207,],[-85,-113,-73,-72,-112,-78,-77,-79,81,-114,-115,-116,-118,-78,-83,-92,126,-84,-94,-28,-32,-92,-47,-50,-55,-57,-58,-59,-60,81,-117,-80,-71,-76,-82,163,-91,-49,-56,177,-74,-75,-93,-29,-33,-34,-35,-48,-61,-63,-81,-52,-90,202,-51,-62,-64,-53,-54,-89,]),'ARROW':([14,21,22,24,26,27,28,29,31,32,33,38,41,74,79,81,87,88,91,120,122,125,126,133,142,156,157,160,162,163,168,181,199,],[-85,-113,-73,-72,-112,-78,-77,-79,-114,-115,-116,-118,-78,-83,-92,-84,129,-32,-92,-80,-71,-76,-82,-91,-92,-74,-75,-33,-34,-35,185,-81,206,]),'THEN':([14,21,26,31,32,33,74,81,97,98,104,105,106,107,108,111,141,145,147,167,175,177,186,194,201,202,203,204,],[-85,-113,-112,-114,-115,-116,-83,-84,-47,-50,-55,-57,-58,-59,-60,-117,-49,173,-56,-48,-61,-63,-52,-51,-62,-64,-53,-54,]),'OF':([14,21,26,31,32,33,74,81,97,98,104,105,106,107,108,111,141,146,147,167,175,177,186,194,201,202,203,204,],[-85,-113,-112,-114,-115,-116,-83,-84,-47,-50,-55,-57,-58,-59,-60,-117,-49,174,-56,-48,-61,-63,-52,-51,-62,-64,-53,-54,]),'ELSE':([14,21,26,31,32,33,74,81,97,98,104,105,106,107,108,111,141,147,167,175,177,186,189,194,201,202,203,204,],[-85,-113,-112,-114,-115,-116,-83,-84,-47,-50,-55,-57,-58,-59,-60,-117,-49,-56,-48,-61,-63,-52,196,-51,-62,-64,-53,-54,]),'LEFTASSOC':([20,],[70,]),'RIGHTASSOC':([20,],[71,]),'NONASSOC':([20,],[72,]),'LAMBDA':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,99,102,103,109,110,113,139,140,152,169,173,176,178,185,196,200,206,],[100,100,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,100,100,100,100,100,100,100,-88,-87,100,100,100,100,100,100,100,100,]),'LET':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,99,102,103,109,110,113,139,140,152,169,173,176,178,185,196,200,206,],[101,101,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,101,101,101,101,101,101,101,-88,-87,101,101,101,101,101,101,101,101,]),'IF':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,99,102,103,109,110,113,139,140,152,169,173,176,178,185,196,200,206,],[102,102,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,102,102,102,102,102,102,102,-88,-87,102,102,102,102,102,102,102,102,]),'MATCH':([46,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,99,102,103,109,110,113,139,140,152,169,173,176,178,185,196,200,206,],[103,103,-86,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,103,103,103,103,103,103,103,-88,-87,103,103,103,103,103,103,103,103,]),'IN':([143,171,187,],[169,-16,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,34,],[8,83,]),'IMPORT_DECLARATION':([6,34,],[9,84,]),'TOP_DECLARATION':([6,34,36,],[10,10,85,]),'DECLARATION':([6,34,36,144,188,],[16,16,16,172,172,]),'GEN_DECLARATION':([6,34,36,144,188,],[17,17,17,17,17,]),'FUNCTION_LHS':([6,23,34,36,144,188,],[18,73,18,18,18,18,]),'PAT':([6,23,30,34,36,42,51,77,121,127,144,188,190,205,],[19,75,82,19,19,93,116,122,82,158,19,19,199,199,]),'APAT':([6,12,23,27,30,34,36,40,42,51,76,77,79,91,100,119,121,127,142,144,154,188,190,205,],[22,40,22,79,22,22,22,91,22,22,40,22,91,91,142,154,22,22,91,22,91,22,22,22,]),'LPAT':([6,23,30,34,36,42,51,77,121,127,144,188,190,205,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'GCON':([6,12,23,27,30,34,36,40,42,46,49,51,76,77,79,91,99,100,102,103,104,109,110,113,119,121,127,139,142,144,154,169,173,176,178,185,188,190,196,200,205,206,],[27,41,27,41,27,27,27,41,27,107,107,27,41,27,41,41,107,41,107,107,107,107,107,107,41,27,27,107,41,27,41,107,107,107,107,107,27,27,107,107,27,107,]),'PARAM':([6,12,23,27,30,34,36,40,42,51,76,77,79,91,100,119,121,127,142,144,154,188,190,205,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'LITERAL':([6,12,23,27,30,34,36,40,42,46,49,51,76,77,79,91,99,100,102,103,104,109,110,113,119,121,127,139,142,144,154,169,173,176,178,185,188,190,196,200,205,206,],[29,29,29,29,29,29,29,29,29,108,108,29,29,29,29,29,108,29,108,108,108,108,108,108,29,29,29,108,29,29,29,108,108,108,108,108,29,29,108,108,29,108,]),'RHS':([18,19,],[45,50,]),'GDRHS':([18,19,151,],[47,47,179,]),'GUARDS':([18,19,151,],[48,48,48,]),'VAROP':([19,75,98,118,],[51,51,140,140,]),'VARSYM':([19,75,98,118,],[52,52,52,52,]),'ASSOCIATIVITY':([20,],[69,]),'PAT_LIST':([30,121,],[80,155,]),'TYPE':([39,89,90,94,129,161,],[86,131,132,134,159,182,]),'ATYPE':([39,89,90,94,129,161,164,],[87,87,87,87,87,87,183,]),'APATS':([40,79,91,142,154,],[92,125,133,168,180,]),'EXP':([46,102,103,109,110,113,169,173,176,178,185,196,200,206,],[96,145,146,148,149,151,186,189,191,191,194,203,207,209,]),'INFIX_EXP':([46,49,99,102,103,109,110,113,139,169,173,176,178,185,196,200,206,],[97,115,141,97,97,97,97,97,167,97,97,97,97,97,97,97,97,]),'LEXP':([46,49,99,102,103,109,110,113,139,169,173,176,178,185,196,200,206,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'FEXP':([46,49,99,102,103,109,110,113,139,169,173,176,178,185,196,200,206,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'AEXP':([46,49,99,102,103,104,109,110,113,139,169,173,176,178,185,196,200,206,],[105,105,105,105,105,147,105,105,105,105,105,105,105,105,105,105,105,105,]),'USED_VAR':([46,49,99,102,103,104,109,110,113,139,169,173,176,178,185,196,200,206,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'GUARD':([49,],[114,]),'TYPES_LIST':([89,],[130,]),'CONSTRUCTORS':([95,],[136,]),'CONSTRUCTOR':([95,165,],[137,184,]),'OP':([98,118,],[139,153,]),'DECLARATIONS':([101,112,138,],[143,150,166,]),'ATYPES':([135,],[164,]),'DECLARATIONS_LIST':([144,188,],[170,195,]),'EXP_LIST':([176,178,],[192,193,]),'ALTS':([190,205,],[197,208,]),'ALT':([190,205,],[198,198,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',21),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',27),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',28),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',41),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',49),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',55),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',63),
  ('TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',64),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',65),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',75),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',76),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',84),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',88),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',89),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',97),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',98),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',106),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',107),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',108),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',118),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',119),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',120),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',128),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',129),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',130),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',135),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',136),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',144),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',145),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',153),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',154),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',155),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',156),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',169),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',170),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',171),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',183),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',184),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',185),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',186),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',199),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',200),
  ('GUARDS -> PIPE GUARD','GUARDS',2,'p_GUARDS','funky_parser.py',208),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',213),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',219),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',225),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',226),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',227),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',245),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',246),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',247),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',248),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',249),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',264),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',265),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',273),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',274),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',275),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',276),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',277),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',278),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',279),
  ('CONSTRUCTION_PARAMS -> CONSTRUCTION_PARAMS AEXP','CONSTRUCTION_PARAMS',2,'p_CONSTRUCTION_PARAMS','funky_parser.py',302),
  ('CONSTRUCTION_PARAMS -> AEXP','CONSTRUCTION_PARAMS',1,'p_CONSTRUCTION_PARAMS','funky_parser.py',303),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',311),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',312),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',320),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',321),
  ('PAT -> LPAT LIST_CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',326),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',327),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',335),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',336),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',337),
  ('LPAT -> GCON APAT APATS','LPAT',3,'p_LPAT','funky_parser.py',338),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',348),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',349),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',350),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',351),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',352),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',353),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',370),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',371),
  ('GCON -> TYPENAME','GCON',1,'p_GCON','funky_parser.py',372),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',382),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',383),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',393),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',398),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',399),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',407),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',408),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',416),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',417),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',426),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',427),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',428),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',429),
  ('VARSYM -> MODULO','VARSYM',1,'p_VARSYM','funky_parser.py',430),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',431),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',432),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',433),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',434),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',435),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',436),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',437),
  ('VARSYM -> AND','VARSYM',1,'p_VARSYM','funky_parser.py',438),
  ('VARSYM -> OR','VARSYM',1,'p_VARSYM','funky_parser.py',439),
  ('VARSYM -> LIST_CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',440),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',445),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',446),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',454),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',455),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',456),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',457),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',458),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',463),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',467),
]
