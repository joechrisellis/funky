
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL CLOSE_BRACE CLOSE_PAREN CONCAT DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT FPOW GEQ GIVEN GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER IPOW LAMBDA LEFTASSOC LEQ LESS LET MATCH MINUS MODULE MODULO NEWTYPE NONASSOC ON OPEN_BRACE OPEN_PAREN OR PIPE PLUS RIGHTASSOC SETFIX STRING TILDE TIMES TYPENAME WHITESPACE WITHMODULE_DEFINITION : MODULE IDENTIFIER WITH MODULE_BODY\n        MODULE_BODY : OPEN_BRACE IMPORT_STATEMENTS ENDSTATEMENT TOPLEVEL_DECLARATIONS CLOSE_BRACE\n                       | OPEN_BRACE TOPLEVEL_DECLARATIONS CLOSE_BRACE\n        IMPORT_STATEMENTS : IMPORT_STATEMENTS ENDSTATEMENT IMPORT_STATEMENT\n                             | IMPORT_STATEMENT\n        IMPORT_STATEMENT : IMPORT STRINGTOPLEVEL_DECLARATIONS : TOPLEVEL_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                                 | TOP_DECLARATION\n        TOP_DECLARATION : ADT_DECLARATION\n                           | DECLARATION\n        ADT_DECLARATION : NEWTYPE TYPENAME EQUALS CONSTRUCTORSCONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : FUNCTION_DEFINITION\n                       | VARIABLE_DEFINITION\n                       | FIXITY_DECLARATION\n                       |\n        FUNCTION_DEFINITION : FUNCTION_LHS RHSVARIABLE_DEFINITION : PARAM RHSFIXITY_DECLARATION : SETFIX ASSOCIATIVITY INTEGER OPASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | IDENTIFIER\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n                        | INFIX_FUNCTION_DEFINITION\n        INFIX_FUNCTION_DEFINITION : LPAT INFIX_FUNCTION LPATRHS : EQUALS EXP\n               | EQUALS EXP WITH DECLARATIONS\n               | GDRHS\n               | GDRHS WITH DECLARATIONS\n        GDRHS : GIVEN EXP EQUALS EXP\n                 | GIVEN EXP EQUALS EXP GDRHS\n        EXP : INFIX_EXPINFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA_ABSTRACTION\n                | LET_EXPR\n                | IF_EXPR\n                | MATCH_EXPR\n                | FUNCTION_EXPR\n        LAMBDA_ABSTRACTION : LAMBDA APAT APATS ARROW EXPLET_EXPR : LET DECLARATIONS IN EXPIF_EXPR : EXP IF EXP ELSE EXPMATCH_EXPR : MATCH EXP ON OPEN_BRACE ALTS CLOSE_BRACEFUNCTION_EXPR : FUNCTION_EXPR AEXP\n                         | AEXP\n        AEXP : USED_VAR\n                | USED_TYPENAME\n                | LITERAL\n                | OPERATOR_FUNC\n                | OPEN_PAREN EXP CLOSE_PAREN\n        OPERATOR_FUNC : OPEN_PAREN OP CLOSE_PARENALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : LPAT ARROW EXP\n               |\n        LPAT : APAT\n                | CONSTRUCTOR_PATTERN\n                | NEGATIVE_LITERAL\n        CONSTRUCTOR_PATTERN : TYPENAME APAT APATSNEGATIVE_LITERAL : MINUS INTEGER\n                            | MINUS FLOAT\n        APAT : PARAM\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN LPAT CLOSE_PAREN\n        OP : VARSYM\n              | INFIX_FUNCTION\n        INFIX_FUNCTION : TILDE IDENTIFIER TILDEAPATS : APAT APATS\n                 |\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | MODULO\n                  | FPOW\n                  | IPOW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | CONCAT\n                  | AND\n                  | OR\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | STRING\n        USED_VAR : IDENTIFIERUSED_TYPENAME : TYPENAMEPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,36,96,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,12,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,58,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,127,131,133,135,136,137,143,148,149,152,153,154,155,157,158,161,162,172,173,175,176,],[3,24,-105,44,-103,44,24,-79,-102,-104,24,24,-78,44,-77,44,-108,86,86,44,44,95,44,86,86,44,86,-60,-61,-62,-63,-64,86,-106,-107,44,-80,-32,86,86,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-59,44,24,86,86,44,-83,154,86,-65,-66,-33,-31,-34,154,86,86,24,44,-35,154,44,86,]),'WITH':([3,12,23,33,34,47,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,122,124,141,148,149,150,159,163,166,167,174,],[4,-105,-103,-102,-104,88,101,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,-48,-59,-47,-65,-66,-44,-56,-45,-57,-55,-58,]),'OPEN_BRACE':([4,78,88,101,147,],[6,127,127,127,162,]),'IMPORT':([6,35,],[11,11,]),'NEWTYPE':([6,35,37,],[15,15,15,]),'CLOSE_BRACE':([6,8,10,12,13,14,17,18,19,23,33,34,35,37,45,47,49,61,63,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,97,98,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,132,134,136,137,139,141,144,145,146,148,149,150,152,153,154,156,159,160,161,162,163,166,167,168,169,170,172,174,175,178,179,],[-22,36,-8,-105,-9,-10,-19,-20,-21,-103,-102,-104,-22,-22,-23,-42,-24,96,-7,-40,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,-32,-11,-13,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-48,-59,145,-43,-25,-83,-14,-41,-47,160,-16,-18,-65,-66,-44,-33,-31,-34,-12,-56,-15,-22,-70,-45,-57,-55,-17,174,-68,-35,-58,-70,-67,-69,]),'ENDSTATEMENT':([6,7,8,9,10,12,13,14,17,18,19,23,33,34,35,37,38,45,47,49,61,62,63,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,97,98,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,132,134,136,137,139,141,145,146,148,149,150,152,153,154,156,159,160,161,162,163,166,167,170,172,174,175,179,],[-22,35,37,-5,-8,-105,-9,-10,-19,-20,-21,-103,-102,-104,-22,-22,-6,-23,-42,-24,37,-4,-7,-40,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,-32,-11,-13,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-48,-59,-22,-43,-25,-83,-14,-41,-47,-16,161,-65,-66,-44,-33,-31,-34,-12,-56,-15,-22,-70,-45,-57,-55,175,-35,-58,-70,-69,]),'SETFIX':([6,35,37,127,161,],[22,22,22,22,22,]),'OPEN_PAREN':([6,12,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,127,131,133,135,136,137,143,148,149,152,153,154,155,157,158,161,162,172,173,175,176,],[26,-105,43,-103,43,26,-79,-102,-104,26,26,-78,43,-77,43,-108,85,85,43,43,43,85,85,43,85,-60,-61,-62,-63,-64,85,-106,-107,43,-80,-32,85,85,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-59,43,26,85,85,43,-83,155,85,-65,-66,-33,-31,-34,155,85,85,26,43,-35,155,43,85,]),'TYPENAME':([6,12,15,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,64,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,127,131,133,135,136,137,138,143,148,149,152,153,154,155,157,158,161,162,172,173,175,176,],[16,-105,39,40,-103,40,16,-79,-102,-104,16,16,-78,40,-77,16,-108,87,87,40,16,97,40,87,87,40,87,-60,-61,-62,-63,-64,87,-106,-107,40,-80,-32,87,87,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-59,40,16,87,87,40,-83,152,97,87,-65,-66,-33,-31,-34,152,87,87,16,16,-35,152,16,87,]),'MINUS':([6,12,23,26,33,34,35,37,43,46,48,57,69,70,71,72,73,74,75,76,79,80,81,82,83,84,85,86,87,90,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,131,133,136,141,143,148,149,157,158,159,161,162,166,167,174,175,176,],[32,-105,-103,32,-102,-104,32,32,32,71,71,32,-46,107,71,-50,-51,-52,-53,-54,71,-60,-61,-62,-63,-64,131,-106,-107,107,71,71,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-48,-59,32,71,71,-83,-47,71,-65,-66,71,71,-56,32,32,-57,-55,-58,32,71,]),'FLOAT':([6,12,16,23,24,26,31,32,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,127,131,133,135,136,143,148,149,157,158,161,162,175,176,],[33,-105,33,-103,33,33,-79,60,-102,-104,33,33,-78,33,-77,33,-108,33,33,33,33,33,33,33,33,33,-60,-61,-62,-63,-64,33,-106,-107,33,-80,33,33,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-59,33,33,33,33,33,-83,33,-65,-66,33,33,33,33,33,33,]),'INTEGER':([6,12,16,23,24,26,31,32,33,34,35,37,40,41,42,43,44,46,48,50,51,52,53,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,127,131,133,135,136,143,148,149,157,158,161,162,175,176,],[23,-105,23,-103,23,23,-79,59,-102,-104,23,23,-78,23,-77,23,-108,23,23,90,-26,-27,-28,23,23,23,23,23,23,23,-60,-61,-62,-63,-64,23,-106,-107,23,-80,23,23,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-59,23,23,23,23,23,-83,23,-65,-66,23,23,23,23,23,23,]),'BOOL':([6,12,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,127,131,133,135,136,143,148,149,157,158,161,162,175,176,],[34,-105,34,-103,34,34,-79,-102,-104,34,34,-78,34,-77,34,-108,34,34,34,34,34,34,34,34,34,-60,-61,-62,-63,-64,34,-106,-107,34,-80,34,34,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-59,34,34,34,34,34,-83,34,-65,-66,34,34,34,34,34,34,]),'STRING':([6,11,12,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,127,131,133,135,136,143,148,149,157,158,161,162,175,176,],[12,38,-105,12,-103,12,12,-79,-102,-104,12,12,-78,12,-77,12,-108,12,12,12,12,12,12,12,12,12,-60,-61,-62,-63,-64,12,-106,-107,12,-80,12,12,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-59,12,12,12,12,12,-83,12,-65,-66,12,12,12,12,12,12,]),'TILDE':([12,16,21,23,24,25,28,29,30,31,33,34,40,41,42,44,56,59,60,65,66,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,93,95,100,122,124,141,148,149,159,166,167,174,],[-105,-78,-77,-103,-108,-71,58,-72,-73,-79,-102,-104,-78,-85,-77,-108,58,-75,-76,-85,-74,-46,58,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,58,-106,-107,58,-80,136,-84,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'CLOSE_PAREN':([12,16,23,24,25,27,29,30,31,33,34,40,41,42,44,54,55,56,59,60,65,66,67,69,70,72,73,74,75,76,80,81,82,83,84,86,87,91,93,94,100,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,129,130,131,135,136,141,148,149,151,152,154,159,164,165,166,167,172,174,177,],[-105,-78,-103,-108,-71,-38,-72,-73,-79,-102,-104,-78,-85,-77,-108,-85,92,93,-75,-76,-85,-74,93,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,-36,-80,-39,-84,-81,-82,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-48,-59,148,149,-87,-85,-83,-47,-65,-66,-37,-33,-34,-56,172,-29,-57,-55,-35,-58,-30,]),'EQUALS':([12,16,20,21,23,24,25,27,29,30,31,33,34,39,40,41,42,44,54,59,60,65,66,69,70,72,73,74,75,76,80,81,82,83,84,86,87,89,91,93,94,100,122,124,135,141,148,149,151,159,166,167,174,],[-105,-78,46,46,-103,-108,-71,-38,-72,-73,-79,-102,-104,64,-78,-85,-77,-108,-85,-75,-76,-85,-74,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,133,-36,-80,-39,-84,-48,-59,-85,-47,-65,-66,-37,-56,-57,-55,-58,]),'GIVEN':([12,16,20,21,23,24,25,27,29,30,31,33,34,40,41,42,44,54,59,60,65,66,69,70,72,73,74,75,76,80,81,82,83,84,86,87,91,93,94,100,122,124,135,141,148,149,150,151,159,166,167,174,],[-105,-78,48,48,-103,-108,-71,-38,-72,-73,-79,-102,-104,-78,-85,-77,-108,-85,-75,-76,-85,-74,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,-36,-80,-39,-84,-48,-59,-85,-47,-65,-66,48,-37,-56,-57,-55,-58,]),'ARROW':([12,16,23,25,29,30,31,33,34,40,41,42,44,59,60,65,66,93,100,125,142,152,154,165,171,172,],[-105,-78,-103,-71,-72,-73,-79,-102,-104,-78,-85,-77,-108,-75,-76,-85,-74,-80,-84,-85,158,-33,-34,173,176,-35,]),'PLUS':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,106,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,106,-106,-107,106,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'TIMES':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,108,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,108,-106,-107,108,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'DIVIDE':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,109,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,109,-106,-107,109,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'MODULO':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,110,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,110,-106,-107,110,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'FPOW':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,111,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,111,-106,-107,111,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'IPOW':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,112,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,112,-106,-107,112,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'EQUALITY':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,113,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,113,-106,-107,113,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'INEQUALITY':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,114,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,114,-106,-107,114,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'LESS':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,115,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,115,-106,-107,115,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'LEQ':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,116,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,116,-106,-107,116,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'GREATER':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,117,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,117,-106,-107,117,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'GEQ':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,118,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,118,-106,-107,118,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'CONCAT':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,119,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,119,-106,-107,119,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'AND':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,120,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,120,-106,-107,120,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'OR':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,122,124,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,121,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,121,-106,-107,121,-48,-59,-47,-65,-66,-56,-57,-55,-58,]),'IF':([12,23,33,34,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,89,122,123,124,128,129,140,141,148,149,150,159,166,167,174,179,],[-105,-103,-102,-104,102,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,102,-46,102,-59,102,102,102,-46,-65,-66,102,102,102,102,-58,102,]),'ON':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,86,87,122,124,128,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,-48,-59,147,-47,-65,-66,-56,-57,-55,-58,]),'ELSE':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,86,87,122,124,140,141,148,149,159,166,167,174,],[-105,-103,-102,-104,-46,-49,-50,-51,-52,-53,-54,-60,-61,-62,-63,-64,-106,-107,-48,-59,157,-47,-65,-66,-56,-57,-55,-58,]),'LEFTASSOC':([22,],[51,]),'RIGHTASSOC':([22,],[52,]),'NONASSOC':([22,],[53,]),'LAMBDA':([46,48,71,79,85,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,131,133,136,143,157,158,176,],[77,77,77,77,77,77,77,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,77,77,-83,77,77,77,77,]),'LET':([46,48,71,79,85,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,131,133,136,143,157,158,176,],[78,78,78,78,78,78,78,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,78,78,-83,78,78,78,78,]),'MATCH':([46,48,71,79,85,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,131,133,136,143,157,158,176,],[79,79,79,79,79,79,79,-81,-82,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,79,79,-83,79,79,79,79,]),'PIPE':([97,98,99,137,152,153,154,156,172,],[-32,138,-13,-14,-33,-31,-34,-12,-35,]),'IN':([126,145,160,],[143,-16,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'MODULE_BODY':([4,],[5,]),'IMPORT_STATEMENTS':([6,],[7,]),'TOPLEVEL_DECLARATIONS':([6,35,],[8,61,]),'IMPORT_STATEMENT':([6,35,],[9,62,]),'TOP_DECLARATION':([6,35,37,],[10,10,63,]),'ADT_DECLARATION':([6,35,37,],[13,13,13,]),'DECLARATION':([6,35,37,127,161,],[14,14,14,146,146,]),'FUNCTION_DEFINITION':([6,35,37,127,161,],[17,17,17,17,17,]),'VARIABLE_DEFINITION':([6,35,37,127,161,],[18,18,18,18,18,]),'FIXITY_DECLARATION':([6,35,37,127,161,],[19,19,19,19,19,]),'FUNCTION_LHS':([6,26,35,37,127,161,],[20,55,20,20,20,20,]),'PARAM':([6,16,24,26,35,37,41,43,54,57,65,77,92,125,127,135,161,162,175,],[21,42,42,42,21,21,42,42,42,42,42,42,42,42,21,42,21,42,42,]),'APAT':([6,16,24,26,35,37,41,43,54,57,65,77,92,125,127,135,161,162,175,],[25,41,54,25,25,25,65,25,65,25,65,125,135,65,25,65,25,25,25,]),'INFIX_FUNCTION_DEFINITION':([6,26,35,37,127,161,],[27,27,27,27,27,27,]),'LPAT':([6,26,35,37,43,57,127,161,162,175,],[28,56,28,28,67,94,28,28,171,171,]),'CONSTRUCTOR_PATTERN':([6,26,35,37,43,57,127,161,162,175,],[29,29,29,29,29,29,29,29,29,29,]),'NEGATIVE_LITERAL':([6,26,35,37,43,57,127,161,162,175,],[30,30,30,30,30,30,30,30,30,30,]),'LITERAL':([6,16,24,26,35,37,41,43,46,48,54,57,65,71,76,77,79,85,92,102,103,125,127,131,133,135,143,157,158,161,162,175,176,],[31,31,31,31,31,31,31,31,83,83,31,31,31,83,83,31,83,83,31,83,83,31,31,83,83,31,83,83,83,31,31,31,83,]),'RHS':([20,21,],[45,49,]),'GDRHS':([20,21,150,],[47,47,163,]),'ASSOCIATIVITY':([22,],[50,]),'INFIX_FUNCTION':([28,56,70,85,90,],[57,57,105,105,105,]),'APATS':([41,54,65,125,135,],[66,91,100,142,151,]),'EXP':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[68,89,123,128,129,140,123,123,150,159,166,167,179,]),'INFIX_EXP':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[69,69,122,69,69,69,141,122,69,69,69,69,69,]),'LEXP':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[70,70,70,70,70,70,70,70,70,70,70,70,70,]),'LAMBDA_ABSTRACTION':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[72,72,72,72,72,72,72,72,72,72,72,72,72,]),'LET_EXPR':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[73,73,73,73,73,73,73,73,73,73,73,73,73,]),'IF_EXPR':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[74,74,74,74,74,74,74,74,74,74,74,74,74,]),'MATCH_EXPR':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[75,75,75,75,75,75,75,75,75,75,75,75,75,]),'FUNCTION_EXPR':([46,48,71,79,85,102,103,131,133,143,157,158,176,],[76,76,76,76,76,76,76,76,76,76,76,76,76,]),'AEXP':([46,48,71,76,79,85,102,103,131,133,143,157,158,176,],[80,80,80,124,80,80,80,80,80,80,80,80,80,80,]),'USED_VAR':([46,48,71,76,79,85,102,103,131,133,143,157,158,176,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'USED_TYPENAME':([46,48,71,76,79,85,102,103,131,133,143,157,158,176,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'OPERATOR_FUNC':([46,48,71,76,79,85,102,103,131,133,143,157,158,176,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'CONSTRUCTORS':([64,],[98,]),'CONSTRUCTOR':([64,138,],[99,156,]),'OP':([70,85,90,],[103,130,134,]),'VARSYM':([70,85,90,],[104,104,104,]),'DECLARATIONS':([78,88,101,],[126,132,139,]),'ATYPES':([97,],[137,]),'DECLARATIONS_LIST':([127,161,],[144,168,]),'ATYPE':([137,155,173,],[153,165,165,]),'TYPE':([155,173,],[164,177,]),'ALTS':([162,175,],[169,178,]),'ALT':([162,175,],[170,170,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WITH MODULE_BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',18),
  ('MODULE_BODY -> OPEN_BRACE IMPORT_STATEMENTS ENDSTATEMENT TOPLEVEL_DECLARATIONS CLOSE_BRACE','MODULE_BODY',5,'p_MODULE_BODY','funky_parser.py',24),
  ('MODULE_BODY -> OPEN_BRACE TOPLEVEL_DECLARATIONS CLOSE_BRACE','MODULE_BODY',3,'p_MODULE_BODY','funky_parser.py',25),
  ('IMPORT_STATEMENTS -> IMPORT_STATEMENTS ENDSTATEMENT IMPORT_STATEMENT','IMPORT_STATEMENTS',3,'p_IMPORT_STATEMENTS','funky_parser.py',37),
  ('IMPORT_STATEMENTS -> IMPORT_STATEMENT','IMPORT_STATEMENTS',1,'p_IMPORT_STATEMENTS','funky_parser.py',38),
  ('IMPORT_STATEMENT -> IMPORT STRING','IMPORT_STATEMENT',2,'p_IMPORT_STATEMENT','funky_parser.py',46),
  ('TOPLEVEL_DECLARATIONS -> TOPLEVEL_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOPLEVEL_DECLARATIONS',3,'p_TOPLEVEL_DECLARATION','funky_parser.py',50),
  ('TOPLEVEL_DECLARATIONS -> TOP_DECLARATION','TOPLEVEL_DECLARATIONS',1,'p_TOPLEVEL_DECLARATION','funky_parser.py',51),
  ('TOP_DECLARATION -> ADT_DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',59),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',60),
  ('ADT_DECLARATION -> NEWTYPE TYPENAME EQUALS CONSTRUCTORS','ADT_DECLARATION',4,'p_ADT_DECLARATION','funky_parser.py',65),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',69),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',70),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',78),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',82),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',83),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',91),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',92),
  ('DECLARATION -> FUNCTION_DEFINITION','DECLARATION',1,'p_DECLARATION','funky_parser.py',100),
  ('DECLARATION -> VARIABLE_DEFINITION','DECLARATION',1,'p_DECLARATION','funky_parser.py',101),
  ('DECLARATION -> FIXITY_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',102),
  ('DECLARATION -> <empty>','DECLARATION',0,'p_DECLARATION','funky_parser.py',103),
  ('FUNCTION_DEFINITION -> FUNCTION_LHS RHS','FUNCTION_DEFINITION',2,'p_FUNCTION_DEFINITION','funky_parser.py',109),
  ('VARIABLE_DEFINITION -> PARAM RHS','VARIABLE_DEFINITION',2,'p_VARIABLE_DEFINITION','funky_parser.py',113),
  ('FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','FIXITY_DECLARATION',4,'p_FIXITY_DECLARATION','funky_parser.py',117),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',121),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',122),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',123),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',128),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',129),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',137),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',138),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',146),
  ('ATYPE -> IDENTIFIER','ATYPE',1,'p_ATYPE','funky_parser.py',147),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',148),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',156),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',157),
  ('FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION','FUNCTION_LHS',1,'p_FUNCTION_LHS','funky_parser.py',158),
  ('INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT','INFIX_FUNCTION_DEFINITION',3,'p_INFIX_FUNCTION_DEFINITION','funky_parser.py',170),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',174),
  ('RHS -> EQUALS EXP WITH DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',175),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',176),
  ('RHS -> GDRHS WITH DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',177),
  ('GDRHS -> GIVEN EXP EQUALS EXP','GDRHS',4,'p_GDRHS','funky_parser.py',190),
  ('GDRHS -> GIVEN EXP EQUALS EXP GDRHS','GDRHS',5,'p_GDRHS','funky_parser.py',191),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',199),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',204),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',205),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',206),
  ('LEXP -> LAMBDA_ABSTRACTION','LEXP',1,'p_LEXP','funky_parser.py',222),
  ('LEXP -> LET_EXPR','LEXP',1,'p_LEXP','funky_parser.py',223),
  ('LEXP -> IF_EXPR','LEXP',1,'p_LEXP','funky_parser.py',224),
  ('LEXP -> MATCH_EXPR','LEXP',1,'p_LEXP','funky_parser.py',225),
  ('LEXP -> FUNCTION_EXPR','LEXP',1,'p_LEXP','funky_parser.py',226),
  ('LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP','LAMBDA_ABSTRACTION',5,'p_LAMBDA_ABSTRACTION','funky_parser.py',231),
  ('LET_EXPR -> LET DECLARATIONS IN EXP','LET_EXPR',4,'p_LET_EXPR','funky_parser.py',235),
  ('IF_EXPR -> EXP IF EXP ELSE EXP','IF_EXPR',5,'p_IF_EXPR','funky_parser.py',239),
  ('MATCH_EXPR -> MATCH EXP ON OPEN_BRACE ALTS CLOSE_BRACE','MATCH_EXPR',6,'p_MATCH_EXPR','funky_parser.py',243),
  ('FUNCTION_EXPR -> FUNCTION_EXPR AEXP','FUNCTION_EXPR',2,'p_FUNCTION_EXPR','funky_parser.py',247),
  ('FUNCTION_EXPR -> AEXP','FUNCTION_EXPR',1,'p_FUNCTION_EXPR','funky_parser.py',248),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',256),
  ('AEXP -> USED_TYPENAME','AEXP',1,'p_AEXP','funky_parser.py',257),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',258),
  ('AEXP -> OPERATOR_FUNC','AEXP',1,'p_AEXP','funky_parser.py',259),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',260),
  ('OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN','OPERATOR_FUNC',3,'p_OPERATOR_FUNC','funky_parser.py',268),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',272),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',273),
  ('ALT -> LPAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',281),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',282),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',287),
  ('LPAT -> CONSTRUCTOR_PATTERN','LPAT',1,'p_LPAT','funky_parser.py',288),
  ('LPAT -> NEGATIVE_LITERAL','LPAT',1,'p_LPAT','funky_parser.py',289),
  ('CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS','CONSTRUCTOR_PATTERN',3,'p_CONSTRUCTOR_PATTERN','funky_parser.py',294),
  ('NEGATIVE_LITERAL -> MINUS INTEGER','NEGATIVE_LITERAL',2,'p_NEGATIVE_LITERAL','funky_parser.py',298),
  ('NEGATIVE_LITERAL -> MINUS FLOAT','NEGATIVE_LITERAL',2,'p_NEGATIVE_LITERAL','funky_parser.py',299),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',304),
  ('APAT -> TYPENAME','APAT',1,'p_APAT','funky_parser.py',305),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',306),
  ('APAT -> OPEN_PAREN LPAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',307),
  ('OP -> VARSYM','OP',1,'p_OP','funky_parser.py',318),
  ('OP -> INFIX_FUNCTION','OP',1,'p_OP','funky_parser.py',319),
  ('INFIX_FUNCTION -> TILDE IDENTIFIER TILDE','INFIX_FUNCTION',3,'p_INFIX_FUNCTION','funky_parser.py',324),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',330),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',331),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',339),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',340),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',341),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',342),
  ('VARSYM -> MODULO','VARSYM',1,'p_VARSYM','funky_parser.py',343),
  ('VARSYM -> FPOW','VARSYM',1,'p_VARSYM','funky_parser.py',344),
  ('VARSYM -> IPOW','VARSYM',1,'p_VARSYM','funky_parser.py',345),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',346),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',347),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',348),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',349),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',350),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',351),
  ('VARSYM -> CONCAT','VARSYM',1,'p_VARSYM','funky_parser.py',352),
  ('VARSYM -> AND','VARSYM',1,'p_VARSYM','funky_parser.py',353),
  ('VARSYM -> OR','VARSYM',1,'p_VARSYM','funky_parser.py',354),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',359),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',360),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',361),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',362),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',367),
  ('USED_TYPENAME -> TYPENAME','USED_TYPENAME',1,'p_USED_TYPENAME','funky_parser.py',371),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',375),
]
