
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TOP_DECLARATIONSAND ARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET LIST_CONSTRUCTOR MATCH MINUS MODULE MODULO NEWCONS NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE OR PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | NEWCONS TYPENAME EQUALS CONSTRUCTORS\n                           | DECLARATION\n        CONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | LPAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | LPAT VAROP LPAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : PIPE EXP EQUALS EXP\n                 | PIPE EXP EQUALS EXP GDRHS\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n        CONSTRUCTION_PARAMS : CONSTRUCTION_PARAMS AEXP\n                               | AEXP\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : LPAT ARROW EXP\n               |\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n                | TYPENAME APAT APATS\n        APAT : PARAM\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN LPAT CLOSE_PAREN\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        APATS : APAT APATS\n                 |\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | MODULO\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | AND\n                  | OR\n                  | LIST_CONSTRUCTOR\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'NEWTYPE':([0,22,],[3,3,]),'NEWCONS':([0,22,],[5,5,]),'IDENTIFIER':([0,4,10,12,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,60,64,71,72,74,75,76,77,78,79,80,81,82,93,94,103,104,106,108,111,114,115,119,127,131,133,140,143,145,149,155,156,],[10,27,27,-93,60,-92,-68,-70,-94,-95,-96,10,-69,27,27,-98,82,82,27,-72,86,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,27,27,27,82,27,82,82,82,-53,-54,-55,-56,82,-97,27,-71,82,-74,27,10,-52,82,-73,27,82,82,-57,82,10,27,82,27,82,]),'SETFIX':([0,22,108,143,],[11,11,11,11,]),'ENDSTATEMENT':([0,1,2,6,7,12,16,19,20,21,22,29,31,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,62,68,69,70,76,77,78,79,80,82,87,88,89,97,99,100,101,104,105,108,111,113,115,118,122,124,125,129,130,133,134,135,136,138,139,141,142,143,145,146,147,151,153,154,155,158,],[-24,22,-8,-11,-19,-93,-92,-94,-95,-96,-24,-20,-39,-21,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-7,-37,-43,-46,-51,-53,-54,-55,-56,-97,-22,-28,-32,-9,-31,-10,-13,-74,-45,-24,-52,-40,-73,-23,-14,-38,-44,-16,143,-57,-41,-29,-33,-30,-12,-48,-15,-24,-63,-42,-47,155,-49,-50,-63,-62,]),'$end':([0,1,2,6,7,12,16,19,20,21,22,29,31,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,62,68,69,70,76,77,78,79,80,82,87,88,89,97,99,100,101,104,105,111,113,115,118,122,124,125,129,133,134,135,136,138,139,141,142,146,147,153,154,],[-24,0,-8,-11,-19,-93,-92,-94,-95,-96,-24,-20,-39,-21,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-7,-37,-43,-46,-51,-53,-54,-55,-56,-97,-22,-28,-32,-9,-31,-10,-13,-74,-45,-52,-40,-73,-23,-14,-38,-44,-16,-57,-41,-29,-33,-30,-12,-48,-15,-42,-47,-49,-50,]),'OPEN_PAREN':([0,4,10,12,14,15,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,60,63,64,71,72,74,75,76,77,78,79,80,81,82,89,90,93,94,99,103,104,106,108,111,114,115,116,119,122,127,131,133,136,138,140,143,145,149,155,156,],[14,26,26,-93,14,61,-92,-68,-70,-94,-95,-96,14,-69,26,26,-98,81,81,26,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,90,26,26,90,26,81,26,81,81,81,-53,-54,-55,-56,81,-97,-32,90,26,-71,-31,81,-74,26,14,-52,81,-73,90,26,90,81,81,-57,-33,-30,81,14,26,81,26,81,]),'MINUS':([0,4,9,10,12,13,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,59,60,64,65,69,70,71,74,75,76,77,78,79,80,81,82,92,94,98,103,104,105,108,111,114,115,120,121,125,127,131,133,140,141,143,145,147,149,153,154,155,156,],[15,-69,38,-98,-93,-64,15,-92,-68,-70,-94,-95,-96,15,-69,-76,15,-98,71,71,15,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,38,-98,-76,-67,-43,38,71,71,71,-51,-53,-54,-55,-56,71,-97,38,-71,-75,71,-74,-45,15,-52,71,-73,-65,-66,-44,71,71,-57,71,-48,15,15,-47,71,-49,-50,15,71,]),'TYPENAME':([0,3,4,5,10,12,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,60,63,64,67,71,72,74,75,76,77,78,79,80,81,82,89,90,93,94,99,103,104,106,108,111,114,115,116,119,122,123,127,131,133,136,138,140,143,145,149,155,156,],[4,23,24,28,24,-93,4,-92,-68,-70,-94,-95,-96,4,-69,24,4,-98,79,79,4,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,89,24,24,89,24,99,79,24,79,79,79,-53,-54,-55,-56,79,-97,-32,89,24,-71,-31,79,-74,24,4,-52,79,-73,89,24,89,99,79,79,-57,-33,-30,79,4,4,79,4,79,]),'FLOAT':([0,4,10,12,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,60,61,64,71,72,74,75,76,77,78,79,80,81,82,93,94,103,104,106,108,111,114,115,119,127,131,133,140,143,145,149,155,156,],[16,16,16,-93,16,-92,-68,-70,-94,-95,-96,16,-69,16,16,-98,16,16,16,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,16,16,96,16,16,16,16,16,16,-53,-54,-55,-56,16,-97,16,-71,16,-74,16,16,-52,16,-73,16,16,16,-57,16,16,16,16,16,16,]),'INTEGER':([0,4,10,12,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,60,61,64,71,72,74,75,76,77,78,79,80,81,82,93,94,103,104,106,108,111,114,115,119,127,131,133,140,143,145,149,155,156,],[12,12,12,-93,12,-92,-68,-70,-94,-95,-96,12,-69,12,12,-98,12,12,12,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,12,92,-25,-26,-27,12,95,12,12,12,12,12,12,-53,-54,-55,-56,12,-97,12,-71,12,-74,12,12,-52,12,-73,12,12,12,-57,12,12,12,12,12,12,]),'BOOL':([0,4,10,12,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,60,64,71,72,74,75,76,77,78,79,80,81,82,93,94,103,104,106,108,111,114,115,119,127,131,133,140,143,145,149,155,156,],[19,19,19,-93,19,-92,-68,-70,-94,-95,-96,19,-69,19,19,-98,19,19,19,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,19,19,19,19,19,19,19,19,-53,-54,-55,-56,19,-97,19,-71,19,-74,19,19,-52,19,-73,19,19,19,-57,19,19,19,19,19,19,]),'CHAR':([0,4,10,12,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,60,64,71,72,74,75,76,77,78,79,80,81,82,93,94,103,104,106,108,111,114,115,119,127,131,133,140,143,145,149,155,156,],[20,20,20,-93,20,-92,-68,-70,-94,-95,-96,20,-69,20,20,-98,20,20,20,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,20,20,20,20,20,20,20,20,-53,-54,-55,-56,20,-97,20,-71,20,-74,20,20,-52,20,-73,20,20,20,-57,20,20,20,20,20,20,]),'STRING':([0,4,10,12,14,16,17,18,19,20,21,22,24,25,26,27,30,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,60,64,71,72,74,75,76,77,78,79,80,81,82,93,94,103,104,106,108,111,114,115,119,127,131,133,140,143,145,149,155,156,],[21,21,21,-93,21,-92,-68,-70,-94,-95,-96,21,-69,21,21,-98,21,21,21,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,21,21,21,21,21,21,21,21,-53,-54,-55,-56,21,-97,21,-71,21,-74,21,21,-52,21,-73,21,21,21,-57,21,21,21,21,21,21,]),'EQUALS':([4,8,9,10,12,13,16,17,18,19,20,21,23,24,25,27,28,53,64,65,69,70,76,77,78,79,80,82,84,85,91,94,98,105,111,119,120,121,125,133,137,141,147,153,154,],[-69,30,30,-98,-93,-64,-92,-68,-70,-94,-95,-96,63,-69,-76,-98,67,-76,-76,-67,-43,-46,-51,-53,-54,-55,-56,-97,114,-35,-34,-71,-75,-45,-52,-76,-65,-66,-44,-57,-36,-48,-47,-49,-50,]),'BACKTICK':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,86,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,36,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,36,-98,-76,-67,-43,36,-51,-53,-54,-55,-56,-97,115,36,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'PIPE':([4,8,9,10,12,13,16,17,18,19,20,21,24,25,27,53,64,65,69,70,76,77,78,79,80,82,85,89,91,94,98,99,100,101,105,111,119,120,121,122,125,133,134,136,137,138,139,141,147,153,154,],[-69,32,32,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,-76,-76,-67,-43,-46,-51,-53,-54,-55,-56,-97,-35,-32,-34,-71,-75,-31,123,-13,-45,-52,-76,-65,-66,-14,-44,-57,32,-33,-36,-30,-12,-48,-47,-49,-50,]),'PLUS':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,37,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,37,-98,-76,-67,-43,37,-51,-53,-54,-55,-56,-97,37,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'TIMES':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,39,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,39,-98,-76,-67,-43,39,-51,-53,-54,-55,-56,-97,39,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'DIVIDE':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,40,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,40,-98,-76,-67,-43,40,-51,-53,-54,-55,-56,-97,40,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'MODULO':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,41,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,41,-98,-76,-67,-43,41,-51,-53,-54,-55,-56,-97,41,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'POW':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,42,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,42,-98,-76,-67,-43,42,-51,-53,-54,-55,-56,-97,42,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'EQUALITY':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,43,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,43,-98,-76,-67,-43,43,-51,-53,-54,-55,-56,-97,43,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'INEQUALITY':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,44,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,44,-98,-76,-67,-43,44,-51,-53,-54,-55,-56,-97,44,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'LESS':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,45,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,45,-98,-76,-67,-43,45,-51,-53,-54,-55,-56,-97,45,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'LEQ':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,46,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,46,-98,-76,-67,-43,46,-51,-53,-54,-55,-56,-97,46,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'GREATER':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,47,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,47,-98,-76,-67,-43,47,-51,-53,-54,-55,-56,-97,47,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'GEQ':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,48,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,48,-98,-76,-67,-43,48,-51,-53,-54,-55,-56,-97,48,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'AND':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,49,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,49,-98,-76,-67,-43,49,-51,-53,-54,-55,-56,-97,49,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'OR':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,50,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,50,-98,-76,-67,-43,50,-51,-53,-54,-55,-56,-97,50,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'LIST_CONSTRUCTOR':([4,9,10,12,13,16,17,18,19,20,21,24,25,27,59,60,64,65,69,70,76,77,78,79,80,82,92,94,98,105,111,120,121,125,133,141,147,153,154,],[-69,51,-98,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,51,-98,-76,-67,-43,51,-51,-53,-54,-55,-56,-97,51,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'CLOSE_PAREN':([4,12,13,16,17,18,19,20,21,24,25,27,53,58,59,60,64,65,66,69,70,76,77,78,79,80,82,85,88,89,91,94,95,96,98,105,111,112,117,119,120,121,125,133,135,136,137,141,147,153,154,],[-69,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,-76,93,94,-98,-76,-67,94,-43,-46,-51,-53,-54,-55,-56,-97,-35,-28,-32,-34,-71,120,121,-75,-45,-52,133,136,-76,-65,-66,-44,-57,-29,-33,-36,-48,-47,-49,-50,]),'ARROW':([4,12,13,16,17,18,19,20,21,24,25,27,64,65,88,89,94,98,106,120,121,126,136,152,],[-69,-93,-64,-92,-68,-70,-94,-95,-96,-69,-76,-98,-76,-67,116,-32,-71,-75,-76,-65,-66,140,-33,156,]),'CLOSE_BRACE':([7,12,16,19,20,21,29,31,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,68,69,70,76,77,78,79,80,82,87,88,89,104,105,108,111,113,115,118,124,125,128,129,130,133,134,135,136,141,142,143,145,146,147,148,150,151,153,154,155,157,158,],[-19,-93,-92,-94,-95,-96,-20,-39,-21,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-37,-43,-46,-51,-53,-54,-55,-56,-97,-22,-28,-32,-74,-45,129,-52,-40,-73,-23,-38,-44,142,-16,-18,-57,-41,-29,-33,-48,-15,-24,-63,-42,-47,-17,154,-61,-49,-50,-63,-60,-62,]),'TYPESIG':([10,],[52,]),'LEFTASSOC':([11,],[55,]),'RIGHTASSOC':([11,],[56,]),'NONASSOC':([11,],[57,]),'WHERE':([12,16,19,20,21,31,68,69,70,76,77,78,79,80,82,105,111,125,133,134,141,146,147,153,154,],[-93,-92,-94,-95,-96,83,102,-43,-46,-51,-53,-54,-55,-56,-97,-45,-52,-44,-57,-41,-48,-42,-47,-49,-50,]),'THEN':([12,16,19,20,21,69,70,76,77,78,79,80,82,105,109,111,125,133,141,147,153,154,],[-93,-92,-94,-95,-96,-43,-46,-51,-53,-54,-55,-56,-97,-45,131,-52,-44,-57,-48,-47,-49,-50,]),'OF':([12,16,19,20,21,69,70,76,77,78,79,80,82,105,110,111,125,133,141,147,153,154,],[-93,-92,-94,-95,-96,-43,-46,-51,-53,-54,-55,-56,-97,-45,132,-52,-44,-57,-48,-47,-49,-50,]),'ELSE':([12,16,19,20,21,69,70,76,77,78,79,80,82,105,111,125,133,141,144,147,153,154,],[-93,-92,-94,-95,-96,-43,-46,-51,-53,-54,-55,-56,-97,-45,-52,-44,-57,-48,149,-47,-49,-50,]),'LAMBDA':([30,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,71,74,75,81,103,104,114,115,127,131,140,149,156,],[72,72,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,72,72,72,72,72,-74,72,-73,72,72,72,72,72,]),'LET':([30,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,71,74,75,81,103,104,114,115,127,131,140,149,156,],[73,73,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,73,73,73,73,73,-74,73,-73,73,73,73,73,73,]),'IF':([30,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,71,74,75,81,103,104,114,115,127,131,140,149,156,],[74,74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,74,74,74,74,74,-74,74,-73,74,74,74,74,74,]),'MATCH':([30,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,71,74,75,81,103,104,114,115,127,131,140,149,156,],[75,75,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,75,75,75,75,75,-74,75,-73,75,75,75,75,75,]),'OPEN_BRACE':([73,83,102,132,],[108,108,108,145,]),'IN':([107,129,142,],[127,-16,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'TOP_DECLARATIONS':([0,],[1,]),'TOP_DECLARATION':([0,22,],[2,62,]),'DECLARATION':([0,22,108,143,],[6,6,130,130,]),'GEN_DECLARATION':([0,22,108,143,],[7,7,7,7,]),'FUNCTION_LHS':([0,14,22,108,143,],[8,58,8,8,8,]),'LPAT':([0,14,22,26,34,108,143,145,155,],[9,59,9,66,85,9,9,152,152,]),'APAT':([0,4,10,14,22,25,26,34,53,60,64,72,93,106,108,119,143,145,155,],[13,25,53,13,13,64,13,13,64,53,64,106,119,64,13,64,13,13,13,]),'PARAM':([0,4,10,14,22,25,26,34,53,60,64,72,93,106,108,119,143,145,155,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LITERAL':([0,4,10,14,22,25,26,30,32,34,53,60,64,71,72,74,75,76,81,93,103,106,108,114,119,127,131,140,143,145,149,155,156,],[18,18,18,18,18,18,18,80,80,18,18,18,18,80,18,80,80,80,80,18,80,18,18,80,18,80,80,80,18,18,80,18,80,]),'RHS':([8,9,],[29,33,]),'GDRHS':([8,9,134,],[31,31,146,]),'VAROP':([9,59,70,92,],[34,34,104,104,]),'VARSYM':([9,59,70,92,],[35,35,35,35,]),'ASSOCIATIVITY':([11,],[54,]),'APATS':([25,53,64,106,119,],[65,91,98,126,137,]),'EXP':([30,32,74,75,81,114,127,131,140,149,156,],[68,84,109,110,112,134,141,144,147,153,158,]),'INFIX_EXP':([30,32,71,74,75,81,103,114,127,131,140,149,156,],[69,69,105,69,69,69,125,69,69,69,69,69,69,]),'LEXP':([30,32,71,74,75,81,103,114,127,131,140,149,156,],[70,70,70,70,70,70,70,70,70,70,70,70,70,]),'FEXP':([30,32,71,74,75,81,103,114,127,131,140,149,156,],[76,76,76,76,76,76,76,76,76,76,76,76,76,]),'AEXP':([30,32,71,74,75,76,81,103,114,127,131,140,149,156,],[77,77,77,77,77,111,77,77,77,77,77,77,77,77,]),'USED_VAR':([30,32,71,74,75,76,81,103,114,127,131,140,149,156,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'TYPE':([52,63,90,116,],[87,97,117,135,]),'ATYPE':([52,63,90,116,122,],[88,88,88,88,138,]),'CONSTRUCTORS':([67,],[100,]),'CONSTRUCTOR':([67,123,],[101,139,]),'OP':([70,92,],[103,118,]),'DECLARATIONS':([73,83,102,],[107,113,124,]),'ATYPES':([99,],[122,]),'DECLARATIONS_LIST':([108,143,],[128,148,]),'ALTS':([145,155,],[150,157,]),'ALT':([145,155,],[151,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> TOP_DECLARATIONS","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',20),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',26),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',27),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',39),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',48),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',53),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',62),
  ('TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',63),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',64),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',74),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',75),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',83),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',87),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',88),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',96),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',97),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',105),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',106),
  ('DECLARATION -> LPAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',107),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',117),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',118),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',119),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',127),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',128),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',129),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',134),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',135),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',143),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',144),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',152),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',153),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',166),
  ('FUNCTION_LHS -> LPAT VAROP LPAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',167),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',168),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',180),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',181),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',182),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',183),
  ('GDRHS -> PIPE EXP EQUALS EXP','GDRHS',4,'p_GDRHS','funky_parser.py',196),
  ('GDRHS -> PIPE EXP EQUALS EXP GDRHS','GDRHS',5,'p_GDRHS','funky_parser.py',197),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',205),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',211),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',212),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',213),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',231),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',232),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',233),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',234),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',235),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',250),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',251),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',259),
  ('AEXP -> TYPENAME','AEXP',1,'p_AEXP','funky_parser.py',260),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',261),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',262),
  ('CONSTRUCTION_PARAMS -> CONSTRUCTION_PARAMS AEXP','CONSTRUCTION_PARAMS',2,'p_CONSTRUCTION_PARAMS','funky_parser.py',273),
  ('CONSTRUCTION_PARAMS -> AEXP','CONSTRUCTION_PARAMS',1,'p_CONSTRUCTION_PARAMS','funky_parser.py',274),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',282),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',283),
  ('ALT -> LPAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',291),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',292),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',297),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',298),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',299),
  ('LPAT -> TYPENAME APAT APATS','LPAT',3,'p_LPAT','funky_parser.py',300),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',310),
  ('APAT -> TYPENAME','APAT',1,'p_APAT','funky_parser.py',311),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',312),
  ('APAT -> OPEN_PAREN LPAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',313),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',324),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',325),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',335),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',340),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',341),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',349),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',350),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',351),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',352),
  ('VARSYM -> MODULO','VARSYM',1,'p_VARSYM','funky_parser.py',353),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',354),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',355),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',356),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',357),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',358),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',359),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',360),
  ('VARSYM -> AND','VARSYM',1,'p_VARSYM','funky_parser.py',361),
  ('VARSYM -> OR','VARSYM',1,'p_VARSYM','funky_parser.py',362),
  ('VARSYM -> LIST_CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',363),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',368),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',369),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',370),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',371),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',372),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',377),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',381),
]
