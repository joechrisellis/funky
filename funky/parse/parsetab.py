
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BACKTICK BOOL CLOSE_BRACE CLOSE_PAREN CONCAT DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GIVEN GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET MATCH MINUS MODULE MODULO NEWTYPE NONASSOC OPEN_BRACE OPEN_PAREN OR PIPE PLUS POW RIGHTASSOC SETFIX STRING TIMES TYPENAME WHERE WHITESPACE WITHMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT STRINGTOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : TYPE_DECLARATION\n                           | DECLARATION\n        TYPE_DECLARATION : NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORSTYVARS : TYVARS IDENTIFIER\n                  |\n        CONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : FUNCTION_DEFINITION\n                       | VARIABLE_DEFINITION\n                       | FIXITY_DECLARATION\n                       |\n        FUNCTION_DEFINITION : FUNCTION_LHS RHSVARIABLE_DEFINITION : PARAM RHSFIXITY_DECLARATION : SETFIX ASSOCIATIVITY INTEGER OPASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | IDENTIFIER\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n                        | INFIX_FUNCTION_DEFINITION\n        INFIX_FUNCTION_DEFINITION : LPAT INFIX_FUNCTION LPATRHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GIVEN EXP EQUALS EXP\n                 | GIVEN EXP EQUALS EXP GDRHS\n        EXP : INFIX_EXPINFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA_ABSTRACTION\n                | LET_EXPR\n                | IF_EXPR\n                | MATCH_EXPR\n                | FUNCTION_EXPR\n        LAMBDA_ABSTRACTION : LAMBDA APAT APATS ARROW EXPLET_EXPR : LET DECLARATIONS IN EXPIF_EXPR : EXP IF EXP ELSE EXPMATCH_EXPR : MATCH EXP WITH OPEN_BRACE ALTS CLOSE_BRACEFUNCTION_EXPR : FUNCTION_EXPR AEXP\n                         | AEXP\n        AEXP : USED_VAR\n                | USED_TYPENAME\n                | LITERAL\n                | OPERATOR_FUNC\n                | OPEN_PAREN EXP CLOSE_PAREN\n        OPERATOR_FUNC : OPEN_PAREN OP CLOSE_PARENALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : LPAT ARROW EXP\n               |\n        LPAT : APAT\n                | CONSTRUCTOR_PATTERN\n                | NEGATIVE_LITERAL\n        CONSTRUCTOR_PATTERN : TYPENAME APAT APATSNEGATIVE_LITERAL : MINUS INTEGER\n                            | MINUS FLOAT\n        APAT : PARAM\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN LPAT CLOSE_PAREN\n        OP : VARSYM\n              | INFIX_FUNCTION\n        INFIX_FUNCTION : BACKTICK IDENTIFIER BACKTICKAPATS : APAT APATS\n                 |\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | MODULO\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | CONCAT\n                  | AND\n                  | OR\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | STRING\n        USED_VAR : IDENTIFIERUSED_TYPENAME : TYPENAMEPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,36,96,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,12,16,23,24,26,31,33,34,35,37,39,40,41,42,43,44,46,48,54,57,58,64,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,133,134,135,142,147,148,151,153,154,157,158,160,161,162,163,174,175,176,177,],[3,24,-106,44,-104,44,24,-81,-103,-105,24,24,-13,-80,44,-79,44,-109,86,86,44,44,95,98,44,86,86,44,86,-62,-63,-64,-65,-66,86,-107,-108,44,-82,-12,86,86,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-61,44,24,86,86,44,-85,-34,86,-67,-68,162,86,86,24,44,-35,-33,-36,162,44,86,-37,162,]),'WHERE':([3,12,23,33,34,47,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,120,122,140,147,148,149,155,159,165,166,173,],[4,-106,-104,-103,-105,88,100,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,-50,-61,-49,-67,-68,-46,-58,-47,-59,-57,-60,]),'OPEN_BRACE':([4,78,88,100,146,],[6,125,125,125,158,]),'IMPORT':([6,35,],[11,11,]),'NEWTYPE':([6,35,37,],[15,15,15,]),'CLOSE_BRACE':([6,8,10,12,13,14,17,18,19,23,33,34,35,37,45,47,49,61,63,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,125,130,132,134,135,136,137,138,140,143,144,145,147,148,149,151,155,156,157,158,159,160,161,162,164,165,166,167,168,169,173,174,176,178,179,],[-24,36,-8,-106,-9,-10,-21,-22,-23,-104,-103,-105,-24,-24,-25,-44,-26,96,-7,-42,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-50,-61,144,-45,-27,-85,-34,-11,-15,-43,-49,156,-18,-20,-67,-68,-46,-16,-58,-17,-24,-72,-47,-35,-33,-36,-14,-59,-57,-19,173,-70,-60,-72,-37,-69,-71,]),'ENDSTATEMENT':([6,7,8,9,10,12,13,14,17,18,19,23,33,34,35,37,38,45,47,49,61,62,63,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,125,130,132,134,135,136,137,138,140,144,145,147,148,149,151,155,156,157,158,159,160,161,162,164,165,166,169,173,174,176,179,],[-24,35,37,-5,-8,-106,-9,-10,-21,-22,-23,-104,-103,-105,-24,-24,-6,-25,-44,-26,37,-4,-7,-42,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-50,-61,-24,-45,-27,-85,-34,-11,-15,-43,-49,-18,157,-67,-68,-46,-16,-58,-17,-24,-72,-47,-35,-33,-36,-14,-59,-57,174,-60,-72,-37,-71,]),'SETFIX':([6,35,37,125,157,],[22,22,22,22,22,]),'OPEN_PAREN':([6,12,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,133,134,135,142,147,148,151,153,154,157,158,160,161,162,163,174,175,176,177,],[26,-106,43,-104,43,26,-81,-103,-105,26,26,-80,43,-79,43,-109,85,85,43,43,43,85,85,43,85,-62,-63,-64,-65,-66,85,-107,-108,43,-82,85,85,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-61,43,26,85,85,43,-85,-34,85,-67,-68,163,85,85,26,43,-35,-33,-36,163,43,85,-37,163,]),'TYPENAME':([6,12,15,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,133,134,135,142,147,148,151,152,153,154,157,158,160,161,162,163,174,175,176,177,],[16,-106,39,40,-104,40,16,-81,-103,-105,16,16,-80,40,-79,16,-109,87,87,40,16,40,87,87,40,87,-62,-63,-64,-65,-66,87,-107,-108,40,-82,135,87,87,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-61,40,16,87,87,40,-85,-34,87,-67,-68,160,135,87,87,16,16,-35,-33,-36,160,16,87,-37,160,]),'MINUS':([6,12,23,26,33,34,35,37,43,46,48,57,69,70,71,72,73,74,75,76,79,80,81,82,83,84,85,86,87,90,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,125,129,131,134,140,142,147,148,153,154,155,157,158,165,166,173,174,175,],[32,-106,-104,32,-103,-105,32,32,32,71,71,32,-48,106,71,-52,-53,-54,-55,-56,71,-62,-63,-64,-65,-66,129,-107,-108,106,71,71,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-50,-61,32,71,71,-85,-49,71,-67,-68,71,71,-58,32,32,-59,-57,-60,32,71,]),'FLOAT':([6,12,16,23,24,26,31,32,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,133,134,142,147,148,153,154,157,158,174,175,],[33,-106,33,-104,33,33,-81,60,-103,-105,33,33,-80,33,-79,33,-109,33,33,33,33,33,33,33,33,33,-62,-63,-64,-65,-66,33,-107,-108,33,-82,33,33,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-61,33,33,33,33,33,-85,33,-67,-68,33,33,33,33,33,33,]),'INTEGER':([6,12,16,23,24,26,31,32,33,34,35,37,40,41,42,43,44,46,48,50,51,52,53,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,133,134,142,147,148,153,154,157,158,174,175,],[23,-106,23,-104,23,23,-81,59,-103,-105,23,23,-80,23,-79,23,-109,23,23,90,-28,-29,-30,23,23,23,23,23,23,23,-62,-63,-64,-65,-66,23,-107,-108,23,-82,23,23,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-61,23,23,23,23,23,-85,23,-67,-68,23,23,23,23,23,23,]),'BOOL':([6,12,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,133,134,142,147,148,153,154,157,158,174,175,],[34,-106,34,-104,34,34,-81,-103,-105,34,34,-80,34,-79,34,-109,34,34,34,34,34,34,34,34,34,-62,-63,-64,-65,-66,34,-107,-108,34,-82,34,34,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-61,34,34,34,34,34,-85,34,-67,-68,34,34,34,34,34,34,]),'STRING':([6,11,12,16,23,24,26,31,33,34,35,37,40,41,42,43,44,46,48,54,57,65,71,76,77,79,80,81,82,83,84,85,86,87,92,93,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,133,134,142,147,148,153,154,157,158,174,175,],[12,38,-106,12,-104,12,12,-81,-103,-105,12,12,-80,12,-79,12,-109,12,12,12,12,12,12,12,12,12,-62,-63,-64,-65,-66,12,-107,-108,12,-82,12,12,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-61,12,12,12,12,12,-85,12,-67,-68,12,12,12,12,12,12,]),'BACKTICK':([12,16,21,23,24,25,28,29,30,31,33,34,40,41,42,44,56,59,60,65,66,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,93,95,99,120,122,140,147,148,155,165,166,173,],[-106,-80,-79,-104,-109,-73,58,-74,-75,-81,-103,-105,-80,-87,-79,-109,58,-77,-78,-87,-76,-48,58,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,58,-107,-108,58,-82,134,-86,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'CLOSE_PAREN':([12,16,23,24,25,27,29,30,31,33,34,40,41,42,44,54,55,56,59,60,65,66,67,69,70,72,73,74,75,76,80,81,82,83,84,86,87,91,93,94,99,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,127,128,129,133,134,140,147,148,150,155,160,162,165,166,171,172,173,176,180,],[-106,-80,-104,-109,-73,-40,-74,-75,-81,-103,-105,-80,-87,-79,-109,-87,92,93,-77,-78,-87,-76,93,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,-38,-82,-41,-86,-83,-84,-88,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-50,-61,147,148,-89,-87,-85,-49,-67,-68,-39,-58,-35,-36,-59,-57,176,-31,-60,-37,-32,]),'EQUALS':([12,16,20,21,23,24,25,27,29,30,31,33,34,39,40,41,42,44,54,59,60,64,65,66,69,70,72,73,74,75,76,80,81,82,83,84,86,87,89,91,93,94,98,99,120,122,133,140,147,148,150,155,165,166,173,],[-106,-80,46,46,-104,-109,-73,-40,-74,-75,-81,-103,-105,-13,-80,-87,-79,-109,-87,-77,-78,97,-87,-76,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,131,-38,-82,-41,-12,-86,-50,-61,-87,-49,-67,-68,-39,-58,-59,-57,-60,]),'GIVEN':([12,16,20,21,23,24,25,27,29,30,31,33,34,40,41,42,44,54,59,60,65,66,69,70,72,73,74,75,76,80,81,82,83,84,86,87,91,93,94,99,120,122,133,140,147,148,149,150,155,165,166,173,],[-106,-80,48,48,-104,-109,-73,-40,-74,-75,-81,-103,-105,-80,-87,-79,-109,-87,-77,-78,-87,-76,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,-38,-82,-41,-86,-50,-61,-87,-49,-67,-68,48,-39,-58,-59,-57,-60,]),'ARROW':([12,16,23,25,29,30,31,33,34,40,41,42,44,59,60,65,66,93,99,123,141,160,162,170,172,176,],[-106,-80,-104,-73,-74,-75,-81,-103,-105,-80,-87,-79,-109,-77,-78,-87,-76,-82,-86,-87,154,-35,-36,175,177,-37,]),'PLUS':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,105,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,105,-107,-108,105,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'TIMES':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,107,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,107,-107,-108,107,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'DIVIDE':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,108,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,108,-107,-108,108,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'MODULO':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,109,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,109,-107,-108,109,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'POW':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,110,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,110,-107,-108,110,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'EQUALITY':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,111,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,111,-107,-108,111,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'INEQUALITY':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,112,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,112,-107,-108,112,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'LESS':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,113,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,113,-107,-108,113,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'LEQ':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,114,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,114,-107,-108,114,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'GREATER':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,115,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,115,-107,-108,115,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'GEQ':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,116,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,116,-107,-108,116,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'CONCAT':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,117,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,117,-107,-108,117,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'AND':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,118,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,118,-107,-108,118,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'OR':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,85,86,87,90,120,122,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,119,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,119,-107,-108,119,-50,-61,-49,-67,-68,-58,-59,-57,-60,]),'IF':([12,23,33,34,68,69,70,72,73,74,75,76,80,81,82,83,84,86,87,89,120,121,122,126,127,139,140,147,148,149,155,165,166,173,179,],[-106,-104,-103,-105,101,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,101,-48,101,-61,101,101,101,-48,-67,-68,101,101,101,101,-60,101,]),'WITH':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,86,87,120,122,126,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,-50,-61,146,-49,-67,-68,-58,-59,-57,-60,]),'ELSE':([12,23,33,34,69,70,72,73,74,75,76,80,81,82,83,84,86,87,120,122,139,140,147,148,155,165,166,173,],[-106,-104,-103,-105,-48,-51,-52,-53,-54,-55,-56,-62,-63,-64,-65,-66,-107,-108,-50,-61,153,-49,-67,-68,-58,-59,-57,-60,]),'LEFTASSOC':([22,],[51,]),'RIGHTASSOC':([22,],[52,]),'NONASSOC':([22,],[53,]),'LAMBDA':([46,48,71,79,85,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,129,131,134,142,153,154,175,],[77,77,77,77,77,77,77,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,77,77,-85,77,77,77,77,]),'LET':([46,48,71,79,85,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,129,131,134,142,153,154,175,],[78,78,78,78,78,78,78,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,78,78,-85,78,78,78,78,]),'MATCH':([46,48,71,79,85,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,129,131,134,142,153,154,175,],[79,79,79,79,79,79,79,-83,-84,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,79,79,-85,79,79,79,79,]),'IN':([124,144,156,],[142,-18,-17,]),'PIPE':([135,136,137,151,160,161,162,164,176,],[-34,152,-15,-16,-35,-33,-36,-14,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,35,],[8,61,]),'IMPORT_DECLARATION':([6,35,],[9,62,]),'TOP_DECLARATION':([6,35,37,],[10,10,63,]),'TYPE_DECLARATION':([6,35,37,],[13,13,13,]),'DECLARATION':([6,35,37,125,157,],[14,14,14,145,145,]),'FUNCTION_DEFINITION':([6,35,37,125,157,],[17,17,17,17,17,]),'VARIABLE_DEFINITION':([6,35,37,125,157,],[18,18,18,18,18,]),'FIXITY_DECLARATION':([6,35,37,125,157,],[19,19,19,19,19,]),'FUNCTION_LHS':([6,26,35,37,125,157,],[20,55,20,20,20,20,]),'PARAM':([6,16,24,26,35,37,41,43,54,57,65,77,92,123,125,133,157,158,174,],[21,42,42,42,21,21,42,42,42,42,42,42,42,42,21,42,21,42,42,]),'APAT':([6,16,24,26,35,37,41,43,54,57,65,77,92,123,125,133,157,158,174,],[25,41,54,25,25,25,65,25,65,25,65,123,133,65,25,65,25,25,25,]),'INFIX_FUNCTION_DEFINITION':([6,26,35,37,125,157,],[27,27,27,27,27,27,]),'LPAT':([6,26,35,37,43,57,125,157,158,174,],[28,56,28,28,67,94,28,28,170,170,]),'CONSTRUCTOR_PATTERN':([6,26,35,37,43,57,125,157,158,174,],[29,29,29,29,29,29,29,29,29,29,]),'NEGATIVE_LITERAL':([6,26,35,37,43,57,125,157,158,174,],[30,30,30,30,30,30,30,30,30,30,]),'LITERAL':([6,16,24,26,35,37,41,43,46,48,54,57,65,71,76,77,79,85,92,101,102,123,125,129,131,133,142,153,154,157,158,174,175,],[31,31,31,31,31,31,31,31,83,83,31,31,31,83,83,31,83,83,31,83,83,31,31,83,83,31,83,83,83,31,31,31,83,]),'RHS':([20,21,],[45,49,]),'GDRHS':([20,21,149,],[47,47,159,]),'ASSOCIATIVITY':([22,],[50,]),'INFIX_FUNCTION':([28,56,70,85,90,],[57,57,104,104,104,]),'TYVARS':([39,],[64,]),'APATS':([41,54,65,123,133,],[66,91,99,141,150,]),'EXP':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[68,89,121,126,127,139,121,121,149,155,165,166,179,]),'INFIX_EXP':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[69,69,120,69,69,69,140,120,69,69,69,69,69,]),'LEXP':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[70,70,70,70,70,70,70,70,70,70,70,70,70,]),'LAMBDA_ABSTRACTION':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[72,72,72,72,72,72,72,72,72,72,72,72,72,]),'LET_EXPR':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[73,73,73,73,73,73,73,73,73,73,73,73,73,]),'IF_EXPR':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[74,74,74,74,74,74,74,74,74,74,74,74,74,]),'MATCH_EXPR':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[75,75,75,75,75,75,75,75,75,75,75,75,75,]),'FUNCTION_EXPR':([46,48,71,79,85,101,102,129,131,142,153,154,175,],[76,76,76,76,76,76,76,76,76,76,76,76,76,]),'AEXP':([46,48,71,76,79,85,101,102,129,131,142,153,154,175,],[80,80,80,122,80,80,80,80,80,80,80,80,80,80,]),'USED_VAR':([46,48,71,76,79,85,101,102,129,131,142,153,154,175,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'USED_TYPENAME':([46,48,71,76,79,85,101,102,129,131,142,153,154,175,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'OPERATOR_FUNC':([46,48,71,76,79,85,101,102,129,131,142,153,154,175,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'OP':([70,85,90,],[102,128,132,]),'VARSYM':([70,85,90,],[103,103,103,]),'DECLARATIONS':([78,88,100,],[124,130,138,]),'CONSTRUCTORS':([97,],[136,]),'CONSTRUCTOR':([97,152,],[137,164,]),'DECLARATIONS_LIST':([125,157,],[143,167,]),'ATYPES':([135,],[151,]),'ATYPE':([151,163,177,],[161,172,172,]),'ALTS':([158,174,],[168,178,]),'ALT':([158,174,],[169,169,]),'TYPE':([163,177,],[171,180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',18),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',24),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',25),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',37),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',38),
  ('IMPORT_DECLARATION -> IMPORT STRING','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',46),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',50),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',51),
  ('TOP_DECLARATION -> TYPE_DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',59),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',60),
  ('TYPE_DECLARATION -> NEWTYPE TYPENAME TYVARS EQUALS CONSTRUCTORS','TYPE_DECLARATION',5,'p_TYPE_DECLARATION','funky_parser.py',65),
  ('TYVARS -> TYVARS IDENTIFIER','TYVARS',2,'p_TYVARS','funky_parser.py',69),
  ('TYVARS -> <empty>','TYVARS',0,'p_TYVARS','funky_parser.py',70),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',78),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',79),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',87),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',91),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',92),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',100),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',101),
  ('DECLARATION -> FUNCTION_DEFINITION','DECLARATION',1,'p_DECLARATION','funky_parser.py',109),
  ('DECLARATION -> VARIABLE_DEFINITION','DECLARATION',1,'p_DECLARATION','funky_parser.py',110),
  ('DECLARATION -> FIXITY_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',111),
  ('DECLARATION -> <empty>','DECLARATION',0,'p_DECLARATION','funky_parser.py',112),
  ('FUNCTION_DEFINITION -> FUNCTION_LHS RHS','FUNCTION_DEFINITION',2,'p_FUNCTION_DEFINITION','funky_parser.py',118),
  ('VARIABLE_DEFINITION -> PARAM RHS','VARIABLE_DEFINITION',2,'p_VARIABLE_DEFINITION','funky_parser.py',122),
  ('FIXITY_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','FIXITY_DECLARATION',4,'p_FIXITY_DECLARATION','funky_parser.py',126),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',130),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',131),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',132),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',137),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',138),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',146),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',147),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',155),
  ('ATYPE -> IDENTIFIER','ATYPE',1,'p_ATYPE','funky_parser.py',156),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',157),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',165),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',166),
  ('FUNCTION_LHS -> INFIX_FUNCTION_DEFINITION','FUNCTION_LHS',1,'p_FUNCTION_LHS','funky_parser.py',167),
  ('INFIX_FUNCTION_DEFINITION -> LPAT INFIX_FUNCTION LPAT','INFIX_FUNCTION_DEFINITION',3,'p_INFIX_FUNCTION_DEFINITION','funky_parser.py',179),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',183),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',184),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',185),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',186),
  ('GDRHS -> GIVEN EXP EQUALS EXP','GDRHS',4,'p_GDRHS','funky_parser.py',199),
  ('GDRHS -> GIVEN EXP EQUALS EXP GDRHS','GDRHS',5,'p_GDRHS','funky_parser.py',200),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',208),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',213),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',214),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',215),
  ('LEXP -> LAMBDA_ABSTRACTION','LEXP',1,'p_LEXP','funky_parser.py',233),
  ('LEXP -> LET_EXPR','LEXP',1,'p_LEXP','funky_parser.py',234),
  ('LEXP -> IF_EXPR','LEXP',1,'p_LEXP','funky_parser.py',235),
  ('LEXP -> MATCH_EXPR','LEXP',1,'p_LEXP','funky_parser.py',236),
  ('LEXP -> FUNCTION_EXPR','LEXP',1,'p_LEXP','funky_parser.py',237),
  ('LAMBDA_ABSTRACTION -> LAMBDA APAT APATS ARROW EXP','LAMBDA_ABSTRACTION',5,'p_LAMBDA_ABSTRACTION','funky_parser.py',242),
  ('LET_EXPR -> LET DECLARATIONS IN EXP','LET_EXPR',4,'p_LET_EXPR','funky_parser.py',246),
  ('IF_EXPR -> EXP IF EXP ELSE EXP','IF_EXPR',5,'p_IF_EXPR','funky_parser.py',250),
  ('MATCH_EXPR -> MATCH EXP WITH OPEN_BRACE ALTS CLOSE_BRACE','MATCH_EXPR',6,'p_MATCH_EXPR','funky_parser.py',254),
  ('FUNCTION_EXPR -> FUNCTION_EXPR AEXP','FUNCTION_EXPR',2,'p_FUNCTION_EXPR','funky_parser.py',258),
  ('FUNCTION_EXPR -> AEXP','FUNCTION_EXPR',1,'p_FUNCTION_EXPR','funky_parser.py',259),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',267),
  ('AEXP -> USED_TYPENAME','AEXP',1,'p_AEXP','funky_parser.py',268),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',269),
  ('AEXP -> OPERATOR_FUNC','AEXP',1,'p_AEXP','funky_parser.py',270),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',271),
  ('OPERATOR_FUNC -> OPEN_PAREN OP CLOSE_PAREN','OPERATOR_FUNC',3,'p_OPERATOR_FUNC','funky_parser.py',279),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',283),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',284),
  ('ALT -> LPAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',292),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',293),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',298),
  ('LPAT -> CONSTRUCTOR_PATTERN','LPAT',1,'p_LPAT','funky_parser.py',299),
  ('LPAT -> NEGATIVE_LITERAL','LPAT',1,'p_LPAT','funky_parser.py',300),
  ('CONSTRUCTOR_PATTERN -> TYPENAME APAT APATS','CONSTRUCTOR_PATTERN',3,'p_CONSTRUCTOR_PATTERN','funky_parser.py',305),
  ('NEGATIVE_LITERAL -> MINUS INTEGER','NEGATIVE_LITERAL',2,'p_NEGATIVE_LITERAL','funky_parser.py',309),
  ('NEGATIVE_LITERAL -> MINUS FLOAT','NEGATIVE_LITERAL',2,'p_NEGATIVE_LITERAL','funky_parser.py',310),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',315),
  ('APAT -> TYPENAME','APAT',1,'p_APAT','funky_parser.py',316),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',317),
  ('APAT -> OPEN_PAREN LPAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',318),
  ('OP -> VARSYM','OP',1,'p_OP','funky_parser.py',329),
  ('OP -> INFIX_FUNCTION','OP',1,'p_OP','funky_parser.py',330),
  ('INFIX_FUNCTION -> BACKTICK IDENTIFIER BACKTICK','INFIX_FUNCTION',3,'p_INFIX_FUNCTION','funky_parser.py',335),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',341),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',342),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',350),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',351),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',352),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',353),
  ('VARSYM -> MODULO','VARSYM',1,'p_VARSYM','funky_parser.py',354),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',355),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',356),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',357),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',358),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',359),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',360),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',361),
  ('VARSYM -> CONCAT','VARSYM',1,'p_VARSYM','funky_parser.py',362),
  ('VARSYM -> AND','VARSYM',1,'p_VARSYM','funky_parser.py',363),
  ('VARSYM -> OR','VARSYM',1,'p_VARSYM','funky_parser.py',364),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',369),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',370),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',371),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',372),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',377),
  ('USED_TYPENAME -> TYPENAME','USED_TYPENAME',1,'p_USED_TYPENAME','funky_parser.py',381),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',385),
]
