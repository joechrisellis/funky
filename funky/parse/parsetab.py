
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'EXPAND ARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET LIST_CONSTRUCTOR MATCH MINUS MODULE MODULO NEWCONS NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE OR PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | NEWCONS TYPENAME EQUALS CONSTRUCTORS\n                           | DECLARATION\n        CONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | LPAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | LPAT VAROP LPAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : PIPE EXP EQUALS EXP\n                 | PIPE EXP EQUALS EXP GDRHS\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n        CONSTRUCTION_PARAMS : CONSTRUCTION_PARAMS AEXP\n                               | AEXP\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : LPAT ARROW EXP\n               |\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n                | TYPENAME APAT APATS\n        APAT : PARAM\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN LPAT CLOSE_PAREN\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        APATS : APAT APATS\n                 |\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | MODULO\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | AND\n                  | OR\n                  | LIST_CONSTRUCTOR\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MINUS':([0,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,48,51,53,55,58,60,61,67,68,70,71,73,74,75,76,77,79,80,82,84,86,88,96,97,99,100,103,114,116,120,121,124,129,130,131,132,],[4,-43,26,4,4,4,-51,-53,-54,-55,-56,4,-97,-92,-93,-94,-95,-96,4,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-45,-68,-69,-70,59,-98,59,-52,-44,-76,-64,-69,4,26,-98,59,4,-57,-73,-75,4,-71,-76,-48,59,4,4,59,26,-98,59,-47,-67,26,4,-65,-66,4,-49,-50,59,4,]),'LAMBDA':([0,4,7,8,14,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,61,71,74,76,84,86,116,124,132,],[5,5,5,5,5,5,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,5,5,-73,5,5,5,5,5,5,]),'LET':([0,4,7,8,14,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,61,71,74,76,84,86,116,124,132,],[6,6,6,6,6,6,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,6,6,-73,6,6,6,6,6,6,]),'IF':([0,4,7,8,14,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,61,71,74,76,84,86,116,124,132,],[7,7,7,7,7,7,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,7,7,-73,7,7,7,7,7,7,]),'MATCH':([0,4,7,8,14,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,61,71,74,76,84,86,116,124,132,],[8,8,8,8,8,8,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,8,8,-73,8,8,8,8,8,8,]),'TYPENAME':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,60,61,68,70,71,73,74,76,77,79,82,84,86,88,89,90,97,99,112,115,116,124,125,128,131,132,],[12,12,43,12,12,12,-53,-54,-55,-56,12,-97,-92,-93,-94,-95,-96,12,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,43,-68,-69,-70,60,-98,60,-52,43,43,12,43,60,12,-57,-73,12,-71,43,60,12,12,60,111,43,43,60,111,43,12,12,111,43,60,12,]),'OPEN_PAREN':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,59,60,61,68,70,71,73,74,76,77,79,82,84,86,88,89,90,97,99,112,115,116,124,125,128,131,132,],[14,14,45,14,14,14,-53,-54,-55,-56,14,-97,-92,-93,-94,-95,-96,14,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,45,-68,-69,-70,45,-98,70,-52,45,78,45,14,45,70,14,-57,-73,14,-71,45,70,14,14,45,112,45,45,45,112,45,14,14,112,45,45,14,]),'IDENTIFIER':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,60,61,68,70,71,73,74,76,77,79,82,84,86,88,90,97,99,115,116,124,128,131,132,],[15,15,46,15,15,15,-53,-54,-55,-56,15,-97,-92,-93,-94,-95,-96,15,-74,-72,54,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,46,-68,-69,-70,46,-98,68,-52,46,46,15,46,97,15,-57,-73,15,-71,46,68,15,15,46,46,46,46,46,15,15,46,46,15,]),'FLOAT':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,60,61,68,70,71,73,74,76,77,78,79,82,84,86,88,90,97,99,115,116,124,128,131,132,],[16,16,16,16,16,16,-53,-54,-55,-56,16,-97,-92,-93,-94,-95,-96,16,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,16,-68,-69,-70,16,-98,16,-52,16,16,16,16,16,16,-57,-73,16,-71,102,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'INTEGER':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,60,61,68,70,71,73,74,76,77,78,79,82,84,86,88,90,91,92,93,94,97,99,115,116,124,128,131,132,],[17,17,17,17,17,17,-53,-54,-55,-56,17,-97,-92,-93,-94,-95,-96,17,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,17,-68,-69,-70,17,-98,17,-52,17,17,17,17,17,17,-57,-73,17,-71,101,17,17,17,17,17,17,114,-25,-26,-27,17,17,17,17,17,17,17,17,]),'BOOL':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,60,61,68,70,71,73,74,76,77,79,82,84,86,88,90,97,99,115,116,124,128,131,132,],[18,18,18,18,18,18,-53,-54,-55,-56,18,-97,-92,-93,-94,-95,-96,18,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,18,-68,-69,-70,18,-98,18,-52,18,18,18,18,18,18,-57,-73,18,-71,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'CHAR':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,60,61,68,70,71,73,74,76,77,79,82,84,86,88,90,97,99,115,116,124,128,131,132,],[19,19,19,19,19,19,-53,-54,-55,-56,19,-97,-92,-93,-94,-95,-96,19,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,19,-68,-69,-70,19,-98,19,-52,19,19,19,19,19,19,-57,-73,19,-71,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'STRING':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,48,51,55,60,61,68,70,71,73,74,76,77,79,82,84,86,88,90,97,99,115,116,124,128,131,132,],[20,20,20,20,20,20,-53,-54,-55,-56,20,-97,-92,-93,-94,-95,-96,20,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,20,-68,-69,-70,20,-98,20,-52,20,20,20,20,20,20,-57,-73,20,-71,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'$end':([1,2,3,9,10,11,12,13,15,16,17,18,19,20,40,51,53,73,80,100,129,130,],[0,-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-52,-44,-57,-48,-47,-49,-50,]),'THEN':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,49,51,53,73,80,100,129,130,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,71,-52,-44,-57,-48,-47,-49,-50,]),'OF':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,50,51,53,73,80,100,129,130,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,72,-52,-44,-57,-48,-47,-49,-50,]),'CLOSE_PAREN':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,52,53,55,57,58,60,73,75,77,79,80,90,95,96,97,100,101,102,103,108,110,111,113,120,121,126,128,129,130,135,136,137,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,73,-44,-76,77,-64,-69,-57,-75,-71,-76,-48,-76,115,77,-98,-47,120,121,-67,-35,-28,-32,-34,-65,-66,136,-76,-49,-50,-29,-33,-36,]),'BACKTICK':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,54,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,24,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,74,-76,-64,-69,24,-98,-57,-75,-71,-76,-48,24,-98,-47,-67,24,-65,-66,-49,-50,]),'PLUS':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,25,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,25,-98,-57,-75,-71,-76,-48,25,-98,-47,-67,25,-65,-66,-49,-50,]),'TIMES':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,27,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,27,-98,-57,-75,-71,-76,-48,27,-98,-47,-67,27,-65,-66,-49,-50,]),'DIVIDE':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,28,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,28,-98,-57,-75,-71,-76,-48,28,-98,-47,-67,28,-65,-66,-49,-50,]),'MODULO':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,29,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,29,-98,-57,-75,-71,-76,-48,29,-98,-47,-67,29,-65,-66,-49,-50,]),'POW':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,30,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,30,-98,-57,-75,-71,-76,-48,30,-98,-47,-67,30,-65,-66,-49,-50,]),'EQUALITY':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,31,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,31,-98,-57,-75,-71,-76,-48,31,-98,-47,-67,31,-65,-66,-49,-50,]),'INEQUALITY':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,32,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,32,-98,-57,-75,-71,-76,-48,32,-98,-47,-67,32,-65,-66,-49,-50,]),'LESS':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,33,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,33,-98,-57,-75,-71,-76,-48,33,-98,-47,-67,33,-65,-66,-49,-50,]),'LEQ':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,34,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,34,-98,-57,-75,-71,-76,-48,34,-98,-47,-67,34,-65,-66,-49,-50,]),'GREATER':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,35,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,35,-98,-57,-75,-71,-76,-48,35,-98,-47,-67,35,-65,-66,-49,-50,]),'GEQ':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,36,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,36,-98,-57,-75,-71,-76,-48,36,-98,-47,-67,36,-65,-66,-49,-50,]),'AND':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,37,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,37,-98,-57,-75,-71,-76,-48,37,-98,-47,-67,37,-65,-66,-49,-50,]),'OR':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,38,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,38,-98,-57,-75,-71,-76,-48,38,-98,-47,-67,38,-65,-66,-49,-50,]),'LIST_CONSTRUCTOR':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,67,68,73,75,77,79,80,96,97,100,103,114,120,121,129,130,],[-43,39,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,39,-98,-57,-75,-71,-76,-48,39,-98,-47,-67,39,-65,-66,-49,-50,]),'ELSE':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,51,53,73,80,98,100,129,130,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-52,-44,-57,-48,116,-47,-49,-50,]),'WHERE':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,51,53,73,80,85,100,105,129,130,134,140,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-52,-44,-57,-48,106,-47,122,-49,-50,-41,-42,]),'ENDSTATEMENT':([2,3,9,10,11,12,13,15,16,17,18,19,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,48,51,53,63,64,65,73,74,80,81,82,83,85,87,99,100,105,109,110,111,118,123,127,129,130,131,133,134,135,136,139,140,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-45,-24,-52,-44,-16,82,-19,-57,-73,-48,-15,-24,-20,-39,-21,-63,-47,-37,-22,-28,-32,131,-40,-23,-49,-50,-63,-38,-41,-29,-33,-62,-42,]),'CLOSE_BRACE':([2,3,9,10,11,12,13,15,16,17,18,19,20,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,48,51,53,62,63,64,65,73,74,80,81,82,83,85,87,99,100,104,105,109,110,111,117,118,123,127,129,130,131,133,134,135,136,138,139,140,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-74,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-45,63,-52,-44,81,-16,-18,-19,-57,-73,-48,-15,-24,-20,-39,-21,-63,-47,-17,-37,-22,-28,-32,130,-61,-40,-23,-49,-50,-63,-38,-41,-29,-33,-60,-62,-42,]),'EQUALS':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,66,67,68,73,75,77,79,80,90,100,103,107,108,113,120,121,128,129,130,137,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,84,84,-98,-57,-75,-71,-76,-48,-76,-47,-67,124,-35,-34,-65,-66,-76,-49,-50,-36,]),'PIPE':([2,3,9,10,11,12,13,15,16,17,18,19,20,40,42,43,44,46,51,53,55,58,60,66,67,68,73,75,77,79,80,90,100,103,108,113,120,121,128,129,130,134,137,],[-43,-46,-51,-53,-54,-55,-56,-97,-92,-93,-94,-95,-96,-45,-68,-69,-70,-98,-52,-44,-76,-64,-69,86,86,-98,-57,-75,-71,-76,-48,-76,-47,-67,-35,-34,-65,-66,-76,-49,-50,86,-36,]),'OPEN_BRACE':([6,72,106,122,],[48,99,48,48,]),'ARROW':([16,17,18,19,20,41,42,43,44,46,55,56,58,60,75,77,79,103,110,111,119,120,121,136,],[-92,-93,-94,-95,-96,-76,-68,-69,-70,-98,-76,76,-64,-69,-75,-71,-76,-67,125,-32,132,-65,-66,-33,]),'IN':([47,63,81,],[61,-16,-15,]),'SETFIX':([48,82,],[69,69,]),'TYPESIG':([68,],[89,]),'LEFTASSOC':([69,],[92,]),'RIGHTASSOC':([69,],[93,]),'NONASSOC':([69,],[94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'EXP':([0,7,8,14,61,71,76,84,86,116,124,132,],[1,49,50,52,80,98,100,105,107,129,134,139,]),'INFIX_EXP':([0,4,7,8,14,21,61,71,76,84,86,116,124,132,],[2,40,2,2,2,53,2,2,2,2,2,2,2,2,]),'LEXP':([0,4,7,8,14,21,61,71,76,84,86,116,124,132,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'FEXP':([0,4,7,8,14,21,61,71,76,84,86,116,124,132,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'AEXP':([0,4,7,8,9,14,21,61,71,76,84,86,116,124,132,],[10,10,10,10,51,10,10,10,10,10,10,10,10,10,10,]),'USED_VAR':([0,4,7,8,9,14,21,61,71,76,84,86,116,124,132,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'LITERAL':([0,4,5,7,8,9,14,21,41,45,48,55,60,61,68,70,71,76,79,82,84,86,88,90,97,99,115,116,124,128,131,132,],[13,13,44,13,13,13,13,13,44,44,44,44,44,13,44,44,13,13,44,44,13,13,44,44,44,44,44,13,13,44,44,13,]),'OP':([3,114,],[21,127,]),'VAROP':([3,67,96,114,],[22,88,88,22,]),'VARSYM':([3,67,96,114,],[23,23,23,23,]),'APAT':([5,41,45,48,55,60,68,70,79,82,88,90,97,99,115,128,131,],[41,55,58,58,55,79,90,58,55,58,58,55,90,58,128,55,58,]),'PARAM':([5,41,45,48,55,60,68,70,79,82,88,90,97,99,115,128,131,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'DECLARATIONS':([6,106,122,],[47,123,133,]),'APATS':([41,55,79,90,128,],[56,75,103,113,137,]),'LPAT':([45,48,70,82,88,99,131,],[57,67,96,67,108,119,119,]),'DECLARATIONS_LIST':([48,82,],[62,104,]),'DECLARATION':([48,82,],[64,64,]),'GEN_DECLARATION':([48,82,],[65,65,]),'FUNCTION_LHS':([48,70,82,],[66,95,66,]),'RHS':([66,67,],[83,87,]),'GDRHS':([66,67,134,],[85,85,140,]),'ASSOCIATIVITY':([69,],[91,]),'TYPE':([89,112,125,],[109,126,135,]),'ATYPE':([89,112,125,],[110,110,110,]),'ALTS':([99,131,],[117,138,]),'ALT':([99,131,],[118,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> EXP","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',20),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',26),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',27),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',39),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',48),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',53),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',62),
  ('TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',63),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',64),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',74),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',75),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',83),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',87),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',88),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',96),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',97),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',105),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',106),
  ('DECLARATION -> LPAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',107),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',117),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',118),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',119),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',127),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',128),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',129),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',134),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',135),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',143),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',144),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',152),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',153),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',166),
  ('FUNCTION_LHS -> LPAT VAROP LPAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',167),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',168),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',180),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',181),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',182),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',183),
  ('GDRHS -> PIPE EXP EQUALS EXP','GDRHS',4,'p_GDRHS','funky_parser.py',196),
  ('GDRHS -> PIPE EXP EQUALS EXP GDRHS','GDRHS',5,'p_GDRHS','funky_parser.py',197),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',205),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',211),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',212),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',213),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',231),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',232),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',233),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',234),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',235),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',250),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',251),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',259),
  ('AEXP -> TYPENAME','AEXP',1,'p_AEXP','funky_parser.py',260),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',261),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',262),
  ('CONSTRUCTION_PARAMS -> CONSTRUCTION_PARAMS AEXP','CONSTRUCTION_PARAMS',2,'p_CONSTRUCTION_PARAMS','funky_parser.py',273),
  ('CONSTRUCTION_PARAMS -> AEXP','CONSTRUCTION_PARAMS',1,'p_CONSTRUCTION_PARAMS','funky_parser.py',274),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',282),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',283),
  ('ALT -> LPAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',291),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',292),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',297),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',298),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',299),
  ('LPAT -> TYPENAME APAT APATS','LPAT',3,'p_LPAT','funky_parser.py',300),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',310),
  ('APAT -> TYPENAME','APAT',1,'p_APAT','funky_parser.py',311),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',312),
  ('APAT -> OPEN_PAREN LPAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',313),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',324),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',325),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',335),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',340),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',341),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',349),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',350),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',351),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',352),
  ('VARSYM -> MODULO','VARSYM',1,'p_VARSYM','funky_parser.py',353),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',354),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',355),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',356),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',357),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',358),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',359),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',360),
  ('VARSYM -> AND','VARSYM',1,'p_VARSYM','funky_parser.py',361),
  ('VARSYM -> OR','VARSYM',1,'p_VARSYM','funky_parser.py',362),
  ('VARSYM -> LIST_CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',363),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',368),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',369),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',370),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',371),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',372),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',377),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',381),
]
