
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONAND ARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET LIST_CONSTRUCTOR MATCH MINUS MODULE MODULO NEWCONS NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE OR PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPE\n                           | NEWCONS TYPENAME EQUALS CONSTRUCTORS\n                           | DECLARATION\n        CONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | LPAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | LPAT VAROP LPAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : PIPE EXP EQUALS EXP\n                 | PIPE EXP EQUALS EXP GDRHS\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n        CONSTRUCTION_PARAMS : CONSTRUCTION_PARAMS AEXP\n                               | AEXP\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : LPAT ARROW EXP\n               |\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n                | TYPENAME APAT APATS\n        APAT : PARAM\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN LPAT CLOSE_PAREN\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        APATS : APAT APATS\n                 |\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | MODULO\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | AND\n                  | OR\n                  | LIST_CONSTRUCTOR\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,32,111,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,14,21,23,25,26,27,28,29,30,31,33,35,37,38,39,41,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,81,90,91,93,94,95,96,97,98,99,100,101,107,108,120,121,123,125,128,131,132,134,144,148,150,155,158,160,164,170,171,],[3,12,34,35,35,-93,72,-92,-68,-70,-94,-95,-96,12,12,-98,35,-69,35,35,101,101,35,-72,105,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,35,35,101,35,101,101,101,-53,-54,-55,-56,101,-97,35,-71,101,-74,35,12,-52,101,-73,35,101,101,-57,101,12,35,101,35,101,]),'WHERE':([3,21,25,28,29,30,45,87,88,89,95,96,97,98,99,101,122,128,142,150,151,156,161,162,168,169,],[4,-93,-92,-94,-95,-96,102,119,-43,-46,-51,-53,-54,-55,-56,-97,-45,-52,-44,-57,-41,-48,-42,-47,-49,-50,]),'OPEN_BRACE':([4,92,102,119,149,],[6,125,125,125,160,]),'IMPORT':([6,31,],[11,11,]),'NEWTYPE':([6,31,33,],[13,13,13,]),'NEWCONS':([6,31,33,],[15,15,15,]),'SETFIX':([6,31,33,125,158,],[20,20,20,20,20,]),'CLOSE_BRACE':([6,8,10,16,17,21,25,28,29,30,31,33,43,45,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,74,76,77,78,79,87,88,89,95,96,97,98,99,101,115,116,117,118,121,122,125,128,130,132,133,137,138,139,141,142,145,146,147,150,151,153,154,156,157,158,160,161,162,163,165,166,168,169,170,172,173,],[-24,32,-8,-11,-19,-93,-92,-94,-95,-96,-24,-24,-20,-39,-21,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,111,-7,-22,-28,-32,-37,-43,-46,-51,-53,-54,-55,-56,-97,-9,-31,-10,-13,-74,-45,146,-52,-40,-73,-23,-29,-33,-14,-38,-44,157,-16,-18,-57,-41,-30,-12,-48,-15,-24,-63,-42,-47,-17,169,-61,-49,-50,-63,-60,-62,]),'ENDSTATEMENT':([6,7,8,9,10,16,17,21,25,28,29,30,31,33,34,43,45,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,74,75,76,77,78,79,87,88,89,95,96,97,98,99,101,115,116,117,118,121,122,125,128,130,132,133,137,138,139,141,142,146,147,150,151,153,154,156,157,158,160,161,162,166,168,169,170,173,],[-24,31,33,-5,-8,-11,-19,-93,-92,-94,-95,-96,-24,-24,-6,-20,-39,-21,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,33,-4,-7,-22,-28,-32,-37,-43,-46,-51,-53,-54,-55,-56,-97,-9,-31,-10,-13,-74,-45,-24,-52,-40,-73,-23,-29,-33,-14,-38,-44,-16,158,-57,-41,-30,-12,-48,-15,-24,-63,-42,-47,170,-49,-50,-63,-62,]),'OPEN_PAREN':([6,12,14,21,23,24,25,26,27,28,29,30,31,33,35,36,37,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,79,80,81,84,90,91,93,94,95,96,97,98,99,100,101,107,108,112,116,120,121,123,125,128,131,132,134,138,139,144,148,150,153,155,158,160,164,170,171,],[23,39,39,-93,23,73,-92,-68,-70,-94,-95,-96,23,23,-98,80,39,-69,39,39,100,100,39,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,39,-32,80,39,80,100,39,100,100,100,-53,-54,-55,-56,100,-97,39,-71,80,-31,100,-74,39,23,-52,100,-73,39,-33,80,100,100,-57,-30,100,23,39,100,39,100,]),'MINUS':([6,12,14,19,21,22,23,25,26,27,28,29,30,31,33,35,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,72,81,85,88,89,90,93,94,95,96,97,98,99,100,101,106,108,114,120,121,122,125,128,131,132,135,136,142,144,148,150,155,156,158,160,162,164,168,169,170,171,],[24,-98,-69,52,-93,-64,24,-92,-68,-70,-94,-95,-96,24,24,-98,-69,24,-76,90,90,24,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,52,-98,-76,-67,-43,52,90,90,90,-51,-53,-54,-55,-56,90,-97,52,-71,-75,90,-74,-45,24,-52,90,-73,-65,-66,-44,90,90,-57,90,-48,24,24,-47,90,-49,-50,24,90,]),'TYPENAME':([6,12,13,14,15,21,23,25,26,27,28,29,30,31,33,35,36,37,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,79,80,81,84,86,90,91,93,94,95,96,97,98,99,100,101,107,108,112,116,120,121,123,125,128,131,132,134,138,139,140,144,148,150,153,155,158,160,164,170,171,],[14,38,40,38,42,-93,14,-92,-68,-70,-94,-95,-96,14,14,-98,79,38,-69,14,38,98,98,14,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,38,-32,79,38,79,116,98,38,98,98,98,-53,-54,-55,-56,98,-97,38,-71,79,-31,98,-74,38,14,-52,98,-73,38,-33,79,116,98,98,-57,-30,98,14,14,98,14,98,]),'FLOAT':([6,12,14,21,23,25,26,27,28,29,30,31,33,35,37,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,81,90,91,93,94,95,96,97,98,99,100,101,107,108,120,121,123,125,128,131,132,134,144,148,150,155,158,160,164,170,171,],[25,25,25,-93,25,-92,-68,-70,-94,-95,-96,25,25,-98,25,-69,25,25,25,25,25,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,25,110,25,25,25,25,25,25,-53,-54,-55,-56,25,-97,25,-71,25,-74,25,25,-52,25,-73,25,25,25,-57,25,25,25,25,25,25,]),'INTEGER':([6,12,14,21,23,25,26,27,28,29,30,31,33,35,37,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,81,90,91,93,94,95,96,97,98,99,100,101,107,108,120,121,123,125,128,131,132,134,144,148,150,155,158,160,164,170,171,],[21,21,21,-93,21,-92,-68,-70,-94,-95,-96,21,21,-98,21,-69,21,21,21,21,21,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,106,-25,-26,-27,21,109,21,21,21,21,21,21,-53,-54,-55,-56,21,-97,21,-71,21,-74,21,21,-52,21,-73,21,21,21,-57,21,21,21,21,21,21,]),'BOOL':([6,12,14,21,23,25,26,27,28,29,30,31,33,35,37,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,81,90,91,93,94,95,96,97,98,99,100,101,107,108,120,121,123,125,128,131,132,134,144,148,150,155,158,160,164,170,171,],[28,28,28,-93,28,-92,-68,-70,-94,-95,-96,28,28,-98,28,-69,28,28,28,28,28,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,28,28,28,28,28,28,28,-53,-54,-55,-56,28,-97,28,-71,28,-74,28,28,-52,28,-73,28,28,28,-57,28,28,28,28,28,28,]),'CHAR':([6,12,14,21,23,25,26,27,28,29,30,31,33,35,37,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,81,90,91,93,94,95,96,97,98,99,100,101,107,108,120,121,123,125,128,131,132,134,144,148,150,155,158,160,164,170,171,],[29,29,29,-93,29,-92,-68,-70,-94,-95,-96,29,29,-98,29,-69,29,29,29,29,29,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,29,29,29,29,29,29,29,-53,-54,-55,-56,29,-97,29,-71,29,-74,29,29,-52,29,-73,29,29,29,-57,29,29,29,29,29,29,]),'STRING':([6,12,14,21,23,25,26,27,28,29,30,31,33,35,37,38,39,41,44,46,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,81,90,91,93,94,95,96,97,98,99,100,101,107,108,120,121,123,125,128,131,132,134,144,148,150,155,158,160,164,170,171,],[30,30,30,-93,30,-92,-68,-70,-94,-95,-96,30,30,-98,30,-69,30,30,30,30,30,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,30,30,30,30,30,30,30,-53,-54,-55,-56,30,-97,30,-71,30,-74,30,30,-52,30,-73,30,30,30,-57,30,30,30,30,30,30,]),'TYPESIG':([12,],[36,]),'EQUALS':([12,14,18,19,21,22,25,26,27,28,29,30,35,37,38,40,41,42,81,82,85,88,89,95,96,97,98,99,101,103,104,108,114,122,128,134,135,136,142,150,152,156,162,168,169,],[-98,-69,44,44,-93,-64,-92,-68,-70,-94,-95,-96,-98,-76,-69,84,-76,86,-76,-34,-67,-43,-46,-51,-53,-54,-55,-56,-97,131,-35,-71,-75,-45,-52,-76,-65,-66,-44,-57,-36,-48,-47,-49,-50,]),'BACKTICK':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,105,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,50,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,50,-98,-76,-67,-43,50,-51,-53,-54,-55,-56,-97,132,50,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'PIPE':([12,14,18,19,21,22,25,26,27,28,29,30,35,37,38,41,79,81,82,85,88,89,95,96,97,98,99,101,104,108,114,116,117,118,122,128,134,135,136,138,139,142,150,151,152,153,154,156,162,168,169,],[-98,-69,46,46,-93,-64,-92,-68,-70,-94,-95,-96,-98,-76,-69,-76,-32,-76,-34,-67,-43,-46,-51,-53,-54,-55,-56,-97,-35,-71,-75,-31,140,-13,-45,-52,-76,-65,-66,-33,-14,-44,-57,46,-36,-30,-12,-48,-47,-49,-50,]),'PLUS':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,51,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,51,-98,-76,-67,-43,51,-51,-53,-54,-55,-56,-97,51,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'TIMES':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,53,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,53,-98,-76,-67,-43,53,-51,-53,-54,-55,-56,-97,53,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'DIVIDE':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,54,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,54,-98,-76,-67,-43,54,-51,-53,-54,-55,-56,-97,54,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'MODULO':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,55,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,55,-98,-76,-67,-43,55,-51,-53,-54,-55,-56,-97,55,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'POW':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,56,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,56,-98,-76,-67,-43,56,-51,-53,-54,-55,-56,-97,56,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'EQUALITY':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,57,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,57,-98,-76,-67,-43,57,-51,-53,-54,-55,-56,-97,57,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'INEQUALITY':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,58,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,58,-98,-76,-67,-43,58,-51,-53,-54,-55,-56,-97,58,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'LESS':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,59,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,59,-98,-76,-67,-43,59,-51,-53,-54,-55,-56,-97,59,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'LEQ':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,60,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,60,-98,-76,-67,-43,60,-51,-53,-54,-55,-56,-97,60,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'GREATER':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,61,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,61,-98,-76,-67,-43,61,-51,-53,-54,-55,-56,-97,61,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'GEQ':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,62,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,62,-98,-76,-67,-43,62,-51,-53,-54,-55,-56,-97,62,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'AND':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,63,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,63,-98,-76,-67,-43,63,-51,-53,-54,-55,-56,-97,63,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'OR':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,64,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,64,-98,-76,-67,-43,64,-51,-53,-54,-55,-56,-97,64,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'LIST_CONSTRUCTOR':([12,14,19,21,22,25,26,27,28,29,30,35,38,41,71,72,81,85,88,89,95,96,97,98,99,101,106,108,114,122,128,135,136,142,150,156,162,168,169,],[-98,-69,65,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,65,-98,-76,-67,-43,65,-51,-53,-54,-55,-56,-97,65,-71,-75,-45,-52,-65,-66,-44,-57,-48,-47,-49,-50,]),'CLOSE_PAREN':([14,21,22,25,26,27,28,29,30,35,37,38,41,70,71,72,78,79,81,82,83,85,88,89,95,96,97,98,99,101,104,108,109,110,113,114,122,128,129,134,135,136,137,138,142,150,152,156,162,168,169,],[-69,-93,-64,-92,-68,-70,-94,-95,-96,-98,-76,-69,-76,107,108,-98,-28,-32,-76,-34,108,-67,-43,-46,-51,-53,-54,-55,-56,-97,-35,-71,135,136,138,-75,-45,-52,150,-76,-65,-66,-29,-33,-44,-57,-36,-48,-47,-49,-50,]),'ARROW':([14,21,22,25,26,27,28,29,30,35,38,41,78,79,81,85,108,114,123,135,136,138,143,167,],[-69,-93,-64,-92,-68,-70,-94,-95,-96,-98,-69,-76,112,-32,-76,-67,-71,-75,-76,-65,-66,-33,155,171,]),'LEFTASSOC':([20,],[67,]),'RIGHTASSOC':([20,],[68,]),'NONASSOC':([20,],[69,]),'THEN':([21,25,28,29,30,88,89,95,96,97,98,99,101,122,126,128,142,150,156,162,168,169,],[-93,-92,-94,-95,-96,-43,-46,-51,-53,-54,-55,-56,-97,-45,148,-52,-44,-57,-48,-47,-49,-50,]),'OF':([21,25,28,29,30,88,89,95,96,97,98,99,101,122,127,128,142,150,156,162,168,169,],[-93,-92,-94,-95,-96,-43,-46,-51,-53,-54,-55,-56,-97,-45,149,-52,-44,-57,-48,-47,-49,-50,]),'ELSE':([21,25,28,29,30,88,89,95,96,97,98,99,101,122,128,142,150,156,159,162,168,169,],[-93,-92,-94,-95,-96,-43,-46,-51,-53,-54,-55,-56,-97,-45,-52,-44,-57,-48,164,-47,-49,-50,]),'LAMBDA':([44,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,90,93,94,100,120,121,131,132,144,148,155,164,171,],[91,91,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,91,91,91,91,91,-74,91,-73,91,91,91,91,91,]),'LET':([44,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,90,93,94,100,120,121,131,132,144,148,155,164,171,],[92,92,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,92,92,92,92,92,-74,92,-73,92,92,92,92,92,]),'IF':([44,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,90,93,94,100,120,121,131,132,144,148,155,164,171,],[93,93,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,93,93,93,93,93,-74,93,-73,93,93,93,93,93,]),'MATCH':([44,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,90,93,94,100,120,121,131,132,144,148,155,164,171,],[94,94,-72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,94,94,94,94,94,-74,94,-73,94,94,94,94,94,]),'IN':([124,146,157,],[144,-16,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,31,],[8,74,]),'IMPORT_DECLARATION':([6,31,],[9,75,]),'TOP_DECLARATION':([6,31,33,],[10,10,76,]),'DECLARATION':([6,31,33,125,158,],[16,16,16,147,147,]),'GEN_DECLARATION':([6,31,33,125,158,],[17,17,17,17,17,]),'FUNCTION_LHS':([6,23,31,33,125,158,],[18,70,18,18,18,18,]),'LPAT':([6,23,31,33,39,48,125,158,160,170,],[19,71,19,19,83,104,19,19,167,167,]),'APAT':([6,12,14,23,31,33,37,39,41,48,72,81,91,107,123,125,134,158,160,170,],[22,37,41,22,22,22,81,22,81,22,37,81,123,134,81,22,81,22,22,22,]),'PARAM':([6,12,14,23,31,33,37,39,41,48,72,81,91,107,123,125,134,158,160,170,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'LITERAL':([6,12,14,23,31,33,37,39,41,44,46,48,72,81,90,91,93,94,95,100,107,120,123,125,131,134,144,148,155,158,160,164,170,171,],[27,27,27,27,27,27,27,27,27,99,99,27,27,27,99,27,99,99,99,99,27,99,27,27,99,27,99,99,99,27,27,99,27,99,]),'RHS':([18,19,],[43,47,]),'GDRHS':([18,19,151,],[45,45,161,]),'VAROP':([19,71,89,106,],[48,48,121,121,]),'VARSYM':([19,71,89,106,],[49,49,49,49,]),'ASSOCIATIVITY':([20,],[66,]),'TYPE':([36,80,84,112,],[77,113,115,137,]),'ATYPE':([36,80,84,112,139,],[78,78,78,78,153,]),'APATS':([37,41,81,123,134,],[82,85,114,143,152,]),'EXP':([44,46,93,94,100,131,144,148,155,164,171,],[87,103,126,127,129,151,156,159,162,168,173,]),'INFIX_EXP':([44,46,90,93,94,100,120,131,144,148,155,164,171,],[88,88,122,88,88,88,142,88,88,88,88,88,88,]),'LEXP':([44,46,90,93,94,100,120,131,144,148,155,164,171,],[89,89,89,89,89,89,89,89,89,89,89,89,89,]),'FEXP':([44,46,90,93,94,100,120,131,144,148,155,164,171,],[95,95,95,95,95,95,95,95,95,95,95,95,95,]),'AEXP':([44,46,90,93,94,95,100,120,131,144,148,155,164,171,],[96,96,96,96,96,128,96,96,96,96,96,96,96,96,]),'USED_VAR':([44,46,90,93,94,95,100,120,131,144,148,155,164,171,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'CONSTRUCTORS':([86,],[117,]),'CONSTRUCTOR':([86,140,],[118,154,]),'OP':([89,106,],[120,133,]),'DECLARATIONS':([92,102,119,],[124,130,141,]),'ATYPES':([116,],[139,]),'DECLARATIONS_LIST':([125,158,],[145,163,]),'ALTS':([160,170,],[165,172,]),'ALT':([160,170,],[166,166,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',21),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',27),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',28),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',41),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',49),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',55),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',63),
  ('TOP_DECLARATION -> NEWCONS TYPENAME EQUALS CONSTRUCTORS','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',64),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',65),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',75),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',76),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',84),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',88),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',89),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',97),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',98),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',106),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',107),
  ('DECLARATION -> LPAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',108),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',118),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',119),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',120),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',128),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',129),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',130),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',135),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',136),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',144),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',145),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',153),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',154),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',167),
  ('FUNCTION_LHS -> LPAT VAROP LPAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',168),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',169),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',181),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',182),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',183),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',184),
  ('GDRHS -> PIPE EXP EQUALS EXP','GDRHS',4,'p_GDRHS','funky_parser.py',197),
  ('GDRHS -> PIPE EXP EQUALS EXP GDRHS','GDRHS',5,'p_GDRHS','funky_parser.py',198),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',206),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',212),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',213),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',214),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',232),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',233),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',234),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',235),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',236),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',251),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',252),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',260),
  ('AEXP -> TYPENAME','AEXP',1,'p_AEXP','funky_parser.py',261),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',262),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',263),
  ('CONSTRUCTION_PARAMS -> CONSTRUCTION_PARAMS AEXP','CONSTRUCTION_PARAMS',2,'p_CONSTRUCTION_PARAMS','funky_parser.py',286),
  ('CONSTRUCTION_PARAMS -> AEXP','CONSTRUCTION_PARAMS',1,'p_CONSTRUCTION_PARAMS','funky_parser.py',287),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',295),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',296),
  ('ALT -> LPAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',304),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',305),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',310),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',311),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',312),
  ('LPAT -> TYPENAME APAT APATS','LPAT',3,'p_LPAT','funky_parser.py',313),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',323),
  ('APAT -> TYPENAME','APAT',1,'p_APAT','funky_parser.py',324),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',325),
  ('APAT -> OPEN_PAREN LPAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',326),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',343),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',344),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',354),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',359),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',360),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',368),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',369),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',370),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',371),
  ('VARSYM -> MODULO','VARSYM',1,'p_VARSYM','funky_parser.py',372),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',373),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',374),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',375),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',376),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',377),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',378),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',379),
  ('VARSYM -> AND','VARSYM',1,'p_VARSYM','funky_parser.py',380),
  ('VARSYM -> OR','VARSYM',1,'p_VARSYM','funky_parser.py',381),
  ('VARSYM -> LIST_CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',382),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',387),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',388),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',389),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',390),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',391),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',396),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',400),
]
