
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NEW_CONSAND ARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEFTASSOC LEQ LESS LET LIST_CONSTRUCTOR MATCH MINUS MODULE MODULO NEWCONS NEWTYPE NONASSOC OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE OR PIPE PLUS POW RIGHTASSOC SETFIX STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACEMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEW_CONS\n                           | DECLARATION\n        NEW_CONS : NEWCONS TYPENAME EQUALS CONSTRUCTORSCONSTRUCTORS : CONSTRUCTORS PIPE CONSTRUCTOR\n                        | CONSTRUCTOR\n        CONSTRUCTOR : TYPENAME ATYPESDECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | LPAT RHS\n        GEN_DECLARATION : IDENTIFIER TYPESIG TYPE\n                           | SETFIX ASSOCIATIVITY INTEGER OP\n                           |\n        ASSOCIATIVITY : LEFTASSOC\n                         | RIGHTASSOC\n                         | NONASSOC\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPES : ATYPES ATYPE\n                  |\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | LPAT VAROP LPAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : PIPE EXP EQUALS EXP\n                 | PIPE EXP EQUALS EXP GDRHS\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : USED_VAR\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n        CONSTRUCTION_PARAMS : CONSTRUCTION_PARAMS AEXP\n                               | AEXP\n        ALTS : ALT ENDSTATEMENT ALTS\n                | ALT\n        ALT : LPAT ARROW EXP\n               |\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n                | TYPENAME APAT APATS\n        APAT : PARAM\n                | TYPENAME\n                | LITERAL\n                | OPEN_PAREN LPAT CLOSE_PAREN\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        APATS : APAT APATS\n                 |\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | MODULO\n                  | POW\n                  | EQUALITY\n                  | INEQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n                  | AND\n                  | OR\n                  | LIST_CONSTRUCTOR\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        USED_VAR : IDENTIFIERPARAM : IDENTIFIER'
    
_lr_action_items = {'NEWCONS':([0,],[2,]),'$end':([1,5,6,7,8,10,11,13,16,],[0,-31,-11,-13,-14,-32,-30,-12,-33,]),'TYPENAME':([2,4,5,8,9,10,11,12,16,17,],[3,5,-31,10,5,-32,-30,10,-33,10,]),'EQUALS':([3,],[4,]),'OPEN_PAREN':([5,8,10,11,12,16,17,],[-31,12,-32,-30,12,-33,12,]),'PIPE':([5,6,7,8,10,11,13,16,],[-31,9,-13,-14,-32,-30,-12,-33,]),'ARROW':([10,15,16,],[-32,17,-33,]),'CLOSE_PAREN':([10,14,15,16,18,],[-32,16,-28,-33,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'NEW_CONS':([0,],[1,]),'CONSTRUCTORS':([4,],[6,]),'CONSTRUCTOR':([4,9,],[7,13,]),'ATYPES':([5,],[8,]),'ATYPE':([8,12,17,],[11,15,15,]),'TYPE':([12,17,],[14,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> NEW_CONS","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',20),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',26),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',27),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',39),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',48),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',53),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',54),
  ('TOP_DECLARATION -> NEW_CONS','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',62),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',63),
  ('NEW_CONS -> NEWCONS TYPENAME EQUALS CONSTRUCTORS','NEW_CONS',4,'p_NEW_CONS','funky_parser.py',68),
  ('CONSTRUCTORS -> CONSTRUCTORS PIPE CONSTRUCTOR','CONSTRUCTORS',3,'p_CONSTRUCTORS','funky_parser.py',72),
  ('CONSTRUCTORS -> CONSTRUCTOR','CONSTRUCTORS',1,'p_CONSTRUCTORS','funky_parser.py',73),
  ('CONSTRUCTOR -> TYPENAME ATYPES','CONSTRUCTOR',2,'p_CONSTRUCTOR','funky_parser.py',81),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',85),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',86),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',94),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',95),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',103),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',104),
  ('DECLARATION -> LPAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',105),
  ('GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',115),
  ('GEN_DECLARATION -> SETFIX ASSOCIATIVITY INTEGER OP','GEN_DECLARATION',4,'p_GEN_DECLARATION','funky_parser.py',116),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',117),
  ('ASSOCIATIVITY -> LEFTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',125),
  ('ASSOCIATIVITY -> RIGHTASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',126),
  ('ASSOCIATIVITY -> NONASSOC','ASSOCIATIVITY',1,'p_ASSOCIATIVITY','funky_parser.py',127),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',132),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',133),
  ('ATYPES -> ATYPES ATYPE','ATYPES',2,'p_ATYPES','funky_parser.py',141),
  ('ATYPES -> <empty>','ATYPES',0,'p_ATYPES','funky_parser.py',142),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',150),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',151),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',164),
  ('FUNCTION_LHS -> LPAT VAROP LPAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',165),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',166),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',178),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',179),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',180),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',181),
  ('GDRHS -> PIPE EXP EQUALS EXP','GDRHS',4,'p_GDRHS','funky_parser.py',194),
  ('GDRHS -> PIPE EXP EQUALS EXP GDRHS','GDRHS',5,'p_GDRHS','funky_parser.py',195),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',203),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',209),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',210),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',211),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',229),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',230),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',231),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',232),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',233),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',248),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',249),
  ('AEXP -> USED_VAR','AEXP',1,'p_AEXP','funky_parser.py',257),
  ('AEXP -> TYPENAME','AEXP',1,'p_AEXP','funky_parser.py',258),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',259),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',260),
  ('CONSTRUCTION_PARAMS -> CONSTRUCTION_PARAMS AEXP','CONSTRUCTION_PARAMS',2,'p_CONSTRUCTION_PARAMS','funky_parser.py',271),
  ('CONSTRUCTION_PARAMS -> AEXP','CONSTRUCTION_PARAMS',1,'p_CONSTRUCTION_PARAMS','funky_parser.py',272),
  ('ALTS -> ALT ENDSTATEMENT ALTS','ALTS',3,'p_ALTS','funky_parser.py',280),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',281),
  ('ALT -> LPAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',289),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',290),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',295),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',296),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',297),
  ('LPAT -> TYPENAME APAT APATS','LPAT',3,'p_LPAT','funky_parser.py',298),
  ('APAT -> PARAM','APAT',1,'p_APAT','funky_parser.py',308),
  ('APAT -> TYPENAME','APAT',1,'p_APAT','funky_parser.py',309),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',310),
  ('APAT -> OPEN_PAREN LPAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',311),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',322),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',323),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',333),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',338),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',339),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',347),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',348),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',349),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',350),
  ('VARSYM -> MODULO','VARSYM',1,'p_VARSYM','funky_parser.py',351),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',352),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',353),
  ('VARSYM -> INEQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',354),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',355),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',356),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',357),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',358),
  ('VARSYM -> AND','VARSYM',1,'p_VARSYM','funky_parser.py',359),
  ('VARSYM -> OR','VARSYM',1,'p_VARSYM','funky_parser.py',360),
  ('VARSYM -> LIST_CONSTRUCTOR','VARSYM',1,'p_VARSYM','funky_parser.py',361),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',366),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',367),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',368),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',369),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',370),
  ('USED_VAR -> IDENTIFIER','USED_VAR',1,'p_USED_VAR','funky_parser.py',375),
  ('PARAM -> IDENTIFIER','PARAM',1,'p_PARAM','funky_parser.py',379),
]
