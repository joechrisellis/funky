Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    INEQUALITY
    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT IDENTIFIER
Rule 7     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 9     TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE
Rule 10    TOP_DECLARATION -> DECLARATION
Rule 11    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 12    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 13    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 14    DECLARATIONS_LIST -> DECLARATION
Rule 15    DECLARATION -> GEN_DECLARATION
Rule 16    DECLARATION -> FUNCTION_LHS RHS
Rule 17    DECLARATION -> PAT RHS
Rule 18    GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE
Rule 19    GEN_DECLARATION -> <empty>
Rule 20    TYPE -> ATYPE
Rule 21    TYPE -> ATYPE ARROW TYPE
Rule 22    ATYPE -> TYPENAME
Rule 23    ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN
Rule 24    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 25    ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE
Rule 26    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 27    FUNCTION_LHS -> PAT VAROP PAT
Rule 28    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 29    RHS -> EQUALS EXP
Rule 30    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 31    RHS -> GDRHS
Rule 32    RHS -> GDRHS WHERE DECLARATIONS
Rule 33    GDRHS -> GUARDS EQUALS EXP
Rule 34    GDRHS -> GUARDS EQUALS EXP GDRHS
Rule 35    GUARDS -> PIPE GUARD_LIST
Rule 36    GUARD_LIST -> GUARD_LIST COMMA GUARD
Rule 37    GUARD_LIST -> GUARD
Rule 38    GUARD -> INFIX_EXP
Rule 39    EXP -> INFIX_EXP
Rule 40    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 41    INFIX_EXP -> MINUS INFIX_EXP
Rule 42    INFIX_EXP -> LEXP
Rule 43    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 44    LEXP -> LET DECLARATIONS IN EXP
Rule 45    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 46    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 47    LEXP -> FEXP
Rule 48    FEXP -> FEXP AEXP
Rule 49    FEXP -> AEXP
Rule 50    AEXP -> USED_VAR
Rule 51    AEXP -> GCON
Rule 52    AEXP -> LITERAL
Rule 53    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 54    AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
Rule 55    AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE
Rule 56    AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
Rule 57    ALTS -> ALTS ALT ENDSTATEMENT
Rule 58    ALTS -> ALT
Rule 59    ALT -> PAT ARROW EXP
Rule 60    ALT -> <empty>
Rule 61    PAT -> LPAT CONSTRUCTOR PAT
Rule 62    PAT -> LPAT
Rule 63    LPAT -> APAT
Rule 64    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 65    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 66    APAT -> PARAM
Rule 67    APAT -> GCON
Rule 68    APAT -> LITERAL
Rule 69    APAT -> OPEN_PAREN PAT CLOSE_PAREN
Rule 70    APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
Rule 71    APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE
Rule 72    GCON -> OPEN_PAREN CLOSE_PAREN
Rule 73    GCON -> OPEN_SQUARE CLOSE_SQUARE
Rule 74    VAROP -> VARSYM
Rule 75    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 76    OP -> VAROP
Rule 77    EXP_LIST -> EXP_LIST COMMA EXP
Rule 78    EXP_LIST -> EXP
Rule 79    APATS -> APAT APATS
Rule 80    APATS -> <empty>
Rule 81    PAT_LIST -> PAT_LIST COMMA PAT
Rule 82    PAT_LIST -> PAT
Rule 83    VARSYM -> PLUS
Rule 84    VARSYM -> MINUS
Rule 85    VARSYM -> TIMES
Rule 86    VARSYM -> DIVIDE
Rule 87    VARSYM -> POW
Rule 88    VARSYM -> EQUALITY
Rule 89    VARSYM -> LESS
Rule 90    VARSYM -> LEQ
Rule 91    VARSYM -> GREATER
Rule 92    VARSYM -> GEQ
Rule 93    TYPES_LIST -> TYPES_LIST COMMA TYPE
Rule 94    TYPES_LIST -> TYPE
Rule 95    LITERAL -> FLOAT
Rule 96    LITERAL -> INTEGER
Rule 97    LITERAL -> BOOL
Rule 98    LITERAL -> CHAR
Rule 99    LITERAL -> STRING
Rule 100   USED_VAR -> IDENTIFIER
Rule 101   PARAM -> IDENTIFIER

Terminals, with rules where they appear

ARROW                : 21 43 59
AS                   : 
BACKTICK             : 75 75
BOOL                 : 97
CHAR                 : 98
CLOSE_BRACE          : 2 3 11 12 46
CLOSE_PAREN          : 23 24 28 53 54 64 65 69 70 72
CLOSE_SQUARE         : 25 55 56 71 73
COMMA                : 36 54 56 70 77 81 93
CONSTRUCTOR          : 61
DIVIDE               : 86
ELSE                 : 45
ENDSTATEMENT         : 2 4 7 13 57
EQUALITY             : 88
EQUALS               : 9 29 30 33 34
FLOAT                : 65 95
GEQ                  : 92
GREATER              : 91
IDENTIFIER           : 1 6 18 26 75 100 101
IF                   : 45
IMPORT               : 6
IN                   : 44
INEQUALITY           : 
INTEGER              : 64 96
LAMBDA               : 43
LEQ                  : 90
LESS                 : 89
LET                  : 44
MATCH                : 46
MINUS                : 41 64 65 84
MODULE               : 1
NEWTYPE              : 9
OF                   : 46
OPEN_BRACE           : 2 3 11 12 46
OPEN_PAREN           : 23 24 28 53 54 64 65 69 70 72
OPEN_SQUARE          : 25 55 56 71 73
PIPE                 : 35
PLUS                 : 83
POW                  : 87
STRING               : 99
THEN                 : 45
TIMES                : 85
TYPENAME             : 9 22
TYPESIG              : 18
WHERE                : 1 30 32
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

AEXP                 : 48 49
ALT                  : 57 58
ALTS                 : 46 57
APAT                 : 26 28 43 63 79
APATS                : 26 28 43 79
ATYPE                : 20 21
BODY                 : 1
DECLARATION          : 10 13 14
DECLARATIONS         : 30 32 44
DECLARATIONS_LIST    : 11 13
EXP                  : 29 30 33 34 43 44 45 45 45 46 53 54 55 56 59 77 78
EXP_LIST             : 54 56 77
FEXP                 : 47 48
FUNCTION_LHS         : 16 28
GCON                 : 51 67
GDRHS                : 31 32 34
GEN_DECLARATION      : 15
GUARD                : 36 37
GUARDS               : 33 34
GUARD_LIST           : 35 36
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 38 39 40 41
LEXP                 : 40 42
LITERAL              : 52 68
LPAT                 : 61 62
MODULE_DEFINITION    : 0
OP                   : 40
PARAM                : 66
PAT                  : 17 27 27 59 61 69 70 81 82
PAT_LIST             : 70 71 81
RHS                  : 16 17
TOP_DECLARATION      : 7 8
TOP_DECLARATIONS     : 2 3 7
TYPE                 : 9 18 21 24 25 93 94
TYPES_LIST           : 23 93
USED_VAR             : 50
VAROP                : 27 76
VARSYM               : 74

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 31


state 8

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 32
    ENDSTATEMENT    shift and go to state 33


state 9

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (8) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (6) IMPORT_DECLARATION -> IMPORT . IDENTIFIER

    IDENTIFIER      shift and go to state 34


state 12

    (18) GEN_DECLARATION -> IDENTIFIER . TYPESIG TYPE
    (26) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (101) PARAM -> IDENTIFIER .
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    TYPESIG         shift and go to state 36
    CONSTRUCTOR     reduce using rule 101 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 101 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 101 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 101 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 101 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 101 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 101 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 101 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 101 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 101 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 101 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 101 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 101 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 101 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 37
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 13

    (9) TOP_DECLARATION -> NEWTYPE . TYPENAME EQUALS TYPE

    TYPENAME        shift and go to state 39


state 14

    (10) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATION -> DECLARATION .)


state 15

    (15) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 15 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 15 (DECLARATION -> GEN_DECLARATION .)


state 16

    (16) DECLARATION -> FUNCTION_LHS . RHS
    (29) RHS -> . EQUALS EXP
    (30) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (31) RHS -> . GDRHS
    (32) RHS -> . GDRHS WHERE DECLARATIONS
    (33) GDRHS -> . GUARDS EQUALS EXP
    (34) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (35) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 41
    PIPE            shift and go to state 44

    RHS                            shift and go to state 40
    GDRHS                          shift and go to state 42
    GUARDS                         shift and go to state 43

state 17

    (17) DECLARATION -> PAT . RHS
    (27) FUNCTION_LHS -> PAT . VAROP PAT
    (29) RHS -> . EQUALS EXP
    (30) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (31) RHS -> . GDRHS
    (32) RHS -> . GDRHS WHERE DECLARATIONS
    (74) VAROP -> . VARSYM
    (75) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (33) GDRHS -> . GUARDS EQUALS EXP
    (34) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (83) VARSYM -> . PLUS
    (84) VARSYM -> . MINUS
    (85) VARSYM -> . TIMES
    (86) VARSYM -> . DIVIDE
    (87) VARSYM -> . POW
    (88) VARSYM -> . EQUALITY
    (89) VARSYM -> . LESS
    (90) VARSYM -> . LEQ
    (91) VARSYM -> . GREATER
    (92) VARSYM -> . GEQ
    (35) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 41
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58
    PIPE            shift and go to state 44

    RHS                            shift and go to state 45
    VAROP                          shift and go to state 46
    GDRHS                          shift and go to state 42
    VARSYM                         shift and go to state 47
    GUARDS                         shift and go to state 43

state 18

    (63) LPAT -> APAT .

    CONSTRUCTOR     reduce using rule 63 (LPAT -> APAT .)
    EQUALS          reduce using rule 63 (LPAT -> APAT .)
    BACKTICK        reduce using rule 63 (LPAT -> APAT .)
    PLUS            reduce using rule 63 (LPAT -> APAT .)
    MINUS           reduce using rule 63 (LPAT -> APAT .)
    TIMES           reduce using rule 63 (LPAT -> APAT .)
    DIVIDE          reduce using rule 63 (LPAT -> APAT .)
    POW             reduce using rule 63 (LPAT -> APAT .)
    EQUALITY        reduce using rule 63 (LPAT -> APAT .)
    LESS            reduce using rule 63 (LPAT -> APAT .)
    LEQ             reduce using rule 63 (LPAT -> APAT .)
    GREATER         reduce using rule 63 (LPAT -> APAT .)
    GEQ             reduce using rule 63 (LPAT -> APAT .)
    PIPE            reduce using rule 63 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 63 (LPAT -> APAT .)
    COMMA           reduce using rule 63 (LPAT -> APAT .)
    CLOSE_SQUARE    reduce using rule 63 (LPAT -> APAT .)
    ARROW           reduce using rule 63 (LPAT -> APAT .)


state 19

    (28) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (69) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (70) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (72) GCON -> OPEN_PAREN . CLOSE_PAREN
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 60
    IDENTIFIER      shift and go to state 62
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    FUNCTION_LHS                   shift and go to state 59
    APAT                           shift and go to state 18
    PAT                            shift and go to state 61
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 20

    (61) PAT -> LPAT . CONSTRUCTOR PAT
    (62) PAT -> LPAT .

    CONSTRUCTOR     shift and go to state 63
    EQUALS          reduce using rule 62 (PAT -> LPAT .)
    BACKTICK        reduce using rule 62 (PAT -> LPAT .)
    PLUS            reduce using rule 62 (PAT -> LPAT .)
    MINUS           reduce using rule 62 (PAT -> LPAT .)
    TIMES           reduce using rule 62 (PAT -> LPAT .)
    DIVIDE          reduce using rule 62 (PAT -> LPAT .)
    POW             reduce using rule 62 (PAT -> LPAT .)
    EQUALITY        reduce using rule 62 (PAT -> LPAT .)
    LESS            reduce using rule 62 (PAT -> LPAT .)
    LEQ             reduce using rule 62 (PAT -> LPAT .)
    GREATER         reduce using rule 62 (PAT -> LPAT .)
    GEQ             reduce using rule 62 (PAT -> LPAT .)
    PIPE            reduce using rule 62 (PAT -> LPAT .)
    CLOSE_PAREN     reduce using rule 62 (PAT -> LPAT .)
    COMMA           reduce using rule 62 (PAT -> LPAT .)
    CLOSE_SQUARE    reduce using rule 62 (PAT -> LPAT .)
    ARROW           reduce using rule 62 (PAT -> LPAT .)


state 21

    (64) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 64


state 22

    (96) LITERAL -> INTEGER .

    CONSTRUCTOR     reduce using rule 96 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 96 (LITERAL -> INTEGER .)
    BACKTICK        reduce using rule 96 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 96 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 96 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 96 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 96 (LITERAL -> INTEGER .)
    POW             reduce using rule 96 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 96 (LITERAL -> INTEGER .)
    LESS            reduce using rule 96 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 96 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 96 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 96 (LITERAL -> INTEGER .)
    PIPE            reduce using rule 96 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 96 (LITERAL -> INTEGER .)
    OPEN_SQUARE     reduce using rule 96 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 96 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 96 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 96 (LITERAL -> INTEGER .)
    BOOL            reduce using rule 96 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 96 (LITERAL -> INTEGER .)
    STRING          reduce using rule 96 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 96 (LITERAL -> INTEGER .)
    COMMA           reduce using rule 96 (LITERAL -> INTEGER .)
    CLOSE_SQUARE    reduce using rule 96 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 96 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 96 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 96 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 96 (LITERAL -> INTEGER .)
    THEN            reduce using rule 96 (LITERAL -> INTEGER .)
    OF              reduce using rule 96 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 96 (LITERAL -> INTEGER .)


state 23

    (95) LITERAL -> FLOAT .

    CONSTRUCTOR     reduce using rule 95 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 95 (LITERAL -> FLOAT .)
    BACKTICK        reduce using rule 95 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 95 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 95 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 95 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 95 (LITERAL -> FLOAT .)
    POW             reduce using rule 95 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 95 (LITERAL -> FLOAT .)
    LESS            reduce using rule 95 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 95 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 95 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 95 (LITERAL -> FLOAT .)
    PIPE            reduce using rule 95 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 95 (LITERAL -> FLOAT .)
    OPEN_SQUARE     reduce using rule 95 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 95 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 95 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 95 (LITERAL -> FLOAT .)
    BOOL            reduce using rule 95 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 95 (LITERAL -> FLOAT .)
    STRING          reduce using rule 95 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 95 (LITERAL -> FLOAT .)
    COMMA           reduce using rule 95 (LITERAL -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 95 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 95 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 95 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 95 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 95 (LITERAL -> FLOAT .)
    THEN            reduce using rule 95 (LITERAL -> FLOAT .)
    OF              reduce using rule 95 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 95 (LITERAL -> FLOAT .)


state 24

    (66) APAT -> PARAM .

    CONSTRUCTOR     reduce using rule 66 (APAT -> PARAM .)
    EQUALS          reduce using rule 66 (APAT -> PARAM .)
    BACKTICK        reduce using rule 66 (APAT -> PARAM .)
    PLUS            reduce using rule 66 (APAT -> PARAM .)
    MINUS           reduce using rule 66 (APAT -> PARAM .)
    TIMES           reduce using rule 66 (APAT -> PARAM .)
    DIVIDE          reduce using rule 66 (APAT -> PARAM .)
    POW             reduce using rule 66 (APAT -> PARAM .)
    EQUALITY        reduce using rule 66 (APAT -> PARAM .)
    LESS            reduce using rule 66 (APAT -> PARAM .)
    LEQ             reduce using rule 66 (APAT -> PARAM .)
    GREATER         reduce using rule 66 (APAT -> PARAM .)
    GEQ             reduce using rule 66 (APAT -> PARAM .)
    PIPE            reduce using rule 66 (APAT -> PARAM .)
    OPEN_PAREN      reduce using rule 66 (APAT -> PARAM .)
    OPEN_SQUARE     reduce using rule 66 (APAT -> PARAM .)
    IDENTIFIER      reduce using rule 66 (APAT -> PARAM .)
    FLOAT           reduce using rule 66 (APAT -> PARAM .)
    INTEGER         reduce using rule 66 (APAT -> PARAM .)
    BOOL            reduce using rule 66 (APAT -> PARAM .)
    CHAR            reduce using rule 66 (APAT -> PARAM .)
    STRING          reduce using rule 66 (APAT -> PARAM .)
    CLOSE_PAREN     reduce using rule 66 (APAT -> PARAM .)
    COMMA           reduce using rule 66 (APAT -> PARAM .)
    CLOSE_SQUARE    reduce using rule 66 (APAT -> PARAM .)
    ARROW           reduce using rule 66 (APAT -> PARAM .)


state 25

    (67) APAT -> GCON .

    CONSTRUCTOR     reduce using rule 67 (APAT -> GCON .)
    EQUALS          reduce using rule 67 (APAT -> GCON .)
    BACKTICK        reduce using rule 67 (APAT -> GCON .)
    PLUS            reduce using rule 67 (APAT -> GCON .)
    MINUS           reduce using rule 67 (APAT -> GCON .)
    TIMES           reduce using rule 67 (APAT -> GCON .)
    DIVIDE          reduce using rule 67 (APAT -> GCON .)
    POW             reduce using rule 67 (APAT -> GCON .)
    EQUALITY        reduce using rule 67 (APAT -> GCON .)
    LESS            reduce using rule 67 (APAT -> GCON .)
    LEQ             reduce using rule 67 (APAT -> GCON .)
    GREATER         reduce using rule 67 (APAT -> GCON .)
    GEQ             reduce using rule 67 (APAT -> GCON .)
    PIPE            reduce using rule 67 (APAT -> GCON .)
    OPEN_PAREN      reduce using rule 67 (APAT -> GCON .)
    OPEN_SQUARE     reduce using rule 67 (APAT -> GCON .)
    IDENTIFIER      reduce using rule 67 (APAT -> GCON .)
    FLOAT           reduce using rule 67 (APAT -> GCON .)
    INTEGER         reduce using rule 67 (APAT -> GCON .)
    BOOL            reduce using rule 67 (APAT -> GCON .)
    CHAR            reduce using rule 67 (APAT -> GCON .)
    STRING          reduce using rule 67 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 67 (APAT -> GCON .)
    COMMA           reduce using rule 67 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 67 (APAT -> GCON .)
    ARROW           reduce using rule 67 (APAT -> GCON .)


state 26

    (68) APAT -> LITERAL .

    CONSTRUCTOR     reduce using rule 68 (APAT -> LITERAL .)
    EQUALS          reduce using rule 68 (APAT -> LITERAL .)
    BACKTICK        reduce using rule 68 (APAT -> LITERAL .)
    PLUS            reduce using rule 68 (APAT -> LITERAL .)
    MINUS           reduce using rule 68 (APAT -> LITERAL .)
    TIMES           reduce using rule 68 (APAT -> LITERAL .)
    DIVIDE          reduce using rule 68 (APAT -> LITERAL .)
    POW             reduce using rule 68 (APAT -> LITERAL .)
    EQUALITY        reduce using rule 68 (APAT -> LITERAL .)
    LESS            reduce using rule 68 (APAT -> LITERAL .)
    LEQ             reduce using rule 68 (APAT -> LITERAL .)
    GREATER         reduce using rule 68 (APAT -> LITERAL .)
    GEQ             reduce using rule 68 (APAT -> LITERAL .)
    PIPE            reduce using rule 68 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 68 (APAT -> LITERAL .)
    OPEN_SQUARE     reduce using rule 68 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 68 (APAT -> LITERAL .)
    FLOAT           reduce using rule 68 (APAT -> LITERAL .)
    INTEGER         reduce using rule 68 (APAT -> LITERAL .)
    BOOL            reduce using rule 68 (APAT -> LITERAL .)
    CHAR            reduce using rule 68 (APAT -> LITERAL .)
    STRING          reduce using rule 68 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 68 (APAT -> LITERAL .)
    COMMA           reduce using rule 68 (APAT -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 68 (APAT -> LITERAL .)
    ARROW           reduce using rule 68 (APAT -> LITERAL .)


state 27

    (71) APAT -> OPEN_SQUARE . PAT_LIST CLOSE_SQUARE
    (73) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (81) PAT_LIST -> . PAT_LIST COMMA PAT
    (82) PAT_LIST -> . PAT
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 66
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT_LIST                       shift and go to state 65
    PAT                            shift and go to state 67
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 28

    (97) LITERAL -> BOOL .

    CONSTRUCTOR     reduce using rule 97 (LITERAL -> BOOL .)
    EQUALS          reduce using rule 97 (LITERAL -> BOOL .)
    BACKTICK        reduce using rule 97 (LITERAL -> BOOL .)
    PLUS            reduce using rule 97 (LITERAL -> BOOL .)
    MINUS           reduce using rule 97 (LITERAL -> BOOL .)
    TIMES           reduce using rule 97 (LITERAL -> BOOL .)
    DIVIDE          reduce using rule 97 (LITERAL -> BOOL .)
    POW             reduce using rule 97 (LITERAL -> BOOL .)
    EQUALITY        reduce using rule 97 (LITERAL -> BOOL .)
    LESS            reduce using rule 97 (LITERAL -> BOOL .)
    LEQ             reduce using rule 97 (LITERAL -> BOOL .)
    GREATER         reduce using rule 97 (LITERAL -> BOOL .)
    GEQ             reduce using rule 97 (LITERAL -> BOOL .)
    PIPE            reduce using rule 97 (LITERAL -> BOOL .)
    OPEN_PAREN      reduce using rule 97 (LITERAL -> BOOL .)
    OPEN_SQUARE     reduce using rule 97 (LITERAL -> BOOL .)
    IDENTIFIER      reduce using rule 97 (LITERAL -> BOOL .)
    FLOAT           reduce using rule 97 (LITERAL -> BOOL .)
    INTEGER         reduce using rule 97 (LITERAL -> BOOL .)
    BOOL            reduce using rule 97 (LITERAL -> BOOL .)
    CHAR            reduce using rule 97 (LITERAL -> BOOL .)
    STRING          reduce using rule 97 (LITERAL -> BOOL .)
    CLOSE_PAREN     reduce using rule 97 (LITERAL -> BOOL .)
    COMMA           reduce using rule 97 (LITERAL -> BOOL .)
    CLOSE_SQUARE    reduce using rule 97 (LITERAL -> BOOL .)
    WHERE           reduce using rule 97 (LITERAL -> BOOL .)
    CLOSE_BRACE     reduce using rule 97 (LITERAL -> BOOL .)
    ENDSTATEMENT    reduce using rule 97 (LITERAL -> BOOL .)
    ARROW           reduce using rule 97 (LITERAL -> BOOL .)
    THEN            reduce using rule 97 (LITERAL -> BOOL .)
    OF              reduce using rule 97 (LITERAL -> BOOL .)
    ELSE            reduce using rule 97 (LITERAL -> BOOL .)


state 29

    (98) LITERAL -> CHAR .

    CONSTRUCTOR     reduce using rule 98 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 98 (LITERAL -> CHAR .)
    BACKTICK        reduce using rule 98 (LITERAL -> CHAR .)
    PLUS            reduce using rule 98 (LITERAL -> CHAR .)
    MINUS           reduce using rule 98 (LITERAL -> CHAR .)
    TIMES           reduce using rule 98 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 98 (LITERAL -> CHAR .)
    POW             reduce using rule 98 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 98 (LITERAL -> CHAR .)
    LESS            reduce using rule 98 (LITERAL -> CHAR .)
    LEQ             reduce using rule 98 (LITERAL -> CHAR .)
    GREATER         reduce using rule 98 (LITERAL -> CHAR .)
    GEQ             reduce using rule 98 (LITERAL -> CHAR .)
    PIPE            reduce using rule 98 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 98 (LITERAL -> CHAR .)
    OPEN_SQUARE     reduce using rule 98 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 98 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 98 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 98 (LITERAL -> CHAR .)
    BOOL            reduce using rule 98 (LITERAL -> CHAR .)
    CHAR            reduce using rule 98 (LITERAL -> CHAR .)
    STRING          reduce using rule 98 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 98 (LITERAL -> CHAR .)
    COMMA           reduce using rule 98 (LITERAL -> CHAR .)
    CLOSE_SQUARE    reduce using rule 98 (LITERAL -> CHAR .)
    WHERE           reduce using rule 98 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 98 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 98 (LITERAL -> CHAR .)
    ARROW           reduce using rule 98 (LITERAL -> CHAR .)
    THEN            reduce using rule 98 (LITERAL -> CHAR .)
    OF              reduce using rule 98 (LITERAL -> CHAR .)
    ELSE            reduce using rule 98 (LITERAL -> CHAR .)


state 30

    (99) LITERAL -> STRING .

    CONSTRUCTOR     reduce using rule 99 (LITERAL -> STRING .)
    EQUALS          reduce using rule 99 (LITERAL -> STRING .)
    BACKTICK        reduce using rule 99 (LITERAL -> STRING .)
    PLUS            reduce using rule 99 (LITERAL -> STRING .)
    MINUS           reduce using rule 99 (LITERAL -> STRING .)
    TIMES           reduce using rule 99 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 99 (LITERAL -> STRING .)
    POW             reduce using rule 99 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 99 (LITERAL -> STRING .)
    LESS            reduce using rule 99 (LITERAL -> STRING .)
    LEQ             reduce using rule 99 (LITERAL -> STRING .)
    GREATER         reduce using rule 99 (LITERAL -> STRING .)
    GEQ             reduce using rule 99 (LITERAL -> STRING .)
    PIPE            reduce using rule 99 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 99 (LITERAL -> STRING .)
    OPEN_SQUARE     reduce using rule 99 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 99 (LITERAL -> STRING .)
    FLOAT           reduce using rule 99 (LITERAL -> STRING .)
    INTEGER         reduce using rule 99 (LITERAL -> STRING .)
    BOOL            reduce using rule 99 (LITERAL -> STRING .)
    CHAR            reduce using rule 99 (LITERAL -> STRING .)
    STRING          reduce using rule 99 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 99 (LITERAL -> STRING .)
    COMMA           reduce using rule 99 (LITERAL -> STRING .)
    CLOSE_SQUARE    reduce using rule 99 (LITERAL -> STRING .)
    WHERE           reduce using rule 99 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 99 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 99 (LITERAL -> STRING .)
    ARROW           reduce using rule 99 (LITERAL -> STRING .)
    THEN            reduce using rule 99 (LITERAL -> STRING .)
    OF              reduce using rule 99 (LITERAL -> STRING .)
    ELSE            reduce using rule 99 (LITERAL -> STRING .)


state 31

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (7) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    TOP_DECLARATIONS               shift and go to state 68
    IMPORT_DECLARATION             shift and go to state 69
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 32

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 33

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (9) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPE
    (10) TOP_DECLARATION -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    NEWTYPE         shift and go to state 13
    IDENTIFIER      shift and go to state 12
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    TOP_DECLARATION                shift and go to state 70
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 34

    (6) IMPORT_DECLARATION -> IMPORT IDENTIFIER .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATION -> IMPORT IDENTIFIER .)


state 35

    (101) PARAM -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 101 (PARAM -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 101 (PARAM -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 101 (PARAM -> IDENTIFIER .)
    FLOAT           reduce using rule 101 (PARAM -> IDENTIFIER .)
    INTEGER         reduce using rule 101 (PARAM -> IDENTIFIER .)
    BOOL            reduce using rule 101 (PARAM -> IDENTIFIER .)
    CHAR            reduce using rule 101 (PARAM -> IDENTIFIER .)
    STRING          reduce using rule 101 (PARAM -> IDENTIFIER .)
    EQUALS          reduce using rule 101 (PARAM -> IDENTIFIER .)
    PIPE            reduce using rule 101 (PARAM -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 101 (PARAM -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 101 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 101 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 101 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 101 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 101 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 101 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 101 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 101 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 101 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 101 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 101 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 101 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 101 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 101 (PARAM -> IDENTIFIER .)
    ARROW           reduce using rule 101 (PARAM -> IDENTIFIER .)


state 36

    (18) GEN_DECLARATION -> IDENTIFIER TYPESIG . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 71
    ATYPE                          shift and go to state 72

state 37

    (26) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (79) APATS -> . APAT APATS
    (80) APATS -> .
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    EQUALS          reduce using rule 80 (APATS -> .)
    PIPE            reduce using rule 80 (APATS -> .)
    CLOSE_PAREN     reduce using rule 80 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 77
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 38

    (69) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (70) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (72) GCON -> OPEN_PAREN . CLOSE_PAREN
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 60
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 78
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 39

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME . EQUALS TYPE

    EQUALS          shift and go to state 79


state 40

    (16) DECLARATION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 16 (DECLARATION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 16 (DECLARATION -> FUNCTION_LHS RHS .)


state 41

    (29) RHS -> EQUALS . EXP
    (30) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 80
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 42

    (31) RHS -> GDRHS .
    (32) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 31 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 31 (RHS -> GDRHS .)
    WHERE           shift and go to state 96


state 43

    (33) GDRHS -> GUARDS . EQUALS EXP
    (34) GDRHS -> GUARDS . EQUALS EXP GDRHS

    EQUALS          shift and go to state 97


state 44

    (35) GUARDS -> PIPE . GUARD_LIST
    (36) GUARD_LIST -> . GUARD_LIST COMMA GUARD
    (37) GUARD_LIST -> . GUARD
    (38) GUARD -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    GUARD_LIST                     shift and go to state 98
    GUARD                          shift and go to state 99
    INFIX_EXP                      shift and go to state 100
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 45

    (17) DECLARATION -> PAT RHS .

    CLOSE_BRACE     reduce using rule 17 (DECLARATION -> PAT RHS .)
    ENDSTATEMENT    reduce using rule 17 (DECLARATION -> PAT RHS .)


state 46

    (27) FUNCTION_LHS -> PAT VAROP . PAT
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 101
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 47

    (74) VAROP -> VARSYM .

    MINUS           reduce using rule 74 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 74 (VAROP -> VARSYM .)
    OPEN_SQUARE     reduce using rule 74 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 74 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 74 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 74 (VAROP -> VARSYM .)
    BOOL            reduce using rule 74 (VAROP -> VARSYM .)
    CHAR            reduce using rule 74 (VAROP -> VARSYM .)
    STRING          reduce using rule 74 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 74 (VAROP -> VARSYM .)
    LET             reduce using rule 74 (VAROP -> VARSYM .)
    IF              reduce using rule 74 (VAROP -> VARSYM .)
    MATCH           reduce using rule 74 (VAROP -> VARSYM .)


state 48

    (75) VAROP -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 102


state 49

    (83) VARSYM -> PLUS .

    MINUS           reduce using rule 83 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 83 (VARSYM -> PLUS .)
    OPEN_SQUARE     reduce using rule 83 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 83 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 83 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 83 (VARSYM -> PLUS .)
    BOOL            reduce using rule 83 (VARSYM -> PLUS .)
    CHAR            reduce using rule 83 (VARSYM -> PLUS .)
    STRING          reduce using rule 83 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 83 (VARSYM -> PLUS .)
    LET             reduce using rule 83 (VARSYM -> PLUS .)
    IF              reduce using rule 83 (VARSYM -> PLUS .)
    MATCH           reduce using rule 83 (VARSYM -> PLUS .)


state 50

    (84) VARSYM -> MINUS .

    MINUS           reduce using rule 84 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 84 (VARSYM -> MINUS .)
    OPEN_SQUARE     reduce using rule 84 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 84 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 84 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 84 (VARSYM -> MINUS .)
    BOOL            reduce using rule 84 (VARSYM -> MINUS .)
    CHAR            reduce using rule 84 (VARSYM -> MINUS .)
    STRING          reduce using rule 84 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 84 (VARSYM -> MINUS .)
    LET             reduce using rule 84 (VARSYM -> MINUS .)
    IF              reduce using rule 84 (VARSYM -> MINUS .)
    MATCH           reduce using rule 84 (VARSYM -> MINUS .)


state 51

    (85) VARSYM -> TIMES .

    MINUS           reduce using rule 85 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 85 (VARSYM -> TIMES .)
    OPEN_SQUARE     reduce using rule 85 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 85 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 85 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 85 (VARSYM -> TIMES .)
    BOOL            reduce using rule 85 (VARSYM -> TIMES .)
    CHAR            reduce using rule 85 (VARSYM -> TIMES .)
    STRING          reduce using rule 85 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 85 (VARSYM -> TIMES .)
    LET             reduce using rule 85 (VARSYM -> TIMES .)
    IF              reduce using rule 85 (VARSYM -> TIMES .)
    MATCH           reduce using rule 85 (VARSYM -> TIMES .)


state 52

    (86) VARSYM -> DIVIDE .

    MINUS           reduce using rule 86 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 86 (VARSYM -> DIVIDE .)
    OPEN_SQUARE     reduce using rule 86 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 86 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 86 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 86 (VARSYM -> DIVIDE .)
    BOOL            reduce using rule 86 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 86 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 86 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 86 (VARSYM -> DIVIDE .)
    LET             reduce using rule 86 (VARSYM -> DIVIDE .)
    IF              reduce using rule 86 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 86 (VARSYM -> DIVIDE .)


state 53

    (87) VARSYM -> POW .

    MINUS           reduce using rule 87 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 87 (VARSYM -> POW .)
    OPEN_SQUARE     reduce using rule 87 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 87 (VARSYM -> POW .)
    FLOAT           reduce using rule 87 (VARSYM -> POW .)
    INTEGER         reduce using rule 87 (VARSYM -> POW .)
    BOOL            reduce using rule 87 (VARSYM -> POW .)
    CHAR            reduce using rule 87 (VARSYM -> POW .)
    STRING          reduce using rule 87 (VARSYM -> POW .)
    LAMBDA          reduce using rule 87 (VARSYM -> POW .)
    LET             reduce using rule 87 (VARSYM -> POW .)
    IF              reduce using rule 87 (VARSYM -> POW .)
    MATCH           reduce using rule 87 (VARSYM -> POW .)


state 54

    (88) VARSYM -> EQUALITY .

    MINUS           reduce using rule 88 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 88 (VARSYM -> EQUALITY .)
    OPEN_SQUARE     reduce using rule 88 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 88 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 88 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 88 (VARSYM -> EQUALITY .)
    BOOL            reduce using rule 88 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 88 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 88 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 88 (VARSYM -> EQUALITY .)
    LET             reduce using rule 88 (VARSYM -> EQUALITY .)
    IF              reduce using rule 88 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 88 (VARSYM -> EQUALITY .)


state 55

    (89) VARSYM -> LESS .

    MINUS           reduce using rule 89 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 89 (VARSYM -> LESS .)
    OPEN_SQUARE     reduce using rule 89 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 89 (VARSYM -> LESS .)
    FLOAT           reduce using rule 89 (VARSYM -> LESS .)
    INTEGER         reduce using rule 89 (VARSYM -> LESS .)
    BOOL            reduce using rule 89 (VARSYM -> LESS .)
    CHAR            reduce using rule 89 (VARSYM -> LESS .)
    STRING          reduce using rule 89 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 89 (VARSYM -> LESS .)
    LET             reduce using rule 89 (VARSYM -> LESS .)
    IF              reduce using rule 89 (VARSYM -> LESS .)
    MATCH           reduce using rule 89 (VARSYM -> LESS .)


state 56

    (90) VARSYM -> LEQ .

    MINUS           reduce using rule 90 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 90 (VARSYM -> LEQ .)
    OPEN_SQUARE     reduce using rule 90 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 90 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 90 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 90 (VARSYM -> LEQ .)
    BOOL            reduce using rule 90 (VARSYM -> LEQ .)
    CHAR            reduce using rule 90 (VARSYM -> LEQ .)
    STRING          reduce using rule 90 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 90 (VARSYM -> LEQ .)
    LET             reduce using rule 90 (VARSYM -> LEQ .)
    IF              reduce using rule 90 (VARSYM -> LEQ .)
    MATCH           reduce using rule 90 (VARSYM -> LEQ .)


state 57

    (91) VARSYM -> GREATER .

    MINUS           reduce using rule 91 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 91 (VARSYM -> GREATER .)
    OPEN_SQUARE     reduce using rule 91 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 91 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 91 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 91 (VARSYM -> GREATER .)
    BOOL            reduce using rule 91 (VARSYM -> GREATER .)
    CHAR            reduce using rule 91 (VARSYM -> GREATER .)
    STRING          reduce using rule 91 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 91 (VARSYM -> GREATER .)
    LET             reduce using rule 91 (VARSYM -> GREATER .)
    IF              reduce using rule 91 (VARSYM -> GREATER .)
    MATCH           reduce using rule 91 (VARSYM -> GREATER .)


state 58

    (92) VARSYM -> GEQ .

    MINUS           reduce using rule 92 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 92 (VARSYM -> GEQ .)
    OPEN_SQUARE     reduce using rule 92 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 92 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 92 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 92 (VARSYM -> GEQ .)
    BOOL            reduce using rule 92 (VARSYM -> GEQ .)
    CHAR            reduce using rule 92 (VARSYM -> GEQ .)
    STRING          reduce using rule 92 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 92 (VARSYM -> GEQ .)
    LET             reduce using rule 92 (VARSYM -> GEQ .)
    IF              reduce using rule 92 (VARSYM -> GEQ .)
    MATCH           reduce using rule 92 (VARSYM -> GEQ .)


state 59

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 103


state 60

    (72) GCON -> OPEN_PAREN CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BACKTICK        reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TIMES           reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    POW             reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALITY        reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LESS            reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LEQ             reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GREATER         reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GEQ             reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PIPE            reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BOOL            reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WHERE           reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    THEN            reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OF              reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 72 (GCON -> OPEN_PAREN CLOSE_PAREN .)


state 61

    (69) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (70) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN
    (27) FUNCTION_LHS -> PAT . VAROP PAT
    (74) VAROP -> . VARSYM
    (75) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (83) VARSYM -> . PLUS
    (84) VARSYM -> . MINUS
    (85) VARSYM -> . TIMES
    (86) VARSYM -> . DIVIDE
    (87) VARSYM -> . POW
    (88) VARSYM -> . EQUALITY
    (89) VARSYM -> . LESS
    (90) VARSYM -> . LEQ
    (91) VARSYM -> . GREATER
    (92) VARSYM -> . GEQ

    CLOSE_PAREN     shift and go to state 104
    COMMA           shift and go to state 105
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58

    VAROP                          shift and go to state 46
    VARSYM                         shift and go to state 47

state 62

    (26) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (101) PARAM -> IDENTIFIER .
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    CONSTRUCTOR     reduce using rule 101 (PARAM -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 101 (PARAM -> IDENTIFIER .)
    COMMA           reduce using rule 101 (PARAM -> IDENTIFIER .)
    BACKTICK        reduce using rule 101 (PARAM -> IDENTIFIER .)
    PLUS            reduce using rule 101 (PARAM -> IDENTIFIER .)
    MINUS           reduce using rule 101 (PARAM -> IDENTIFIER .)
    TIMES           reduce using rule 101 (PARAM -> IDENTIFIER .)
    DIVIDE          reduce using rule 101 (PARAM -> IDENTIFIER .)
    POW             reduce using rule 101 (PARAM -> IDENTIFIER .)
    EQUALITY        reduce using rule 101 (PARAM -> IDENTIFIER .)
    LESS            reduce using rule 101 (PARAM -> IDENTIFIER .)
    LEQ             reduce using rule 101 (PARAM -> IDENTIFIER .)
    GREATER         reduce using rule 101 (PARAM -> IDENTIFIER .)
    GEQ             reduce using rule 101 (PARAM -> IDENTIFIER .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 37
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 63

    (61) PAT -> LPAT CONSTRUCTOR . PAT
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    LPAT                           shift and go to state 20
    PAT                            shift and go to state 106
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 64

    (64) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (65) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 107
    FLOAT           shift and go to state 108


state 65

    (71) APAT -> OPEN_SQUARE PAT_LIST . CLOSE_SQUARE
    (81) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_SQUARE    shift and go to state 109
    COMMA           shift and go to state 110


state 66

    (73) GCON -> OPEN_SQUARE CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BACKTICK        reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TIMES           reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    POW             reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALITY        reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LEQ             reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GEQ             reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PIPE            reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INTEGER         reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BOOL            reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CHAR            reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WHERE           reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ARROW           reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    THEN            reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OF              reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ELSE            reduce using rule 73 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)


state 67

    (82) PAT_LIST -> PAT .

    CLOSE_SQUARE    reduce using rule 82 (PAT_LIST -> PAT .)
    COMMA           reduce using rule 82 (PAT_LIST -> PAT .)
    CLOSE_PAREN     reduce using rule 82 (PAT_LIST -> PAT .)


state 68

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 111
    ENDSTATEMENT    shift and go to state 33


state 69

    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 4 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 70

    (7) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 7 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 71

    (18) GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .

    CLOSE_BRACE     reduce using rule 18 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)
    ENDSTATEMENT    reduce using rule 18 (GEN_DECLARATION -> IDENTIFIER TYPESIG TYPE .)


state 72

    (20) TYPE -> ATYPE .
    (21) TYPE -> ATYPE . ARROW TYPE

    CLOSE_BRACE     reduce using rule 20 (TYPE -> ATYPE .)
    ENDSTATEMENT    reduce using rule 20 (TYPE -> ATYPE .)
    CLOSE_PAREN     reduce using rule 20 (TYPE -> ATYPE .)
    COMMA           reduce using rule 20 (TYPE -> ATYPE .)
    CLOSE_SQUARE    reduce using rule 20 (TYPE -> ATYPE .)
    ARROW           shift and go to state 112


state 73

    (22) ATYPE -> TYPENAME .

    ARROW           reduce using rule 22 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 22 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 22 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 22 (ATYPE -> TYPENAME .)
    COMMA           reduce using rule 22 (ATYPE -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 22 (ATYPE -> TYPENAME .)


state 74

    (23) ATYPE -> OPEN_PAREN . TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (93) TYPES_LIST -> . TYPES_LIST COMMA TYPE
    (94) TYPES_LIST -> . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPES_LIST                     shift and go to state 113
    TYPE                           shift and go to state 114
    ATYPE                          shift and go to state 72

state 75

    (25) ATYPE -> OPEN_SQUARE . TYPE CLOSE_SQUARE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 115
    ATYPE                          shift and go to state 72

state 76

    (79) APATS -> APAT . APATS
    (79) APATS -> . APAT APATS
    (80) APATS -> .
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    EQUALS          reduce using rule 80 (APATS -> .)
    PIPE            reduce using rule 80 (APATS -> .)
    CLOSE_PAREN     reduce using rule 80 (APATS -> .)
    ARROW           reduce using rule 80 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 116
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 77

    (26) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 26 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    PIPE            reduce using rule 26 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 26 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 78

    (69) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (70) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 104
    COMMA           shift and go to state 105


state 79

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 117
    ATYPE                          shift and go to state 72

state 80

    (29) RHS -> EQUALS EXP .
    (30) RHS -> EQUALS EXP . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 29 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 29 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 118


state 81

    (39) EXP -> INFIX_EXP .

    WHERE           reduce using rule 39 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 39 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 39 (EXP -> INFIX_EXP .)
    THEN            reduce using rule 39 (EXP -> INFIX_EXP .)
    OF              reduce using rule 39 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 39 (EXP -> INFIX_EXP .)
    COMMA           reduce using rule 39 (EXP -> INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 39 (EXP -> INFIX_EXP .)
    PIPE            reduce using rule 39 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 39 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 39 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 39 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 39 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 39 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 39 (EXP -> INFIX_EXP .)
    POW             reduce using rule 39 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 39 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 39 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 39 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 39 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 39 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 39 (EXP -> INFIX_EXP .)
    OPEN_PAREN      reduce using rule 39 (EXP -> INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 39 (EXP -> INFIX_EXP .)
    IDENTIFIER      reduce using rule 39 (EXP -> INFIX_EXP .)
    FLOAT           reduce using rule 39 (EXP -> INFIX_EXP .)
    INTEGER         reduce using rule 39 (EXP -> INFIX_EXP .)
    BOOL            reduce using rule 39 (EXP -> INFIX_EXP .)
    CHAR            reduce using rule 39 (EXP -> INFIX_EXP .)
    STRING          reduce using rule 39 (EXP -> INFIX_EXP .)


state 82

    (40) INFIX_EXP -> LEXP . OP INFIX_EXP
    (42) INFIX_EXP -> LEXP .
    (76) OP -> . VAROP
    (74) VAROP -> . VARSYM
    (75) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (83) VARSYM -> . PLUS
    (84) VARSYM -> . MINUS
    (85) VARSYM -> . TIMES
    (86) VARSYM -> . DIVIDE
    (87) VARSYM -> . POW
    (88) VARSYM -> . EQUALITY
    (89) VARSYM -> . LESS
    (90) VARSYM -> . LEQ
    (91) VARSYM -> . GREATER
    (92) VARSYM -> . GEQ

  ! shift/reduce conflict for BACKTICK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    WHERE           reduce using rule 42 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 42 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 42 (INFIX_EXP -> LEXP .)
    COMMA           reduce using rule 42 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 42 (INFIX_EXP -> LEXP .)
    THEN            reduce using rule 42 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 42 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 42 (INFIX_EXP -> LEXP .)
    CLOSE_SQUARE    reduce using rule 42 (INFIX_EXP -> LEXP .)
    PIPE            reduce using rule 42 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 42 (INFIX_EXP -> LEXP .)
    OPEN_PAREN      reduce using rule 42 (INFIX_EXP -> LEXP .)
    OPEN_SQUARE     reduce using rule 42 (INFIX_EXP -> LEXP .)
    IDENTIFIER      reduce using rule 42 (INFIX_EXP -> LEXP .)
    FLOAT           reduce using rule 42 (INFIX_EXP -> LEXP .)
    INTEGER         reduce using rule 42 (INFIX_EXP -> LEXP .)
    BOOL            reduce using rule 42 (INFIX_EXP -> LEXP .)
    CHAR            reduce using rule 42 (INFIX_EXP -> LEXP .)
    STRING          reduce using rule 42 (INFIX_EXP -> LEXP .)
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58

  ! BACKTICK        [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! PLUS            [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! MINUS           [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 42 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 119
    VAROP                          shift and go to state 120
    VARSYM                         shift and go to state 47

state 83

    (41) INFIX_EXP -> MINUS . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    INFIX_EXP                      shift and go to state 121
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 84

    (43) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 122
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 85

    (44) LEXP -> LET . DECLARATIONS IN EXP
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 124

    DECLARATIONS                   shift and go to state 123

state 86

    (45) LEXP -> IF . EXP THEN EXP ELSE EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 125
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 87

    (46) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 126
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 88

    (47) LEXP -> FEXP .
    (48) FEXP -> FEXP . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    BACKTICK        reduce using rule 47 (LEXP -> FEXP .)
    PLUS            reduce using rule 47 (LEXP -> FEXP .)
    MINUS           reduce using rule 47 (LEXP -> FEXP .)
    TIMES           reduce using rule 47 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 47 (LEXP -> FEXP .)
    POW             reduce using rule 47 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 47 (LEXP -> FEXP .)
    LESS            reduce using rule 47 (LEXP -> FEXP .)
    LEQ             reduce using rule 47 (LEXP -> FEXP .)
    GREATER         reduce using rule 47 (LEXP -> FEXP .)
    GEQ             reduce using rule 47 (LEXP -> FEXP .)
    WHERE           reduce using rule 47 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 47 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 47 (LEXP -> FEXP .)
    COMMA           reduce using rule 47 (LEXP -> FEXP .)
    EQUALS          reduce using rule 47 (LEXP -> FEXP .)
    THEN            reduce using rule 47 (LEXP -> FEXP .)
    OF              reduce using rule 47 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 47 (LEXP -> FEXP .)
    CLOSE_SQUARE    reduce using rule 47 (LEXP -> FEXP .)
    PIPE            reduce using rule 47 (LEXP -> FEXP .)
    ELSE            reduce using rule 47 (LEXP -> FEXP .)
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

  ! OPEN_PAREN      [ reduce using rule 47 (LEXP -> FEXP .) ]
  ! OPEN_SQUARE     [ reduce using rule 47 (LEXP -> FEXP .) ]
  ! IDENTIFIER      [ reduce using rule 47 (LEXP -> FEXP .) ]
  ! FLOAT           [ reduce using rule 47 (LEXP -> FEXP .) ]
  ! INTEGER         [ reduce using rule 47 (LEXP -> FEXP .) ]
  ! BOOL            [ reduce using rule 47 (LEXP -> FEXP .) ]
  ! CHAR            [ reduce using rule 47 (LEXP -> FEXP .) ]
  ! STRING          [ reduce using rule 47 (LEXP -> FEXP .) ]

    AEXP                           shift and go to state 127
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 89

    (49) FEXP -> AEXP .

    OPEN_PAREN      reduce using rule 49 (FEXP -> AEXP .)
    OPEN_SQUARE     reduce using rule 49 (FEXP -> AEXP .)
    IDENTIFIER      reduce using rule 49 (FEXP -> AEXP .)
    FLOAT           reduce using rule 49 (FEXP -> AEXP .)
    INTEGER         reduce using rule 49 (FEXP -> AEXP .)
    BOOL            reduce using rule 49 (FEXP -> AEXP .)
    CHAR            reduce using rule 49 (FEXP -> AEXP .)
    STRING          reduce using rule 49 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 49 (FEXP -> AEXP .)
    PLUS            reduce using rule 49 (FEXP -> AEXP .)
    MINUS           reduce using rule 49 (FEXP -> AEXP .)
    TIMES           reduce using rule 49 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 49 (FEXP -> AEXP .)
    POW             reduce using rule 49 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 49 (FEXP -> AEXP .)
    LESS            reduce using rule 49 (FEXP -> AEXP .)
    LEQ             reduce using rule 49 (FEXP -> AEXP .)
    GREATER         reduce using rule 49 (FEXP -> AEXP .)
    GEQ             reduce using rule 49 (FEXP -> AEXP .)
    WHERE           reduce using rule 49 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 49 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 49 (FEXP -> AEXP .)
    COMMA           reduce using rule 49 (FEXP -> AEXP .)
    EQUALS          reduce using rule 49 (FEXP -> AEXP .)
    THEN            reduce using rule 49 (FEXP -> AEXP .)
    OF              reduce using rule 49 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 49 (FEXP -> AEXP .)
    CLOSE_SQUARE    reduce using rule 49 (FEXP -> AEXP .)
    PIPE            reduce using rule 49 (FEXP -> AEXP .)
    ELSE            reduce using rule 49 (FEXP -> AEXP .)


state 90

    (50) AEXP -> USED_VAR .

    OPEN_PAREN      reduce using rule 50 (AEXP -> USED_VAR .)
    OPEN_SQUARE     reduce using rule 50 (AEXP -> USED_VAR .)
    IDENTIFIER      reduce using rule 50 (AEXP -> USED_VAR .)
    FLOAT           reduce using rule 50 (AEXP -> USED_VAR .)
    INTEGER         reduce using rule 50 (AEXP -> USED_VAR .)
    BOOL            reduce using rule 50 (AEXP -> USED_VAR .)
    CHAR            reduce using rule 50 (AEXP -> USED_VAR .)
    STRING          reduce using rule 50 (AEXP -> USED_VAR .)
    BACKTICK        reduce using rule 50 (AEXP -> USED_VAR .)
    PLUS            reduce using rule 50 (AEXP -> USED_VAR .)
    MINUS           reduce using rule 50 (AEXP -> USED_VAR .)
    TIMES           reduce using rule 50 (AEXP -> USED_VAR .)
    DIVIDE          reduce using rule 50 (AEXP -> USED_VAR .)
    POW             reduce using rule 50 (AEXP -> USED_VAR .)
    EQUALITY        reduce using rule 50 (AEXP -> USED_VAR .)
    LESS            reduce using rule 50 (AEXP -> USED_VAR .)
    LEQ             reduce using rule 50 (AEXP -> USED_VAR .)
    GREATER         reduce using rule 50 (AEXP -> USED_VAR .)
    GEQ             reduce using rule 50 (AEXP -> USED_VAR .)
    WHERE           reduce using rule 50 (AEXP -> USED_VAR .)
    CLOSE_BRACE     reduce using rule 50 (AEXP -> USED_VAR .)
    ENDSTATEMENT    reduce using rule 50 (AEXP -> USED_VAR .)
    COMMA           reduce using rule 50 (AEXP -> USED_VAR .)
    EQUALS          reduce using rule 50 (AEXP -> USED_VAR .)
    THEN            reduce using rule 50 (AEXP -> USED_VAR .)
    OF              reduce using rule 50 (AEXP -> USED_VAR .)
    CLOSE_PAREN     reduce using rule 50 (AEXP -> USED_VAR .)
    CLOSE_SQUARE    reduce using rule 50 (AEXP -> USED_VAR .)
    PIPE            reduce using rule 50 (AEXP -> USED_VAR .)
    ELSE            reduce using rule 50 (AEXP -> USED_VAR .)


state 91

    (51) AEXP -> GCON .

    OPEN_PAREN      reduce using rule 51 (AEXP -> GCON .)
    OPEN_SQUARE     reduce using rule 51 (AEXP -> GCON .)
    IDENTIFIER      reduce using rule 51 (AEXP -> GCON .)
    FLOAT           reduce using rule 51 (AEXP -> GCON .)
    INTEGER         reduce using rule 51 (AEXP -> GCON .)
    BOOL            reduce using rule 51 (AEXP -> GCON .)
    CHAR            reduce using rule 51 (AEXP -> GCON .)
    STRING          reduce using rule 51 (AEXP -> GCON .)
    BACKTICK        reduce using rule 51 (AEXP -> GCON .)
    PLUS            reduce using rule 51 (AEXP -> GCON .)
    MINUS           reduce using rule 51 (AEXP -> GCON .)
    TIMES           reduce using rule 51 (AEXP -> GCON .)
    DIVIDE          reduce using rule 51 (AEXP -> GCON .)
    POW             reduce using rule 51 (AEXP -> GCON .)
    EQUALITY        reduce using rule 51 (AEXP -> GCON .)
    LESS            reduce using rule 51 (AEXP -> GCON .)
    LEQ             reduce using rule 51 (AEXP -> GCON .)
    GREATER         reduce using rule 51 (AEXP -> GCON .)
    GEQ             reduce using rule 51 (AEXP -> GCON .)
    WHERE           reduce using rule 51 (AEXP -> GCON .)
    CLOSE_BRACE     reduce using rule 51 (AEXP -> GCON .)
    ENDSTATEMENT    reduce using rule 51 (AEXP -> GCON .)
    COMMA           reduce using rule 51 (AEXP -> GCON .)
    EQUALS          reduce using rule 51 (AEXP -> GCON .)
    THEN            reduce using rule 51 (AEXP -> GCON .)
    OF              reduce using rule 51 (AEXP -> GCON .)
    CLOSE_PAREN     reduce using rule 51 (AEXP -> GCON .)
    CLOSE_SQUARE    reduce using rule 51 (AEXP -> GCON .)
    PIPE            reduce using rule 51 (AEXP -> GCON .)
    ELSE            reduce using rule 51 (AEXP -> GCON .)


state 92

    (52) AEXP -> LITERAL .

    OPEN_PAREN      reduce using rule 52 (AEXP -> LITERAL .)
    OPEN_SQUARE     reduce using rule 52 (AEXP -> LITERAL .)
    IDENTIFIER      reduce using rule 52 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 52 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 52 (AEXP -> LITERAL .)
    BOOL            reduce using rule 52 (AEXP -> LITERAL .)
    CHAR            reduce using rule 52 (AEXP -> LITERAL .)
    STRING          reduce using rule 52 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 52 (AEXP -> LITERAL .)
    PLUS            reduce using rule 52 (AEXP -> LITERAL .)
    MINUS           reduce using rule 52 (AEXP -> LITERAL .)
    TIMES           reduce using rule 52 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 52 (AEXP -> LITERAL .)
    POW             reduce using rule 52 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 52 (AEXP -> LITERAL .)
    LESS            reduce using rule 52 (AEXP -> LITERAL .)
    LEQ             reduce using rule 52 (AEXP -> LITERAL .)
    GREATER         reduce using rule 52 (AEXP -> LITERAL .)
    GEQ             reduce using rule 52 (AEXP -> LITERAL .)
    WHERE           reduce using rule 52 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 52 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 52 (AEXP -> LITERAL .)
    COMMA           reduce using rule 52 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 52 (AEXP -> LITERAL .)
    THEN            reduce using rule 52 (AEXP -> LITERAL .)
    OF              reduce using rule 52 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 52 (AEXP -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 52 (AEXP -> LITERAL .)
    PIPE            reduce using rule 52 (AEXP -> LITERAL .)
    ELSE            reduce using rule 52 (AEXP -> LITERAL .)


state 93

    (53) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (54) AEXP -> OPEN_PAREN . EXP COMMA EXP_LIST CLOSE_PAREN
    (72) GCON -> OPEN_PAREN . CLOSE_PAREN
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 60
    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 128
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 94

    (55) AEXP -> OPEN_SQUARE . EXP CLOSE_SQUARE
    (56) AEXP -> OPEN_SQUARE . EXP COMMA EXP_LIST CLOSE_SQUARE
    (73) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 66
    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 129
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 95

    (100) USED_VAR -> IDENTIFIER .

    OPEN_PAREN      reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    FLOAT           reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    INTEGER         reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    BOOL            reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    CHAR            reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    STRING          reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    BACKTICK        reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    PLUS            reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    MINUS           reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    TIMES           reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    DIVIDE          reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    POW             reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    EQUALITY        reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    LESS            reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    LEQ             reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    GREATER         reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    GEQ             reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    WHERE           reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    COMMA           reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    EQUALS          reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    THEN            reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    OF              reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    PIPE            reduce using rule 100 (USED_VAR -> IDENTIFIER .)
    ELSE            reduce using rule 100 (USED_VAR -> IDENTIFIER .)


state 96

    (32) RHS -> GDRHS WHERE . DECLARATIONS
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 124

    DECLARATIONS                   shift and go to state 130

state 97

    (33) GDRHS -> GUARDS EQUALS . EXP
    (34) GDRHS -> GUARDS EQUALS . EXP GDRHS
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 131
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 98

    (35) GUARDS -> PIPE GUARD_LIST .
    (36) GUARD_LIST -> GUARD_LIST . COMMA GUARD

    EQUALS          reduce using rule 35 (GUARDS -> PIPE GUARD_LIST .)
    COMMA           shift and go to state 132


state 99

    (37) GUARD_LIST -> GUARD .

    COMMA           reduce using rule 37 (GUARD_LIST -> GUARD .)
    EQUALS          reduce using rule 37 (GUARD_LIST -> GUARD .)


state 100

    (38) GUARD -> INFIX_EXP .

    COMMA           reduce using rule 38 (GUARD -> INFIX_EXP .)
    EQUALS          reduce using rule 38 (GUARD -> INFIX_EXP .)


state 101

    (27) FUNCTION_LHS -> PAT VAROP PAT .

    EQUALS          reduce using rule 27 (FUNCTION_LHS -> PAT VAROP PAT .)
    PIPE            reduce using rule 27 (FUNCTION_LHS -> PAT VAROP PAT .)
    CLOSE_PAREN     reduce using rule 27 (FUNCTION_LHS -> PAT VAROP PAT .)


state 102

    (75) VAROP -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 133


state 103

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 134
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 104

    (69) APAT -> OPEN_PAREN PAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALS          reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PLUS            reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MINUS           reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TIMES           reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    POW             reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LESS            reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LEQ             reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GREATER         reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GEQ             reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PIPE            reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    FLOAT           reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INTEGER         reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BOOL            reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CHAR            reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    STRING          reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    COMMA           reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    ARROW           reduce using rule 69 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)


state 105

    (70) APAT -> OPEN_PAREN PAT COMMA . PAT_LIST CLOSE_PAREN
    (81) PAT_LIST -> . PAT_LIST COMMA PAT
    (82) PAT_LIST -> . PAT
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 67
    PAT_LIST                       shift and go to state 135
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 106

    (61) PAT -> LPAT CONSTRUCTOR PAT .

    EQUALS          reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    BACKTICK        reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    PLUS            reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    MINUS           reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    TIMES           reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    DIVIDE          reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    POW             reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    EQUALITY        reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    LESS            reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    LEQ             reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    GREATER         reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    GEQ             reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    PIPE            reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_PAREN     reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    COMMA           reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_SQUARE    reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)
    ARROW           reduce using rule 61 (PAT -> LPAT CONSTRUCTOR PAT .)


state 107

    (64) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 136


state 108

    (65) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 137


state 109

    (71) APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    POW             reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    ARROW           reduce using rule 71 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)


state 110

    (81) PAT_LIST -> PAT_LIST COMMA . PAT
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    PAT                            shift and go to state 138
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 111

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 112

    (21) TYPE -> ATYPE ARROW . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    ATYPE                          shift and go to state 72
    TYPE                           shift and go to state 139

state 113

    (23) ATYPE -> OPEN_PAREN TYPES_LIST . CLOSE_PAREN
    (93) TYPES_LIST -> TYPES_LIST . COMMA TYPE

    CLOSE_PAREN     shift and go to state 140
    COMMA           shift and go to state 141


state 114

    (24) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN
    (94) TYPES_LIST -> TYPE .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 142
    COMMA           reduce using rule 94 (TYPES_LIST -> TYPE .)

  ! CLOSE_PAREN     [ reduce using rule 94 (TYPES_LIST -> TYPE .) ]


state 115

    (25) ATYPE -> OPEN_SQUARE TYPE . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 143


state 116

    (79) APATS -> APAT APATS .

    EQUALS          reduce using rule 79 (APATS -> APAT APATS .)
    PIPE            reduce using rule 79 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 79 (APATS -> APAT APATS .)
    ARROW           reduce using rule 79 (APATS -> APAT APATS .)


state 117

    (9) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPE .)


state 118

    (30) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (11) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 124

    DECLARATIONS                   shift and go to state 144

state 119

    (40) INFIX_EXP -> LEXP OP . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    LEXP                           shift and go to state 82
    INFIX_EXP                      shift and go to state 145
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 120

    (76) OP -> VAROP .

    MINUS           reduce using rule 76 (OP -> VAROP .)
    LAMBDA          reduce using rule 76 (OP -> VAROP .)
    LET             reduce using rule 76 (OP -> VAROP .)
    IF              reduce using rule 76 (OP -> VAROP .)
    MATCH           reduce using rule 76 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 76 (OP -> VAROP .)
    OPEN_SQUARE     reduce using rule 76 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 76 (OP -> VAROP .)
    FLOAT           reduce using rule 76 (OP -> VAROP .)
    INTEGER         reduce using rule 76 (OP -> VAROP .)
    BOOL            reduce using rule 76 (OP -> VAROP .)
    CHAR            reduce using rule 76 (OP -> VAROP .)
    STRING          reduce using rule 76 (OP -> VAROP .)


state 121

    (41) INFIX_EXP -> MINUS INFIX_EXP .

    WHERE           reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    COMMA           reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    THEN            reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    PIPE            reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_PAREN      reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    IDENTIFIER      reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    FLOAT           reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    INTEGER         reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    BOOL            reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    CHAR            reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)
    STRING          reduce using rule 41 (INFIX_EXP -> MINUS INFIX_EXP .)


state 122

    (43) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (79) APATS -> . APAT APATS
    (80) APATS -> .
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    ARROW           reduce using rule 80 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 146
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 123

    (44) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 147


state 124

    (11) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (12) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (13) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 149
    IDENTIFIER      shift and go to state 12
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

  ! CLOSE_BRACE     [ reduce using rule 19 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 148
    DECLARATION                    shift and go to state 150
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 125

    (45) LEXP -> IF EXP . THEN EXP ELSE EXP

    THEN            shift and go to state 151


state 126

    (46) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE

    OF              shift and go to state 152


state 127

    (48) FEXP -> FEXP AEXP .

    OPEN_PAREN      reduce using rule 48 (FEXP -> FEXP AEXP .)
    OPEN_SQUARE     reduce using rule 48 (FEXP -> FEXP AEXP .)
    IDENTIFIER      reduce using rule 48 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 48 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 48 (FEXP -> FEXP AEXP .)
    BOOL            reduce using rule 48 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 48 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 48 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 48 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 48 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 48 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 48 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 48 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 48 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 48 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 48 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 48 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 48 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 48 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 48 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 48 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 48 (FEXP -> FEXP AEXP .)
    COMMA           reduce using rule 48 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 48 (FEXP -> FEXP AEXP .)
    THEN            reduce using rule 48 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 48 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 48 (FEXP -> FEXP AEXP .)
    CLOSE_SQUARE    reduce using rule 48 (FEXP -> FEXP AEXP .)
    PIPE            reduce using rule 48 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 48 (FEXP -> FEXP AEXP .)


state 128

    (53) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (54) AEXP -> OPEN_PAREN EXP . COMMA EXP_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 153
    COMMA           shift and go to state 154


state 129

    (55) AEXP -> OPEN_SQUARE EXP . CLOSE_SQUARE
    (56) AEXP -> OPEN_SQUARE EXP . COMMA EXP_LIST CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 155
    COMMA           shift and go to state 156


state 130

    (32) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 32 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 32 (RHS -> GDRHS WHERE DECLARATIONS .)


state 131

    (33) GDRHS -> GUARDS EQUALS EXP .
    (34) GDRHS -> GUARDS EQUALS EXP . GDRHS
    (33) GDRHS -> . GUARDS EQUALS EXP
    (34) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (35) GUARDS -> . PIPE GUARD_LIST

    WHERE           reduce using rule 33 (GDRHS -> GUARDS EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 33 (GDRHS -> GUARDS EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 33 (GDRHS -> GUARDS EQUALS EXP .)
    PIPE            shift and go to state 44

    GUARDS                         shift and go to state 43
    GDRHS                          shift and go to state 157

state 132

    (36) GUARD_LIST -> GUARD_LIST COMMA . GUARD
    (38) GUARD -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    GUARD                          shift and go to state 158
    INFIX_EXP                      shift and go to state 100
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 133

    (75) VAROP -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_SQUARE     reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    BOOL            reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IF              reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 75 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)


state 134

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (79) APATS -> . APAT APATS
    (80) APATS -> .
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    EQUALS          reduce using rule 80 (APATS -> .)
    PIPE            reduce using rule 80 (APATS -> .)
    CLOSE_PAREN     reduce using rule 80 (APATS -> .)
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    APAT                           shift and go to state 76
    APATS                          shift and go to state 159
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 135

    (70) APAT -> OPEN_PAREN PAT COMMA PAT_LIST . CLOSE_PAREN
    (81) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_PAREN     shift and go to state 160
    COMMA           shift and go to state 110


state 136

    (64) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    BACKTICK        reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PLUS            reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MINUS           reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    TIMES           reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    DIVIDE          reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    POW             reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALITY        reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LESS            reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LEQ             reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GREATER         reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GEQ             reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PIPE            reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    COMMA           reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 64 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 137

    (65) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PLUS            reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MINUS           reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    TIMES           reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    POW             reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LESS            reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LEQ             reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GREATER         reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GEQ             reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PIPE            reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    COMMA           reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 65 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 138

    (81) PAT_LIST -> PAT_LIST COMMA PAT .

    CLOSE_SQUARE    reduce using rule 81 (PAT_LIST -> PAT_LIST COMMA PAT .)
    COMMA           reduce using rule 81 (PAT_LIST -> PAT_LIST COMMA PAT .)
    CLOSE_PAREN     reduce using rule 81 (PAT_LIST -> PAT_LIST COMMA PAT .)


state 139

    (21) TYPE -> ATYPE ARROW TYPE .

    CLOSE_BRACE     reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    ENDSTATEMENT    reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_PAREN     reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    COMMA           reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_SQUARE    reduce using rule 21 (TYPE -> ATYPE ARROW TYPE .)


state 140

    (23) ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .

    ARROW           reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 23 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)


state 141

    (93) TYPES_LIST -> TYPES_LIST COMMA . TYPE
    (20) TYPE -> . ATYPE
    (21) TYPE -> . ATYPE ARROW TYPE
    (22) ATYPE -> . TYPENAME
    (23) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (24) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (25) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 73
    OPEN_PAREN      shift and go to state 74
    OPEN_SQUARE     shift and go to state 75

    TYPE                           shift and go to state 161
    ATYPE                          shift and go to state 72

state 142

    (24) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    ARROW           reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    COMMA           reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 24 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 143

    (25) ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .

    ARROW           reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    COMMA           reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 25 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)


state 144

    (30) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 30 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 30 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 145

    (40) INFIX_EXP -> LEXP OP INFIX_EXP .

    WHERE           reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    COMMA           reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    THEN            reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PIPE            reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_PAREN      reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IDENTIFIER      reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    FLOAT           reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INTEGER         reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BOOL            reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CHAR            reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    STRING          reduce using rule 40 (INFIX_EXP -> LEXP OP INFIX_EXP .)


state 146

    (43) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 162


state 147

    (44) LEXP -> LET DECLARATIONS IN . EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 163
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 148

    (11) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 164


state 149

    (12) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 12 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 150

    (13) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 165
    CLOSE_BRACE     reduce using rule 14 (DECLARATIONS_LIST -> DECLARATION .)


state 151

    (45) LEXP -> IF EXP THEN . EXP ELSE EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 166
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 152

    (46) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 167


state 153

    (53) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BOOL            reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    COMMA           reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    THEN            reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PIPE            reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 53 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 154

    (54) AEXP -> OPEN_PAREN EXP COMMA . EXP_LIST CLOSE_PAREN
    (77) EXP_LIST -> . EXP_LIST COMMA EXP
    (78) EXP_LIST -> . EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 168
    EXP_LIST                       shift and go to state 169
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 155

    (55) AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    FLOAT           reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INTEGER         reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BOOL            reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CHAR            reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    STRING          reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BACKTICK        reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PLUS            reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MINUS           reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TIMES           reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    DIVIDE          reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    POW             reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALITY        reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LESS            reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LEQ             reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GREATER         reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GEQ             reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WHERE           reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    COMMA           reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALS          reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    THEN            reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OF              reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PIPE            reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ELSE            reduce using rule 55 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)


state 156

    (56) AEXP -> OPEN_SQUARE EXP COMMA . EXP_LIST CLOSE_SQUARE
    (77) EXP_LIST -> . EXP_LIST COMMA EXP
    (78) EXP_LIST -> . EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 168
    EXP_LIST                       shift and go to state 170
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 157

    (34) GDRHS -> GUARDS EQUALS EXP GDRHS .

    WHERE           reduce using rule 34 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 34 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 34 (GDRHS -> GUARDS EQUALS EXP GDRHS .)


state 158

    (36) GUARD_LIST -> GUARD_LIST COMMA GUARD .

    COMMA           reduce using rule 36 (GUARD_LIST -> GUARD_LIST COMMA GUARD .)
    EQUALS          reduce using rule 36 (GUARD_LIST -> GUARD_LIST COMMA GUARD .)


state 159

    (28) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 28 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    PIPE            reduce using rule 28 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 28 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 160

    (70) APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    POW             reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LESS            reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    STRING          reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    ARROW           reduce using rule 70 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)


state 161

    (93) TYPES_LIST -> TYPES_LIST COMMA TYPE .

    CLOSE_PAREN     reduce using rule 93 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)
    COMMA           reduce using rule 93 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)


state 162

    (43) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 171
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 163

    (44) LEXP -> LET DECLARATIONS IN EXP .

    BACKTICK        reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    PLUS            reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    COMMA           reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    THEN            reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_SQUARE    reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    PIPE            reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_PAREN      reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_SQUARE     reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    IDENTIFIER      reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    FLOAT           reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    INTEGER         reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    BOOL            reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    CHAR            reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)
    STRING          reduce using rule 44 (LEXP -> LET DECLARATIONS IN EXP .)


state 164

    (11) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 11 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 165

    (13) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (13) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> . DECLARATION
    (15) DECLARATION -> . GEN_DECLARATION
    (16) DECLARATION -> . FUNCTION_LHS RHS
    (17) DECLARATION -> . PAT RHS
    (18) GEN_DECLARATION -> . IDENTIFIER TYPESIG TYPE
    (19) GEN_DECLARATION -> .
    (26) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (27) FUNCTION_LHS -> . PAT VAROP PAT
    (28) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 12
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> .)
    OPEN_PAREN      shift and go to state 19
    MINUS           shift and go to state 21
    OPEN_SQUARE     shift and go to state 27
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    DECLARATION                    shift and go to state 150
    DECLARATIONS_LIST              shift and go to state 172
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    APAT                           shift and go to state 18
    LPAT                           shift and go to state 20
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 166

    (45) LEXP -> IF EXP THEN EXP . ELSE EXP

    ELSE            shift and go to state 173


state 167

    (46) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (57) ALTS -> . ALTS ALT ENDSTATEMENT
    (58) ALTS -> . ALT
    (59) ALT -> . PAT ARROW EXP
    (60) ALT -> .
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    CLOSE_BRACE     reduce using rule 60 (ALT -> .)
    ENDSTATEMENT    reduce using rule 60 (ALT -> .)
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

  ! MINUS           [ reduce using rule 60 (ALT -> .) ]
  ! OPEN_PAREN      [ reduce using rule 60 (ALT -> .) ]
  ! OPEN_SQUARE     [ reduce using rule 60 (ALT -> .) ]
  ! IDENTIFIER      [ reduce using rule 60 (ALT -> .) ]
  ! FLOAT           [ reduce using rule 60 (ALT -> .) ]
  ! INTEGER         [ reduce using rule 60 (ALT -> .) ]
  ! BOOL            [ reduce using rule 60 (ALT -> .) ]
  ! CHAR            [ reduce using rule 60 (ALT -> .) ]
  ! STRING          [ reduce using rule 60 (ALT -> .) ]

    ALTS                           shift and go to state 174
    ALT                            shift and go to state 175
    PAT                            shift and go to state 176
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 168

    (78) EXP_LIST -> EXP .

    CLOSE_PAREN     reduce using rule 78 (EXP_LIST -> EXP .)
    COMMA           reduce using rule 78 (EXP_LIST -> EXP .)
    CLOSE_SQUARE    reduce using rule 78 (EXP_LIST -> EXP .)


state 169

    (54) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST . CLOSE_PAREN
    (77) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_PAREN     shift and go to state 178
    COMMA           shift and go to state 177


state 170

    (56) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST . CLOSE_SQUARE
    (77) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_SQUARE    shift and go to state 179
    COMMA           shift and go to state 177


state 171

    (43) LEXP -> LAMBDA APAT APATS ARROW EXP .

    BACKTICK        reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PLUS            reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    COMMA           reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    THEN            reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_SQUARE    reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PIPE            reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_PAREN      reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_SQUARE     reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    IDENTIFIER      reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    FLOAT           reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    INTEGER         reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    BOOL            reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CHAR            reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    STRING          reduce using rule 43 (LEXP -> LAMBDA APAT APATS ARROW EXP .)


state 172

    (13) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 13 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 173

    (45) LEXP -> IF EXP THEN EXP ELSE . EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 180
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 174

    (46) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE
    (57) ALTS -> ALTS . ALT ENDSTATEMENT
    (59) ALT -> . PAT ARROW EXP
    (60) ALT -> .
    (61) PAT -> . LPAT CONSTRUCTOR PAT
    (62) PAT -> . LPAT
    (63) LPAT -> . APAT
    (64) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (65) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (66) APAT -> . PARAM
    (67) APAT -> . GCON
    (68) APAT -> . LITERAL
    (69) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (70) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (71) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (101) PARAM -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    CLOSE_BRACE     shift and go to state 181
    ENDSTATEMENT    reduce using rule 60 (ALT -> .)
    MINUS           shift and go to state 21
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 27
    IDENTIFIER      shift and go to state 35
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    ALT                            shift and go to state 182
    PAT                            shift and go to state 176
    LPAT                           shift and go to state 20
    APAT                           shift and go to state 18
    PARAM                          shift and go to state 24
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 175

    (58) ALTS -> ALT .

    CLOSE_BRACE     reduce using rule 58 (ALTS -> ALT .)
    MINUS           reduce using rule 58 (ALTS -> ALT .)
    OPEN_PAREN      reduce using rule 58 (ALTS -> ALT .)
    OPEN_SQUARE     reduce using rule 58 (ALTS -> ALT .)
    IDENTIFIER      reduce using rule 58 (ALTS -> ALT .)
    FLOAT           reduce using rule 58 (ALTS -> ALT .)
    INTEGER         reduce using rule 58 (ALTS -> ALT .)
    BOOL            reduce using rule 58 (ALTS -> ALT .)
    CHAR            reduce using rule 58 (ALTS -> ALT .)
    STRING          reduce using rule 58 (ALTS -> ALT .)
    ENDSTATEMENT    reduce using rule 58 (ALTS -> ALT .)


state 176

    (59) ALT -> PAT . ARROW EXP

    ARROW           shift and go to state 183


state 177

    (77) EXP_LIST -> EXP_LIST COMMA . EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 184
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 178

    (54) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .

    OPEN_PAREN      reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    STRING          reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    POW             reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LESS            reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WHERE           reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    THEN            reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OF              reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ELSE            reduce using rule 54 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)


state 179

    (56) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .

    OPEN_PAREN      reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    POW             reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WHERE           reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    THEN            reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OF              reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ELSE            reduce using rule 56 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)


state 180

    (45) LEXP -> IF EXP THEN EXP ELSE EXP .

    BACKTICK        reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PLUS            reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MINUS           reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    TIMES           reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    DIVIDE          reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    POW             reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALITY        reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LESS            reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LEQ             reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GREATER         reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GEQ             reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WHERE           reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    COMMA           reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALS          reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    THEN            reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OF              reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_SQUARE    reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PIPE            reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ELSE            reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_PAREN      reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_SQUARE     reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    IDENTIFIER      reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    FLOAT           reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    INTEGER         reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    BOOL            reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CHAR            reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    STRING          reduce using rule 45 (LEXP -> IF EXP THEN EXP ELSE EXP .)


state 181

    (46) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    BACKTICK        reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PLUS            reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    COMMA           reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    THEN            reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_SQUARE    reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PIPE            reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_PAREN      reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_SQUARE     reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    FLOAT           reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INTEGER         reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    BOOL            reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CHAR            reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    STRING          reduce using rule 46 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 182

    (57) ALTS -> ALTS ALT . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 185


state 183

    (59) ALT -> PAT ARROW . EXP
    (39) EXP -> . INFIX_EXP
    (40) INFIX_EXP -> . LEXP OP INFIX_EXP
    (41) INFIX_EXP -> . MINUS INFIX_EXP
    (42) INFIX_EXP -> . LEXP
    (43) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (44) LEXP -> . LET DECLARATIONS IN EXP
    (45) LEXP -> . IF EXP THEN EXP ELSE EXP
    (46) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (47) LEXP -> . FEXP
    (48) FEXP -> . FEXP AEXP
    (49) FEXP -> . AEXP
    (50) AEXP -> . USED_VAR
    (51) AEXP -> . GCON
    (52) AEXP -> . LITERAL
    (53) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (54) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (55) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (56) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (100) USED_VAR -> . IDENTIFIER
    (72) GCON -> . OPEN_PAREN CLOSE_PAREN
    (73) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (95) LITERAL -> . FLOAT
    (96) LITERAL -> . INTEGER
    (97) LITERAL -> . BOOL
    (98) LITERAL -> . CHAR
    (99) LITERAL -> . STRING

    MINUS           shift and go to state 83
    LAMBDA          shift and go to state 84
    LET             shift and go to state 85
    IF              shift and go to state 86
    MATCH           shift and go to state 87
    OPEN_PAREN      shift and go to state 93
    OPEN_SQUARE     shift and go to state 94
    IDENTIFIER      shift and go to state 95
    FLOAT           shift and go to state 23
    INTEGER         shift and go to state 22
    BOOL            shift and go to state 28
    CHAR            shift and go to state 29
    STRING          shift and go to state 30

    EXP                            shift and go to state 186
    INFIX_EXP                      shift and go to state 81
    LEXP                           shift and go to state 82
    FEXP                           shift and go to state 88
    AEXP                           shift and go to state 89
    USED_VAR                       shift and go to state 90
    GCON                           shift and go to state 91
    LITERAL                        shift and go to state 92

state 184

    (77) EXP_LIST -> EXP_LIST COMMA EXP .

    CLOSE_PAREN     reduce using rule 77 (EXP_LIST -> EXP_LIST COMMA EXP .)
    COMMA           reduce using rule 77 (EXP_LIST -> EXP_LIST COMMA EXP .)
    CLOSE_SQUARE    reduce using rule 77 (EXP_LIST -> EXP_LIST COMMA EXP .)


state 185

    (57) ALTS -> ALTS ALT ENDSTATEMENT .

    CLOSE_BRACE     reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    MINUS           reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_PAREN      reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_SQUARE     reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    IDENTIFIER      reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    FLOAT           reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    INTEGER         reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    BOOL            reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    CHAR            reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    STRING          reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)
    ENDSTATEMENT    reduce using rule 57 (ALTS -> ALTS ALT ENDSTATEMENT .)


state 186

    (59) ALT -> PAT ARROW EXP .

    CLOSE_BRACE     reduce using rule 59 (ALT -> PAT ARROW EXP .)
    MINUS           reduce using rule 59 (ALT -> PAT ARROW EXP .)
    OPEN_PAREN      reduce using rule 59 (ALT -> PAT ARROW EXP .)
    OPEN_SQUARE     reduce using rule 59 (ALT -> PAT ARROW EXP .)
    IDENTIFIER      reduce using rule 59 (ALT -> PAT ARROW EXP .)
    FLOAT           reduce using rule 59 (ALT -> PAT ARROW EXP .)
    INTEGER         reduce using rule 59 (ALT -> PAT ARROW EXP .)
    BOOL            reduce using rule 59 (ALT -> PAT ARROW EXP .)
    CHAR            reduce using rule 59 (ALT -> PAT ARROW EXP .)
    STRING          reduce using rule 59 (ALT -> PAT ARROW EXP .)
    ENDSTATEMENT    reduce using rule 59 (ALT -> PAT ARROW EXP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BACKTICK in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for POW in state 82 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS in state 82 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 82 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 88 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 88 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 88 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 88 resolved as shift
WARNING: shift/reduce conflict for STRING in state 88 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 167 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 167 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 167 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 167 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 167 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 167 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 167 resolved as shift
WARNING: shift/reduce conflict for STRING in state 167 resolved as shift
