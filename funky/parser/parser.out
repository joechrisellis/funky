Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    INDENTATION
    INEQUALITY

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     MODULE_DEFINITION -> BODY
Rule 3     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 4     BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE
Rule 5     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 6     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 7     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 8     IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT
Rule 9     IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT
Rule 10    TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 11    TOP_DECLARATIONS -> TOP_DECLARATION
Rule 12    TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
Rule 13    TOP_DECLARATION -> DECLARATION
Rule 14    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 15    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 16    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 17    DECLARATIONS_LIST -> DECLARATION
Rule 18    DECLARATION -> GEN_DECLARATION
Rule 19    DECLARATION -> FUNCTION_LHS RHS
Rule 20    DECLARATION -> PAT RHS
Rule 21    GEN_DECLARATION -> VARS TYPESIG TYPE
Rule 22    GEN_DECLARATION -> FIXITY INTEGER OPS
Rule 23    GEN_DECLARATION -> FIXITY OPS
Rule 24    GEN_DECLARATION -> <empty>
Rule 25    OPS -> OPS COMMA OP
Rule 26    OPS -> OP
Rule 27    VARS -> VARS COMMA IDENTIFIER
Rule 28    VARS -> IDENTIFIER
Rule 29    FIXITY -> INFIXL
Rule 30    FIXITY -> INFIXR
Rule 31    FIXITY -> INFIX
Rule 32    TYPE -> BTYPE
Rule 33    TYPE -> BTYPE ARROW TYPE
Rule 34    BTYPE -> ATYPE
Rule 35    BTYPE -> BTYPE ATYPE
Rule 36    ATYPE -> TYPENAME
Rule 37    ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN
Rule 38    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 39    ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE
Rule 40    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 41    FUNCTION_LHS -> PAT VAROP PAT
Rule 42    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 43    RHS -> EQUALS EXP
Rule 44    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 45    RHS -> GDRHS
Rule 46    RHS -> GDRHS WHERE DECLARATIONS
Rule 47    GDRHS -> GUARDS EQUALS EXP
Rule 48    GDRHS -> GUARDS EQUALS EXP GDRHS
Rule 49    GUARDS -> PIPE GUARD_LIST
Rule 50    GUARD_LIST -> GUARD_LIST GUARD
Rule 51    GUARD_LIST -> GUARD
Rule 52    GUARD -> INFIX_EXP
Rule 53    EXP -> INFIX_EXP
Rule 54    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 55    INFIX_EXP -> MINUS INFIX_EXP
Rule 56    INFIX_EXP -> LEXP
Rule 57    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 58    LEXP -> LET DECLARATIONS IN EXP
Rule 59    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 60    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 61    LEXP -> FEXP
Rule 62    FEXP -> FEXP AEXP
Rule 63    FEXP -> AEXP
Rule 64    AEXP -> IDENTIFIER
Rule 65    AEXP -> GCON
Rule 66    AEXP -> LITERAL
Rule 67    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 68    AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
Rule 69    AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE
Rule 70    AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
Rule 71    ALTS -> ALTS ALT ENDSTATEMENT
Rule 72    ALTS -> ALT
Rule 73    ALT -> PAT ARROW EXP
Rule 74    ALT -> <empty>
Rule 75    PAT -> LPAT CONSTRUCTOR PAT
Rule 76    PAT -> LPAT
Rule 77    LPAT -> APAT
Rule 78    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 79    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 80    APAT -> IDENTIFIER
Rule 81    APAT -> GCON
Rule 82    APAT -> LITERAL
Rule 83    APAT -> WILDCARD
Rule 84    APAT -> OPEN_PAREN PAT CLOSE_PAREN
Rule 85    APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
Rule 86    APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE
Rule 87    GCON -> OPEN_PAREN CLOSE_PAREN
Rule 88    GCON -> OPEN_SQUARE CLOSE_SQUARE
Rule 89    VAROP -> VARSYM
Rule 90    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 91    OP -> VAROP
Rule 92    EXP_LIST -> EXP_LIST COMMA EXP
Rule 93    EXP_LIST -> EXP
Rule 94    APATS -> APAT APATS
Rule 95    APATS -> <empty>
Rule 96    PAT_LIST -> PAT_LIST COMMA PAT
Rule 97    PAT_LIST -> PAT
Rule 98    VARSYM -> PLUS
Rule 99    VARSYM -> MINUS
Rule 100   VARSYM -> TIMES
Rule 101   VARSYM -> DIVIDE
Rule 102   VARSYM -> POW
Rule 103   VARSYM -> EQUALITY
Rule 104   VARSYM -> LESS
Rule 105   VARSYM -> LEQ
Rule 106   VARSYM -> GREATER
Rule 107   VARSYM -> GEQ
Rule 108   TYPES_LIST -> TYPES_LIST COMMA TYPE
Rule 109   TYPES_LIST -> TYPE
Rule 110   LITERAL -> INTEGER
Rule 111   LITERAL -> FLOAT
Rule 112   LITERAL -> CHAR
Rule 113   LITERAL -> STRING

Terminals, with rules where they appear

ARROW                : 33 57 73
AS                   : 9
BACKTICK             : 90 90
CHAR                 : 112
CLOSE_BRACE          : 3 4 5 14 15 60
CLOSE_PAREN          : 37 38 42 67 68 78 79 84 85 87
CLOSE_SQUARE         : 39 69 70 86 88
COMMA                : 25 27 68 70 85 92 96 108
COMMENT              : 
CONSTRUCTOR          : 75
DIVIDE               : 101
ELSE                 : 59
ENDSTATEMENT         : 3 6 8 9 10 12 16 71
EQUALITY             : 103
EQUALS               : 12 43 44 47 48
FLOAT                : 79 111
GEQ                  : 107
GREATER              : 106
IDENTIFIER           : 1 8 9 9 27 28 40 64 80 90
IF                   : 59
IMPORT               : 8 9
IN                   : 58
INDENTATION          : 
INEQUALITY           : 
INFIX                : 31
INFIXL               : 29
INFIXR               : 30
INTEGER              : 22 78 110
LAMBDA               : 57
LEQ                  : 105
LESS                 : 104
LET                  : 58
MATCH                : 60
MINUS                : 55 78 79 99
MODULE               : 1
NEWTYPE              : 12
OF                   : 60
OPEN_BRACE           : 3 4 5 14 15 60
OPEN_PAREN           : 37 38 42 67 68 78 79 84 85 87
OPEN_SQUARE          : 39 69 70 86 88
PIPE                 : 49
PLUS                 : 98
POW                  : 102
STRING               : 113
THEN                 : 59
TIMES                : 100
TYPENAME             : 12 12 36
TYPESIG              : 21
WHERE                : 1 44 46
WILDCARD             : 83
error                : 

Nonterminals, with rules where they appear

AEXP                 : 62 63
ALT                  : 71 72
ALTS                 : 60 71
APAT                 : 40 42 57 77 94
APATS                : 40 42 57 94
ATYPE                : 34 35
BODY                 : 1 2
BTYPE                : 32 33 35
DECLARATION          : 13 16 17
DECLARATIONS         : 44 46 58
DECLARATIONS_LIST    : 14 16
EXP                  : 43 44 47 48 57 58 59 59 59 60 67 68 69 70 73 92 93
EXP_LIST             : 68 70 92
FEXP                 : 61 62
FIXITY               : 22 23
FUNCTION_LHS         : 19 42
GCON                 : 65 81
GDRHS                : 45 46 48
GEN_DECLARATION      : 18
GUARD                : 50 51
GUARDS               : 47 48
GUARD_LIST           : 49 50
IMPORT_DECLARATION   : 6 7
IMPORT_DECLARATIONS  : 3 4 6
INFIX_EXP            : 52 53 54 55
LEXP                 : 54 56
LITERAL              : 66 82
LPAT                 : 75 76
MODULE_DEFINITION    : 0
OP                   : 25 26 54
OPS                  : 22 23 25
PAT                  : 20 41 41 73 75 84 85 96 97
PAT_LIST             : 85 86 96
RHS                  : 19 20
TOP_DECLARATION      : 10 11
TOP_DECLARATIONS     : 3 5 10
TYPE                 : 21 33 38 39 108 109
TYPES_LIST           : 37 108
VAROP                : 41 91
VARS                 : 21 27
VARSYM               : 89

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY
    (2) MODULE_DEFINITION -> . BODY
    (3) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE
    (5) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    MODULE          shift and go to state 2
    OPEN_BRACE      shift and go to state 4

    MODULE_DEFINITION              shift and go to state 1
    BODY                           shift and go to state 3

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 5


state 3

    (2) MODULE_DEFINITION -> BODY .

    $end            reduce using rule 2 (MODULE_DEFINITION -> BODY .)


state 4

    (3) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS CLOSE_BRACE
    (5) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (6) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (7) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (10) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (11) TOP_DECLARATIONS -> . TOP_DECLARATION
    (8) IMPORT_DECLARATION -> . IMPORT IDENTIFIER ENDSTATEMENT
    (9) IMPORT_DECLARATION -> . IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT
    (12) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
    (13) TOP_DECLARATION -> . DECLARATION
    (18) DECLARATION -> . GEN_DECLARATION
    (19) DECLARATION -> . FUNCTION_LHS RHS
    (20) DECLARATION -> . PAT RHS
    (21) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (22) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (23) GEN_DECLARATION -> . FIXITY OPS
    (24) GEN_DECLARATION -> .
    (40) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (41) FUNCTION_LHS -> . PAT VAROP PAT
    (42) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (27) VARS -> . VARS COMMA IDENTIFIER
    (28) VARS -> . IDENTIFIER
    (29) FIXITY -> . INFIXL
    (30) FIXITY -> . INFIXR
    (31) FIXITY -> . INFIX
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    IMPORT          shift and go to state 10
    NEWTYPE         shift and go to state 12
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 11
    OPEN_PAREN      shift and go to state 21
    INFIXL          shift and go to state 23
    INFIXR          shift and go to state 24
    INFIX           shift and go to state 25
    MINUS           shift and go to state 26
    WILDCARD        shift and go to state 30
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    IMPORT_DECLARATIONS            shift and go to state 6
    TOP_DECLARATIONS               shift and go to state 7
    IMPORT_DECLARATION             shift and go to state 8
    TOP_DECLARATION                shift and go to state 9
    DECLARATION                    shift and go to state 13
    GEN_DECLARATION                shift and go to state 14
    FUNCTION_LHS                   shift and go to state 15
    PAT                            shift and go to state 16
    VARS                           shift and go to state 17
    FIXITY                         shift and go to state 18
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 34


state 6

    (3) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . CLOSE_BRACE
    (6) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 35
    CLOSE_BRACE     shift and go to state 36


state 7

    (5) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (10) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 37
    ENDSTATEMENT    shift and go to state 38


state 8

    (7) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 7 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)
    CLOSE_BRACE     reduce using rule 7 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 9

    (11) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 11 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 11 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 10

    (8) IMPORT_DECLARATION -> IMPORT . IDENTIFIER ENDSTATEMENT
    (9) IMPORT_DECLARATION -> IMPORT . IDENTIFIER AS IDENTIFIER ENDSTATEMENT

    IDENTIFIER      shift and go to state 39


state 11

    (40) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (28) VARS -> IDENTIFIER .
    (80) APAT -> IDENTIFIER .
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    TYPESIG         reduce using rule 28 (VARS -> IDENTIFIER .)
    COMMA           reduce using rule 28 (VARS -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 80 (APAT -> IDENTIFIER .)
    EQUALS          reduce using rule 80 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 80 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 80 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 80 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 80 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 80 (APAT -> IDENTIFIER .)
    POW             reduce using rule 80 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 80 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 80 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 80 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 80 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 80 (APAT -> IDENTIFIER .)
    PIPE            reduce using rule 80 (APAT -> IDENTIFIER .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 41
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 12

    (12) TOP_DECLARATION -> NEWTYPE . TYPENAME EQUALS TYPENAME ENDSTATEMENT

    TYPENAME        shift and go to state 43


state 13

    (13) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 13 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 13 (TOP_DECLARATION -> DECLARATION .)


state 14

    (18) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 18 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 18 (DECLARATION -> GEN_DECLARATION .)


state 15

    (19) DECLARATION -> FUNCTION_LHS . RHS
    (43) RHS -> . EQUALS EXP
    (44) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (45) RHS -> . GDRHS
    (46) RHS -> . GDRHS WHERE DECLARATIONS
    (47) GDRHS -> . GUARDS EQUALS EXP
    (48) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (49) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 45
    PIPE            shift and go to state 48

    RHS                            shift and go to state 44
    GDRHS                          shift and go to state 46
    GUARDS                         shift and go to state 47

state 16

    (20) DECLARATION -> PAT . RHS
    (41) FUNCTION_LHS -> PAT . VAROP PAT
    (43) RHS -> . EQUALS EXP
    (44) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (45) RHS -> . GDRHS
    (46) RHS -> . GDRHS WHERE DECLARATIONS
    (89) VAROP -> . VARSYM
    (90) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (47) GDRHS -> . GUARDS EQUALS EXP
    (48) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (98) VARSYM -> . PLUS
    (99) VARSYM -> . MINUS
    (100) VARSYM -> . TIMES
    (101) VARSYM -> . DIVIDE
    (102) VARSYM -> . POW
    (103) VARSYM -> . EQUALITY
    (104) VARSYM -> . LESS
    (105) VARSYM -> . LEQ
    (106) VARSYM -> . GREATER
    (107) VARSYM -> . GEQ
    (49) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 45
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62
    PIPE            shift and go to state 48

    RHS                            shift and go to state 49
    VAROP                          shift and go to state 50
    GDRHS                          shift and go to state 46
    VARSYM                         shift and go to state 51
    GUARDS                         shift and go to state 47

state 17

    (21) GEN_DECLARATION -> VARS . TYPESIG TYPE
    (27) VARS -> VARS . COMMA IDENTIFIER

    TYPESIG         shift and go to state 63
    COMMA           shift and go to state 64


state 18

    (22) GEN_DECLARATION -> FIXITY . INTEGER OPS
    (23) GEN_DECLARATION -> FIXITY . OPS
    (25) OPS -> . OPS COMMA OP
    (26) OPS -> . OP
    (91) OP -> . VAROP
    (89) VAROP -> . VARSYM
    (90) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (98) VARSYM -> . PLUS
    (99) VARSYM -> . MINUS
    (100) VARSYM -> . TIMES
    (101) VARSYM -> . DIVIDE
    (102) VARSYM -> . POW
    (103) VARSYM -> . EQUALITY
    (104) VARSYM -> . LESS
    (105) VARSYM -> . LEQ
    (106) VARSYM -> . GREATER
    (107) VARSYM -> . GEQ

    INTEGER         shift and go to state 65
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    OPS                            shift and go to state 66
    OP                             shift and go to state 67
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 19

    (110) LITERAL -> INTEGER .

    CONSTRUCTOR     reduce using rule 110 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 110 (LITERAL -> INTEGER .)
    BACKTICK        reduce using rule 110 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 110 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 110 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 110 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 110 (LITERAL -> INTEGER .)
    POW             reduce using rule 110 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 110 (LITERAL -> INTEGER .)
    LESS            reduce using rule 110 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 110 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 110 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 110 (LITERAL -> INTEGER .)
    PIPE            reduce using rule 110 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 110 (LITERAL -> INTEGER .)
    WILDCARD        reduce using rule 110 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 110 (LITERAL -> INTEGER .)
    OPEN_SQUARE     reduce using rule 110 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 110 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 110 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 110 (LITERAL -> INTEGER .)
    STRING          reduce using rule 110 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 110 (LITERAL -> INTEGER .)
    COMMA           reduce using rule 110 (LITERAL -> INTEGER .)
    CLOSE_SQUARE    reduce using rule 110 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 110 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 110 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 110 (LITERAL -> INTEGER .)
    LAMBDA          reduce using rule 110 (LITERAL -> INTEGER .)
    LET             reduce using rule 110 (LITERAL -> INTEGER .)
    IF              reduce using rule 110 (LITERAL -> INTEGER .)
    MATCH           reduce using rule 110 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 110 (LITERAL -> INTEGER .)
    THEN            reduce using rule 110 (LITERAL -> INTEGER .)
    OF              reduce using rule 110 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 110 (LITERAL -> INTEGER .)


state 20

    (77) LPAT -> APAT .

    CONSTRUCTOR     reduce using rule 77 (LPAT -> APAT .)
    EQUALS          reduce using rule 77 (LPAT -> APAT .)
    BACKTICK        reduce using rule 77 (LPAT -> APAT .)
    PLUS            reduce using rule 77 (LPAT -> APAT .)
    MINUS           reduce using rule 77 (LPAT -> APAT .)
    TIMES           reduce using rule 77 (LPAT -> APAT .)
    DIVIDE          reduce using rule 77 (LPAT -> APAT .)
    POW             reduce using rule 77 (LPAT -> APAT .)
    EQUALITY        reduce using rule 77 (LPAT -> APAT .)
    LESS            reduce using rule 77 (LPAT -> APAT .)
    LEQ             reduce using rule 77 (LPAT -> APAT .)
    GREATER         reduce using rule 77 (LPAT -> APAT .)
    GEQ             reduce using rule 77 (LPAT -> APAT .)
    PIPE            reduce using rule 77 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 77 (LPAT -> APAT .)
    COMMA           reduce using rule 77 (LPAT -> APAT .)
    CLOSE_SQUARE    reduce using rule 77 (LPAT -> APAT .)
    ARROW           reduce using rule 77 (LPAT -> APAT .)


state 21

    (42) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (84) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (85) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (87) GCON -> OPEN_PAREN . CLOSE_PAREN
    (40) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (41) FUNCTION_LHS -> . PAT VAROP PAT
    (42) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 70
    IDENTIFIER      shift and go to state 72
    OPEN_PAREN      shift and go to state 21
    MINUS           shift and go to state 26
    WILDCARD        shift and go to state 30
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    FUNCTION_LHS                   shift and go to state 69
    APAT                           shift and go to state 20
    PAT                            shift and go to state 71
    LPAT                           shift and go to state 22
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 22

    (75) PAT -> LPAT . CONSTRUCTOR PAT
    (76) PAT -> LPAT .

    CONSTRUCTOR     shift and go to state 73
    EQUALS          reduce using rule 76 (PAT -> LPAT .)
    BACKTICK        reduce using rule 76 (PAT -> LPAT .)
    PLUS            reduce using rule 76 (PAT -> LPAT .)
    MINUS           reduce using rule 76 (PAT -> LPAT .)
    TIMES           reduce using rule 76 (PAT -> LPAT .)
    DIVIDE          reduce using rule 76 (PAT -> LPAT .)
    POW             reduce using rule 76 (PAT -> LPAT .)
    EQUALITY        reduce using rule 76 (PAT -> LPAT .)
    LESS            reduce using rule 76 (PAT -> LPAT .)
    LEQ             reduce using rule 76 (PAT -> LPAT .)
    GREATER         reduce using rule 76 (PAT -> LPAT .)
    GEQ             reduce using rule 76 (PAT -> LPAT .)
    PIPE            reduce using rule 76 (PAT -> LPAT .)
    CLOSE_PAREN     reduce using rule 76 (PAT -> LPAT .)
    COMMA           reduce using rule 76 (PAT -> LPAT .)
    CLOSE_SQUARE    reduce using rule 76 (PAT -> LPAT .)
    ARROW           reduce using rule 76 (PAT -> LPAT .)


state 23

    (29) FIXITY -> INFIXL .

    INTEGER         reduce using rule 29 (FIXITY -> INFIXL .)
    BACKTICK        reduce using rule 29 (FIXITY -> INFIXL .)
    PLUS            reduce using rule 29 (FIXITY -> INFIXL .)
    MINUS           reduce using rule 29 (FIXITY -> INFIXL .)
    TIMES           reduce using rule 29 (FIXITY -> INFIXL .)
    DIVIDE          reduce using rule 29 (FIXITY -> INFIXL .)
    POW             reduce using rule 29 (FIXITY -> INFIXL .)
    EQUALITY        reduce using rule 29 (FIXITY -> INFIXL .)
    LESS            reduce using rule 29 (FIXITY -> INFIXL .)
    LEQ             reduce using rule 29 (FIXITY -> INFIXL .)
    GREATER         reduce using rule 29 (FIXITY -> INFIXL .)
    GEQ             reduce using rule 29 (FIXITY -> INFIXL .)


state 24

    (30) FIXITY -> INFIXR .

    INTEGER         reduce using rule 30 (FIXITY -> INFIXR .)
    BACKTICK        reduce using rule 30 (FIXITY -> INFIXR .)
    PLUS            reduce using rule 30 (FIXITY -> INFIXR .)
    MINUS           reduce using rule 30 (FIXITY -> INFIXR .)
    TIMES           reduce using rule 30 (FIXITY -> INFIXR .)
    DIVIDE          reduce using rule 30 (FIXITY -> INFIXR .)
    POW             reduce using rule 30 (FIXITY -> INFIXR .)
    EQUALITY        reduce using rule 30 (FIXITY -> INFIXR .)
    LESS            reduce using rule 30 (FIXITY -> INFIXR .)
    LEQ             reduce using rule 30 (FIXITY -> INFIXR .)
    GREATER         reduce using rule 30 (FIXITY -> INFIXR .)
    GEQ             reduce using rule 30 (FIXITY -> INFIXR .)


state 25

    (31) FIXITY -> INFIX .

    INTEGER         reduce using rule 31 (FIXITY -> INFIX .)
    BACKTICK        reduce using rule 31 (FIXITY -> INFIX .)
    PLUS            reduce using rule 31 (FIXITY -> INFIX .)
    MINUS           reduce using rule 31 (FIXITY -> INFIX .)
    TIMES           reduce using rule 31 (FIXITY -> INFIX .)
    DIVIDE          reduce using rule 31 (FIXITY -> INFIX .)
    POW             reduce using rule 31 (FIXITY -> INFIX .)
    EQUALITY        reduce using rule 31 (FIXITY -> INFIX .)
    LESS            reduce using rule 31 (FIXITY -> INFIX .)
    LEQ             reduce using rule 31 (FIXITY -> INFIX .)
    GREATER         reduce using rule 31 (FIXITY -> INFIX .)
    GEQ             reduce using rule 31 (FIXITY -> INFIX .)


state 26

    (78) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 74


state 27

    (111) LITERAL -> FLOAT .

    CONSTRUCTOR     reduce using rule 111 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 111 (LITERAL -> FLOAT .)
    BACKTICK        reduce using rule 111 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 111 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 111 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 111 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 111 (LITERAL -> FLOAT .)
    POW             reduce using rule 111 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 111 (LITERAL -> FLOAT .)
    LESS            reduce using rule 111 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 111 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 111 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 111 (LITERAL -> FLOAT .)
    PIPE            reduce using rule 111 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 111 (LITERAL -> FLOAT .)
    WILDCARD        reduce using rule 111 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 111 (LITERAL -> FLOAT .)
    OPEN_SQUARE     reduce using rule 111 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 111 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 111 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 111 (LITERAL -> FLOAT .)
    STRING          reduce using rule 111 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 111 (LITERAL -> FLOAT .)
    COMMA           reduce using rule 111 (LITERAL -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 111 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 111 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 111 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 111 (LITERAL -> FLOAT .)
    LAMBDA          reduce using rule 111 (LITERAL -> FLOAT .)
    LET             reduce using rule 111 (LITERAL -> FLOAT .)
    IF              reduce using rule 111 (LITERAL -> FLOAT .)
    MATCH           reduce using rule 111 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 111 (LITERAL -> FLOAT .)
    THEN            reduce using rule 111 (LITERAL -> FLOAT .)
    OF              reduce using rule 111 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 111 (LITERAL -> FLOAT .)


state 28

    (81) APAT -> GCON .

    CONSTRUCTOR     reduce using rule 81 (APAT -> GCON .)
    EQUALS          reduce using rule 81 (APAT -> GCON .)
    BACKTICK        reduce using rule 81 (APAT -> GCON .)
    PLUS            reduce using rule 81 (APAT -> GCON .)
    MINUS           reduce using rule 81 (APAT -> GCON .)
    TIMES           reduce using rule 81 (APAT -> GCON .)
    DIVIDE          reduce using rule 81 (APAT -> GCON .)
    POW             reduce using rule 81 (APAT -> GCON .)
    EQUALITY        reduce using rule 81 (APAT -> GCON .)
    LESS            reduce using rule 81 (APAT -> GCON .)
    LEQ             reduce using rule 81 (APAT -> GCON .)
    GREATER         reduce using rule 81 (APAT -> GCON .)
    GEQ             reduce using rule 81 (APAT -> GCON .)
    PIPE            reduce using rule 81 (APAT -> GCON .)
    IDENTIFIER      reduce using rule 81 (APAT -> GCON .)
    WILDCARD        reduce using rule 81 (APAT -> GCON .)
    OPEN_PAREN      reduce using rule 81 (APAT -> GCON .)
    OPEN_SQUARE     reduce using rule 81 (APAT -> GCON .)
    INTEGER         reduce using rule 81 (APAT -> GCON .)
    FLOAT           reduce using rule 81 (APAT -> GCON .)
    CHAR            reduce using rule 81 (APAT -> GCON .)
    STRING          reduce using rule 81 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 81 (APAT -> GCON .)
    COMMA           reduce using rule 81 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 81 (APAT -> GCON .)
    ARROW           reduce using rule 81 (APAT -> GCON .)


state 29

    (82) APAT -> LITERAL .

    CONSTRUCTOR     reduce using rule 82 (APAT -> LITERAL .)
    EQUALS          reduce using rule 82 (APAT -> LITERAL .)
    BACKTICK        reduce using rule 82 (APAT -> LITERAL .)
    PLUS            reduce using rule 82 (APAT -> LITERAL .)
    MINUS           reduce using rule 82 (APAT -> LITERAL .)
    TIMES           reduce using rule 82 (APAT -> LITERAL .)
    DIVIDE          reduce using rule 82 (APAT -> LITERAL .)
    POW             reduce using rule 82 (APAT -> LITERAL .)
    EQUALITY        reduce using rule 82 (APAT -> LITERAL .)
    LESS            reduce using rule 82 (APAT -> LITERAL .)
    LEQ             reduce using rule 82 (APAT -> LITERAL .)
    GREATER         reduce using rule 82 (APAT -> LITERAL .)
    GEQ             reduce using rule 82 (APAT -> LITERAL .)
    PIPE            reduce using rule 82 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 82 (APAT -> LITERAL .)
    WILDCARD        reduce using rule 82 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 82 (APAT -> LITERAL .)
    OPEN_SQUARE     reduce using rule 82 (APAT -> LITERAL .)
    INTEGER         reduce using rule 82 (APAT -> LITERAL .)
    FLOAT           reduce using rule 82 (APAT -> LITERAL .)
    CHAR            reduce using rule 82 (APAT -> LITERAL .)
    STRING          reduce using rule 82 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 82 (APAT -> LITERAL .)
    COMMA           reduce using rule 82 (APAT -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 82 (APAT -> LITERAL .)
    ARROW           reduce using rule 82 (APAT -> LITERAL .)


state 30

    (83) APAT -> WILDCARD .

    CONSTRUCTOR     reduce using rule 83 (APAT -> WILDCARD .)
    EQUALS          reduce using rule 83 (APAT -> WILDCARD .)
    BACKTICK        reduce using rule 83 (APAT -> WILDCARD .)
    PLUS            reduce using rule 83 (APAT -> WILDCARD .)
    MINUS           reduce using rule 83 (APAT -> WILDCARD .)
    TIMES           reduce using rule 83 (APAT -> WILDCARD .)
    DIVIDE          reduce using rule 83 (APAT -> WILDCARD .)
    POW             reduce using rule 83 (APAT -> WILDCARD .)
    EQUALITY        reduce using rule 83 (APAT -> WILDCARD .)
    LESS            reduce using rule 83 (APAT -> WILDCARD .)
    LEQ             reduce using rule 83 (APAT -> WILDCARD .)
    GREATER         reduce using rule 83 (APAT -> WILDCARD .)
    GEQ             reduce using rule 83 (APAT -> WILDCARD .)
    PIPE            reduce using rule 83 (APAT -> WILDCARD .)
    IDENTIFIER      reduce using rule 83 (APAT -> WILDCARD .)
    WILDCARD        reduce using rule 83 (APAT -> WILDCARD .)
    OPEN_PAREN      reduce using rule 83 (APAT -> WILDCARD .)
    OPEN_SQUARE     reduce using rule 83 (APAT -> WILDCARD .)
    INTEGER         reduce using rule 83 (APAT -> WILDCARD .)
    FLOAT           reduce using rule 83 (APAT -> WILDCARD .)
    CHAR            reduce using rule 83 (APAT -> WILDCARD .)
    STRING          reduce using rule 83 (APAT -> WILDCARD .)
    CLOSE_PAREN     reduce using rule 83 (APAT -> WILDCARD .)
    COMMA           reduce using rule 83 (APAT -> WILDCARD .)
    CLOSE_SQUARE    reduce using rule 83 (APAT -> WILDCARD .)
    ARROW           reduce using rule 83 (APAT -> WILDCARD .)


state 31

    (86) APAT -> OPEN_SQUARE . PAT_LIST CLOSE_SQUARE
    (88) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (96) PAT_LIST -> . PAT_LIST COMMA PAT
    (97) PAT_LIST -> . PAT
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 76
    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT_LIST                       shift and go to state 75
    PAT                            shift and go to state 77
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 32

    (112) LITERAL -> CHAR .

    CONSTRUCTOR     reduce using rule 112 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 112 (LITERAL -> CHAR .)
    BACKTICK        reduce using rule 112 (LITERAL -> CHAR .)
    PLUS            reduce using rule 112 (LITERAL -> CHAR .)
    MINUS           reduce using rule 112 (LITERAL -> CHAR .)
    TIMES           reduce using rule 112 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 112 (LITERAL -> CHAR .)
    POW             reduce using rule 112 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 112 (LITERAL -> CHAR .)
    LESS            reduce using rule 112 (LITERAL -> CHAR .)
    LEQ             reduce using rule 112 (LITERAL -> CHAR .)
    GREATER         reduce using rule 112 (LITERAL -> CHAR .)
    GEQ             reduce using rule 112 (LITERAL -> CHAR .)
    PIPE            reduce using rule 112 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 112 (LITERAL -> CHAR .)
    WILDCARD        reduce using rule 112 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 112 (LITERAL -> CHAR .)
    OPEN_SQUARE     reduce using rule 112 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 112 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 112 (LITERAL -> CHAR .)
    CHAR            reduce using rule 112 (LITERAL -> CHAR .)
    STRING          reduce using rule 112 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 112 (LITERAL -> CHAR .)
    COMMA           reduce using rule 112 (LITERAL -> CHAR .)
    CLOSE_SQUARE    reduce using rule 112 (LITERAL -> CHAR .)
    WHERE           reduce using rule 112 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 112 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 112 (LITERAL -> CHAR .)
    LAMBDA          reduce using rule 112 (LITERAL -> CHAR .)
    LET             reduce using rule 112 (LITERAL -> CHAR .)
    IF              reduce using rule 112 (LITERAL -> CHAR .)
    MATCH           reduce using rule 112 (LITERAL -> CHAR .)
    ARROW           reduce using rule 112 (LITERAL -> CHAR .)
    THEN            reduce using rule 112 (LITERAL -> CHAR .)
    OF              reduce using rule 112 (LITERAL -> CHAR .)
    ELSE            reduce using rule 112 (LITERAL -> CHAR .)


state 33

    (113) LITERAL -> STRING .

    CONSTRUCTOR     reduce using rule 113 (LITERAL -> STRING .)
    EQUALS          reduce using rule 113 (LITERAL -> STRING .)
    BACKTICK        reduce using rule 113 (LITERAL -> STRING .)
    PLUS            reduce using rule 113 (LITERAL -> STRING .)
    MINUS           reduce using rule 113 (LITERAL -> STRING .)
    TIMES           reduce using rule 113 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 113 (LITERAL -> STRING .)
    POW             reduce using rule 113 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 113 (LITERAL -> STRING .)
    LESS            reduce using rule 113 (LITERAL -> STRING .)
    LEQ             reduce using rule 113 (LITERAL -> STRING .)
    GREATER         reduce using rule 113 (LITERAL -> STRING .)
    GEQ             reduce using rule 113 (LITERAL -> STRING .)
    PIPE            reduce using rule 113 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 113 (LITERAL -> STRING .)
    WILDCARD        reduce using rule 113 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 113 (LITERAL -> STRING .)
    OPEN_SQUARE     reduce using rule 113 (LITERAL -> STRING .)
    INTEGER         reduce using rule 113 (LITERAL -> STRING .)
    FLOAT           reduce using rule 113 (LITERAL -> STRING .)
    CHAR            reduce using rule 113 (LITERAL -> STRING .)
    STRING          reduce using rule 113 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 113 (LITERAL -> STRING .)
    COMMA           reduce using rule 113 (LITERAL -> STRING .)
    CLOSE_SQUARE    reduce using rule 113 (LITERAL -> STRING .)
    WHERE           reduce using rule 113 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 113 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 113 (LITERAL -> STRING .)
    LAMBDA          reduce using rule 113 (LITERAL -> STRING .)
    LET             reduce using rule 113 (LITERAL -> STRING .)
    IF              reduce using rule 113 (LITERAL -> STRING .)
    MATCH           reduce using rule 113 (LITERAL -> STRING .)
    ARROW           reduce using rule 113 (LITERAL -> STRING .)
    THEN            reduce using rule 113 (LITERAL -> STRING .)
    OF              reduce using rule 113 (LITERAL -> STRING .)
    ELSE            reduce using rule 113 (LITERAL -> STRING .)


state 34

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (3) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE
    (5) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 4

    BODY                           shift and go to state 78

state 35

    (3) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (6) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (10) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (11) TOP_DECLARATIONS -> . TOP_DECLARATION
    (8) IMPORT_DECLARATION -> . IMPORT IDENTIFIER ENDSTATEMENT
    (9) IMPORT_DECLARATION -> . IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT
    (12) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
    (13) TOP_DECLARATION -> . DECLARATION
    (18) DECLARATION -> . GEN_DECLARATION
    (19) DECLARATION -> . FUNCTION_LHS RHS
    (20) DECLARATION -> . PAT RHS
    (21) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (22) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (23) GEN_DECLARATION -> . FIXITY OPS
    (24) GEN_DECLARATION -> .
    (40) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (41) FUNCTION_LHS -> . PAT VAROP PAT
    (42) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (27) VARS -> . VARS COMMA IDENTIFIER
    (28) VARS -> . IDENTIFIER
    (29) FIXITY -> . INFIXL
    (30) FIXITY -> . INFIXR
    (31) FIXITY -> . INFIX
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    IMPORT          shift and go to state 10
    NEWTYPE         shift and go to state 12
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 11
    OPEN_PAREN      shift and go to state 21
    INFIXL          shift and go to state 23
    INFIXR          shift and go to state 24
    INFIX           shift and go to state 25
    MINUS           shift and go to state 26
    WILDCARD        shift and go to state 30
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    TOP_DECLARATIONS               shift and go to state 79
    IMPORT_DECLARATION             shift and go to state 80
    TOP_DECLARATION                shift and go to state 9
    DECLARATION                    shift and go to state 13
    GEN_DECLARATION                shift and go to state 14
    FUNCTION_LHS                   shift and go to state 15
    PAT                            shift and go to state 16
    VARS                           shift and go to state 17
    FIXITY                         shift and go to state 18
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 36

    (4) BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 4 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE .)


state 37

    (5) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 5 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 38

    (10) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (12) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
    (13) TOP_DECLARATION -> . DECLARATION
    (18) DECLARATION -> . GEN_DECLARATION
    (19) DECLARATION -> . FUNCTION_LHS RHS
    (20) DECLARATION -> . PAT RHS
    (21) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (22) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (23) GEN_DECLARATION -> . FIXITY OPS
    (24) GEN_DECLARATION -> .
    (40) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (41) FUNCTION_LHS -> . PAT VAROP PAT
    (42) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (27) VARS -> . VARS COMMA IDENTIFIER
    (28) VARS -> . IDENTIFIER
    (29) FIXITY -> . INFIXL
    (30) FIXITY -> . INFIXR
    (31) FIXITY -> . INFIX
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    NEWTYPE         shift and go to state 12
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 11
    OPEN_PAREN      shift and go to state 21
    INFIXL          shift and go to state 23
    INFIXR          shift and go to state 24
    INFIX           shift and go to state 25
    MINUS           shift and go to state 26
    WILDCARD        shift and go to state 30
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    TOP_DECLARATION                shift and go to state 81
    DECLARATION                    shift and go to state 13
    GEN_DECLARATION                shift and go to state 14
    FUNCTION_LHS                   shift and go to state 15
    PAT                            shift and go to state 16
    VARS                           shift and go to state 17
    FIXITY                         shift and go to state 18
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 39

    (8) IMPORT_DECLARATION -> IMPORT IDENTIFIER . ENDSTATEMENT
    (9) IMPORT_DECLARATION -> IMPORT IDENTIFIER . AS IDENTIFIER ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 82
    AS              shift and go to state 83


state 40

    (80) APAT -> IDENTIFIER .

    IDENTIFIER      reduce using rule 80 (APAT -> IDENTIFIER .)
    WILDCARD        reduce using rule 80 (APAT -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 80 (APAT -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 80 (APAT -> IDENTIFIER .)
    INTEGER         reduce using rule 80 (APAT -> IDENTIFIER .)
    FLOAT           reduce using rule 80 (APAT -> IDENTIFIER .)
    CHAR            reduce using rule 80 (APAT -> IDENTIFIER .)
    STRING          reduce using rule 80 (APAT -> IDENTIFIER .)
    EQUALS          reduce using rule 80 (APAT -> IDENTIFIER .)
    PIPE            reduce using rule 80 (APAT -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 80 (APAT -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 80 (APAT -> IDENTIFIER .)
    COMMA           reduce using rule 80 (APAT -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 80 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 80 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 80 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 80 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 80 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 80 (APAT -> IDENTIFIER .)
    POW             reduce using rule 80 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 80 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 80 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 80 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 80 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 80 (APAT -> IDENTIFIER .)
    ARROW           reduce using rule 80 (APAT -> IDENTIFIER .)


state 41

    (40) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (94) APATS -> . APAT APATS
    (95) APATS -> .
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    EQUALS          reduce using rule 95 (APATS -> .)
    PIPE            reduce using rule 95 (APATS -> .)
    CLOSE_PAREN     reduce using rule 95 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 84
    APATS                          shift and go to state 85
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 42

    (84) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (85) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (87) GCON -> OPEN_PAREN . CLOSE_PAREN
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 70
    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 86
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 43

    (12) TOP_DECLARATION -> NEWTYPE TYPENAME . EQUALS TYPENAME ENDSTATEMENT

    EQUALS          shift and go to state 87


state 44

    (19) DECLARATION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 19 (DECLARATION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 19 (DECLARATION -> FUNCTION_LHS RHS .)


state 45

    (43) RHS -> EQUALS . EXP
    (44) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 88
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 46

    (45) RHS -> GDRHS .
    (46) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 45 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 45 (RHS -> GDRHS .)
    WHERE           shift and go to state 103


state 47

    (47) GDRHS -> GUARDS . EQUALS EXP
    (48) GDRHS -> GUARDS . EQUALS EXP GDRHS

    EQUALS          shift and go to state 104


state 48

    (49) GUARDS -> PIPE . GUARD_LIST
    (50) GUARD_LIST -> . GUARD_LIST GUARD
    (51) GUARD_LIST -> . GUARD
    (52) GUARD -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    GUARD_LIST                     shift and go to state 105
    GUARD                          shift and go to state 106
    INFIX_EXP                      shift and go to state 107
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 49

    (20) DECLARATION -> PAT RHS .

    CLOSE_BRACE     reduce using rule 20 (DECLARATION -> PAT RHS .)
    ENDSTATEMENT    reduce using rule 20 (DECLARATION -> PAT RHS .)


state 50

    (41) FUNCTION_LHS -> PAT VAROP . PAT
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 108
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 51

    (89) VAROP -> VARSYM .

    MINUS           reduce using rule 89 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 89 (VAROP -> VARSYM .)
    WILDCARD        reduce using rule 89 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 89 (VAROP -> VARSYM .)
    OPEN_SQUARE     reduce using rule 89 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 89 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 89 (VAROP -> VARSYM .)
    CHAR            reduce using rule 89 (VAROP -> VARSYM .)
    STRING          reduce using rule 89 (VAROP -> VARSYM .)
    COMMA           reduce using rule 89 (VAROP -> VARSYM .)
    CLOSE_BRACE     reduce using rule 89 (VAROP -> VARSYM .)
    ENDSTATEMENT    reduce using rule 89 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 89 (VAROP -> VARSYM .)
    LET             reduce using rule 89 (VAROP -> VARSYM .)
    IF              reduce using rule 89 (VAROP -> VARSYM .)
    MATCH           reduce using rule 89 (VAROP -> VARSYM .)


state 52

    (90) VAROP -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 109


state 53

    (98) VARSYM -> PLUS .

    MINUS           reduce using rule 98 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 98 (VARSYM -> PLUS .)
    WILDCARD        reduce using rule 98 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 98 (VARSYM -> PLUS .)
    OPEN_SQUARE     reduce using rule 98 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 98 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 98 (VARSYM -> PLUS .)
    CHAR            reduce using rule 98 (VARSYM -> PLUS .)
    STRING          reduce using rule 98 (VARSYM -> PLUS .)
    COMMA           reduce using rule 98 (VARSYM -> PLUS .)
    CLOSE_BRACE     reduce using rule 98 (VARSYM -> PLUS .)
    ENDSTATEMENT    reduce using rule 98 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 98 (VARSYM -> PLUS .)
    LET             reduce using rule 98 (VARSYM -> PLUS .)
    IF              reduce using rule 98 (VARSYM -> PLUS .)
    MATCH           reduce using rule 98 (VARSYM -> PLUS .)


state 54

    (99) VARSYM -> MINUS .

    MINUS           reduce using rule 99 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 99 (VARSYM -> MINUS .)
    WILDCARD        reduce using rule 99 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 99 (VARSYM -> MINUS .)
    OPEN_SQUARE     reduce using rule 99 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 99 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 99 (VARSYM -> MINUS .)
    CHAR            reduce using rule 99 (VARSYM -> MINUS .)
    STRING          reduce using rule 99 (VARSYM -> MINUS .)
    COMMA           reduce using rule 99 (VARSYM -> MINUS .)
    CLOSE_BRACE     reduce using rule 99 (VARSYM -> MINUS .)
    ENDSTATEMENT    reduce using rule 99 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 99 (VARSYM -> MINUS .)
    LET             reduce using rule 99 (VARSYM -> MINUS .)
    IF              reduce using rule 99 (VARSYM -> MINUS .)
    MATCH           reduce using rule 99 (VARSYM -> MINUS .)


state 55

    (100) VARSYM -> TIMES .

    MINUS           reduce using rule 100 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 100 (VARSYM -> TIMES .)
    WILDCARD        reduce using rule 100 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 100 (VARSYM -> TIMES .)
    OPEN_SQUARE     reduce using rule 100 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 100 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 100 (VARSYM -> TIMES .)
    CHAR            reduce using rule 100 (VARSYM -> TIMES .)
    STRING          reduce using rule 100 (VARSYM -> TIMES .)
    COMMA           reduce using rule 100 (VARSYM -> TIMES .)
    CLOSE_BRACE     reduce using rule 100 (VARSYM -> TIMES .)
    ENDSTATEMENT    reduce using rule 100 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 100 (VARSYM -> TIMES .)
    LET             reduce using rule 100 (VARSYM -> TIMES .)
    IF              reduce using rule 100 (VARSYM -> TIMES .)
    MATCH           reduce using rule 100 (VARSYM -> TIMES .)


state 56

    (101) VARSYM -> DIVIDE .

    MINUS           reduce using rule 101 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 101 (VARSYM -> DIVIDE .)
    WILDCARD        reduce using rule 101 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 101 (VARSYM -> DIVIDE .)
    OPEN_SQUARE     reduce using rule 101 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 101 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 101 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 101 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 101 (VARSYM -> DIVIDE .)
    COMMA           reduce using rule 101 (VARSYM -> DIVIDE .)
    CLOSE_BRACE     reduce using rule 101 (VARSYM -> DIVIDE .)
    ENDSTATEMENT    reduce using rule 101 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 101 (VARSYM -> DIVIDE .)
    LET             reduce using rule 101 (VARSYM -> DIVIDE .)
    IF              reduce using rule 101 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 101 (VARSYM -> DIVIDE .)


state 57

    (102) VARSYM -> POW .

    MINUS           reduce using rule 102 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 102 (VARSYM -> POW .)
    WILDCARD        reduce using rule 102 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 102 (VARSYM -> POW .)
    OPEN_SQUARE     reduce using rule 102 (VARSYM -> POW .)
    INTEGER         reduce using rule 102 (VARSYM -> POW .)
    FLOAT           reduce using rule 102 (VARSYM -> POW .)
    CHAR            reduce using rule 102 (VARSYM -> POW .)
    STRING          reduce using rule 102 (VARSYM -> POW .)
    COMMA           reduce using rule 102 (VARSYM -> POW .)
    CLOSE_BRACE     reduce using rule 102 (VARSYM -> POW .)
    ENDSTATEMENT    reduce using rule 102 (VARSYM -> POW .)
    LAMBDA          reduce using rule 102 (VARSYM -> POW .)
    LET             reduce using rule 102 (VARSYM -> POW .)
    IF              reduce using rule 102 (VARSYM -> POW .)
    MATCH           reduce using rule 102 (VARSYM -> POW .)


state 58

    (103) VARSYM -> EQUALITY .

    MINUS           reduce using rule 103 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 103 (VARSYM -> EQUALITY .)
    WILDCARD        reduce using rule 103 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 103 (VARSYM -> EQUALITY .)
    OPEN_SQUARE     reduce using rule 103 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 103 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 103 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 103 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 103 (VARSYM -> EQUALITY .)
    COMMA           reduce using rule 103 (VARSYM -> EQUALITY .)
    CLOSE_BRACE     reduce using rule 103 (VARSYM -> EQUALITY .)
    ENDSTATEMENT    reduce using rule 103 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 103 (VARSYM -> EQUALITY .)
    LET             reduce using rule 103 (VARSYM -> EQUALITY .)
    IF              reduce using rule 103 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 103 (VARSYM -> EQUALITY .)


state 59

    (104) VARSYM -> LESS .

    MINUS           reduce using rule 104 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 104 (VARSYM -> LESS .)
    WILDCARD        reduce using rule 104 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 104 (VARSYM -> LESS .)
    OPEN_SQUARE     reduce using rule 104 (VARSYM -> LESS .)
    INTEGER         reduce using rule 104 (VARSYM -> LESS .)
    FLOAT           reduce using rule 104 (VARSYM -> LESS .)
    CHAR            reduce using rule 104 (VARSYM -> LESS .)
    STRING          reduce using rule 104 (VARSYM -> LESS .)
    COMMA           reduce using rule 104 (VARSYM -> LESS .)
    CLOSE_BRACE     reduce using rule 104 (VARSYM -> LESS .)
    ENDSTATEMENT    reduce using rule 104 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 104 (VARSYM -> LESS .)
    LET             reduce using rule 104 (VARSYM -> LESS .)
    IF              reduce using rule 104 (VARSYM -> LESS .)
    MATCH           reduce using rule 104 (VARSYM -> LESS .)


state 60

    (105) VARSYM -> LEQ .

    MINUS           reduce using rule 105 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 105 (VARSYM -> LEQ .)
    WILDCARD        reduce using rule 105 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 105 (VARSYM -> LEQ .)
    OPEN_SQUARE     reduce using rule 105 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 105 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 105 (VARSYM -> LEQ .)
    CHAR            reduce using rule 105 (VARSYM -> LEQ .)
    STRING          reduce using rule 105 (VARSYM -> LEQ .)
    COMMA           reduce using rule 105 (VARSYM -> LEQ .)
    CLOSE_BRACE     reduce using rule 105 (VARSYM -> LEQ .)
    ENDSTATEMENT    reduce using rule 105 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 105 (VARSYM -> LEQ .)
    LET             reduce using rule 105 (VARSYM -> LEQ .)
    IF              reduce using rule 105 (VARSYM -> LEQ .)
    MATCH           reduce using rule 105 (VARSYM -> LEQ .)


state 61

    (106) VARSYM -> GREATER .

    MINUS           reduce using rule 106 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 106 (VARSYM -> GREATER .)
    WILDCARD        reduce using rule 106 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 106 (VARSYM -> GREATER .)
    OPEN_SQUARE     reduce using rule 106 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 106 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 106 (VARSYM -> GREATER .)
    CHAR            reduce using rule 106 (VARSYM -> GREATER .)
    STRING          reduce using rule 106 (VARSYM -> GREATER .)
    COMMA           reduce using rule 106 (VARSYM -> GREATER .)
    CLOSE_BRACE     reduce using rule 106 (VARSYM -> GREATER .)
    ENDSTATEMENT    reduce using rule 106 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 106 (VARSYM -> GREATER .)
    LET             reduce using rule 106 (VARSYM -> GREATER .)
    IF              reduce using rule 106 (VARSYM -> GREATER .)
    MATCH           reduce using rule 106 (VARSYM -> GREATER .)


state 62

    (107) VARSYM -> GEQ .

    MINUS           reduce using rule 107 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 107 (VARSYM -> GEQ .)
    WILDCARD        reduce using rule 107 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 107 (VARSYM -> GEQ .)
    OPEN_SQUARE     reduce using rule 107 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 107 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 107 (VARSYM -> GEQ .)
    CHAR            reduce using rule 107 (VARSYM -> GEQ .)
    STRING          reduce using rule 107 (VARSYM -> GEQ .)
    COMMA           reduce using rule 107 (VARSYM -> GEQ .)
    CLOSE_BRACE     reduce using rule 107 (VARSYM -> GEQ .)
    ENDSTATEMENT    reduce using rule 107 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 107 (VARSYM -> GEQ .)
    LET             reduce using rule 107 (VARSYM -> GEQ .)
    IF              reduce using rule 107 (VARSYM -> GEQ .)
    MATCH           reduce using rule 107 (VARSYM -> GEQ .)


state 63

    (21) GEN_DECLARATION -> VARS TYPESIG . TYPE
    (32) TYPE -> . BTYPE
    (33) TYPE -> . BTYPE ARROW TYPE
    (34) BTYPE -> . ATYPE
    (35) BTYPE -> . BTYPE ATYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (39) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 113
    OPEN_PAREN      shift and go to state 114
    OPEN_SQUARE     shift and go to state 115

    TYPE                           shift and go to state 110
    BTYPE                          shift and go to state 111
    ATYPE                          shift and go to state 112

state 64

    (27) VARS -> VARS COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 116


state 65

    (22) GEN_DECLARATION -> FIXITY INTEGER . OPS
    (25) OPS -> . OPS COMMA OP
    (26) OPS -> . OP
    (91) OP -> . VAROP
    (89) VAROP -> . VARSYM
    (90) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (98) VARSYM -> . PLUS
    (99) VARSYM -> . MINUS
    (100) VARSYM -> . TIMES
    (101) VARSYM -> . DIVIDE
    (102) VARSYM -> . POW
    (103) VARSYM -> . EQUALITY
    (104) VARSYM -> . LESS
    (105) VARSYM -> . LEQ
    (106) VARSYM -> . GREATER
    (107) VARSYM -> . GEQ

    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    OPS                            shift and go to state 117
    OP                             shift and go to state 67
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 66

    (23) GEN_DECLARATION -> FIXITY OPS .
    (25) OPS -> OPS . COMMA OP

    CLOSE_BRACE     reduce using rule 23 (GEN_DECLARATION -> FIXITY OPS .)
    ENDSTATEMENT    reduce using rule 23 (GEN_DECLARATION -> FIXITY OPS .)
    COMMA           shift and go to state 118


state 67

    (26) OPS -> OP .

    COMMA           reduce using rule 26 (OPS -> OP .)
    CLOSE_BRACE     reduce using rule 26 (OPS -> OP .)
    ENDSTATEMENT    reduce using rule 26 (OPS -> OP .)


state 68

    (91) OP -> VAROP .

    COMMA           reduce using rule 91 (OP -> VAROP .)
    CLOSE_BRACE     reduce using rule 91 (OP -> VAROP .)
    ENDSTATEMENT    reduce using rule 91 (OP -> VAROP .)
    MINUS           reduce using rule 91 (OP -> VAROP .)
    LAMBDA          reduce using rule 91 (OP -> VAROP .)
    LET             reduce using rule 91 (OP -> VAROP .)
    IF              reduce using rule 91 (OP -> VAROP .)
    MATCH           reduce using rule 91 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 91 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 91 (OP -> VAROP .)
    OPEN_SQUARE     reduce using rule 91 (OP -> VAROP .)
    INTEGER         reduce using rule 91 (OP -> VAROP .)
    FLOAT           reduce using rule 91 (OP -> VAROP .)
    CHAR            reduce using rule 91 (OP -> VAROP .)
    STRING          reduce using rule 91 (OP -> VAROP .)


state 69

    (42) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 119


state 70

    (87) GCON -> OPEN_PAREN CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BACKTICK        reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TIMES           reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    POW             reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALITY        reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LESS            reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LEQ             reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GREATER         reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GEQ             reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PIPE            reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WILDCARD        reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WHERE           reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LAMBDA          reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LET             reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IF              reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MATCH           reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    THEN            reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OF              reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 87 (GCON -> OPEN_PAREN CLOSE_PAREN .)


state 71

    (84) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (85) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN
    (41) FUNCTION_LHS -> PAT . VAROP PAT
    (89) VAROP -> . VARSYM
    (90) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (98) VARSYM -> . PLUS
    (99) VARSYM -> . MINUS
    (100) VARSYM -> . TIMES
    (101) VARSYM -> . DIVIDE
    (102) VARSYM -> . POW
    (103) VARSYM -> . EQUALITY
    (104) VARSYM -> . LESS
    (105) VARSYM -> . LEQ
    (106) VARSYM -> . GREATER
    (107) VARSYM -> . GEQ

    CLOSE_PAREN     shift and go to state 120
    COMMA           shift and go to state 121
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    VAROP                          shift and go to state 50
    VARSYM                         shift and go to state 51

state 72

    (40) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (80) APAT -> IDENTIFIER .
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    CONSTRUCTOR     reduce using rule 80 (APAT -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 80 (APAT -> IDENTIFIER .)
    COMMA           reduce using rule 80 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 80 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 80 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 80 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 80 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 80 (APAT -> IDENTIFIER .)
    POW             reduce using rule 80 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 80 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 80 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 80 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 80 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 80 (APAT -> IDENTIFIER .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 41
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 73

    (75) PAT -> LPAT CONSTRUCTOR . PAT
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    LPAT                           shift and go to state 22
    PAT                            shift and go to state 122
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 74

    (78) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (79) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 123
    FLOAT           shift and go to state 124


state 75

    (86) APAT -> OPEN_SQUARE PAT_LIST . CLOSE_SQUARE
    (96) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_SQUARE    shift and go to state 125
    COMMA           shift and go to state 126


state 76

    (88) GCON -> OPEN_SQUARE CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BACKTICK        reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TIMES           reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    POW             reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALITY        reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LEQ             reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GEQ             reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PIPE            reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WILDCARD        reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INTEGER         reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CHAR            reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WHERE           reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LAMBDA          reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LET             reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IF              reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MATCH           reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ARROW           reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    THEN            reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OF              reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ELSE            reduce using rule 88 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)


state 77

    (97) PAT_LIST -> PAT .

    CLOSE_SQUARE    reduce using rule 97 (PAT_LIST -> PAT .)
    COMMA           reduce using rule 97 (PAT_LIST -> PAT .)
    CLOSE_PAREN     reduce using rule 97 (PAT_LIST -> PAT .)


state 78

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 79

    (3) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (10) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 127
    ENDSTATEMENT    shift and go to state 38


state 80

    (6) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)
    CLOSE_BRACE     reduce using rule 6 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 81

    (10) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 82

    (8) IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT .

    ENDSTATEMENT    reduce using rule 8 (IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT .)
    CLOSE_BRACE     reduce using rule 8 (IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT .)


state 83

    (9) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS . IDENTIFIER ENDSTATEMENT

    IDENTIFIER      shift and go to state 128


state 84

    (94) APATS -> APAT . APATS
    (94) APATS -> . APAT APATS
    (95) APATS -> .
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    EQUALS          reduce using rule 95 (APATS -> .)
    PIPE            reduce using rule 95 (APATS -> .)
    CLOSE_PAREN     reduce using rule 95 (APATS -> .)
    ARROW           reduce using rule 95 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 84
    APATS                          shift and go to state 129
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 85

    (40) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 40 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    PIPE            reduce using rule 40 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 40 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 86

    (84) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (85) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 120
    COMMA           shift and go to state 121


state 87

    (12) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS . TYPENAME ENDSTATEMENT

    TYPENAME        shift and go to state 130


state 88

    (43) RHS -> EQUALS EXP .
    (44) RHS -> EQUALS EXP . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 43 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 43 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 131


state 89

    (53) EXP -> INFIX_EXP .

    WHERE           reduce using rule 53 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 53 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 53 (EXP -> INFIX_EXP .)
    THEN            reduce using rule 53 (EXP -> INFIX_EXP .)
    OF              reduce using rule 53 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 53 (EXP -> INFIX_EXP .)
    COMMA           reduce using rule 53 (EXP -> INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 53 (EXP -> INFIX_EXP .)
    PIPE            reduce using rule 53 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 53 (EXP -> INFIX_EXP .)
    LAMBDA          reduce using rule 53 (EXP -> INFIX_EXP .)
    LET             reduce using rule 53 (EXP -> INFIX_EXP .)
    IF              reduce using rule 53 (EXP -> INFIX_EXP .)
    MATCH           reduce using rule 53 (EXP -> INFIX_EXP .)
    IDENTIFIER      reduce using rule 53 (EXP -> INFIX_EXP .)
    OPEN_PAREN      reduce using rule 53 (EXP -> INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 53 (EXP -> INFIX_EXP .)
    INTEGER         reduce using rule 53 (EXP -> INFIX_EXP .)
    FLOAT           reduce using rule 53 (EXP -> INFIX_EXP .)
    CHAR            reduce using rule 53 (EXP -> INFIX_EXP .)
    STRING          reduce using rule 53 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 53 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 53 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 53 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 53 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 53 (EXP -> INFIX_EXP .)
    POW             reduce using rule 53 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 53 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 53 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 53 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 53 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 53 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 53 (EXP -> INFIX_EXP .)
    WILDCARD        reduce using rule 53 (EXP -> INFIX_EXP .)


state 90

    (54) INFIX_EXP -> LEXP . OP INFIX_EXP
    (56) INFIX_EXP -> LEXP .
    (91) OP -> . VAROP
    (89) VAROP -> . VARSYM
    (90) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (98) VARSYM -> . PLUS
    (99) VARSYM -> . MINUS
    (100) VARSYM -> . TIMES
    (101) VARSYM -> . DIVIDE
    (102) VARSYM -> . POW
    (103) VARSYM -> . EQUALITY
    (104) VARSYM -> . LESS
    (105) VARSYM -> . LEQ
    (106) VARSYM -> . GREATER
    (107) VARSYM -> . GEQ

  ! shift/reduce conflict for BACKTICK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    WHERE           reduce using rule 56 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 56 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 56 (INFIX_EXP -> LEXP .)
    LAMBDA          reduce using rule 56 (INFIX_EXP -> LEXP .)
    LET             reduce using rule 56 (INFIX_EXP -> LEXP .)
    IF              reduce using rule 56 (INFIX_EXP -> LEXP .)
    MATCH           reduce using rule 56 (INFIX_EXP -> LEXP .)
    IDENTIFIER      reduce using rule 56 (INFIX_EXP -> LEXP .)
    OPEN_PAREN      reduce using rule 56 (INFIX_EXP -> LEXP .)
    OPEN_SQUARE     reduce using rule 56 (INFIX_EXP -> LEXP .)
    INTEGER         reduce using rule 56 (INFIX_EXP -> LEXP .)
    FLOAT           reduce using rule 56 (INFIX_EXP -> LEXP .)
    CHAR            reduce using rule 56 (INFIX_EXP -> LEXP .)
    STRING          reduce using rule 56 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 56 (INFIX_EXP -> LEXP .)
    THEN            reduce using rule 56 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 56 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 56 (INFIX_EXP -> LEXP .)
    COMMA           reduce using rule 56 (INFIX_EXP -> LEXP .)
    CLOSE_SQUARE    reduce using rule 56 (INFIX_EXP -> LEXP .)
    PIPE            reduce using rule 56 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 56 (INFIX_EXP -> LEXP .)
    WILDCARD        reduce using rule 56 (INFIX_EXP -> LEXP .)
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

  ! MINUS           [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! BACKTICK        [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! PLUS            [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 56 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 132
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 91

    (55) INFIX_EXP -> MINUS . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    INFIX_EXP                      shift and go to state 133
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 92

    (57) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 134
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 93

    (58) LEXP -> LET . DECLARATIONS IN EXP
    (14) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (15) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 136

    DECLARATIONS                   shift and go to state 135

state 94

    (59) LEXP -> IF . EXP THEN EXP ELSE EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 137
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 95

    (60) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 138
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 96

    (61) LEXP -> FEXP .
    (62) FEXP -> FEXP . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    BACKTICK        reduce using rule 61 (LEXP -> FEXP .)
    PLUS            reduce using rule 61 (LEXP -> FEXP .)
    MINUS           reduce using rule 61 (LEXP -> FEXP .)
    TIMES           reduce using rule 61 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 61 (LEXP -> FEXP .)
    POW             reduce using rule 61 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 61 (LEXP -> FEXP .)
    LESS            reduce using rule 61 (LEXP -> FEXP .)
    LEQ             reduce using rule 61 (LEXP -> FEXP .)
    GREATER         reduce using rule 61 (LEXP -> FEXP .)
    GEQ             reduce using rule 61 (LEXP -> FEXP .)
    WHERE           reduce using rule 61 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 61 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 61 (LEXP -> FEXP .)
    LAMBDA          reduce using rule 61 (LEXP -> FEXP .)
    LET             reduce using rule 61 (LEXP -> FEXP .)
    IF              reduce using rule 61 (LEXP -> FEXP .)
    MATCH           reduce using rule 61 (LEXP -> FEXP .)
    EQUALS          reduce using rule 61 (LEXP -> FEXP .)
    THEN            reduce using rule 61 (LEXP -> FEXP .)
    OF              reduce using rule 61 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 61 (LEXP -> FEXP .)
    COMMA           reduce using rule 61 (LEXP -> FEXP .)
    CLOSE_SQUARE    reduce using rule 61 (LEXP -> FEXP .)
    PIPE            reduce using rule 61 (LEXP -> FEXP .)
    ELSE            reduce using rule 61 (LEXP -> FEXP .)
    WILDCARD        reduce using rule 61 (LEXP -> FEXP .)
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

  ! IDENTIFIER      [ reduce using rule 61 (LEXP -> FEXP .) ]
  ! OPEN_PAREN      [ reduce using rule 61 (LEXP -> FEXP .) ]
  ! OPEN_SQUARE     [ reduce using rule 61 (LEXP -> FEXP .) ]
  ! INTEGER         [ reduce using rule 61 (LEXP -> FEXP .) ]
  ! FLOAT           [ reduce using rule 61 (LEXP -> FEXP .) ]
  ! CHAR            [ reduce using rule 61 (LEXP -> FEXP .) ]
  ! STRING          [ reduce using rule 61 (LEXP -> FEXP .) ]

    AEXP                           shift and go to state 139
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 97

    (63) FEXP -> AEXP .

    IDENTIFIER      reduce using rule 63 (FEXP -> AEXP .)
    OPEN_PAREN      reduce using rule 63 (FEXP -> AEXP .)
    OPEN_SQUARE     reduce using rule 63 (FEXP -> AEXP .)
    INTEGER         reduce using rule 63 (FEXP -> AEXP .)
    FLOAT           reduce using rule 63 (FEXP -> AEXP .)
    CHAR            reduce using rule 63 (FEXP -> AEXP .)
    STRING          reduce using rule 63 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 63 (FEXP -> AEXP .)
    PLUS            reduce using rule 63 (FEXP -> AEXP .)
    MINUS           reduce using rule 63 (FEXP -> AEXP .)
    TIMES           reduce using rule 63 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 63 (FEXP -> AEXP .)
    POW             reduce using rule 63 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 63 (FEXP -> AEXP .)
    LESS            reduce using rule 63 (FEXP -> AEXP .)
    LEQ             reduce using rule 63 (FEXP -> AEXP .)
    GREATER         reduce using rule 63 (FEXP -> AEXP .)
    GEQ             reduce using rule 63 (FEXP -> AEXP .)
    WHERE           reduce using rule 63 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 63 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 63 (FEXP -> AEXP .)
    LAMBDA          reduce using rule 63 (FEXP -> AEXP .)
    LET             reduce using rule 63 (FEXP -> AEXP .)
    IF              reduce using rule 63 (FEXP -> AEXP .)
    MATCH           reduce using rule 63 (FEXP -> AEXP .)
    EQUALS          reduce using rule 63 (FEXP -> AEXP .)
    THEN            reduce using rule 63 (FEXP -> AEXP .)
    OF              reduce using rule 63 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 63 (FEXP -> AEXP .)
    COMMA           reduce using rule 63 (FEXP -> AEXP .)
    CLOSE_SQUARE    reduce using rule 63 (FEXP -> AEXP .)
    PIPE            reduce using rule 63 (FEXP -> AEXP .)
    ELSE            reduce using rule 63 (FEXP -> AEXP .)
    WILDCARD        reduce using rule 63 (FEXP -> AEXP .)


state 98

    (64) AEXP -> IDENTIFIER .

    IDENTIFIER      reduce using rule 64 (AEXP -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 64 (AEXP -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 64 (AEXP -> IDENTIFIER .)
    INTEGER         reduce using rule 64 (AEXP -> IDENTIFIER .)
    FLOAT           reduce using rule 64 (AEXP -> IDENTIFIER .)
    CHAR            reduce using rule 64 (AEXP -> IDENTIFIER .)
    STRING          reduce using rule 64 (AEXP -> IDENTIFIER .)
    BACKTICK        reduce using rule 64 (AEXP -> IDENTIFIER .)
    PLUS            reduce using rule 64 (AEXP -> IDENTIFIER .)
    MINUS           reduce using rule 64 (AEXP -> IDENTIFIER .)
    TIMES           reduce using rule 64 (AEXP -> IDENTIFIER .)
    DIVIDE          reduce using rule 64 (AEXP -> IDENTIFIER .)
    POW             reduce using rule 64 (AEXP -> IDENTIFIER .)
    EQUALITY        reduce using rule 64 (AEXP -> IDENTIFIER .)
    LESS            reduce using rule 64 (AEXP -> IDENTIFIER .)
    LEQ             reduce using rule 64 (AEXP -> IDENTIFIER .)
    GREATER         reduce using rule 64 (AEXP -> IDENTIFIER .)
    GEQ             reduce using rule 64 (AEXP -> IDENTIFIER .)
    WHERE           reduce using rule 64 (AEXP -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 64 (AEXP -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 64 (AEXP -> IDENTIFIER .)
    LAMBDA          reduce using rule 64 (AEXP -> IDENTIFIER .)
    LET             reduce using rule 64 (AEXP -> IDENTIFIER .)
    IF              reduce using rule 64 (AEXP -> IDENTIFIER .)
    MATCH           reduce using rule 64 (AEXP -> IDENTIFIER .)
    EQUALS          reduce using rule 64 (AEXP -> IDENTIFIER .)
    THEN            reduce using rule 64 (AEXP -> IDENTIFIER .)
    OF              reduce using rule 64 (AEXP -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 64 (AEXP -> IDENTIFIER .)
    COMMA           reduce using rule 64 (AEXP -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 64 (AEXP -> IDENTIFIER .)
    PIPE            reduce using rule 64 (AEXP -> IDENTIFIER .)
    ELSE            reduce using rule 64 (AEXP -> IDENTIFIER .)
    WILDCARD        reduce using rule 64 (AEXP -> IDENTIFIER .)


state 99

    (65) AEXP -> GCON .

    IDENTIFIER      reduce using rule 65 (AEXP -> GCON .)
    OPEN_PAREN      reduce using rule 65 (AEXP -> GCON .)
    OPEN_SQUARE     reduce using rule 65 (AEXP -> GCON .)
    INTEGER         reduce using rule 65 (AEXP -> GCON .)
    FLOAT           reduce using rule 65 (AEXP -> GCON .)
    CHAR            reduce using rule 65 (AEXP -> GCON .)
    STRING          reduce using rule 65 (AEXP -> GCON .)
    BACKTICK        reduce using rule 65 (AEXP -> GCON .)
    PLUS            reduce using rule 65 (AEXP -> GCON .)
    MINUS           reduce using rule 65 (AEXP -> GCON .)
    TIMES           reduce using rule 65 (AEXP -> GCON .)
    DIVIDE          reduce using rule 65 (AEXP -> GCON .)
    POW             reduce using rule 65 (AEXP -> GCON .)
    EQUALITY        reduce using rule 65 (AEXP -> GCON .)
    LESS            reduce using rule 65 (AEXP -> GCON .)
    LEQ             reduce using rule 65 (AEXP -> GCON .)
    GREATER         reduce using rule 65 (AEXP -> GCON .)
    GEQ             reduce using rule 65 (AEXP -> GCON .)
    WHERE           reduce using rule 65 (AEXP -> GCON .)
    CLOSE_BRACE     reduce using rule 65 (AEXP -> GCON .)
    ENDSTATEMENT    reduce using rule 65 (AEXP -> GCON .)
    LAMBDA          reduce using rule 65 (AEXP -> GCON .)
    LET             reduce using rule 65 (AEXP -> GCON .)
    IF              reduce using rule 65 (AEXP -> GCON .)
    MATCH           reduce using rule 65 (AEXP -> GCON .)
    EQUALS          reduce using rule 65 (AEXP -> GCON .)
    THEN            reduce using rule 65 (AEXP -> GCON .)
    OF              reduce using rule 65 (AEXP -> GCON .)
    CLOSE_PAREN     reduce using rule 65 (AEXP -> GCON .)
    COMMA           reduce using rule 65 (AEXP -> GCON .)
    CLOSE_SQUARE    reduce using rule 65 (AEXP -> GCON .)
    PIPE            reduce using rule 65 (AEXP -> GCON .)
    ELSE            reduce using rule 65 (AEXP -> GCON .)
    WILDCARD        reduce using rule 65 (AEXP -> GCON .)


state 100

    (66) AEXP -> LITERAL .

    IDENTIFIER      reduce using rule 66 (AEXP -> LITERAL .)
    OPEN_PAREN      reduce using rule 66 (AEXP -> LITERAL .)
    OPEN_SQUARE     reduce using rule 66 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 66 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 66 (AEXP -> LITERAL .)
    CHAR            reduce using rule 66 (AEXP -> LITERAL .)
    STRING          reduce using rule 66 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 66 (AEXP -> LITERAL .)
    PLUS            reduce using rule 66 (AEXP -> LITERAL .)
    MINUS           reduce using rule 66 (AEXP -> LITERAL .)
    TIMES           reduce using rule 66 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 66 (AEXP -> LITERAL .)
    POW             reduce using rule 66 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 66 (AEXP -> LITERAL .)
    LESS            reduce using rule 66 (AEXP -> LITERAL .)
    LEQ             reduce using rule 66 (AEXP -> LITERAL .)
    GREATER         reduce using rule 66 (AEXP -> LITERAL .)
    GEQ             reduce using rule 66 (AEXP -> LITERAL .)
    WHERE           reduce using rule 66 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 66 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 66 (AEXP -> LITERAL .)
    LAMBDA          reduce using rule 66 (AEXP -> LITERAL .)
    LET             reduce using rule 66 (AEXP -> LITERAL .)
    IF              reduce using rule 66 (AEXP -> LITERAL .)
    MATCH           reduce using rule 66 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 66 (AEXP -> LITERAL .)
    THEN            reduce using rule 66 (AEXP -> LITERAL .)
    OF              reduce using rule 66 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 66 (AEXP -> LITERAL .)
    COMMA           reduce using rule 66 (AEXP -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 66 (AEXP -> LITERAL .)
    PIPE            reduce using rule 66 (AEXP -> LITERAL .)
    ELSE            reduce using rule 66 (AEXP -> LITERAL .)
    WILDCARD        reduce using rule 66 (AEXP -> LITERAL .)


state 101

    (67) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (68) AEXP -> OPEN_PAREN . EXP COMMA EXP_LIST CLOSE_PAREN
    (87) GCON -> OPEN_PAREN . CLOSE_PAREN
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 70
    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 140
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 102

    (69) AEXP -> OPEN_SQUARE . EXP CLOSE_SQUARE
    (70) AEXP -> OPEN_SQUARE . EXP COMMA EXP_LIST CLOSE_SQUARE
    (88) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 76
    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 141
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 103

    (46) RHS -> GDRHS WHERE . DECLARATIONS
    (14) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (15) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 136

    DECLARATIONS                   shift and go to state 142

state 104

    (47) GDRHS -> GUARDS EQUALS . EXP
    (48) GDRHS -> GUARDS EQUALS . EXP GDRHS
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 143
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 105

    (49) GUARDS -> PIPE GUARD_LIST .
    (50) GUARD_LIST -> GUARD_LIST . GUARD
    (52) GUARD -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    EQUALS          reduce using rule 49 (GUARDS -> PIPE GUARD_LIST .)
    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    GUARD                          shift and go to state 144
    INFIX_EXP                      shift and go to state 107
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 106

    (51) GUARD_LIST -> GUARD .

    MINUS           reduce using rule 51 (GUARD_LIST -> GUARD .)
    LAMBDA          reduce using rule 51 (GUARD_LIST -> GUARD .)
    LET             reduce using rule 51 (GUARD_LIST -> GUARD .)
    IF              reduce using rule 51 (GUARD_LIST -> GUARD .)
    MATCH           reduce using rule 51 (GUARD_LIST -> GUARD .)
    IDENTIFIER      reduce using rule 51 (GUARD_LIST -> GUARD .)
    OPEN_PAREN      reduce using rule 51 (GUARD_LIST -> GUARD .)
    OPEN_SQUARE     reduce using rule 51 (GUARD_LIST -> GUARD .)
    INTEGER         reduce using rule 51 (GUARD_LIST -> GUARD .)
    FLOAT           reduce using rule 51 (GUARD_LIST -> GUARD .)
    CHAR            reduce using rule 51 (GUARD_LIST -> GUARD .)
    STRING          reduce using rule 51 (GUARD_LIST -> GUARD .)
    EQUALS          reduce using rule 51 (GUARD_LIST -> GUARD .)


state 107

    (52) GUARD -> INFIX_EXP .

    MINUS           reduce using rule 52 (GUARD -> INFIX_EXP .)
    LAMBDA          reduce using rule 52 (GUARD -> INFIX_EXP .)
    LET             reduce using rule 52 (GUARD -> INFIX_EXP .)
    IF              reduce using rule 52 (GUARD -> INFIX_EXP .)
    MATCH           reduce using rule 52 (GUARD -> INFIX_EXP .)
    IDENTIFIER      reduce using rule 52 (GUARD -> INFIX_EXP .)
    OPEN_PAREN      reduce using rule 52 (GUARD -> INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 52 (GUARD -> INFIX_EXP .)
    INTEGER         reduce using rule 52 (GUARD -> INFIX_EXP .)
    FLOAT           reduce using rule 52 (GUARD -> INFIX_EXP .)
    CHAR            reduce using rule 52 (GUARD -> INFIX_EXP .)
    STRING          reduce using rule 52 (GUARD -> INFIX_EXP .)
    EQUALS          reduce using rule 52 (GUARD -> INFIX_EXP .)


state 108

    (41) FUNCTION_LHS -> PAT VAROP PAT .

    EQUALS          reduce using rule 41 (FUNCTION_LHS -> PAT VAROP PAT .)
    PIPE            reduce using rule 41 (FUNCTION_LHS -> PAT VAROP PAT .)
    CLOSE_PAREN     reduce using rule 41 (FUNCTION_LHS -> PAT VAROP PAT .)


state 109

    (90) VAROP -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 145


state 110

    (21) GEN_DECLARATION -> VARS TYPESIG TYPE .

    CLOSE_BRACE     reduce using rule 21 (GEN_DECLARATION -> VARS TYPESIG TYPE .)
    ENDSTATEMENT    reduce using rule 21 (GEN_DECLARATION -> VARS TYPESIG TYPE .)


state 111

    (32) TYPE -> BTYPE .
    (33) TYPE -> BTYPE . ARROW TYPE
    (35) BTYPE -> BTYPE . ATYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (39) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    CLOSE_BRACE     reduce using rule 32 (TYPE -> BTYPE .)
    ENDSTATEMENT    reduce using rule 32 (TYPE -> BTYPE .)
    CLOSE_PAREN     reduce using rule 32 (TYPE -> BTYPE .)
    COMMA           reduce using rule 32 (TYPE -> BTYPE .)
    CLOSE_SQUARE    reduce using rule 32 (TYPE -> BTYPE .)
    ARROW           shift and go to state 146
    TYPENAME        shift and go to state 113
    OPEN_PAREN      shift and go to state 114
    OPEN_SQUARE     shift and go to state 115

    ATYPE                          shift and go to state 147

state 112

    (34) BTYPE -> ATYPE .

    ARROW           reduce using rule 34 (BTYPE -> ATYPE .)
    TYPENAME        reduce using rule 34 (BTYPE -> ATYPE .)
    OPEN_PAREN      reduce using rule 34 (BTYPE -> ATYPE .)
    OPEN_SQUARE     reduce using rule 34 (BTYPE -> ATYPE .)
    CLOSE_BRACE     reduce using rule 34 (BTYPE -> ATYPE .)
    ENDSTATEMENT    reduce using rule 34 (BTYPE -> ATYPE .)
    CLOSE_PAREN     reduce using rule 34 (BTYPE -> ATYPE .)
    COMMA           reduce using rule 34 (BTYPE -> ATYPE .)
    CLOSE_SQUARE    reduce using rule 34 (BTYPE -> ATYPE .)


state 113

    (36) ATYPE -> TYPENAME .

    ARROW           reduce using rule 36 (ATYPE -> TYPENAME .)
    TYPENAME        reduce using rule 36 (ATYPE -> TYPENAME .)
    OPEN_PAREN      reduce using rule 36 (ATYPE -> TYPENAME .)
    OPEN_SQUARE     reduce using rule 36 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 36 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 36 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 36 (ATYPE -> TYPENAME .)
    COMMA           reduce using rule 36 (ATYPE -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 36 (ATYPE -> TYPENAME .)


state 114

    (37) ATYPE -> OPEN_PAREN . TYPES_LIST CLOSE_PAREN
    (38) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (108) TYPES_LIST -> . TYPES_LIST COMMA TYPE
    (109) TYPES_LIST -> . TYPE
    (32) TYPE -> . BTYPE
    (33) TYPE -> . BTYPE ARROW TYPE
    (34) BTYPE -> . ATYPE
    (35) BTYPE -> . BTYPE ATYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (39) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 113
    OPEN_PAREN      shift and go to state 114
    OPEN_SQUARE     shift and go to state 115

    TYPES_LIST                     shift and go to state 148
    TYPE                           shift and go to state 149
    BTYPE                          shift and go to state 111
    ATYPE                          shift and go to state 112

state 115

    (39) ATYPE -> OPEN_SQUARE . TYPE CLOSE_SQUARE
    (32) TYPE -> . BTYPE
    (33) TYPE -> . BTYPE ARROW TYPE
    (34) BTYPE -> . ATYPE
    (35) BTYPE -> . BTYPE ATYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (39) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 113
    OPEN_PAREN      shift and go to state 114
    OPEN_SQUARE     shift and go to state 115

    TYPE                           shift and go to state 150
    BTYPE                          shift and go to state 111
    ATYPE                          shift and go to state 112

state 116

    (27) VARS -> VARS COMMA IDENTIFIER .

    TYPESIG         reduce using rule 27 (VARS -> VARS COMMA IDENTIFIER .)
    COMMA           reduce using rule 27 (VARS -> VARS COMMA IDENTIFIER .)


state 117

    (22) GEN_DECLARATION -> FIXITY INTEGER OPS .
    (25) OPS -> OPS . COMMA OP

    CLOSE_BRACE     reduce using rule 22 (GEN_DECLARATION -> FIXITY INTEGER OPS .)
    ENDSTATEMENT    reduce using rule 22 (GEN_DECLARATION -> FIXITY INTEGER OPS .)
    COMMA           shift and go to state 118


state 118

    (25) OPS -> OPS COMMA . OP
    (91) OP -> . VAROP
    (89) VAROP -> . VARSYM
    (90) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (98) VARSYM -> . PLUS
    (99) VARSYM -> . MINUS
    (100) VARSYM -> . TIMES
    (101) VARSYM -> . DIVIDE
    (102) VARSYM -> . POW
    (103) VARSYM -> . EQUALITY
    (104) VARSYM -> . LESS
    (105) VARSYM -> . LEQ
    (106) VARSYM -> . GREATER
    (107) VARSYM -> . GEQ

    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    OP                             shift and go to state 151
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 119

    (42) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 152
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 120

    (84) APAT -> OPEN_PAREN PAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALS          reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PLUS            reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MINUS           reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TIMES           reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    POW             reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LESS            reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LEQ             reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GREATER         reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GEQ             reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PIPE            reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    WILDCARD        reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INTEGER         reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    FLOAT           reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CHAR            reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    STRING          reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    COMMA           reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    ARROW           reduce using rule 84 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)


state 121

    (85) APAT -> OPEN_PAREN PAT COMMA . PAT_LIST CLOSE_PAREN
    (96) PAT_LIST -> . PAT_LIST COMMA PAT
    (97) PAT_LIST -> . PAT
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 77
    PAT_LIST                       shift and go to state 153
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 122

    (75) PAT -> LPAT CONSTRUCTOR PAT .

    EQUALS          reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    BACKTICK        reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    PLUS            reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    MINUS           reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    TIMES           reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    DIVIDE          reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    POW             reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    EQUALITY        reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    LESS            reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    LEQ             reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    GREATER         reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    GEQ             reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    PIPE            reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_PAREN     reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    COMMA           reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_SQUARE    reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)
    ARROW           reduce using rule 75 (PAT -> LPAT CONSTRUCTOR PAT .)


state 123

    (78) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 154


state 124

    (79) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 155


state 125

    (86) APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    POW             reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    WILDCARD        reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    ARROW           reduce using rule 86 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)


state 126

    (96) PAT_LIST -> PAT_LIST COMMA . PAT
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    PAT                            shift and go to state 156
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 127

    (3) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 128

    (9) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 157


state 129

    (94) APATS -> APAT APATS .

    EQUALS          reduce using rule 94 (APATS -> APAT APATS .)
    PIPE            reduce using rule 94 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 94 (APATS -> APAT APATS .)
    ARROW           reduce using rule 94 (APATS -> APAT APATS .)


state 130

    (12) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 158


state 131

    (44) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (14) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (15) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 136

    DECLARATIONS                   shift and go to state 159

state 132

    (54) INFIX_EXP -> LEXP OP . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    LEXP                           shift and go to state 90
    INFIX_EXP                      shift and go to state 160
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 133

    (55) INFIX_EXP -> MINUS INFIX_EXP .

    WHERE           reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    LAMBDA          reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    LET             reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    IF              reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    MATCH           reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    IDENTIFIER      reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_PAREN      reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    INTEGER         reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    FLOAT           reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    CHAR            reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    STRING          reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    THEN            reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    COMMA           reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    PIPE            reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)
    WILDCARD        reduce using rule 55 (INFIX_EXP -> MINUS INFIX_EXP .)


state 134

    (57) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (94) APATS -> . APAT APATS
    (95) APATS -> .
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    ARROW           reduce using rule 95 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 84
    APATS                          shift and go to state 161
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 135

    (58) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 162


state 136

    (14) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (15) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (16) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (17) DECLARATIONS_LIST -> . DECLARATION
    (18) DECLARATION -> . GEN_DECLARATION
    (19) DECLARATION -> . FUNCTION_LHS RHS
    (20) DECLARATION -> . PAT RHS
    (21) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (22) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (23) GEN_DECLARATION -> . FIXITY OPS
    (24) GEN_DECLARATION -> .
    (40) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (41) FUNCTION_LHS -> . PAT VAROP PAT
    (42) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (27) VARS -> . VARS COMMA IDENTIFIER
    (28) VARS -> . IDENTIFIER
    (29) FIXITY -> . INFIXL
    (30) FIXITY -> . INFIXR
    (31) FIXITY -> . INFIX
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 164
    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 11
    OPEN_PAREN      shift and go to state 21
    INFIXL          shift and go to state 23
    INFIXR          shift and go to state 24
    INFIX           shift and go to state 25
    MINUS           shift and go to state 26
    WILDCARD        shift and go to state 30
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

  ! CLOSE_BRACE     [ reduce using rule 24 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 163
    DECLARATION                    shift and go to state 165
    GEN_DECLARATION                shift and go to state 14
    FUNCTION_LHS                   shift and go to state 15
    PAT                            shift and go to state 16
    VARS                           shift and go to state 17
    FIXITY                         shift and go to state 18
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 137

    (59) LEXP -> IF EXP . THEN EXP ELSE EXP

    THEN            shift and go to state 166


state 138

    (60) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE

    OF              shift and go to state 167


state 139

    (62) FEXP -> FEXP AEXP .

    IDENTIFIER      reduce using rule 62 (FEXP -> FEXP AEXP .)
    OPEN_PAREN      reduce using rule 62 (FEXP -> FEXP AEXP .)
    OPEN_SQUARE     reduce using rule 62 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 62 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 62 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 62 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 62 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 62 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 62 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 62 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 62 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 62 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 62 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 62 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 62 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 62 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 62 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 62 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 62 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 62 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 62 (FEXP -> FEXP AEXP .)
    LAMBDA          reduce using rule 62 (FEXP -> FEXP AEXP .)
    LET             reduce using rule 62 (FEXP -> FEXP AEXP .)
    IF              reduce using rule 62 (FEXP -> FEXP AEXP .)
    MATCH           reduce using rule 62 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 62 (FEXP -> FEXP AEXP .)
    THEN            reduce using rule 62 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 62 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 62 (FEXP -> FEXP AEXP .)
    COMMA           reduce using rule 62 (FEXP -> FEXP AEXP .)
    CLOSE_SQUARE    reduce using rule 62 (FEXP -> FEXP AEXP .)
    PIPE            reduce using rule 62 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 62 (FEXP -> FEXP AEXP .)
    WILDCARD        reduce using rule 62 (FEXP -> FEXP AEXP .)


state 140

    (67) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (68) AEXP -> OPEN_PAREN EXP . COMMA EXP_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 168
    COMMA           shift and go to state 169


state 141

    (69) AEXP -> OPEN_SQUARE EXP . CLOSE_SQUARE
    (70) AEXP -> OPEN_SQUARE EXP . COMMA EXP_LIST CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 170
    COMMA           shift and go to state 171


state 142

    (46) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 46 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 46 (RHS -> GDRHS WHERE DECLARATIONS .)


state 143

    (47) GDRHS -> GUARDS EQUALS EXP .
    (48) GDRHS -> GUARDS EQUALS EXP . GDRHS
    (47) GDRHS -> . GUARDS EQUALS EXP
    (48) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (49) GUARDS -> . PIPE GUARD_LIST

    WHERE           reduce using rule 47 (GDRHS -> GUARDS EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 47 (GDRHS -> GUARDS EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 47 (GDRHS -> GUARDS EQUALS EXP .)
    PIPE            shift and go to state 48

    GUARDS                         shift and go to state 47
    GDRHS                          shift and go to state 172

state 144

    (50) GUARD_LIST -> GUARD_LIST GUARD .

    MINUS           reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    LAMBDA          reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    LET             reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    IF              reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    MATCH           reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    IDENTIFIER      reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    OPEN_PAREN      reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    OPEN_SQUARE     reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    INTEGER         reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    FLOAT           reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    CHAR            reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    STRING          reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)
    EQUALS          reduce using rule 50 (GUARD_LIST -> GUARD_LIST GUARD .)


state 145

    (90) VAROP -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    WILDCARD        reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_SQUARE     reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    COMMA           reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_BRACE     reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    ENDSTATEMENT    reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IF              reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 90 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)


state 146

    (33) TYPE -> BTYPE ARROW . TYPE
    (32) TYPE -> . BTYPE
    (33) TYPE -> . BTYPE ARROW TYPE
    (34) BTYPE -> . ATYPE
    (35) BTYPE -> . BTYPE ATYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (39) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 113
    OPEN_PAREN      shift and go to state 114
    OPEN_SQUARE     shift and go to state 115

    BTYPE                          shift and go to state 111
    TYPE                           shift and go to state 173
    ATYPE                          shift and go to state 112

state 147

    (35) BTYPE -> BTYPE ATYPE .

    ARROW           reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    TYPENAME        reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    OPEN_PAREN      reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    OPEN_SQUARE     reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    CLOSE_BRACE     reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    ENDSTATEMENT    reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    CLOSE_PAREN     reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    COMMA           reduce using rule 35 (BTYPE -> BTYPE ATYPE .)
    CLOSE_SQUARE    reduce using rule 35 (BTYPE -> BTYPE ATYPE .)


state 148

    (37) ATYPE -> OPEN_PAREN TYPES_LIST . CLOSE_PAREN
    (108) TYPES_LIST -> TYPES_LIST . COMMA TYPE

    CLOSE_PAREN     shift and go to state 174
    COMMA           shift and go to state 175


state 149

    (38) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN
    (109) TYPES_LIST -> TYPE .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 176
    COMMA           reduce using rule 109 (TYPES_LIST -> TYPE .)

  ! CLOSE_PAREN     [ reduce using rule 109 (TYPES_LIST -> TYPE .) ]


state 150

    (39) ATYPE -> OPEN_SQUARE TYPE . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 177


state 151

    (25) OPS -> OPS COMMA OP .

    COMMA           reduce using rule 25 (OPS -> OPS COMMA OP .)
    CLOSE_BRACE     reduce using rule 25 (OPS -> OPS COMMA OP .)
    ENDSTATEMENT    reduce using rule 25 (OPS -> OPS COMMA OP .)


state 152

    (42) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (94) APATS -> . APAT APATS
    (95) APATS -> .
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    EQUALS          reduce using rule 95 (APATS -> .)
    PIPE            reduce using rule 95 (APATS -> .)
    CLOSE_PAREN     reduce using rule 95 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    APAT                           shift and go to state 84
    APATS                          shift and go to state 178
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 153

    (85) APAT -> OPEN_PAREN PAT COMMA PAT_LIST . CLOSE_PAREN
    (96) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_PAREN     shift and go to state 179
    COMMA           shift and go to state 126


state 154

    (78) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    BACKTICK        reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PLUS            reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MINUS           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    TIMES           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    DIVIDE          reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    POW             reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALITY        reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LESS            reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LEQ             reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GREATER         reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GEQ             reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PIPE            reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    COMMA           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 155

    (79) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PLUS            reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MINUS           reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    TIMES           reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    POW             reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LESS            reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LEQ             reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GREATER         reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GEQ             reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PIPE            reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    COMMA           reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 79 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 156

    (96) PAT_LIST -> PAT_LIST COMMA PAT .

    CLOSE_SQUARE    reduce using rule 96 (PAT_LIST -> PAT_LIST COMMA PAT .)
    COMMA           reduce using rule 96 (PAT_LIST -> PAT_LIST COMMA PAT .)
    CLOSE_PAREN     reduce using rule 96 (PAT_LIST -> PAT_LIST COMMA PAT .)


state 157

    (9) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT .

    ENDSTATEMENT    reduce using rule 9 (IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT .)
    CLOSE_BRACE     reduce using rule 9 (IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT .)


state 158

    (12) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT .

    CLOSE_BRACE     reduce using rule 12 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT .)
    ENDSTATEMENT    reduce using rule 12 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT .)


state 159

    (44) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 44 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 44 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 160

    (54) INFIX_EXP -> LEXP OP INFIX_EXP .

    WHERE           reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LAMBDA          reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LET             reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IF              reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MATCH           reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IDENTIFIER      reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_PAREN      reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INTEGER         reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    FLOAT           reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CHAR            reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    STRING          reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    THEN            reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    COMMA           reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PIPE            reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    WILDCARD        reduce using rule 54 (INFIX_EXP -> LEXP OP INFIX_EXP .)


state 161

    (57) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 180


state 162

    (58) LEXP -> LET DECLARATIONS IN . EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 181
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 163

    (14) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 182


state 164

    (15) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 15 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 15 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 15 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 165

    (16) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (17) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 183
    CLOSE_BRACE     reduce using rule 17 (DECLARATIONS_LIST -> DECLARATION .)


state 166

    (59) LEXP -> IF EXP THEN . EXP ELSE EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 184
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 167

    (60) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 185


state 168

    (67) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    IDENTIFIER      reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LAMBDA          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LET             reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IF              reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MATCH           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    THEN            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    COMMA           reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PIPE            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WILDCARD        reduce using rule 67 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 169

    (68) AEXP -> OPEN_PAREN EXP COMMA . EXP_LIST CLOSE_PAREN
    (92) EXP_LIST -> . EXP_LIST COMMA EXP
    (93) EXP_LIST -> . EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 186
    EXP_LIST                       shift and go to state 187
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 170

    (69) AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .

    IDENTIFIER      reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INTEGER         reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    FLOAT           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CHAR            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    STRING          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BACKTICK        reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PLUS            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MINUS           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TIMES           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    DIVIDE          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    POW             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALITY        reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LESS            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LEQ             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GREATER         reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GEQ             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WHERE           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LAMBDA          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LET             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    IF              reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MATCH           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALS          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    THEN            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OF              reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    COMMA           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PIPE            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ELSE            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WILDCARD        reduce using rule 69 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)


state 171

    (70) AEXP -> OPEN_SQUARE EXP COMMA . EXP_LIST CLOSE_SQUARE
    (92) EXP_LIST -> . EXP_LIST COMMA EXP
    (93) EXP_LIST -> . EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 186
    EXP_LIST                       shift and go to state 188
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 172

    (48) GDRHS -> GUARDS EQUALS EXP GDRHS .

    WHERE           reduce using rule 48 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 48 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 48 (GDRHS -> GUARDS EQUALS EXP GDRHS .)


state 173

    (33) TYPE -> BTYPE ARROW TYPE .

    CLOSE_BRACE     reduce using rule 33 (TYPE -> BTYPE ARROW TYPE .)
    ENDSTATEMENT    reduce using rule 33 (TYPE -> BTYPE ARROW TYPE .)
    CLOSE_PAREN     reduce using rule 33 (TYPE -> BTYPE ARROW TYPE .)
    COMMA           reduce using rule 33 (TYPE -> BTYPE ARROW TYPE .)
    CLOSE_SQUARE    reduce using rule 33 (TYPE -> BTYPE ARROW TYPE .)


state 174

    (37) ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .

    ARROW           reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    TYPENAME        reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 37 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)


state 175

    (108) TYPES_LIST -> TYPES_LIST COMMA . TYPE
    (32) TYPE -> . BTYPE
    (33) TYPE -> . BTYPE ARROW TYPE
    (34) BTYPE -> . ATYPE
    (35) BTYPE -> . BTYPE ATYPE
    (36) ATYPE -> . TYPENAME
    (37) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (38) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (39) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 113
    OPEN_PAREN      shift and go to state 114
    OPEN_SQUARE     shift and go to state 115

    TYPE                           shift and go to state 189
    BTYPE                          shift and go to state 111
    ATYPE                          shift and go to state 112

state 176

    (38) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    ARROW           reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    TYPENAME        reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    COMMA           reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 38 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 177

    (39) ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .

    ARROW           reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    TYPENAME        reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    COMMA           reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 39 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)


state 178

    (42) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 42 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    PIPE            reduce using rule 42 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 42 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 179

    (85) APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    POW             reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LESS            reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    WILDCARD        reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    STRING          reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    ARROW           reduce using rule 85 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)


state 180

    (57) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 190
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 181

    (58) LEXP -> LET DECLARATIONS IN EXP .

    BACKTICK        reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    PLUS            reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    LAMBDA          reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    LET             reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    IF              reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    MATCH           reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    IDENTIFIER      reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_PAREN      reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_SQUARE     reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    INTEGER         reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    FLOAT           reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    CHAR            reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    STRING          reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    THEN            reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    COMMA           reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_SQUARE    reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    PIPE            reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)
    WILDCARD        reduce using rule 58 (LEXP -> LET DECLARATIONS IN EXP .)


state 182

    (14) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 14 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 14 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 14 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 183

    (16) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (16) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (17) DECLARATIONS_LIST -> . DECLARATION
    (18) DECLARATION -> . GEN_DECLARATION
    (19) DECLARATION -> . FUNCTION_LHS RHS
    (20) DECLARATION -> . PAT RHS
    (21) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (22) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (23) GEN_DECLARATION -> . FIXITY OPS
    (24) GEN_DECLARATION -> .
    (40) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (41) FUNCTION_LHS -> . PAT VAROP PAT
    (42) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (27) VARS -> . VARS COMMA IDENTIFIER
    (28) VARS -> . IDENTIFIER
    (29) FIXITY -> . INFIXL
    (30) FIXITY -> . INFIXR
    (31) FIXITY -> . INFIX
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 24 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 24 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 11
    OPEN_PAREN      shift and go to state 21
    INFIXL          shift and go to state 23
    INFIXR          shift and go to state 24
    INFIX           shift and go to state 25
    MINUS           shift and go to state 26
    WILDCARD        shift and go to state 30
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    DECLARATION                    shift and go to state 165
    DECLARATIONS_LIST              shift and go to state 191
    GEN_DECLARATION                shift and go to state 14
    FUNCTION_LHS                   shift and go to state 15
    PAT                            shift and go to state 16
    VARS                           shift and go to state 17
    FIXITY                         shift and go to state 18
    APAT                           shift and go to state 20
    LPAT                           shift and go to state 22
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 184

    (59) LEXP -> IF EXP THEN EXP . ELSE EXP

    ELSE            shift and go to state 192


state 185

    (60) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (71) ALTS -> . ALTS ALT ENDSTATEMENT
    (72) ALTS -> . ALT
    (73) ALT -> . PAT ARROW EXP
    (74) ALT -> .
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WILDCARD resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    CLOSE_BRACE     reduce using rule 74 (ALT -> .)
    ENDSTATEMENT    reduce using rule 74 (ALT -> .)
    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

  ! MINUS           [ reduce using rule 74 (ALT -> .) ]
  ! IDENTIFIER      [ reduce using rule 74 (ALT -> .) ]
  ! WILDCARD        [ reduce using rule 74 (ALT -> .) ]
  ! OPEN_PAREN      [ reduce using rule 74 (ALT -> .) ]
  ! OPEN_SQUARE     [ reduce using rule 74 (ALT -> .) ]
  ! INTEGER         [ reduce using rule 74 (ALT -> .) ]
  ! FLOAT           [ reduce using rule 74 (ALT -> .) ]
  ! CHAR            [ reduce using rule 74 (ALT -> .) ]
  ! STRING          [ reduce using rule 74 (ALT -> .) ]

    ALTS                           shift and go to state 193
    ALT                            shift and go to state 194
    PAT                            shift and go to state 195
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 186

    (93) EXP_LIST -> EXP .

    CLOSE_PAREN     reduce using rule 93 (EXP_LIST -> EXP .)
    COMMA           reduce using rule 93 (EXP_LIST -> EXP .)
    CLOSE_SQUARE    reduce using rule 93 (EXP_LIST -> EXP .)


state 187

    (68) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST . CLOSE_PAREN
    (92) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_PAREN     shift and go to state 197
    COMMA           shift and go to state 196


state 188

    (70) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST . CLOSE_SQUARE
    (92) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_SQUARE    shift and go to state 198
    COMMA           shift and go to state 196


state 189

    (108) TYPES_LIST -> TYPES_LIST COMMA TYPE .

    CLOSE_PAREN     reduce using rule 108 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)
    COMMA           reduce using rule 108 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)


state 190

    (57) LEXP -> LAMBDA APAT APATS ARROW EXP .

    BACKTICK        reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PLUS            reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LAMBDA          reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LET             reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    IF              reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MATCH           reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    IDENTIFIER      reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_PAREN      reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_SQUARE     reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    INTEGER         reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    FLOAT           reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CHAR            reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    STRING          reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    THEN            reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    COMMA           reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_SQUARE    reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PIPE            reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WILDCARD        reduce using rule 57 (LEXP -> LAMBDA APAT APATS ARROW EXP .)


state 191

    (16) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 16 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 192

    (59) LEXP -> IF EXP THEN EXP ELSE . EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 199
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 193

    (60) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE
    (71) ALTS -> ALTS . ALT ENDSTATEMENT
    (73) ALT -> . PAT ARROW EXP
    (74) ALT -> .
    (75) PAT -> . LPAT CONSTRUCTOR PAT
    (76) PAT -> . LPAT
    (77) LPAT -> . APAT
    (78) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (79) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (80) APAT -> . IDENTIFIER
    (81) APAT -> . GCON
    (82) APAT -> . LITERAL
    (83) APAT -> . WILDCARD
    (84) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (85) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (86) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    CLOSE_BRACE     shift and go to state 200
    ENDSTATEMENT    reduce using rule 74 (ALT -> .)
    MINUS           shift and go to state 26
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 30
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 31
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    ALT                            shift and go to state 201
    PAT                            shift and go to state 195
    LPAT                           shift and go to state 22
    APAT                           shift and go to state 20
    GCON                           shift and go to state 28
    LITERAL                        shift and go to state 29

state 194

    (72) ALTS -> ALT .

    CLOSE_BRACE     reduce using rule 72 (ALTS -> ALT .)
    MINUS           reduce using rule 72 (ALTS -> ALT .)
    IDENTIFIER      reduce using rule 72 (ALTS -> ALT .)
    WILDCARD        reduce using rule 72 (ALTS -> ALT .)
    OPEN_PAREN      reduce using rule 72 (ALTS -> ALT .)
    OPEN_SQUARE     reduce using rule 72 (ALTS -> ALT .)
    INTEGER         reduce using rule 72 (ALTS -> ALT .)
    FLOAT           reduce using rule 72 (ALTS -> ALT .)
    CHAR            reduce using rule 72 (ALTS -> ALT .)
    STRING          reduce using rule 72 (ALTS -> ALT .)
    ENDSTATEMENT    reduce using rule 72 (ALTS -> ALT .)


state 195

    (73) ALT -> PAT . ARROW EXP

    ARROW           shift and go to state 202


state 196

    (92) EXP_LIST -> EXP_LIST COMMA . EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 203
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 197

    (68) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .

    IDENTIFIER      reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    STRING          reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    POW             reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LESS            reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WHERE           reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LAMBDA          reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LET             reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    IF              reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MATCH           reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    THEN            reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OF              reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ELSE            reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WILDCARD        reduce using rule 68 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)


state 198

    (70) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .

    IDENTIFIER      reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    POW             reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WHERE           reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LAMBDA          reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LET             reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    IF              reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MATCH           reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    THEN            reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OF              reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ELSE            reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WILDCARD        reduce using rule 70 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)


state 199

    (59) LEXP -> IF EXP THEN EXP ELSE EXP .

    BACKTICK        reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PLUS            reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MINUS           reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    TIMES           reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    DIVIDE          reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    POW             reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALITY        reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LESS            reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LEQ             reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GREATER         reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GEQ             reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WHERE           reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LAMBDA          reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LET             reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    IF              reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MATCH           reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    IDENTIFIER      reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_PAREN      reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_SQUARE     reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    INTEGER         reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    FLOAT           reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CHAR            reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    STRING          reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALS          reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    THEN            reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OF              reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    COMMA           reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_SQUARE    reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PIPE            reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ELSE            reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WILDCARD        reduce using rule 59 (LEXP -> IF EXP THEN EXP ELSE EXP .)


state 200

    (60) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    BACKTICK        reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PLUS            reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LAMBDA          reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LET             reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IF              reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MATCH           reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_PAREN      reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_SQUARE     reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INTEGER         reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    FLOAT           reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CHAR            reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    STRING          reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    THEN            reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    COMMA           reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_SQUARE    reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PIPE            reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WILDCARD        reduce using rule 60 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 201

    (71) ALTS -> ALTS ALT . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 204


state 202

    (73) ALT -> PAT ARROW . EXP
    (53) EXP -> . INFIX_EXP
    (54) INFIX_EXP -> . LEXP OP INFIX_EXP
    (55) INFIX_EXP -> . MINUS INFIX_EXP
    (56) INFIX_EXP -> . LEXP
    (57) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (58) LEXP -> . LET DECLARATIONS IN EXP
    (59) LEXP -> . IF EXP THEN EXP ELSE EXP
    (60) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (61) LEXP -> . FEXP
    (62) FEXP -> . FEXP AEXP
    (63) FEXP -> . AEXP
    (64) AEXP -> . IDENTIFIER
    (65) AEXP -> . GCON
    (66) AEXP -> . LITERAL
    (67) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (68) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (69) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (70) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> . OPEN_PAREN CLOSE_PAREN
    (88) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (110) LITERAL -> . INTEGER
    (111) LITERAL -> . FLOAT
    (112) LITERAL -> . CHAR
    (113) LITERAL -> . STRING

    MINUS           shift and go to state 91
    LAMBDA          shift and go to state 92
    LET             shift and go to state 93
    IF              shift and go to state 94
    MATCH           shift and go to state 95
    IDENTIFIER      shift and go to state 98
    OPEN_PAREN      shift and go to state 101
    OPEN_SQUARE     shift and go to state 102
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 32
    STRING          shift and go to state 33

    EXP                            shift and go to state 205
    INFIX_EXP                      shift and go to state 89
    LEXP                           shift and go to state 90
    FEXP                           shift and go to state 96
    AEXP                           shift and go to state 97
    GCON                           shift and go to state 99
    LITERAL                        shift and go to state 100

state 203

    (92) EXP_LIST -> EXP_LIST COMMA EXP .

    CLOSE_PAREN     reduce using rule 92 (EXP_LIST -> EXP_LIST COMMA EXP .)
    COMMA           reduce using rule 92 (EXP_LIST -> EXP_LIST COMMA EXP .)
    CLOSE_SQUARE    reduce using rule 92 (EXP_LIST -> EXP_LIST COMMA EXP .)


state 204

    (71) ALTS -> ALTS ALT ENDSTATEMENT .

    CLOSE_BRACE     reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    MINUS           reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    IDENTIFIER      reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    WILDCARD        reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_PAREN      reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_SQUARE     reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    INTEGER         reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    FLOAT           reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    CHAR            reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    STRING          reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)
    ENDSTATEMENT    reduce using rule 71 (ALTS -> ALTS ALT ENDSTATEMENT .)


state 205

    (73) ALT -> PAT ARROW EXP .

    CLOSE_BRACE     reduce using rule 73 (ALT -> PAT ARROW EXP .)
    MINUS           reduce using rule 73 (ALT -> PAT ARROW EXP .)
    IDENTIFIER      reduce using rule 73 (ALT -> PAT ARROW EXP .)
    WILDCARD        reduce using rule 73 (ALT -> PAT ARROW EXP .)
    OPEN_PAREN      reduce using rule 73 (ALT -> PAT ARROW EXP .)
    OPEN_SQUARE     reduce using rule 73 (ALT -> PAT ARROW EXP .)
    INTEGER         reduce using rule 73 (ALT -> PAT ARROW EXP .)
    FLOAT           reduce using rule 73 (ALT -> PAT ARROW EXP .)
    CHAR            reduce using rule 73 (ALT -> PAT ARROW EXP .)
    STRING          reduce using rule 73 (ALT -> PAT ARROW EXP .)
    ENDSTATEMENT    reduce using rule 73 (ALT -> PAT ARROW EXP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BACKTICK in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for POW in state 90 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 90 resolved as shift
WARNING: shift/reduce conflict for LESS in state 90 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 90 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 90 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 96 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 96 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 96 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 96 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 96 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 96 resolved as shift
WARNING: shift/reduce conflict for STRING in state 96 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 136 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 185 resolved as shift
WARNING: shift/reduce conflict for WILDCARD in state 185 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 185 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 185 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 185 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 185 resolved as shift
WARNING: shift/reduce conflict for STRING in state 185 resolved as shift
