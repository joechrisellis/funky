Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    INEQUALITY
    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE
Rule 4     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 7     IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT
Rule 8     IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT
Rule 9     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 10    TOP_DECLARATIONS -> TOP_DECLARATION
Rule 11    TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
Rule 12    TOP_DECLARATION -> DECLARATION
Rule 13    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 14    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 15    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 16    DECLARATIONS_LIST -> DECLARATION
Rule 17    DECLARATION -> GEN_DECLARATION
Rule 18    DECLARATION -> FUNCTION_LHS RHS
Rule 19    DECLARATION -> PAT RHS
Rule 20    GEN_DECLARATION -> VARS TYPESIG TYPE
Rule 21    GEN_DECLARATION -> FIXITY INTEGER OPS
Rule 22    GEN_DECLARATION -> FIXITY OPS
Rule 23    GEN_DECLARATION -> <empty>
Rule 24    OPS -> OPS COMMA OP
Rule 25    OPS -> OP
Rule 26    VARS -> VARS COMMA IDENTIFIER
Rule 27    VARS -> IDENTIFIER
Rule 28    FIXITY -> INFIXL
Rule 29    FIXITY -> INFIXR
Rule 30    FIXITY -> INFIX
Rule 31    TYPE -> BTYPE
Rule 32    TYPE -> BTYPE ARROW TYPE
Rule 33    BTYPE -> ATYPE
Rule 34    BTYPE -> BTYPE ATYPE
Rule 35    ATYPE -> TYPENAME
Rule 36    ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN
Rule 37    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 38    ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE
Rule 39    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 40    FUNCTION_LHS -> PAT VAROP PAT
Rule 41    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 42    RHS -> EQUALS EXP
Rule 43    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 44    RHS -> GDRHS
Rule 45    RHS -> GDRHS WHERE DECLARATIONS
Rule 46    GDRHS -> GUARDS EQUALS EXP
Rule 47    GDRHS -> GUARDS EQUALS EXP GDRHS
Rule 48    GUARDS -> PIPE GUARD_LIST
Rule 49    GUARD_LIST -> GUARD_LIST GUARD
Rule 50    GUARD_LIST -> GUARD
Rule 51    GUARD -> INFIX_EXP
Rule 52    EXP -> INFIX_EXP
Rule 53    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 54    INFIX_EXP -> MINUS INFIX_EXP
Rule 55    INFIX_EXP -> LEXP
Rule 56    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 57    LEXP -> LET DECLARATIONS IN EXP
Rule 58    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 59    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 60    LEXP -> FEXP
Rule 61    FEXP -> FEXP AEXP
Rule 62    FEXP -> AEXP
Rule 63    AEXP -> IDENTIFIER
Rule 64    AEXP -> GCON
Rule 65    AEXP -> LITERAL
Rule 66    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 67    AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
Rule 68    AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE
Rule 69    AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
Rule 70    ALTS -> ALTS ALT ENDSTATEMENT
Rule 71    ALTS -> ALT
Rule 72    ALT -> PAT ARROW EXP
Rule 73    ALT -> <empty>
Rule 74    PAT -> LPAT CONSTRUCTOR PAT
Rule 75    PAT -> LPAT
Rule 76    LPAT -> APAT
Rule 77    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 78    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 79    APAT -> IDENTIFIER
Rule 80    APAT -> GCON
Rule 81    APAT -> LITERAL
Rule 82    APAT -> WILDCARD
Rule 83    APAT -> OPEN_PAREN PAT CLOSE_PAREN
Rule 84    APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
Rule 85    APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE
Rule 86    GCON -> OPEN_PAREN CLOSE_PAREN
Rule 87    GCON -> OPEN_SQUARE CLOSE_SQUARE
Rule 88    VAROP -> VARSYM
Rule 89    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 90    OP -> VAROP
Rule 91    EXP_LIST -> EXP_LIST COMMA EXP
Rule 92    EXP_LIST -> EXP
Rule 93    APATS -> APAT APATS
Rule 94    APATS -> <empty>
Rule 95    PAT_LIST -> PAT_LIST COMMA PAT
Rule 96    PAT_LIST -> PAT
Rule 97    VARSYM -> PLUS
Rule 98    VARSYM -> MINUS
Rule 99    VARSYM -> TIMES
Rule 100   VARSYM -> DIVIDE
Rule 101   VARSYM -> POW
Rule 102   VARSYM -> EQUALITY
Rule 103   VARSYM -> LESS
Rule 104   VARSYM -> LEQ
Rule 105   VARSYM -> GREATER
Rule 106   VARSYM -> GEQ
Rule 107   TYPES_LIST -> TYPES_LIST COMMA TYPE
Rule 108   TYPES_LIST -> TYPE
Rule 109   LITERAL -> INTEGER
Rule 110   LITERAL -> FLOAT
Rule 111   LITERAL -> CHAR
Rule 112   LITERAL -> STRING

Terminals, with rules where they appear

ARROW                : 32 56 72
AS                   : 8
BACKTICK             : 89 89
BOOL                 : 
CHAR                 : 111
CLOSE_BRACE          : 2 3 4 13 14 59
CLOSE_PAREN          : 36 37 41 66 67 77 78 83 84 86
CLOSE_SQUARE         : 38 68 69 85 87
COMMA                : 24 26 67 69 84 91 95 107
CONSTRUCTOR          : 74
DIVIDE               : 100
ELSE                 : 58
ENDSTATEMENT         : 2 5 7 8 9 11 15 70
EQUALITY             : 102
EQUALS               : 11 42 43 46 47
FLOAT                : 78 110
GEQ                  : 106
GREATER              : 105
IDENTIFIER           : 1 7 8 8 26 27 39 63 79 89
IF                   : 58
IMPORT               : 7 8
IN                   : 57
INEQUALITY           : 
INFIX                : 30
INFIXL               : 28
INFIXR               : 29
INTEGER              : 21 77 109
LAMBDA               : 56
LEQ                  : 104
LESS                 : 103
LET                  : 57
MATCH                : 59
MINUS                : 54 77 78 98
MODULE               : 1
NEWTYPE              : 11
OF                   : 59
OPEN_BRACE           : 2 3 4 13 14 59
OPEN_PAREN           : 36 37 41 66 67 77 78 83 84 86
OPEN_SQUARE          : 38 68 69 85 87
PIPE                 : 48
PLUS                 : 97
POW                  : 101
STRING               : 112
THEN                 : 58
TIMES                : 99
TYPENAME             : 11 11 35
TYPESIG              : 20
WHERE                : 1 43 45
WHITESPACE           : 
WILDCARD             : 82
error                : 

Nonterminals, with rules where they appear

AEXP                 : 61 62
ALT                  : 70 71
ALTS                 : 59 70
APAT                 : 39 41 56 76 93
APATS                : 39 41 56 93
ATYPE                : 33 34
BODY                 : 1
BTYPE                : 31 32 34
DECLARATION          : 12 15 16
DECLARATIONS         : 43 45 57
DECLARATIONS_LIST    : 13 15
EXP                  : 42 43 46 47 56 57 58 58 58 59 66 67 68 69 72 91 92
EXP_LIST             : 67 69 91
FEXP                 : 60 61
FIXITY               : 21 22
FUNCTION_LHS         : 18 41
GCON                 : 64 80
GDRHS                : 44 45 47
GEN_DECLARATION      : 17
GUARD                : 49 50
GUARDS               : 46 47
GUARD_LIST           : 48 49
IMPORT_DECLARATION   : 5 6
IMPORT_DECLARATIONS  : 2 3 5
INFIX_EXP            : 51 52 53 54
LEXP                 : 53 55
LITERAL              : 65 81
LPAT                 : 74 75
MODULE_DEFINITION    : 0
OP                   : 24 25 53
OPS                  : 21 22 24
PAT                  : 19 40 40 72 74 83 84 95 96
PAT_LIST             : 84 85 95
RHS                  : 18 19
TOP_DECLARATION      : 9 10
TOP_DECLARATIONS     : 2 4 9
TYPE                 : 20 32 37 38 107 108
TYPES_LIST           : 36 107
VAROP                : 40 90
VARS                 : 20 26
VARSYM               : 88

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE
    (4) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS CLOSE_BRACE
    (4) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (6) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (9) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (10) TOP_DECLARATIONS -> . TOP_DECLARATION
    (7) IMPORT_DECLARATION -> . IMPORT IDENTIFIER ENDSTATEMENT
    (8) IMPORT_DECLARATION -> . IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT
    (11) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
    (12) TOP_DECLARATION -> . DECLARATION
    (17) DECLARATION -> . GEN_DECLARATION
    (18) DECLARATION -> . FUNCTION_LHS RHS
    (19) DECLARATION -> . PAT RHS
    (20) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (21) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (22) GEN_DECLARATION -> . FIXITY OPS
    (23) GEN_DECLARATION -> .
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . PAT VAROP PAT
    (41) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (26) VARS -> . VARS COMMA IDENTIFIER
    (27) VARS -> . IDENTIFIER
    (28) FIXITY -> . INFIXL
    (29) FIXITY -> . INFIXR
    (30) FIXITY -> . INFIX
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    CLOSE_BRACE     reduce using rule 23 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 23 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 22
    INFIXL          shift and go to state 24
    INFIXR          shift and go to state 25
    INFIX           shift and go to state 26
    MINUS           shift and go to state 27
    WILDCARD        shift and go to state 31
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    FIXITY                         shift and go to state 19
    APAT                           shift and go to state 21
    LPAT                           shift and go to state 23
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . CLOSE_BRACE
    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 35
    CLOSE_BRACE     shift and go to state 36


state 8

    (4) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (9) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 37
    ENDSTATEMENT    shift and go to state 38


state 9

    (6) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)
    CLOSE_BRACE     reduce using rule 6 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (10) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (7) IMPORT_DECLARATION -> IMPORT . IDENTIFIER ENDSTATEMENT
    (8) IMPORT_DECLARATION -> IMPORT . IDENTIFIER AS IDENTIFIER ENDSTATEMENT

    IDENTIFIER      shift and go to state 39


state 12

    (39) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (27) VARS -> IDENTIFIER .
    (79) APAT -> IDENTIFIER .
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    TYPESIG         reduce using rule 27 (VARS -> IDENTIFIER .)
    COMMA           reduce using rule 27 (VARS -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 79 (APAT -> IDENTIFIER .)
    EQUALS          reduce using rule 79 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 79 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 79 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 79 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 79 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 79 (APAT -> IDENTIFIER .)
    POW             reduce using rule 79 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 79 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 79 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 79 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 79 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 79 (APAT -> IDENTIFIER .)
    PIPE            reduce using rule 79 (APAT -> IDENTIFIER .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 41
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 13

    (11) TOP_DECLARATION -> NEWTYPE . TYPENAME EQUALS TYPENAME ENDSTATEMENT

    TYPENAME        shift and go to state 43


state 14

    (12) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 12 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 12 (TOP_DECLARATION -> DECLARATION .)


state 15

    (17) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 17 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 17 (DECLARATION -> GEN_DECLARATION .)


state 16

    (18) DECLARATION -> FUNCTION_LHS . RHS
    (42) RHS -> . EQUALS EXP
    (43) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (44) RHS -> . GDRHS
    (45) RHS -> . GDRHS WHERE DECLARATIONS
    (46) GDRHS -> . GUARDS EQUALS EXP
    (47) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (48) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 45
    PIPE            shift and go to state 48

    RHS                            shift and go to state 44
    GDRHS                          shift and go to state 46
    GUARDS                         shift and go to state 47

state 17

    (19) DECLARATION -> PAT . RHS
    (40) FUNCTION_LHS -> PAT . VAROP PAT
    (42) RHS -> . EQUALS EXP
    (43) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (44) RHS -> . GDRHS
    (45) RHS -> . GDRHS WHERE DECLARATIONS
    (88) VAROP -> . VARSYM
    (89) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (46) GDRHS -> . GUARDS EQUALS EXP
    (47) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (97) VARSYM -> . PLUS
    (98) VARSYM -> . MINUS
    (99) VARSYM -> . TIMES
    (100) VARSYM -> . DIVIDE
    (101) VARSYM -> . POW
    (102) VARSYM -> . EQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ
    (48) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 45
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62
    PIPE            shift and go to state 48

    RHS                            shift and go to state 49
    VAROP                          shift and go to state 50
    GDRHS                          shift and go to state 46
    VARSYM                         shift and go to state 51
    GUARDS                         shift and go to state 47

state 18

    (20) GEN_DECLARATION -> VARS . TYPESIG TYPE
    (26) VARS -> VARS . COMMA IDENTIFIER

    TYPESIG         shift and go to state 63
    COMMA           shift and go to state 64


state 19

    (21) GEN_DECLARATION -> FIXITY . INTEGER OPS
    (22) GEN_DECLARATION -> FIXITY . OPS
    (24) OPS -> . OPS COMMA OP
    (25) OPS -> . OP
    (90) OP -> . VAROP
    (88) VAROP -> . VARSYM
    (89) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (97) VARSYM -> . PLUS
    (98) VARSYM -> . MINUS
    (99) VARSYM -> . TIMES
    (100) VARSYM -> . DIVIDE
    (101) VARSYM -> . POW
    (102) VARSYM -> . EQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ

    INTEGER         shift and go to state 65
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    OPS                            shift and go to state 66
    OP                             shift and go to state 67
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 20

    (109) LITERAL -> INTEGER .

    CONSTRUCTOR     reduce using rule 109 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 109 (LITERAL -> INTEGER .)
    BACKTICK        reduce using rule 109 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 109 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 109 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 109 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 109 (LITERAL -> INTEGER .)
    POW             reduce using rule 109 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 109 (LITERAL -> INTEGER .)
    LESS            reduce using rule 109 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 109 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 109 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 109 (LITERAL -> INTEGER .)
    PIPE            reduce using rule 109 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 109 (LITERAL -> INTEGER .)
    WILDCARD        reduce using rule 109 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 109 (LITERAL -> INTEGER .)
    OPEN_SQUARE     reduce using rule 109 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 109 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 109 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 109 (LITERAL -> INTEGER .)
    STRING          reduce using rule 109 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 109 (LITERAL -> INTEGER .)
    COMMA           reduce using rule 109 (LITERAL -> INTEGER .)
    CLOSE_SQUARE    reduce using rule 109 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 109 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 109 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 109 (LITERAL -> INTEGER .)
    LAMBDA          reduce using rule 109 (LITERAL -> INTEGER .)
    LET             reduce using rule 109 (LITERAL -> INTEGER .)
    IF              reduce using rule 109 (LITERAL -> INTEGER .)
    MATCH           reduce using rule 109 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 109 (LITERAL -> INTEGER .)
    THEN            reduce using rule 109 (LITERAL -> INTEGER .)
    OF              reduce using rule 109 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 109 (LITERAL -> INTEGER .)


state 21

    (76) LPAT -> APAT .

    CONSTRUCTOR     reduce using rule 76 (LPAT -> APAT .)
    EQUALS          reduce using rule 76 (LPAT -> APAT .)
    BACKTICK        reduce using rule 76 (LPAT -> APAT .)
    PLUS            reduce using rule 76 (LPAT -> APAT .)
    MINUS           reduce using rule 76 (LPAT -> APAT .)
    TIMES           reduce using rule 76 (LPAT -> APAT .)
    DIVIDE          reduce using rule 76 (LPAT -> APAT .)
    POW             reduce using rule 76 (LPAT -> APAT .)
    EQUALITY        reduce using rule 76 (LPAT -> APAT .)
    LESS            reduce using rule 76 (LPAT -> APAT .)
    LEQ             reduce using rule 76 (LPAT -> APAT .)
    GREATER         reduce using rule 76 (LPAT -> APAT .)
    GEQ             reduce using rule 76 (LPAT -> APAT .)
    PIPE            reduce using rule 76 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 76 (LPAT -> APAT .)
    COMMA           reduce using rule 76 (LPAT -> APAT .)
    CLOSE_SQUARE    reduce using rule 76 (LPAT -> APAT .)
    ARROW           reduce using rule 76 (LPAT -> APAT .)


state 22

    (41) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (83) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (84) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (86) GCON -> OPEN_PAREN . CLOSE_PAREN
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . PAT VAROP PAT
    (41) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 70
    IDENTIFIER      shift and go to state 72
    OPEN_PAREN      shift and go to state 22
    MINUS           shift and go to state 27
    WILDCARD        shift and go to state 31
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    FUNCTION_LHS                   shift and go to state 69
    APAT                           shift and go to state 21
    PAT                            shift and go to state 71
    LPAT                           shift and go to state 23
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 23

    (74) PAT -> LPAT . CONSTRUCTOR PAT
    (75) PAT -> LPAT .

    CONSTRUCTOR     shift and go to state 73
    EQUALS          reduce using rule 75 (PAT -> LPAT .)
    BACKTICK        reduce using rule 75 (PAT -> LPAT .)
    PLUS            reduce using rule 75 (PAT -> LPAT .)
    MINUS           reduce using rule 75 (PAT -> LPAT .)
    TIMES           reduce using rule 75 (PAT -> LPAT .)
    DIVIDE          reduce using rule 75 (PAT -> LPAT .)
    POW             reduce using rule 75 (PAT -> LPAT .)
    EQUALITY        reduce using rule 75 (PAT -> LPAT .)
    LESS            reduce using rule 75 (PAT -> LPAT .)
    LEQ             reduce using rule 75 (PAT -> LPAT .)
    GREATER         reduce using rule 75 (PAT -> LPAT .)
    GEQ             reduce using rule 75 (PAT -> LPAT .)
    PIPE            reduce using rule 75 (PAT -> LPAT .)
    CLOSE_PAREN     reduce using rule 75 (PAT -> LPAT .)
    COMMA           reduce using rule 75 (PAT -> LPAT .)
    CLOSE_SQUARE    reduce using rule 75 (PAT -> LPAT .)
    ARROW           reduce using rule 75 (PAT -> LPAT .)


state 24

    (28) FIXITY -> INFIXL .

    INTEGER         reduce using rule 28 (FIXITY -> INFIXL .)
    BACKTICK        reduce using rule 28 (FIXITY -> INFIXL .)
    PLUS            reduce using rule 28 (FIXITY -> INFIXL .)
    MINUS           reduce using rule 28 (FIXITY -> INFIXL .)
    TIMES           reduce using rule 28 (FIXITY -> INFIXL .)
    DIVIDE          reduce using rule 28 (FIXITY -> INFIXL .)
    POW             reduce using rule 28 (FIXITY -> INFIXL .)
    EQUALITY        reduce using rule 28 (FIXITY -> INFIXL .)
    LESS            reduce using rule 28 (FIXITY -> INFIXL .)
    LEQ             reduce using rule 28 (FIXITY -> INFIXL .)
    GREATER         reduce using rule 28 (FIXITY -> INFIXL .)
    GEQ             reduce using rule 28 (FIXITY -> INFIXL .)


state 25

    (29) FIXITY -> INFIXR .

    INTEGER         reduce using rule 29 (FIXITY -> INFIXR .)
    BACKTICK        reduce using rule 29 (FIXITY -> INFIXR .)
    PLUS            reduce using rule 29 (FIXITY -> INFIXR .)
    MINUS           reduce using rule 29 (FIXITY -> INFIXR .)
    TIMES           reduce using rule 29 (FIXITY -> INFIXR .)
    DIVIDE          reduce using rule 29 (FIXITY -> INFIXR .)
    POW             reduce using rule 29 (FIXITY -> INFIXR .)
    EQUALITY        reduce using rule 29 (FIXITY -> INFIXR .)
    LESS            reduce using rule 29 (FIXITY -> INFIXR .)
    LEQ             reduce using rule 29 (FIXITY -> INFIXR .)
    GREATER         reduce using rule 29 (FIXITY -> INFIXR .)
    GEQ             reduce using rule 29 (FIXITY -> INFIXR .)


state 26

    (30) FIXITY -> INFIX .

    INTEGER         reduce using rule 30 (FIXITY -> INFIX .)
    BACKTICK        reduce using rule 30 (FIXITY -> INFIX .)
    PLUS            reduce using rule 30 (FIXITY -> INFIX .)
    MINUS           reduce using rule 30 (FIXITY -> INFIX .)
    TIMES           reduce using rule 30 (FIXITY -> INFIX .)
    DIVIDE          reduce using rule 30 (FIXITY -> INFIX .)
    POW             reduce using rule 30 (FIXITY -> INFIX .)
    EQUALITY        reduce using rule 30 (FIXITY -> INFIX .)
    LESS            reduce using rule 30 (FIXITY -> INFIX .)
    LEQ             reduce using rule 30 (FIXITY -> INFIX .)
    GREATER         reduce using rule 30 (FIXITY -> INFIX .)
    GEQ             reduce using rule 30 (FIXITY -> INFIX .)


state 27

    (77) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 74


state 28

    (110) LITERAL -> FLOAT .

    CONSTRUCTOR     reduce using rule 110 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 110 (LITERAL -> FLOAT .)
    BACKTICK        reduce using rule 110 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 110 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 110 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 110 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 110 (LITERAL -> FLOAT .)
    POW             reduce using rule 110 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 110 (LITERAL -> FLOAT .)
    LESS            reduce using rule 110 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 110 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 110 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 110 (LITERAL -> FLOAT .)
    PIPE            reduce using rule 110 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 110 (LITERAL -> FLOAT .)
    WILDCARD        reduce using rule 110 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 110 (LITERAL -> FLOAT .)
    OPEN_SQUARE     reduce using rule 110 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 110 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 110 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 110 (LITERAL -> FLOAT .)
    STRING          reduce using rule 110 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 110 (LITERAL -> FLOAT .)
    COMMA           reduce using rule 110 (LITERAL -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 110 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 110 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 110 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 110 (LITERAL -> FLOAT .)
    LAMBDA          reduce using rule 110 (LITERAL -> FLOAT .)
    LET             reduce using rule 110 (LITERAL -> FLOAT .)
    IF              reduce using rule 110 (LITERAL -> FLOAT .)
    MATCH           reduce using rule 110 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 110 (LITERAL -> FLOAT .)
    THEN            reduce using rule 110 (LITERAL -> FLOAT .)
    OF              reduce using rule 110 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 110 (LITERAL -> FLOAT .)


state 29

    (80) APAT -> GCON .

    CONSTRUCTOR     reduce using rule 80 (APAT -> GCON .)
    EQUALS          reduce using rule 80 (APAT -> GCON .)
    BACKTICK        reduce using rule 80 (APAT -> GCON .)
    PLUS            reduce using rule 80 (APAT -> GCON .)
    MINUS           reduce using rule 80 (APAT -> GCON .)
    TIMES           reduce using rule 80 (APAT -> GCON .)
    DIVIDE          reduce using rule 80 (APAT -> GCON .)
    POW             reduce using rule 80 (APAT -> GCON .)
    EQUALITY        reduce using rule 80 (APAT -> GCON .)
    LESS            reduce using rule 80 (APAT -> GCON .)
    LEQ             reduce using rule 80 (APAT -> GCON .)
    GREATER         reduce using rule 80 (APAT -> GCON .)
    GEQ             reduce using rule 80 (APAT -> GCON .)
    PIPE            reduce using rule 80 (APAT -> GCON .)
    IDENTIFIER      reduce using rule 80 (APAT -> GCON .)
    WILDCARD        reduce using rule 80 (APAT -> GCON .)
    OPEN_PAREN      reduce using rule 80 (APAT -> GCON .)
    OPEN_SQUARE     reduce using rule 80 (APAT -> GCON .)
    INTEGER         reduce using rule 80 (APAT -> GCON .)
    FLOAT           reduce using rule 80 (APAT -> GCON .)
    CHAR            reduce using rule 80 (APAT -> GCON .)
    STRING          reduce using rule 80 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 80 (APAT -> GCON .)
    COMMA           reduce using rule 80 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 80 (APAT -> GCON .)
    ARROW           reduce using rule 80 (APAT -> GCON .)


state 30

    (81) APAT -> LITERAL .

    CONSTRUCTOR     reduce using rule 81 (APAT -> LITERAL .)
    EQUALS          reduce using rule 81 (APAT -> LITERAL .)
    BACKTICK        reduce using rule 81 (APAT -> LITERAL .)
    PLUS            reduce using rule 81 (APAT -> LITERAL .)
    MINUS           reduce using rule 81 (APAT -> LITERAL .)
    TIMES           reduce using rule 81 (APAT -> LITERAL .)
    DIVIDE          reduce using rule 81 (APAT -> LITERAL .)
    POW             reduce using rule 81 (APAT -> LITERAL .)
    EQUALITY        reduce using rule 81 (APAT -> LITERAL .)
    LESS            reduce using rule 81 (APAT -> LITERAL .)
    LEQ             reduce using rule 81 (APAT -> LITERAL .)
    GREATER         reduce using rule 81 (APAT -> LITERAL .)
    GEQ             reduce using rule 81 (APAT -> LITERAL .)
    PIPE            reduce using rule 81 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 81 (APAT -> LITERAL .)
    WILDCARD        reduce using rule 81 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 81 (APAT -> LITERAL .)
    OPEN_SQUARE     reduce using rule 81 (APAT -> LITERAL .)
    INTEGER         reduce using rule 81 (APAT -> LITERAL .)
    FLOAT           reduce using rule 81 (APAT -> LITERAL .)
    CHAR            reduce using rule 81 (APAT -> LITERAL .)
    STRING          reduce using rule 81 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 81 (APAT -> LITERAL .)
    COMMA           reduce using rule 81 (APAT -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 81 (APAT -> LITERAL .)
    ARROW           reduce using rule 81 (APAT -> LITERAL .)


state 31

    (82) APAT -> WILDCARD .

    CONSTRUCTOR     reduce using rule 82 (APAT -> WILDCARD .)
    EQUALS          reduce using rule 82 (APAT -> WILDCARD .)
    BACKTICK        reduce using rule 82 (APAT -> WILDCARD .)
    PLUS            reduce using rule 82 (APAT -> WILDCARD .)
    MINUS           reduce using rule 82 (APAT -> WILDCARD .)
    TIMES           reduce using rule 82 (APAT -> WILDCARD .)
    DIVIDE          reduce using rule 82 (APAT -> WILDCARD .)
    POW             reduce using rule 82 (APAT -> WILDCARD .)
    EQUALITY        reduce using rule 82 (APAT -> WILDCARD .)
    LESS            reduce using rule 82 (APAT -> WILDCARD .)
    LEQ             reduce using rule 82 (APAT -> WILDCARD .)
    GREATER         reduce using rule 82 (APAT -> WILDCARD .)
    GEQ             reduce using rule 82 (APAT -> WILDCARD .)
    PIPE            reduce using rule 82 (APAT -> WILDCARD .)
    IDENTIFIER      reduce using rule 82 (APAT -> WILDCARD .)
    WILDCARD        reduce using rule 82 (APAT -> WILDCARD .)
    OPEN_PAREN      reduce using rule 82 (APAT -> WILDCARD .)
    OPEN_SQUARE     reduce using rule 82 (APAT -> WILDCARD .)
    INTEGER         reduce using rule 82 (APAT -> WILDCARD .)
    FLOAT           reduce using rule 82 (APAT -> WILDCARD .)
    CHAR            reduce using rule 82 (APAT -> WILDCARD .)
    STRING          reduce using rule 82 (APAT -> WILDCARD .)
    CLOSE_PAREN     reduce using rule 82 (APAT -> WILDCARD .)
    COMMA           reduce using rule 82 (APAT -> WILDCARD .)
    CLOSE_SQUARE    reduce using rule 82 (APAT -> WILDCARD .)
    ARROW           reduce using rule 82 (APAT -> WILDCARD .)


state 32

    (85) APAT -> OPEN_SQUARE . PAT_LIST CLOSE_SQUARE
    (87) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (95) PAT_LIST -> . PAT_LIST COMMA PAT
    (96) PAT_LIST -> . PAT
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 76
    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    PAT_LIST                       shift and go to state 75
    PAT                            shift and go to state 77
    LPAT                           shift and go to state 23
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 33

    (111) LITERAL -> CHAR .

    CONSTRUCTOR     reduce using rule 111 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 111 (LITERAL -> CHAR .)
    BACKTICK        reduce using rule 111 (LITERAL -> CHAR .)
    PLUS            reduce using rule 111 (LITERAL -> CHAR .)
    MINUS           reduce using rule 111 (LITERAL -> CHAR .)
    TIMES           reduce using rule 111 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 111 (LITERAL -> CHAR .)
    POW             reduce using rule 111 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 111 (LITERAL -> CHAR .)
    LESS            reduce using rule 111 (LITERAL -> CHAR .)
    LEQ             reduce using rule 111 (LITERAL -> CHAR .)
    GREATER         reduce using rule 111 (LITERAL -> CHAR .)
    GEQ             reduce using rule 111 (LITERAL -> CHAR .)
    PIPE            reduce using rule 111 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 111 (LITERAL -> CHAR .)
    WILDCARD        reduce using rule 111 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 111 (LITERAL -> CHAR .)
    OPEN_SQUARE     reduce using rule 111 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 111 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 111 (LITERAL -> CHAR .)
    CHAR            reduce using rule 111 (LITERAL -> CHAR .)
    STRING          reduce using rule 111 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 111 (LITERAL -> CHAR .)
    COMMA           reduce using rule 111 (LITERAL -> CHAR .)
    CLOSE_SQUARE    reduce using rule 111 (LITERAL -> CHAR .)
    WHERE           reduce using rule 111 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 111 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 111 (LITERAL -> CHAR .)
    LAMBDA          reduce using rule 111 (LITERAL -> CHAR .)
    LET             reduce using rule 111 (LITERAL -> CHAR .)
    IF              reduce using rule 111 (LITERAL -> CHAR .)
    MATCH           reduce using rule 111 (LITERAL -> CHAR .)
    ARROW           reduce using rule 111 (LITERAL -> CHAR .)
    THEN            reduce using rule 111 (LITERAL -> CHAR .)
    OF              reduce using rule 111 (LITERAL -> CHAR .)
    ELSE            reduce using rule 111 (LITERAL -> CHAR .)


state 34

    (112) LITERAL -> STRING .

    CONSTRUCTOR     reduce using rule 112 (LITERAL -> STRING .)
    EQUALS          reduce using rule 112 (LITERAL -> STRING .)
    BACKTICK        reduce using rule 112 (LITERAL -> STRING .)
    PLUS            reduce using rule 112 (LITERAL -> STRING .)
    MINUS           reduce using rule 112 (LITERAL -> STRING .)
    TIMES           reduce using rule 112 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 112 (LITERAL -> STRING .)
    POW             reduce using rule 112 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 112 (LITERAL -> STRING .)
    LESS            reduce using rule 112 (LITERAL -> STRING .)
    LEQ             reduce using rule 112 (LITERAL -> STRING .)
    GREATER         reduce using rule 112 (LITERAL -> STRING .)
    GEQ             reduce using rule 112 (LITERAL -> STRING .)
    PIPE            reduce using rule 112 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 112 (LITERAL -> STRING .)
    WILDCARD        reduce using rule 112 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 112 (LITERAL -> STRING .)
    OPEN_SQUARE     reduce using rule 112 (LITERAL -> STRING .)
    INTEGER         reduce using rule 112 (LITERAL -> STRING .)
    FLOAT           reduce using rule 112 (LITERAL -> STRING .)
    CHAR            reduce using rule 112 (LITERAL -> STRING .)
    STRING          reduce using rule 112 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 112 (LITERAL -> STRING .)
    COMMA           reduce using rule 112 (LITERAL -> STRING .)
    CLOSE_SQUARE    reduce using rule 112 (LITERAL -> STRING .)
    WHERE           reduce using rule 112 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 112 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 112 (LITERAL -> STRING .)
    LAMBDA          reduce using rule 112 (LITERAL -> STRING .)
    LET             reduce using rule 112 (LITERAL -> STRING .)
    IF              reduce using rule 112 (LITERAL -> STRING .)
    MATCH           reduce using rule 112 (LITERAL -> STRING .)
    ARROW           reduce using rule 112 (LITERAL -> STRING .)
    THEN            reduce using rule 112 (LITERAL -> STRING .)
    OF              reduce using rule 112 (LITERAL -> STRING .)
    ELSE            reduce using rule 112 (LITERAL -> STRING .)


state 35

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (9) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (10) TOP_DECLARATIONS -> . TOP_DECLARATION
    (7) IMPORT_DECLARATION -> . IMPORT IDENTIFIER ENDSTATEMENT
    (8) IMPORT_DECLARATION -> . IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT
    (11) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
    (12) TOP_DECLARATION -> . DECLARATION
    (17) DECLARATION -> . GEN_DECLARATION
    (18) DECLARATION -> . FUNCTION_LHS RHS
    (19) DECLARATION -> . PAT RHS
    (20) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (21) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (22) GEN_DECLARATION -> . FIXITY OPS
    (23) GEN_DECLARATION -> .
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . PAT VAROP PAT
    (41) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (26) VARS -> . VARS COMMA IDENTIFIER
    (27) VARS -> . IDENTIFIER
    (28) FIXITY -> . INFIXL
    (29) FIXITY -> . INFIXR
    (30) FIXITY -> . INFIX
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    CLOSE_BRACE     reduce using rule 23 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 23 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 22
    INFIXL          shift and go to state 24
    INFIXR          shift and go to state 25
    INFIX           shift and go to state 26
    MINUS           shift and go to state 27
    WILDCARD        shift and go to state 31
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    TOP_DECLARATIONS               shift and go to state 78
    IMPORT_DECLARATION             shift and go to state 79
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    FIXITY                         shift and go to state 19
    APAT                           shift and go to state 21
    LPAT                           shift and go to state 23
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 36

    (3) BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE .)


state 37

    (4) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 4 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 38

    (9) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (11) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT
    (12) TOP_DECLARATION -> . DECLARATION
    (17) DECLARATION -> . GEN_DECLARATION
    (18) DECLARATION -> . FUNCTION_LHS RHS
    (19) DECLARATION -> . PAT RHS
    (20) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (21) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (22) GEN_DECLARATION -> . FIXITY OPS
    (23) GEN_DECLARATION -> .
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . PAT VAROP PAT
    (41) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (26) VARS -> . VARS COMMA IDENTIFIER
    (27) VARS -> . IDENTIFIER
    (28) FIXITY -> . INFIXL
    (29) FIXITY -> . INFIXR
    (30) FIXITY -> . INFIX
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    NEWTYPE         shift and go to state 13
    CLOSE_BRACE     reduce using rule 23 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 23 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 22
    INFIXL          shift and go to state 24
    INFIXR          shift and go to state 25
    INFIX           shift and go to state 26
    MINUS           shift and go to state 27
    WILDCARD        shift and go to state 31
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    TOP_DECLARATION                shift and go to state 80
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    FIXITY                         shift and go to state 19
    APAT                           shift and go to state 21
    LPAT                           shift and go to state 23
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 39

    (7) IMPORT_DECLARATION -> IMPORT IDENTIFIER . ENDSTATEMENT
    (8) IMPORT_DECLARATION -> IMPORT IDENTIFIER . AS IDENTIFIER ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 81
    AS              shift and go to state 82


state 40

    (79) APAT -> IDENTIFIER .

    IDENTIFIER      reduce using rule 79 (APAT -> IDENTIFIER .)
    WILDCARD        reduce using rule 79 (APAT -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 79 (APAT -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 79 (APAT -> IDENTIFIER .)
    INTEGER         reduce using rule 79 (APAT -> IDENTIFIER .)
    FLOAT           reduce using rule 79 (APAT -> IDENTIFIER .)
    CHAR            reduce using rule 79 (APAT -> IDENTIFIER .)
    STRING          reduce using rule 79 (APAT -> IDENTIFIER .)
    EQUALS          reduce using rule 79 (APAT -> IDENTIFIER .)
    PIPE            reduce using rule 79 (APAT -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 79 (APAT -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 79 (APAT -> IDENTIFIER .)
    COMMA           reduce using rule 79 (APAT -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 79 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 79 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 79 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 79 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 79 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 79 (APAT -> IDENTIFIER .)
    POW             reduce using rule 79 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 79 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 79 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 79 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 79 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 79 (APAT -> IDENTIFIER .)
    ARROW           reduce using rule 79 (APAT -> IDENTIFIER .)


state 41

    (39) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (93) APATS -> . APAT APATS
    (94) APATS -> .
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    EQUALS          reduce using rule 94 (APATS -> .)
    PIPE            reduce using rule 94 (APATS -> .)
    CLOSE_PAREN     reduce using rule 94 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 83
    APATS                          shift and go to state 84
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 42

    (83) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (84) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (86) GCON -> OPEN_PAREN . CLOSE_PAREN
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 70
    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    PAT                            shift and go to state 85
    LPAT                           shift and go to state 23
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 43

    (11) TOP_DECLARATION -> NEWTYPE TYPENAME . EQUALS TYPENAME ENDSTATEMENT

    EQUALS          shift and go to state 86


state 44

    (18) DECLARATION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 18 (DECLARATION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 18 (DECLARATION -> FUNCTION_LHS RHS .)


state 45

    (42) RHS -> EQUALS . EXP
    (43) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 87
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 46

    (44) RHS -> GDRHS .
    (45) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 44 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 44 (RHS -> GDRHS .)
    WHERE           shift and go to state 102


state 47

    (46) GDRHS -> GUARDS . EQUALS EXP
    (47) GDRHS -> GUARDS . EQUALS EXP GDRHS

    EQUALS          shift and go to state 103


state 48

    (48) GUARDS -> PIPE . GUARD_LIST
    (49) GUARD_LIST -> . GUARD_LIST GUARD
    (50) GUARD_LIST -> . GUARD
    (51) GUARD -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    GUARD_LIST                     shift and go to state 104
    GUARD                          shift and go to state 105
    INFIX_EXP                      shift and go to state 106
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 49

    (19) DECLARATION -> PAT RHS .

    CLOSE_BRACE     reduce using rule 19 (DECLARATION -> PAT RHS .)
    ENDSTATEMENT    reduce using rule 19 (DECLARATION -> PAT RHS .)


state 50

    (40) FUNCTION_LHS -> PAT VAROP . PAT
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    PAT                            shift and go to state 107
    LPAT                           shift and go to state 23
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 51

    (88) VAROP -> VARSYM .

    MINUS           reduce using rule 88 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 88 (VAROP -> VARSYM .)
    WILDCARD        reduce using rule 88 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 88 (VAROP -> VARSYM .)
    OPEN_SQUARE     reduce using rule 88 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 88 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 88 (VAROP -> VARSYM .)
    CHAR            reduce using rule 88 (VAROP -> VARSYM .)
    STRING          reduce using rule 88 (VAROP -> VARSYM .)
    COMMA           reduce using rule 88 (VAROP -> VARSYM .)
    CLOSE_BRACE     reduce using rule 88 (VAROP -> VARSYM .)
    ENDSTATEMENT    reduce using rule 88 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 88 (VAROP -> VARSYM .)
    LET             reduce using rule 88 (VAROP -> VARSYM .)
    IF              reduce using rule 88 (VAROP -> VARSYM .)
    MATCH           reduce using rule 88 (VAROP -> VARSYM .)


state 52

    (89) VAROP -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 108


state 53

    (97) VARSYM -> PLUS .

    MINUS           reduce using rule 97 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 97 (VARSYM -> PLUS .)
    WILDCARD        reduce using rule 97 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 97 (VARSYM -> PLUS .)
    OPEN_SQUARE     reduce using rule 97 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 97 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 97 (VARSYM -> PLUS .)
    CHAR            reduce using rule 97 (VARSYM -> PLUS .)
    STRING          reduce using rule 97 (VARSYM -> PLUS .)
    COMMA           reduce using rule 97 (VARSYM -> PLUS .)
    CLOSE_BRACE     reduce using rule 97 (VARSYM -> PLUS .)
    ENDSTATEMENT    reduce using rule 97 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 97 (VARSYM -> PLUS .)
    LET             reduce using rule 97 (VARSYM -> PLUS .)
    IF              reduce using rule 97 (VARSYM -> PLUS .)
    MATCH           reduce using rule 97 (VARSYM -> PLUS .)


state 54

    (98) VARSYM -> MINUS .

    MINUS           reduce using rule 98 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 98 (VARSYM -> MINUS .)
    WILDCARD        reduce using rule 98 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 98 (VARSYM -> MINUS .)
    OPEN_SQUARE     reduce using rule 98 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 98 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 98 (VARSYM -> MINUS .)
    CHAR            reduce using rule 98 (VARSYM -> MINUS .)
    STRING          reduce using rule 98 (VARSYM -> MINUS .)
    COMMA           reduce using rule 98 (VARSYM -> MINUS .)
    CLOSE_BRACE     reduce using rule 98 (VARSYM -> MINUS .)
    ENDSTATEMENT    reduce using rule 98 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 98 (VARSYM -> MINUS .)
    LET             reduce using rule 98 (VARSYM -> MINUS .)
    IF              reduce using rule 98 (VARSYM -> MINUS .)
    MATCH           reduce using rule 98 (VARSYM -> MINUS .)


state 55

    (99) VARSYM -> TIMES .

    MINUS           reduce using rule 99 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 99 (VARSYM -> TIMES .)
    WILDCARD        reduce using rule 99 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 99 (VARSYM -> TIMES .)
    OPEN_SQUARE     reduce using rule 99 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 99 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 99 (VARSYM -> TIMES .)
    CHAR            reduce using rule 99 (VARSYM -> TIMES .)
    STRING          reduce using rule 99 (VARSYM -> TIMES .)
    COMMA           reduce using rule 99 (VARSYM -> TIMES .)
    CLOSE_BRACE     reduce using rule 99 (VARSYM -> TIMES .)
    ENDSTATEMENT    reduce using rule 99 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 99 (VARSYM -> TIMES .)
    LET             reduce using rule 99 (VARSYM -> TIMES .)
    IF              reduce using rule 99 (VARSYM -> TIMES .)
    MATCH           reduce using rule 99 (VARSYM -> TIMES .)


state 56

    (100) VARSYM -> DIVIDE .

    MINUS           reduce using rule 100 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 100 (VARSYM -> DIVIDE .)
    WILDCARD        reduce using rule 100 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 100 (VARSYM -> DIVIDE .)
    OPEN_SQUARE     reduce using rule 100 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 100 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 100 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 100 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 100 (VARSYM -> DIVIDE .)
    COMMA           reduce using rule 100 (VARSYM -> DIVIDE .)
    CLOSE_BRACE     reduce using rule 100 (VARSYM -> DIVIDE .)
    ENDSTATEMENT    reduce using rule 100 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 100 (VARSYM -> DIVIDE .)
    LET             reduce using rule 100 (VARSYM -> DIVIDE .)
    IF              reduce using rule 100 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 100 (VARSYM -> DIVIDE .)


state 57

    (101) VARSYM -> POW .

    MINUS           reduce using rule 101 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 101 (VARSYM -> POW .)
    WILDCARD        reduce using rule 101 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 101 (VARSYM -> POW .)
    OPEN_SQUARE     reduce using rule 101 (VARSYM -> POW .)
    INTEGER         reduce using rule 101 (VARSYM -> POW .)
    FLOAT           reduce using rule 101 (VARSYM -> POW .)
    CHAR            reduce using rule 101 (VARSYM -> POW .)
    STRING          reduce using rule 101 (VARSYM -> POW .)
    COMMA           reduce using rule 101 (VARSYM -> POW .)
    CLOSE_BRACE     reduce using rule 101 (VARSYM -> POW .)
    ENDSTATEMENT    reduce using rule 101 (VARSYM -> POW .)
    LAMBDA          reduce using rule 101 (VARSYM -> POW .)
    LET             reduce using rule 101 (VARSYM -> POW .)
    IF              reduce using rule 101 (VARSYM -> POW .)
    MATCH           reduce using rule 101 (VARSYM -> POW .)


state 58

    (102) VARSYM -> EQUALITY .

    MINUS           reduce using rule 102 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 102 (VARSYM -> EQUALITY .)
    WILDCARD        reduce using rule 102 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 102 (VARSYM -> EQUALITY .)
    OPEN_SQUARE     reduce using rule 102 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 102 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 102 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 102 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 102 (VARSYM -> EQUALITY .)
    COMMA           reduce using rule 102 (VARSYM -> EQUALITY .)
    CLOSE_BRACE     reduce using rule 102 (VARSYM -> EQUALITY .)
    ENDSTATEMENT    reduce using rule 102 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 102 (VARSYM -> EQUALITY .)
    LET             reduce using rule 102 (VARSYM -> EQUALITY .)
    IF              reduce using rule 102 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 102 (VARSYM -> EQUALITY .)


state 59

    (103) VARSYM -> LESS .

    MINUS           reduce using rule 103 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 103 (VARSYM -> LESS .)
    WILDCARD        reduce using rule 103 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 103 (VARSYM -> LESS .)
    OPEN_SQUARE     reduce using rule 103 (VARSYM -> LESS .)
    INTEGER         reduce using rule 103 (VARSYM -> LESS .)
    FLOAT           reduce using rule 103 (VARSYM -> LESS .)
    CHAR            reduce using rule 103 (VARSYM -> LESS .)
    STRING          reduce using rule 103 (VARSYM -> LESS .)
    COMMA           reduce using rule 103 (VARSYM -> LESS .)
    CLOSE_BRACE     reduce using rule 103 (VARSYM -> LESS .)
    ENDSTATEMENT    reduce using rule 103 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 103 (VARSYM -> LESS .)
    LET             reduce using rule 103 (VARSYM -> LESS .)
    IF              reduce using rule 103 (VARSYM -> LESS .)
    MATCH           reduce using rule 103 (VARSYM -> LESS .)


state 60

    (104) VARSYM -> LEQ .

    MINUS           reduce using rule 104 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 104 (VARSYM -> LEQ .)
    WILDCARD        reduce using rule 104 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 104 (VARSYM -> LEQ .)
    OPEN_SQUARE     reduce using rule 104 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 104 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 104 (VARSYM -> LEQ .)
    CHAR            reduce using rule 104 (VARSYM -> LEQ .)
    STRING          reduce using rule 104 (VARSYM -> LEQ .)
    COMMA           reduce using rule 104 (VARSYM -> LEQ .)
    CLOSE_BRACE     reduce using rule 104 (VARSYM -> LEQ .)
    ENDSTATEMENT    reduce using rule 104 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 104 (VARSYM -> LEQ .)
    LET             reduce using rule 104 (VARSYM -> LEQ .)
    IF              reduce using rule 104 (VARSYM -> LEQ .)
    MATCH           reduce using rule 104 (VARSYM -> LEQ .)


state 61

    (105) VARSYM -> GREATER .

    MINUS           reduce using rule 105 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 105 (VARSYM -> GREATER .)
    WILDCARD        reduce using rule 105 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 105 (VARSYM -> GREATER .)
    OPEN_SQUARE     reduce using rule 105 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 105 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 105 (VARSYM -> GREATER .)
    CHAR            reduce using rule 105 (VARSYM -> GREATER .)
    STRING          reduce using rule 105 (VARSYM -> GREATER .)
    COMMA           reduce using rule 105 (VARSYM -> GREATER .)
    CLOSE_BRACE     reduce using rule 105 (VARSYM -> GREATER .)
    ENDSTATEMENT    reduce using rule 105 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 105 (VARSYM -> GREATER .)
    LET             reduce using rule 105 (VARSYM -> GREATER .)
    IF              reduce using rule 105 (VARSYM -> GREATER .)
    MATCH           reduce using rule 105 (VARSYM -> GREATER .)


state 62

    (106) VARSYM -> GEQ .

    MINUS           reduce using rule 106 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 106 (VARSYM -> GEQ .)
    WILDCARD        reduce using rule 106 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 106 (VARSYM -> GEQ .)
    OPEN_SQUARE     reduce using rule 106 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 106 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 106 (VARSYM -> GEQ .)
    CHAR            reduce using rule 106 (VARSYM -> GEQ .)
    STRING          reduce using rule 106 (VARSYM -> GEQ .)
    COMMA           reduce using rule 106 (VARSYM -> GEQ .)
    CLOSE_BRACE     reduce using rule 106 (VARSYM -> GEQ .)
    ENDSTATEMENT    reduce using rule 106 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 106 (VARSYM -> GEQ .)
    LET             reduce using rule 106 (VARSYM -> GEQ .)
    IF              reduce using rule 106 (VARSYM -> GEQ .)
    MATCH           reduce using rule 106 (VARSYM -> GEQ .)


state 63

    (20) GEN_DECLARATION -> VARS TYPESIG . TYPE
    (31) TYPE -> . BTYPE
    (32) TYPE -> . BTYPE ARROW TYPE
    (33) BTYPE -> . ATYPE
    (34) BTYPE -> . BTYPE ATYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (38) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 112
    OPEN_PAREN      shift and go to state 113
    OPEN_SQUARE     shift and go to state 114

    TYPE                           shift and go to state 109
    BTYPE                          shift and go to state 110
    ATYPE                          shift and go to state 111

state 64

    (26) VARS -> VARS COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 115


state 65

    (21) GEN_DECLARATION -> FIXITY INTEGER . OPS
    (24) OPS -> . OPS COMMA OP
    (25) OPS -> . OP
    (90) OP -> . VAROP
    (88) VAROP -> . VARSYM
    (89) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (97) VARSYM -> . PLUS
    (98) VARSYM -> . MINUS
    (99) VARSYM -> . TIMES
    (100) VARSYM -> . DIVIDE
    (101) VARSYM -> . POW
    (102) VARSYM -> . EQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ

    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    OPS                            shift and go to state 116
    OP                             shift and go to state 67
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 66

    (22) GEN_DECLARATION -> FIXITY OPS .
    (24) OPS -> OPS . COMMA OP

    CLOSE_BRACE     reduce using rule 22 (GEN_DECLARATION -> FIXITY OPS .)
    ENDSTATEMENT    reduce using rule 22 (GEN_DECLARATION -> FIXITY OPS .)
    COMMA           shift and go to state 117


state 67

    (25) OPS -> OP .

    COMMA           reduce using rule 25 (OPS -> OP .)
    CLOSE_BRACE     reduce using rule 25 (OPS -> OP .)
    ENDSTATEMENT    reduce using rule 25 (OPS -> OP .)


state 68

    (90) OP -> VAROP .

    COMMA           reduce using rule 90 (OP -> VAROP .)
    CLOSE_BRACE     reduce using rule 90 (OP -> VAROP .)
    ENDSTATEMENT    reduce using rule 90 (OP -> VAROP .)
    MINUS           reduce using rule 90 (OP -> VAROP .)
    LAMBDA          reduce using rule 90 (OP -> VAROP .)
    LET             reduce using rule 90 (OP -> VAROP .)
    IF              reduce using rule 90 (OP -> VAROP .)
    MATCH           reduce using rule 90 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 90 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 90 (OP -> VAROP .)
    OPEN_SQUARE     reduce using rule 90 (OP -> VAROP .)
    INTEGER         reduce using rule 90 (OP -> VAROP .)
    FLOAT           reduce using rule 90 (OP -> VAROP .)
    CHAR            reduce using rule 90 (OP -> VAROP .)
    STRING          reduce using rule 90 (OP -> VAROP .)


state 69

    (41) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 118


state 70

    (86) GCON -> OPEN_PAREN CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BACKTICK        reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TIMES           reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    POW             reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALITY        reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LESS            reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LEQ             reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GREATER         reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GEQ             reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PIPE            reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WILDCARD        reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WHERE           reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LAMBDA          reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LET             reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IF              reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MATCH           reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    THEN            reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OF              reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 86 (GCON -> OPEN_PAREN CLOSE_PAREN .)


state 71

    (83) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (84) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN
    (40) FUNCTION_LHS -> PAT . VAROP PAT
    (88) VAROP -> . VARSYM
    (89) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (97) VARSYM -> . PLUS
    (98) VARSYM -> . MINUS
    (99) VARSYM -> . TIMES
    (100) VARSYM -> . DIVIDE
    (101) VARSYM -> . POW
    (102) VARSYM -> . EQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ

    CLOSE_PAREN     shift and go to state 119
    COMMA           shift and go to state 120
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    VAROP                          shift and go to state 50
    VARSYM                         shift and go to state 51

state 72

    (39) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (79) APAT -> IDENTIFIER .
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    CONSTRUCTOR     reduce using rule 79 (APAT -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 79 (APAT -> IDENTIFIER .)
    COMMA           reduce using rule 79 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 79 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 79 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 79 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 79 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 79 (APAT -> IDENTIFIER .)
    POW             reduce using rule 79 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 79 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 79 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 79 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 79 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 79 (APAT -> IDENTIFIER .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 41
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 73

    (74) PAT -> LPAT CONSTRUCTOR . PAT
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    LPAT                           shift and go to state 23
    PAT                            shift and go to state 121
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 74

    (77) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (78) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 122
    FLOAT           shift and go to state 123


state 75

    (85) APAT -> OPEN_SQUARE PAT_LIST . CLOSE_SQUARE
    (95) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_SQUARE    shift and go to state 124
    COMMA           shift and go to state 125


state 76

    (87) GCON -> OPEN_SQUARE CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BACKTICK        reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TIMES           reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    POW             reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALITY        reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LEQ             reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GEQ             reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PIPE            reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WILDCARD        reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INTEGER         reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CHAR            reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WHERE           reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LAMBDA          reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LET             reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IF              reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MATCH           reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ARROW           reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    THEN            reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OF              reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ELSE            reduce using rule 87 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)


state 77

    (96) PAT_LIST -> PAT .

    CLOSE_SQUARE    reduce using rule 96 (PAT_LIST -> PAT .)
    COMMA           reduce using rule 96 (PAT_LIST -> PAT .)
    CLOSE_PAREN     reduce using rule 96 (PAT_LIST -> PAT .)


state 78

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (9) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 126
    ENDSTATEMENT    shift and go to state 38


state 79

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)
    CLOSE_BRACE     reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 80

    (9) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 81

    (7) IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT .

    ENDSTATEMENT    reduce using rule 7 (IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT .)
    CLOSE_BRACE     reduce using rule 7 (IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT .)


state 82

    (8) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS . IDENTIFIER ENDSTATEMENT

    IDENTIFIER      shift and go to state 127


state 83

    (93) APATS -> APAT . APATS
    (93) APATS -> . APAT APATS
    (94) APATS -> .
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    EQUALS          reduce using rule 94 (APATS -> .)
    PIPE            reduce using rule 94 (APATS -> .)
    CLOSE_PAREN     reduce using rule 94 (APATS -> .)
    ARROW           reduce using rule 94 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 83
    APATS                          shift and go to state 128
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 84

    (39) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 39 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    PIPE            reduce using rule 39 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 39 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 85

    (83) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (84) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 119
    COMMA           shift and go to state 120


state 86

    (11) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS . TYPENAME ENDSTATEMENT

    TYPENAME        shift and go to state 129


state 87

    (42) RHS -> EQUALS EXP .
    (43) RHS -> EQUALS EXP . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 42 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 42 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 130


state 88

    (52) EXP -> INFIX_EXP .

    WHERE           reduce using rule 52 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 52 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 52 (EXP -> INFIX_EXP .)
    THEN            reduce using rule 52 (EXP -> INFIX_EXP .)
    OF              reduce using rule 52 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 52 (EXP -> INFIX_EXP .)
    COMMA           reduce using rule 52 (EXP -> INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 52 (EXP -> INFIX_EXP .)
    PIPE            reduce using rule 52 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 52 (EXP -> INFIX_EXP .)
    LAMBDA          reduce using rule 52 (EXP -> INFIX_EXP .)
    LET             reduce using rule 52 (EXP -> INFIX_EXP .)
    IF              reduce using rule 52 (EXP -> INFIX_EXP .)
    MATCH           reduce using rule 52 (EXP -> INFIX_EXP .)
    IDENTIFIER      reduce using rule 52 (EXP -> INFIX_EXP .)
    OPEN_PAREN      reduce using rule 52 (EXP -> INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 52 (EXP -> INFIX_EXP .)
    INTEGER         reduce using rule 52 (EXP -> INFIX_EXP .)
    FLOAT           reduce using rule 52 (EXP -> INFIX_EXP .)
    CHAR            reduce using rule 52 (EXP -> INFIX_EXP .)
    STRING          reduce using rule 52 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 52 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 52 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 52 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 52 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 52 (EXP -> INFIX_EXP .)
    POW             reduce using rule 52 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 52 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 52 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 52 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 52 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 52 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 52 (EXP -> INFIX_EXP .)
    WILDCARD        reduce using rule 52 (EXP -> INFIX_EXP .)


state 89

    (53) INFIX_EXP -> LEXP . OP INFIX_EXP
    (55) INFIX_EXP -> LEXP .
    (90) OP -> . VAROP
    (88) VAROP -> . VARSYM
    (89) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (97) VARSYM -> . PLUS
    (98) VARSYM -> . MINUS
    (99) VARSYM -> . TIMES
    (100) VARSYM -> . DIVIDE
    (101) VARSYM -> . POW
    (102) VARSYM -> . EQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ

  ! shift/reduce conflict for BACKTICK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    WHERE           reduce using rule 55 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 55 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 55 (INFIX_EXP -> LEXP .)
    LAMBDA          reduce using rule 55 (INFIX_EXP -> LEXP .)
    LET             reduce using rule 55 (INFIX_EXP -> LEXP .)
    IF              reduce using rule 55 (INFIX_EXP -> LEXP .)
    MATCH           reduce using rule 55 (INFIX_EXP -> LEXP .)
    IDENTIFIER      reduce using rule 55 (INFIX_EXP -> LEXP .)
    OPEN_PAREN      reduce using rule 55 (INFIX_EXP -> LEXP .)
    OPEN_SQUARE     reduce using rule 55 (INFIX_EXP -> LEXP .)
    INTEGER         reduce using rule 55 (INFIX_EXP -> LEXP .)
    FLOAT           reduce using rule 55 (INFIX_EXP -> LEXP .)
    CHAR            reduce using rule 55 (INFIX_EXP -> LEXP .)
    STRING          reduce using rule 55 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 55 (INFIX_EXP -> LEXP .)
    THEN            reduce using rule 55 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 55 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 55 (INFIX_EXP -> LEXP .)
    COMMA           reduce using rule 55 (INFIX_EXP -> LEXP .)
    CLOSE_SQUARE    reduce using rule 55 (INFIX_EXP -> LEXP .)
    PIPE            reduce using rule 55 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 55 (INFIX_EXP -> LEXP .)
    WILDCARD        reduce using rule 55 (INFIX_EXP -> LEXP .)
    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

  ! MINUS           [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! BACKTICK        [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! PLUS            [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 55 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 131
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 90

    (54) INFIX_EXP -> MINUS . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    INFIX_EXP                      shift and go to state 132
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 91

    (56) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 133
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 92

    (57) LEXP -> LET . DECLARATIONS IN EXP
    (13) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (14) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 135

    DECLARATIONS                   shift and go to state 134

state 93

    (58) LEXP -> IF . EXP THEN EXP ELSE EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 136
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 94

    (59) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 137
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 95

    (60) LEXP -> FEXP .
    (61) FEXP -> FEXP . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    BACKTICK        reduce using rule 60 (LEXP -> FEXP .)
    PLUS            reduce using rule 60 (LEXP -> FEXP .)
    MINUS           reduce using rule 60 (LEXP -> FEXP .)
    TIMES           reduce using rule 60 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 60 (LEXP -> FEXP .)
    POW             reduce using rule 60 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 60 (LEXP -> FEXP .)
    LESS            reduce using rule 60 (LEXP -> FEXP .)
    LEQ             reduce using rule 60 (LEXP -> FEXP .)
    GREATER         reduce using rule 60 (LEXP -> FEXP .)
    GEQ             reduce using rule 60 (LEXP -> FEXP .)
    WHERE           reduce using rule 60 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 60 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 60 (LEXP -> FEXP .)
    LAMBDA          reduce using rule 60 (LEXP -> FEXP .)
    LET             reduce using rule 60 (LEXP -> FEXP .)
    IF              reduce using rule 60 (LEXP -> FEXP .)
    MATCH           reduce using rule 60 (LEXP -> FEXP .)
    EQUALS          reduce using rule 60 (LEXP -> FEXP .)
    THEN            reduce using rule 60 (LEXP -> FEXP .)
    OF              reduce using rule 60 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 60 (LEXP -> FEXP .)
    COMMA           reduce using rule 60 (LEXP -> FEXP .)
    CLOSE_SQUARE    reduce using rule 60 (LEXP -> FEXP .)
    PIPE            reduce using rule 60 (LEXP -> FEXP .)
    ELSE            reduce using rule 60 (LEXP -> FEXP .)
    WILDCARD        reduce using rule 60 (LEXP -> FEXP .)
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

  ! IDENTIFIER      [ reduce using rule 60 (LEXP -> FEXP .) ]
  ! OPEN_PAREN      [ reduce using rule 60 (LEXP -> FEXP .) ]
  ! OPEN_SQUARE     [ reduce using rule 60 (LEXP -> FEXP .) ]
  ! INTEGER         [ reduce using rule 60 (LEXP -> FEXP .) ]
  ! FLOAT           [ reduce using rule 60 (LEXP -> FEXP .) ]
  ! CHAR            [ reduce using rule 60 (LEXP -> FEXP .) ]
  ! STRING          [ reduce using rule 60 (LEXP -> FEXP .) ]

    AEXP                           shift and go to state 138
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 96

    (62) FEXP -> AEXP .

    IDENTIFIER      reduce using rule 62 (FEXP -> AEXP .)
    OPEN_PAREN      reduce using rule 62 (FEXP -> AEXP .)
    OPEN_SQUARE     reduce using rule 62 (FEXP -> AEXP .)
    INTEGER         reduce using rule 62 (FEXP -> AEXP .)
    FLOAT           reduce using rule 62 (FEXP -> AEXP .)
    CHAR            reduce using rule 62 (FEXP -> AEXP .)
    STRING          reduce using rule 62 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 62 (FEXP -> AEXP .)
    PLUS            reduce using rule 62 (FEXP -> AEXP .)
    MINUS           reduce using rule 62 (FEXP -> AEXP .)
    TIMES           reduce using rule 62 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 62 (FEXP -> AEXP .)
    POW             reduce using rule 62 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 62 (FEXP -> AEXP .)
    LESS            reduce using rule 62 (FEXP -> AEXP .)
    LEQ             reduce using rule 62 (FEXP -> AEXP .)
    GREATER         reduce using rule 62 (FEXP -> AEXP .)
    GEQ             reduce using rule 62 (FEXP -> AEXP .)
    WHERE           reduce using rule 62 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 62 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 62 (FEXP -> AEXP .)
    LAMBDA          reduce using rule 62 (FEXP -> AEXP .)
    LET             reduce using rule 62 (FEXP -> AEXP .)
    IF              reduce using rule 62 (FEXP -> AEXP .)
    MATCH           reduce using rule 62 (FEXP -> AEXP .)
    EQUALS          reduce using rule 62 (FEXP -> AEXP .)
    THEN            reduce using rule 62 (FEXP -> AEXP .)
    OF              reduce using rule 62 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 62 (FEXP -> AEXP .)
    COMMA           reduce using rule 62 (FEXP -> AEXP .)
    CLOSE_SQUARE    reduce using rule 62 (FEXP -> AEXP .)
    PIPE            reduce using rule 62 (FEXP -> AEXP .)
    ELSE            reduce using rule 62 (FEXP -> AEXP .)
    WILDCARD        reduce using rule 62 (FEXP -> AEXP .)


state 97

    (63) AEXP -> IDENTIFIER .

    IDENTIFIER      reduce using rule 63 (AEXP -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 63 (AEXP -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 63 (AEXP -> IDENTIFIER .)
    INTEGER         reduce using rule 63 (AEXP -> IDENTIFIER .)
    FLOAT           reduce using rule 63 (AEXP -> IDENTIFIER .)
    CHAR            reduce using rule 63 (AEXP -> IDENTIFIER .)
    STRING          reduce using rule 63 (AEXP -> IDENTIFIER .)
    BACKTICK        reduce using rule 63 (AEXP -> IDENTIFIER .)
    PLUS            reduce using rule 63 (AEXP -> IDENTIFIER .)
    MINUS           reduce using rule 63 (AEXP -> IDENTIFIER .)
    TIMES           reduce using rule 63 (AEXP -> IDENTIFIER .)
    DIVIDE          reduce using rule 63 (AEXP -> IDENTIFIER .)
    POW             reduce using rule 63 (AEXP -> IDENTIFIER .)
    EQUALITY        reduce using rule 63 (AEXP -> IDENTIFIER .)
    LESS            reduce using rule 63 (AEXP -> IDENTIFIER .)
    LEQ             reduce using rule 63 (AEXP -> IDENTIFIER .)
    GREATER         reduce using rule 63 (AEXP -> IDENTIFIER .)
    GEQ             reduce using rule 63 (AEXP -> IDENTIFIER .)
    WHERE           reduce using rule 63 (AEXP -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 63 (AEXP -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 63 (AEXP -> IDENTIFIER .)
    LAMBDA          reduce using rule 63 (AEXP -> IDENTIFIER .)
    LET             reduce using rule 63 (AEXP -> IDENTIFIER .)
    IF              reduce using rule 63 (AEXP -> IDENTIFIER .)
    MATCH           reduce using rule 63 (AEXP -> IDENTIFIER .)
    EQUALS          reduce using rule 63 (AEXP -> IDENTIFIER .)
    THEN            reduce using rule 63 (AEXP -> IDENTIFIER .)
    OF              reduce using rule 63 (AEXP -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 63 (AEXP -> IDENTIFIER .)
    COMMA           reduce using rule 63 (AEXP -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 63 (AEXP -> IDENTIFIER .)
    PIPE            reduce using rule 63 (AEXP -> IDENTIFIER .)
    ELSE            reduce using rule 63 (AEXP -> IDENTIFIER .)
    WILDCARD        reduce using rule 63 (AEXP -> IDENTIFIER .)


state 98

    (64) AEXP -> GCON .

    IDENTIFIER      reduce using rule 64 (AEXP -> GCON .)
    OPEN_PAREN      reduce using rule 64 (AEXP -> GCON .)
    OPEN_SQUARE     reduce using rule 64 (AEXP -> GCON .)
    INTEGER         reduce using rule 64 (AEXP -> GCON .)
    FLOAT           reduce using rule 64 (AEXP -> GCON .)
    CHAR            reduce using rule 64 (AEXP -> GCON .)
    STRING          reduce using rule 64 (AEXP -> GCON .)
    BACKTICK        reduce using rule 64 (AEXP -> GCON .)
    PLUS            reduce using rule 64 (AEXP -> GCON .)
    MINUS           reduce using rule 64 (AEXP -> GCON .)
    TIMES           reduce using rule 64 (AEXP -> GCON .)
    DIVIDE          reduce using rule 64 (AEXP -> GCON .)
    POW             reduce using rule 64 (AEXP -> GCON .)
    EQUALITY        reduce using rule 64 (AEXP -> GCON .)
    LESS            reduce using rule 64 (AEXP -> GCON .)
    LEQ             reduce using rule 64 (AEXP -> GCON .)
    GREATER         reduce using rule 64 (AEXP -> GCON .)
    GEQ             reduce using rule 64 (AEXP -> GCON .)
    WHERE           reduce using rule 64 (AEXP -> GCON .)
    CLOSE_BRACE     reduce using rule 64 (AEXP -> GCON .)
    ENDSTATEMENT    reduce using rule 64 (AEXP -> GCON .)
    LAMBDA          reduce using rule 64 (AEXP -> GCON .)
    LET             reduce using rule 64 (AEXP -> GCON .)
    IF              reduce using rule 64 (AEXP -> GCON .)
    MATCH           reduce using rule 64 (AEXP -> GCON .)
    EQUALS          reduce using rule 64 (AEXP -> GCON .)
    THEN            reduce using rule 64 (AEXP -> GCON .)
    OF              reduce using rule 64 (AEXP -> GCON .)
    CLOSE_PAREN     reduce using rule 64 (AEXP -> GCON .)
    COMMA           reduce using rule 64 (AEXP -> GCON .)
    CLOSE_SQUARE    reduce using rule 64 (AEXP -> GCON .)
    PIPE            reduce using rule 64 (AEXP -> GCON .)
    ELSE            reduce using rule 64 (AEXP -> GCON .)
    WILDCARD        reduce using rule 64 (AEXP -> GCON .)


state 99

    (65) AEXP -> LITERAL .

    IDENTIFIER      reduce using rule 65 (AEXP -> LITERAL .)
    OPEN_PAREN      reduce using rule 65 (AEXP -> LITERAL .)
    OPEN_SQUARE     reduce using rule 65 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 65 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 65 (AEXP -> LITERAL .)
    CHAR            reduce using rule 65 (AEXP -> LITERAL .)
    STRING          reduce using rule 65 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 65 (AEXP -> LITERAL .)
    PLUS            reduce using rule 65 (AEXP -> LITERAL .)
    MINUS           reduce using rule 65 (AEXP -> LITERAL .)
    TIMES           reduce using rule 65 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 65 (AEXP -> LITERAL .)
    POW             reduce using rule 65 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 65 (AEXP -> LITERAL .)
    LESS            reduce using rule 65 (AEXP -> LITERAL .)
    LEQ             reduce using rule 65 (AEXP -> LITERAL .)
    GREATER         reduce using rule 65 (AEXP -> LITERAL .)
    GEQ             reduce using rule 65 (AEXP -> LITERAL .)
    WHERE           reduce using rule 65 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 65 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 65 (AEXP -> LITERAL .)
    LAMBDA          reduce using rule 65 (AEXP -> LITERAL .)
    LET             reduce using rule 65 (AEXP -> LITERAL .)
    IF              reduce using rule 65 (AEXP -> LITERAL .)
    MATCH           reduce using rule 65 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 65 (AEXP -> LITERAL .)
    THEN            reduce using rule 65 (AEXP -> LITERAL .)
    OF              reduce using rule 65 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 65 (AEXP -> LITERAL .)
    COMMA           reduce using rule 65 (AEXP -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 65 (AEXP -> LITERAL .)
    PIPE            reduce using rule 65 (AEXP -> LITERAL .)
    ELSE            reduce using rule 65 (AEXP -> LITERAL .)
    WILDCARD        reduce using rule 65 (AEXP -> LITERAL .)


state 100

    (66) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (67) AEXP -> OPEN_PAREN . EXP COMMA EXP_LIST CLOSE_PAREN
    (86) GCON -> OPEN_PAREN . CLOSE_PAREN
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 70
    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 139
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 101

    (68) AEXP -> OPEN_SQUARE . EXP CLOSE_SQUARE
    (69) AEXP -> OPEN_SQUARE . EXP COMMA EXP_LIST CLOSE_SQUARE
    (87) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 76
    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 140
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 102

    (45) RHS -> GDRHS WHERE . DECLARATIONS
    (13) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (14) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 135

    DECLARATIONS                   shift and go to state 141

state 103

    (46) GDRHS -> GUARDS EQUALS . EXP
    (47) GDRHS -> GUARDS EQUALS . EXP GDRHS
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 142
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 104

    (48) GUARDS -> PIPE GUARD_LIST .
    (49) GUARD_LIST -> GUARD_LIST . GUARD
    (51) GUARD -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    EQUALS          reduce using rule 48 (GUARDS -> PIPE GUARD_LIST .)
    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    GUARD                          shift and go to state 143
    INFIX_EXP                      shift and go to state 106
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 105

    (50) GUARD_LIST -> GUARD .

    MINUS           reduce using rule 50 (GUARD_LIST -> GUARD .)
    LAMBDA          reduce using rule 50 (GUARD_LIST -> GUARD .)
    LET             reduce using rule 50 (GUARD_LIST -> GUARD .)
    IF              reduce using rule 50 (GUARD_LIST -> GUARD .)
    MATCH           reduce using rule 50 (GUARD_LIST -> GUARD .)
    IDENTIFIER      reduce using rule 50 (GUARD_LIST -> GUARD .)
    OPEN_PAREN      reduce using rule 50 (GUARD_LIST -> GUARD .)
    OPEN_SQUARE     reduce using rule 50 (GUARD_LIST -> GUARD .)
    INTEGER         reduce using rule 50 (GUARD_LIST -> GUARD .)
    FLOAT           reduce using rule 50 (GUARD_LIST -> GUARD .)
    CHAR            reduce using rule 50 (GUARD_LIST -> GUARD .)
    STRING          reduce using rule 50 (GUARD_LIST -> GUARD .)
    EQUALS          reduce using rule 50 (GUARD_LIST -> GUARD .)


state 106

    (51) GUARD -> INFIX_EXP .

    MINUS           reduce using rule 51 (GUARD -> INFIX_EXP .)
    LAMBDA          reduce using rule 51 (GUARD -> INFIX_EXP .)
    LET             reduce using rule 51 (GUARD -> INFIX_EXP .)
    IF              reduce using rule 51 (GUARD -> INFIX_EXP .)
    MATCH           reduce using rule 51 (GUARD -> INFIX_EXP .)
    IDENTIFIER      reduce using rule 51 (GUARD -> INFIX_EXP .)
    OPEN_PAREN      reduce using rule 51 (GUARD -> INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 51 (GUARD -> INFIX_EXP .)
    INTEGER         reduce using rule 51 (GUARD -> INFIX_EXP .)
    FLOAT           reduce using rule 51 (GUARD -> INFIX_EXP .)
    CHAR            reduce using rule 51 (GUARD -> INFIX_EXP .)
    STRING          reduce using rule 51 (GUARD -> INFIX_EXP .)
    EQUALS          reduce using rule 51 (GUARD -> INFIX_EXP .)


state 107

    (40) FUNCTION_LHS -> PAT VAROP PAT .

    EQUALS          reduce using rule 40 (FUNCTION_LHS -> PAT VAROP PAT .)
    PIPE            reduce using rule 40 (FUNCTION_LHS -> PAT VAROP PAT .)
    CLOSE_PAREN     reduce using rule 40 (FUNCTION_LHS -> PAT VAROP PAT .)


state 108

    (89) VAROP -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 144


state 109

    (20) GEN_DECLARATION -> VARS TYPESIG TYPE .

    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> VARS TYPESIG TYPE .)
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> VARS TYPESIG TYPE .)


state 110

    (31) TYPE -> BTYPE .
    (32) TYPE -> BTYPE . ARROW TYPE
    (34) BTYPE -> BTYPE . ATYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (38) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    CLOSE_BRACE     reduce using rule 31 (TYPE -> BTYPE .)
    ENDSTATEMENT    reduce using rule 31 (TYPE -> BTYPE .)
    CLOSE_PAREN     reduce using rule 31 (TYPE -> BTYPE .)
    COMMA           reduce using rule 31 (TYPE -> BTYPE .)
    CLOSE_SQUARE    reduce using rule 31 (TYPE -> BTYPE .)
    ARROW           shift and go to state 145
    TYPENAME        shift and go to state 112
    OPEN_PAREN      shift and go to state 113
    OPEN_SQUARE     shift and go to state 114

    ATYPE                          shift and go to state 146

state 111

    (33) BTYPE -> ATYPE .

    ARROW           reduce using rule 33 (BTYPE -> ATYPE .)
    TYPENAME        reduce using rule 33 (BTYPE -> ATYPE .)
    OPEN_PAREN      reduce using rule 33 (BTYPE -> ATYPE .)
    OPEN_SQUARE     reduce using rule 33 (BTYPE -> ATYPE .)
    CLOSE_BRACE     reduce using rule 33 (BTYPE -> ATYPE .)
    ENDSTATEMENT    reduce using rule 33 (BTYPE -> ATYPE .)
    CLOSE_PAREN     reduce using rule 33 (BTYPE -> ATYPE .)
    COMMA           reduce using rule 33 (BTYPE -> ATYPE .)
    CLOSE_SQUARE    reduce using rule 33 (BTYPE -> ATYPE .)


state 112

    (35) ATYPE -> TYPENAME .

    ARROW           reduce using rule 35 (ATYPE -> TYPENAME .)
    TYPENAME        reduce using rule 35 (ATYPE -> TYPENAME .)
    OPEN_PAREN      reduce using rule 35 (ATYPE -> TYPENAME .)
    OPEN_SQUARE     reduce using rule 35 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 35 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 35 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 35 (ATYPE -> TYPENAME .)
    COMMA           reduce using rule 35 (ATYPE -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 35 (ATYPE -> TYPENAME .)


state 113

    (36) ATYPE -> OPEN_PAREN . TYPES_LIST CLOSE_PAREN
    (37) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (107) TYPES_LIST -> . TYPES_LIST COMMA TYPE
    (108) TYPES_LIST -> . TYPE
    (31) TYPE -> . BTYPE
    (32) TYPE -> . BTYPE ARROW TYPE
    (33) BTYPE -> . ATYPE
    (34) BTYPE -> . BTYPE ATYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (38) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 112
    OPEN_PAREN      shift and go to state 113
    OPEN_SQUARE     shift and go to state 114

    TYPES_LIST                     shift and go to state 147
    TYPE                           shift and go to state 148
    BTYPE                          shift and go to state 110
    ATYPE                          shift and go to state 111

state 114

    (38) ATYPE -> OPEN_SQUARE . TYPE CLOSE_SQUARE
    (31) TYPE -> . BTYPE
    (32) TYPE -> . BTYPE ARROW TYPE
    (33) BTYPE -> . ATYPE
    (34) BTYPE -> . BTYPE ATYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (38) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 112
    OPEN_PAREN      shift and go to state 113
    OPEN_SQUARE     shift and go to state 114

    TYPE                           shift and go to state 149
    BTYPE                          shift and go to state 110
    ATYPE                          shift and go to state 111

state 115

    (26) VARS -> VARS COMMA IDENTIFIER .

    TYPESIG         reduce using rule 26 (VARS -> VARS COMMA IDENTIFIER .)
    COMMA           reduce using rule 26 (VARS -> VARS COMMA IDENTIFIER .)


state 116

    (21) GEN_DECLARATION -> FIXITY INTEGER OPS .
    (24) OPS -> OPS . COMMA OP

    CLOSE_BRACE     reduce using rule 21 (GEN_DECLARATION -> FIXITY INTEGER OPS .)
    ENDSTATEMENT    reduce using rule 21 (GEN_DECLARATION -> FIXITY INTEGER OPS .)
    COMMA           shift and go to state 117


state 117

    (24) OPS -> OPS COMMA . OP
    (90) OP -> . VAROP
    (88) VAROP -> . VARSYM
    (89) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (97) VARSYM -> . PLUS
    (98) VARSYM -> . MINUS
    (99) VARSYM -> . TIMES
    (100) VARSYM -> . DIVIDE
    (101) VARSYM -> . POW
    (102) VARSYM -> . EQUALITY
    (103) VARSYM -> . LESS
    (104) VARSYM -> . LEQ
    (105) VARSYM -> . GREATER
    (106) VARSYM -> . GEQ

    BACKTICK        shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    POW             shift and go to state 57
    EQUALITY        shift and go to state 58
    LESS            shift and go to state 59
    LEQ             shift and go to state 60
    GREATER         shift and go to state 61
    GEQ             shift and go to state 62

    OP                             shift and go to state 150
    VAROP                          shift and go to state 68
    VARSYM                         shift and go to state 51

state 118

    (41) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 151
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 119

    (83) APAT -> OPEN_PAREN PAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALS          reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PLUS            reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MINUS           reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TIMES           reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    POW             reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LESS            reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LEQ             reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GREATER         reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GEQ             reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PIPE            reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    WILDCARD        reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INTEGER         reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    FLOAT           reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CHAR            reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    STRING          reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    COMMA           reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    ARROW           reduce using rule 83 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)


state 120

    (84) APAT -> OPEN_PAREN PAT COMMA . PAT_LIST CLOSE_PAREN
    (95) PAT_LIST -> . PAT_LIST COMMA PAT
    (96) PAT_LIST -> . PAT
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    PAT                            shift and go to state 77
    PAT_LIST                       shift and go to state 152
    LPAT                           shift and go to state 23
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 121

    (74) PAT -> LPAT CONSTRUCTOR PAT .

    EQUALS          reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    BACKTICK        reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    PLUS            reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    MINUS           reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    TIMES           reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    DIVIDE          reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    POW             reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    EQUALITY        reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    LESS            reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    LEQ             reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    GREATER         reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    GEQ             reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    PIPE            reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_PAREN     reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    COMMA           reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_SQUARE    reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)
    ARROW           reduce using rule 74 (PAT -> LPAT CONSTRUCTOR PAT .)


state 122

    (77) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 153


state 123

    (78) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 154


state 124

    (85) APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    POW             reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    WILDCARD        reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    ARROW           reduce using rule 85 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)


state 125

    (95) PAT_LIST -> PAT_LIST COMMA . PAT
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    PAT                            shift and go to state 155
    LPAT                           shift and go to state 23
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 126

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 127

    (8) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 156


state 128

    (93) APATS -> APAT APATS .

    EQUALS          reduce using rule 93 (APATS -> APAT APATS .)
    PIPE            reduce using rule 93 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 93 (APATS -> APAT APATS .)
    ARROW           reduce using rule 93 (APATS -> APAT APATS .)


state 129

    (11) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 157


state 130

    (43) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (13) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (14) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 135

    DECLARATIONS                   shift and go to state 158

state 131

    (53) INFIX_EXP -> LEXP OP . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    LEXP                           shift and go to state 89
    INFIX_EXP                      shift and go to state 159
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 132

    (54) INFIX_EXP -> MINUS INFIX_EXP .

    WHERE           reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    LAMBDA          reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    LET             reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    IF              reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    MATCH           reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    IDENTIFIER      reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_PAREN      reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    INTEGER         reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    FLOAT           reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    CHAR            reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    STRING          reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    THEN            reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    COMMA           reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    PIPE            reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)
    WILDCARD        reduce using rule 54 (INFIX_EXP -> MINUS INFIX_EXP .)


state 133

    (56) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (93) APATS -> . APAT APATS
    (94) APATS -> .
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    ARROW           reduce using rule 94 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 83
    APATS                          shift and go to state 160
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 134

    (57) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 161


state 135

    (13) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (14) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (15) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (16) DECLARATIONS_LIST -> . DECLARATION
    (17) DECLARATION -> . GEN_DECLARATION
    (18) DECLARATION -> . FUNCTION_LHS RHS
    (19) DECLARATION -> . PAT RHS
    (20) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (21) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (22) GEN_DECLARATION -> . FIXITY OPS
    (23) GEN_DECLARATION -> .
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . PAT VAROP PAT
    (41) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (26) VARS -> . VARS COMMA IDENTIFIER
    (27) VARS -> . IDENTIFIER
    (28) FIXITY -> . INFIXL
    (29) FIXITY -> . INFIXR
    (30) FIXITY -> . INFIX
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 163
    ENDSTATEMENT    reduce using rule 23 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 22
    INFIXL          shift and go to state 24
    INFIXR          shift and go to state 25
    INFIX           shift and go to state 26
    MINUS           shift and go to state 27
    WILDCARD        shift and go to state 31
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

  ! CLOSE_BRACE     [ reduce using rule 23 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 162
    DECLARATION                    shift and go to state 164
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    FIXITY                         shift and go to state 19
    APAT                           shift and go to state 21
    LPAT                           shift and go to state 23
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 136

    (58) LEXP -> IF EXP . THEN EXP ELSE EXP

    THEN            shift and go to state 165


state 137

    (59) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE

    OF              shift and go to state 166


state 138

    (61) FEXP -> FEXP AEXP .

    IDENTIFIER      reduce using rule 61 (FEXP -> FEXP AEXP .)
    OPEN_PAREN      reduce using rule 61 (FEXP -> FEXP AEXP .)
    OPEN_SQUARE     reduce using rule 61 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 61 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 61 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 61 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 61 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 61 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 61 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 61 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 61 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 61 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 61 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 61 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 61 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 61 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 61 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 61 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 61 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 61 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 61 (FEXP -> FEXP AEXP .)
    LAMBDA          reduce using rule 61 (FEXP -> FEXP AEXP .)
    LET             reduce using rule 61 (FEXP -> FEXP AEXP .)
    IF              reduce using rule 61 (FEXP -> FEXP AEXP .)
    MATCH           reduce using rule 61 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 61 (FEXP -> FEXP AEXP .)
    THEN            reduce using rule 61 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 61 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 61 (FEXP -> FEXP AEXP .)
    COMMA           reduce using rule 61 (FEXP -> FEXP AEXP .)
    CLOSE_SQUARE    reduce using rule 61 (FEXP -> FEXP AEXP .)
    PIPE            reduce using rule 61 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 61 (FEXP -> FEXP AEXP .)
    WILDCARD        reduce using rule 61 (FEXP -> FEXP AEXP .)


state 139

    (66) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (67) AEXP -> OPEN_PAREN EXP . COMMA EXP_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 167
    COMMA           shift and go to state 168


state 140

    (68) AEXP -> OPEN_SQUARE EXP . CLOSE_SQUARE
    (69) AEXP -> OPEN_SQUARE EXP . COMMA EXP_LIST CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 169
    COMMA           shift and go to state 170


state 141

    (45) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 45 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 45 (RHS -> GDRHS WHERE DECLARATIONS .)


state 142

    (46) GDRHS -> GUARDS EQUALS EXP .
    (47) GDRHS -> GUARDS EQUALS EXP . GDRHS
    (46) GDRHS -> . GUARDS EQUALS EXP
    (47) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (48) GUARDS -> . PIPE GUARD_LIST

    WHERE           reduce using rule 46 (GDRHS -> GUARDS EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 46 (GDRHS -> GUARDS EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 46 (GDRHS -> GUARDS EQUALS EXP .)
    PIPE            shift and go to state 48

    GUARDS                         shift and go to state 47
    GDRHS                          shift and go to state 171

state 143

    (49) GUARD_LIST -> GUARD_LIST GUARD .

    MINUS           reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    LAMBDA          reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    LET             reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    IF              reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    MATCH           reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    IDENTIFIER      reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    OPEN_PAREN      reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    OPEN_SQUARE     reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    INTEGER         reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    FLOAT           reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    CHAR            reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    STRING          reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)
    EQUALS          reduce using rule 49 (GUARD_LIST -> GUARD_LIST GUARD .)


state 144

    (89) VAROP -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    WILDCARD        reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_SQUARE     reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    COMMA           reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CLOSE_BRACE     reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    ENDSTATEMENT    reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IF              reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 89 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)


state 145

    (32) TYPE -> BTYPE ARROW . TYPE
    (31) TYPE -> . BTYPE
    (32) TYPE -> . BTYPE ARROW TYPE
    (33) BTYPE -> . ATYPE
    (34) BTYPE -> . BTYPE ATYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (38) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 112
    OPEN_PAREN      shift and go to state 113
    OPEN_SQUARE     shift and go to state 114

    BTYPE                          shift and go to state 110
    TYPE                           shift and go to state 172
    ATYPE                          shift and go to state 111

state 146

    (34) BTYPE -> BTYPE ATYPE .

    ARROW           reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    TYPENAME        reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    OPEN_PAREN      reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    OPEN_SQUARE     reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    CLOSE_BRACE     reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    ENDSTATEMENT    reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    CLOSE_PAREN     reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    COMMA           reduce using rule 34 (BTYPE -> BTYPE ATYPE .)
    CLOSE_SQUARE    reduce using rule 34 (BTYPE -> BTYPE ATYPE .)


state 147

    (36) ATYPE -> OPEN_PAREN TYPES_LIST . CLOSE_PAREN
    (107) TYPES_LIST -> TYPES_LIST . COMMA TYPE

    CLOSE_PAREN     shift and go to state 173
    COMMA           shift and go to state 174


state 148

    (37) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN
    (108) TYPES_LIST -> TYPE .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 175
    COMMA           reduce using rule 108 (TYPES_LIST -> TYPE .)

  ! CLOSE_PAREN     [ reduce using rule 108 (TYPES_LIST -> TYPE .) ]


state 149

    (38) ATYPE -> OPEN_SQUARE TYPE . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 176


state 150

    (24) OPS -> OPS COMMA OP .

    COMMA           reduce using rule 24 (OPS -> OPS COMMA OP .)
    CLOSE_BRACE     reduce using rule 24 (OPS -> OPS COMMA OP .)
    ENDSTATEMENT    reduce using rule 24 (OPS -> OPS COMMA OP .)


state 151

    (41) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (93) APATS -> . APAT APATS
    (94) APATS -> .
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    EQUALS          reduce using rule 94 (APATS -> .)
    PIPE            reduce using rule 94 (APATS -> .)
    CLOSE_PAREN     reduce using rule 94 (APATS -> .)
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    APAT                           shift and go to state 83
    APATS                          shift and go to state 177
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 152

    (84) APAT -> OPEN_PAREN PAT COMMA PAT_LIST . CLOSE_PAREN
    (95) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_PAREN     shift and go to state 178
    COMMA           shift and go to state 125


state 153

    (77) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    BACKTICK        reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PLUS            reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MINUS           reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    TIMES           reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    DIVIDE          reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    POW             reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALITY        reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LESS            reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LEQ             reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GREATER         reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GEQ             reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PIPE            reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    COMMA           reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 77 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 154

    (78) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PLUS            reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MINUS           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    TIMES           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    POW             reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LESS            reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LEQ             reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GREATER         reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GEQ             reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PIPE            reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    COMMA           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 78 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 155

    (95) PAT_LIST -> PAT_LIST COMMA PAT .

    CLOSE_SQUARE    reduce using rule 95 (PAT_LIST -> PAT_LIST COMMA PAT .)
    COMMA           reduce using rule 95 (PAT_LIST -> PAT_LIST COMMA PAT .)
    CLOSE_PAREN     reduce using rule 95 (PAT_LIST -> PAT_LIST COMMA PAT .)


state 156

    (8) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT .

    ENDSTATEMENT    reduce using rule 8 (IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT .)
    CLOSE_BRACE     reduce using rule 8 (IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT .)


state 157

    (11) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT .

    CLOSE_BRACE     reduce using rule 11 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT .)
    ENDSTATEMENT    reduce using rule 11 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT .)


state 158

    (43) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 43 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 43 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 159

    (53) INFIX_EXP -> LEXP OP INFIX_EXP .

    WHERE           reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LAMBDA          reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LET             reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IF              reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MATCH           reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IDENTIFIER      reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_PAREN      reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INTEGER         reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    FLOAT           reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CHAR            reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    STRING          reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    THEN            reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    COMMA           reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PIPE            reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    WILDCARD        reduce using rule 53 (INFIX_EXP -> LEXP OP INFIX_EXP .)


state 160

    (56) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 179


state 161

    (57) LEXP -> LET DECLARATIONS IN . EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 180
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 162

    (13) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 181


state 163

    (14) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 14 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 14 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 14 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 164

    (15) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (16) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 182
    CLOSE_BRACE     reduce using rule 16 (DECLARATIONS_LIST -> DECLARATION .)


state 165

    (58) LEXP -> IF EXP THEN . EXP ELSE EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 183
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 166

    (59) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 184


state 167

    (66) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    IDENTIFIER      reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LAMBDA          reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LET             reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    IF              reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MATCH           reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    THEN            reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    COMMA           reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PIPE            reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WILDCARD        reduce using rule 66 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 168

    (67) AEXP -> OPEN_PAREN EXP COMMA . EXP_LIST CLOSE_PAREN
    (91) EXP_LIST -> . EXP_LIST COMMA EXP
    (92) EXP_LIST -> . EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 185
    EXP_LIST                       shift and go to state 186
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 169

    (68) AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .

    IDENTIFIER      reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INTEGER         reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    FLOAT           reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CHAR            reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    STRING          reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BACKTICK        reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PLUS            reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MINUS           reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TIMES           reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    DIVIDE          reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    POW             reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALITY        reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LESS            reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LEQ             reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GREATER         reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GEQ             reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WHERE           reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LAMBDA          reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LET             reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    IF              reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MATCH           reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALS          reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    THEN            reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OF              reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    COMMA           reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PIPE            reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ELSE            reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WILDCARD        reduce using rule 68 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)


state 170

    (69) AEXP -> OPEN_SQUARE EXP COMMA . EXP_LIST CLOSE_SQUARE
    (91) EXP_LIST -> . EXP_LIST COMMA EXP
    (92) EXP_LIST -> . EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 185
    EXP_LIST                       shift and go to state 187
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 171

    (47) GDRHS -> GUARDS EQUALS EXP GDRHS .

    WHERE           reduce using rule 47 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 47 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 47 (GDRHS -> GUARDS EQUALS EXP GDRHS .)


state 172

    (32) TYPE -> BTYPE ARROW TYPE .

    CLOSE_BRACE     reduce using rule 32 (TYPE -> BTYPE ARROW TYPE .)
    ENDSTATEMENT    reduce using rule 32 (TYPE -> BTYPE ARROW TYPE .)
    CLOSE_PAREN     reduce using rule 32 (TYPE -> BTYPE ARROW TYPE .)
    COMMA           reduce using rule 32 (TYPE -> BTYPE ARROW TYPE .)
    CLOSE_SQUARE    reduce using rule 32 (TYPE -> BTYPE ARROW TYPE .)


state 173

    (36) ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .

    ARROW           reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    TYPENAME        reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 36 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)


state 174

    (107) TYPES_LIST -> TYPES_LIST COMMA . TYPE
    (31) TYPE -> . BTYPE
    (32) TYPE -> . BTYPE ARROW TYPE
    (33) BTYPE -> . ATYPE
    (34) BTYPE -> . BTYPE ATYPE
    (35) ATYPE -> . TYPENAME
    (36) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (37) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (38) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 112
    OPEN_PAREN      shift and go to state 113
    OPEN_SQUARE     shift and go to state 114

    TYPE                           shift and go to state 188
    BTYPE                          shift and go to state 110
    ATYPE                          shift and go to state 111

state 175

    (37) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    ARROW           reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    TYPENAME        reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    COMMA           reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 37 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 176

    (38) ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .

    ARROW           reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    TYPENAME        reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    COMMA           reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 38 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)


state 177

    (41) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 41 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    PIPE            reduce using rule 41 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 41 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 178

    (84) APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    POW             reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LESS            reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    WILDCARD        reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    STRING          reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    ARROW           reduce using rule 84 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)


state 179

    (56) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 189
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 180

    (57) LEXP -> LET DECLARATIONS IN EXP .

    BACKTICK        reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    PLUS            reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    LAMBDA          reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    LET             reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    IF              reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    MATCH           reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    IDENTIFIER      reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_PAREN      reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_SQUARE     reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    INTEGER         reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    FLOAT           reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    CHAR            reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    STRING          reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    THEN            reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    COMMA           reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_SQUARE    reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    PIPE            reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)
    WILDCARD        reduce using rule 57 (LEXP -> LET DECLARATIONS IN EXP .)


state 181

    (13) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 13 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 13 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 13 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 182

    (15) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (15) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (16) DECLARATIONS_LIST -> . DECLARATION
    (17) DECLARATION -> . GEN_DECLARATION
    (18) DECLARATION -> . FUNCTION_LHS RHS
    (19) DECLARATION -> . PAT RHS
    (20) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (21) GEN_DECLARATION -> . FIXITY INTEGER OPS
    (22) GEN_DECLARATION -> . FIXITY OPS
    (23) GEN_DECLARATION -> .
    (39) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (40) FUNCTION_LHS -> . PAT VAROP PAT
    (41) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (26) VARS -> . VARS COMMA IDENTIFIER
    (27) VARS -> . IDENTIFIER
    (28) FIXITY -> . INFIXL
    (29) FIXITY -> . INFIXR
    (30) FIXITY -> . INFIX
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 23 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 23 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 22
    INFIXL          shift and go to state 24
    INFIXR          shift and go to state 25
    INFIX           shift and go to state 26
    MINUS           shift and go to state 27
    WILDCARD        shift and go to state 31
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    DECLARATION                    shift and go to state 164
    DECLARATIONS_LIST              shift and go to state 190
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    FIXITY                         shift and go to state 19
    APAT                           shift and go to state 21
    LPAT                           shift and go to state 23
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 183

    (58) LEXP -> IF EXP THEN EXP . ELSE EXP

    ELSE            shift and go to state 191


state 184

    (59) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (70) ALTS -> . ALTS ALT ENDSTATEMENT
    (71) ALTS -> . ALT
    (72) ALT -> . PAT ARROW EXP
    (73) ALT -> .
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WILDCARD resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    CLOSE_BRACE     reduce using rule 73 (ALT -> .)
    ENDSTATEMENT    reduce using rule 73 (ALT -> .)
    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

  ! MINUS           [ reduce using rule 73 (ALT -> .) ]
  ! IDENTIFIER      [ reduce using rule 73 (ALT -> .) ]
  ! WILDCARD        [ reduce using rule 73 (ALT -> .) ]
  ! OPEN_PAREN      [ reduce using rule 73 (ALT -> .) ]
  ! OPEN_SQUARE     [ reduce using rule 73 (ALT -> .) ]
  ! INTEGER         [ reduce using rule 73 (ALT -> .) ]
  ! FLOAT           [ reduce using rule 73 (ALT -> .) ]
  ! CHAR            [ reduce using rule 73 (ALT -> .) ]
  ! STRING          [ reduce using rule 73 (ALT -> .) ]

    ALTS                           shift and go to state 192
    ALT                            shift and go to state 193
    PAT                            shift and go to state 194
    LPAT                           shift and go to state 23
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 185

    (92) EXP_LIST -> EXP .

    CLOSE_PAREN     reduce using rule 92 (EXP_LIST -> EXP .)
    COMMA           reduce using rule 92 (EXP_LIST -> EXP .)
    CLOSE_SQUARE    reduce using rule 92 (EXP_LIST -> EXP .)


state 186

    (67) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST . CLOSE_PAREN
    (91) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_PAREN     shift and go to state 196
    COMMA           shift and go to state 195


state 187

    (69) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST . CLOSE_SQUARE
    (91) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_SQUARE    shift and go to state 197
    COMMA           shift and go to state 195


state 188

    (107) TYPES_LIST -> TYPES_LIST COMMA TYPE .

    CLOSE_PAREN     reduce using rule 107 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)
    COMMA           reduce using rule 107 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)


state 189

    (56) LEXP -> LAMBDA APAT APATS ARROW EXP .

    BACKTICK        reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PLUS            reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LAMBDA          reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LET             reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    IF              reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MATCH           reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    IDENTIFIER      reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_PAREN      reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_SQUARE     reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    INTEGER         reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    FLOAT           reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CHAR            reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    STRING          reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    THEN            reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    COMMA           reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_SQUARE    reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PIPE            reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WILDCARD        reduce using rule 56 (LEXP -> LAMBDA APAT APATS ARROW EXP .)


state 190

    (15) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 15 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 191

    (58) LEXP -> IF EXP THEN EXP ELSE . EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 198
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 192

    (59) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE
    (70) ALTS -> ALTS . ALT ENDSTATEMENT
    (72) ALT -> . PAT ARROW EXP
    (73) ALT -> .
    (74) PAT -> . LPAT CONSTRUCTOR PAT
    (75) PAT -> . LPAT
    (76) LPAT -> . APAT
    (77) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (78) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (79) APAT -> . IDENTIFIER
    (80) APAT -> . GCON
    (81) APAT -> . LITERAL
    (82) APAT -> . WILDCARD
    (83) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (84) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (85) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    CLOSE_BRACE     shift and go to state 199
    ENDSTATEMENT    reduce using rule 73 (ALT -> .)
    MINUS           shift and go to state 27
    IDENTIFIER      shift and go to state 40
    WILDCARD        shift and go to state 31
    OPEN_PAREN      shift and go to state 42
    OPEN_SQUARE     shift and go to state 32
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    ALT                            shift and go to state 200
    PAT                            shift and go to state 194
    LPAT                           shift and go to state 23
    APAT                           shift and go to state 21
    GCON                           shift and go to state 29
    LITERAL                        shift and go to state 30

state 193

    (71) ALTS -> ALT .

    CLOSE_BRACE     reduce using rule 71 (ALTS -> ALT .)
    MINUS           reduce using rule 71 (ALTS -> ALT .)
    IDENTIFIER      reduce using rule 71 (ALTS -> ALT .)
    WILDCARD        reduce using rule 71 (ALTS -> ALT .)
    OPEN_PAREN      reduce using rule 71 (ALTS -> ALT .)
    OPEN_SQUARE     reduce using rule 71 (ALTS -> ALT .)
    INTEGER         reduce using rule 71 (ALTS -> ALT .)
    FLOAT           reduce using rule 71 (ALTS -> ALT .)
    CHAR            reduce using rule 71 (ALTS -> ALT .)
    STRING          reduce using rule 71 (ALTS -> ALT .)
    ENDSTATEMENT    reduce using rule 71 (ALTS -> ALT .)


state 194

    (72) ALT -> PAT . ARROW EXP

    ARROW           shift and go to state 201


state 195

    (91) EXP_LIST -> EXP_LIST COMMA . EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 202
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 196

    (67) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .

    IDENTIFIER      reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    STRING          reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    POW             reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LESS            reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WHERE           reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LAMBDA          reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LET             reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    IF              reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MATCH           reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    THEN            reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OF              reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ELSE            reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WILDCARD        reduce using rule 67 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)


state 197

    (69) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .

    IDENTIFIER      reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    POW             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WHERE           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LAMBDA          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LET             reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    IF              reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MATCH           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    THEN            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OF              reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ELSE            reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WILDCARD        reduce using rule 69 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)


state 198

    (58) LEXP -> IF EXP THEN EXP ELSE EXP .

    BACKTICK        reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PLUS            reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MINUS           reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    TIMES           reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    DIVIDE          reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    POW             reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALITY        reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LESS            reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LEQ             reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GREATER         reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GEQ             reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WHERE           reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LAMBDA          reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LET             reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    IF              reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MATCH           reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    IDENTIFIER      reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_PAREN      reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_SQUARE     reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    INTEGER         reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    FLOAT           reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CHAR            reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    STRING          reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALS          reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    THEN            reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OF              reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    COMMA           reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_SQUARE    reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PIPE            reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ELSE            reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WILDCARD        reduce using rule 58 (LEXP -> IF EXP THEN EXP ELSE EXP .)


state 199

    (59) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    BACKTICK        reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PLUS            reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LAMBDA          reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LET             reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IF              reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MATCH           reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_PAREN      reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_SQUARE     reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INTEGER         reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    FLOAT           reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CHAR            reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    STRING          reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    THEN            reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    COMMA           reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_SQUARE    reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PIPE            reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WILDCARD        reduce using rule 59 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 200

    (70) ALTS -> ALTS ALT . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 203


state 201

    (72) ALT -> PAT ARROW . EXP
    (52) EXP -> . INFIX_EXP
    (53) INFIX_EXP -> . LEXP OP INFIX_EXP
    (54) INFIX_EXP -> . MINUS INFIX_EXP
    (55) INFIX_EXP -> . LEXP
    (56) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (57) LEXP -> . LET DECLARATIONS IN EXP
    (58) LEXP -> . IF EXP THEN EXP ELSE EXP
    (59) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (60) LEXP -> . FEXP
    (61) FEXP -> . FEXP AEXP
    (62) FEXP -> . AEXP
    (63) AEXP -> . IDENTIFIER
    (64) AEXP -> . GCON
    (65) AEXP -> . LITERAL
    (66) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (67) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (68) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (69) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (86) GCON -> . OPEN_PAREN CLOSE_PAREN
    (87) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (109) LITERAL -> . INTEGER
    (110) LITERAL -> . FLOAT
    (111) LITERAL -> . CHAR
    (112) LITERAL -> . STRING

    MINUS           shift and go to state 90
    LAMBDA          shift and go to state 91
    LET             shift and go to state 92
    IF              shift and go to state 93
    MATCH           shift and go to state 94
    IDENTIFIER      shift and go to state 97
    OPEN_PAREN      shift and go to state 100
    OPEN_SQUARE     shift and go to state 101
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 33
    STRING          shift and go to state 34

    EXP                            shift and go to state 204
    INFIX_EXP                      shift and go to state 88
    LEXP                           shift and go to state 89
    FEXP                           shift and go to state 95
    AEXP                           shift and go to state 96
    GCON                           shift and go to state 98
    LITERAL                        shift and go to state 99

state 202

    (91) EXP_LIST -> EXP_LIST COMMA EXP .

    CLOSE_PAREN     reduce using rule 91 (EXP_LIST -> EXP_LIST COMMA EXP .)
    COMMA           reduce using rule 91 (EXP_LIST -> EXP_LIST COMMA EXP .)
    CLOSE_SQUARE    reduce using rule 91 (EXP_LIST -> EXP_LIST COMMA EXP .)


state 203

    (70) ALTS -> ALTS ALT ENDSTATEMENT .

    CLOSE_BRACE     reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    MINUS           reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    IDENTIFIER      reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    WILDCARD        reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_PAREN      reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_SQUARE     reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    INTEGER         reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    FLOAT           reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    CHAR            reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    STRING          reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)
    ENDSTATEMENT    reduce using rule 70 (ALTS -> ALTS ALT ENDSTATEMENT .)


state 204

    (72) ALT -> PAT ARROW EXP .

    CLOSE_BRACE     reduce using rule 72 (ALT -> PAT ARROW EXP .)
    MINUS           reduce using rule 72 (ALT -> PAT ARROW EXP .)
    IDENTIFIER      reduce using rule 72 (ALT -> PAT ARROW EXP .)
    WILDCARD        reduce using rule 72 (ALT -> PAT ARROW EXP .)
    OPEN_PAREN      reduce using rule 72 (ALT -> PAT ARROW EXP .)
    OPEN_SQUARE     reduce using rule 72 (ALT -> PAT ARROW EXP .)
    INTEGER         reduce using rule 72 (ALT -> PAT ARROW EXP .)
    FLOAT           reduce using rule 72 (ALT -> PAT ARROW EXP .)
    CHAR            reduce using rule 72 (ALT -> PAT ARROW EXP .)
    STRING          reduce using rule 72 (ALT -> PAT ARROW EXP .)
    ENDSTATEMENT    reduce using rule 72 (ALT -> PAT ARROW EXP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BACKTICK in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for POW in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS in state 89 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 89 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 89 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 95 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 95 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 95 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 95 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 95 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 95 resolved as shift
WARNING: shift/reduce conflict for STRING in state 95 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 135 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 184 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 184 resolved as shift
WARNING: shift/reduce conflict for WILDCARD in state 184 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 184 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 184 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 184 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 184 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 184 resolved as shift
WARNING: shift/reduce conflict for STRING in state 184 resolved as shift
