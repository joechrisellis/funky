Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    INEQUALITY
    WHITESPACE

Grammar

Rule 0     S' -> MODULE_DEFINITION
Rule 1     MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY
Rule 2     BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
Rule 3     BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE
Rule 4     IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
Rule 5     IMPORT_DECLARATIONS -> IMPORT_DECLARATION
Rule 6     IMPORT_DECLARATION -> IMPORT IDENTIFIER
Rule 7     IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER
Rule 8     TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
Rule 9     TOP_DECLARATIONS -> TOP_DECLARATION
Rule 10    TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME
Rule 11    TOP_DECLARATION -> DECLARATION
Rule 12    DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
Rule 13    DECLARATIONS -> OPEN_BRACE CLOSE_BRACE
Rule 14    DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST
Rule 15    DECLARATIONS_LIST -> DECLARATION
Rule 16    DECLARATION -> GEN_DECLARATION
Rule 17    DECLARATION -> FUNCTION_LHS RHS
Rule 18    DECLARATION -> PAT RHS
Rule 19    GEN_DECLARATION -> VARS TYPESIG TYPE
Rule 20    GEN_DECLARATION -> <empty>
Rule 21    VARS -> VARS COMMA IDENTIFIER
Rule 22    VARS -> IDENTIFIER
Rule 23    TYPE -> ATYPE
Rule 24    TYPE -> ATYPE ARROW TYPE
Rule 25    ATYPE -> TYPENAME
Rule 26    ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN
Rule 27    ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN
Rule 28    ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE
Rule 29    FUNCTION_LHS -> IDENTIFIER APAT APATS
Rule 30    FUNCTION_LHS -> PAT VAROP PAT
Rule 31    FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
Rule 32    RHS -> EQUALS EXP
Rule 33    RHS -> EQUALS EXP WHERE DECLARATIONS
Rule 34    RHS -> GDRHS
Rule 35    RHS -> GDRHS WHERE DECLARATIONS
Rule 36    GDRHS -> GUARDS EQUALS EXP
Rule 37    GDRHS -> GUARDS EQUALS EXP GDRHS
Rule 38    GUARDS -> PIPE GUARD_LIST
Rule 39    GUARD_LIST -> GUARD_LIST COMMA GUARD
Rule 40    GUARD_LIST -> GUARD
Rule 41    GUARD -> INFIX_EXP
Rule 42    EXP -> INFIX_EXP
Rule 43    INFIX_EXP -> LEXP OP INFIX_EXP
Rule 44    INFIX_EXP -> MINUS INFIX_EXP
Rule 45    INFIX_EXP -> LEXP
Rule 46    LEXP -> LAMBDA APAT APATS ARROW EXP
Rule 47    LEXP -> LET DECLARATIONS IN EXP
Rule 48    LEXP -> IF EXP THEN EXP ELSE EXP
Rule 49    LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
Rule 50    LEXP -> FEXP
Rule 51    FEXP -> FEXP AEXP
Rule 52    FEXP -> AEXP
Rule 53    AEXP -> IDENTIFIER
Rule 54    AEXP -> GCON
Rule 55    AEXP -> LITERAL
Rule 56    AEXP -> OPEN_PAREN EXP CLOSE_PAREN
Rule 57    AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
Rule 58    AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE
Rule 59    AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
Rule 60    ALTS -> ALTS ALT ENDSTATEMENT
Rule 61    ALTS -> ALT
Rule 62    ALT -> PAT ARROW EXP
Rule 63    ALT -> <empty>
Rule 64    PAT -> LPAT CONSTRUCTOR PAT
Rule 65    PAT -> LPAT
Rule 66    LPAT -> APAT
Rule 67    LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN
Rule 68    LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN
Rule 69    APAT -> IDENTIFIER
Rule 70    APAT -> GCON
Rule 71    APAT -> LITERAL
Rule 72    APAT -> WILDCARD
Rule 73    APAT -> OPEN_PAREN PAT CLOSE_PAREN
Rule 74    APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
Rule 75    APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE
Rule 76    GCON -> OPEN_PAREN CLOSE_PAREN
Rule 77    GCON -> OPEN_SQUARE CLOSE_SQUARE
Rule 78    VAROP -> VARSYM
Rule 79    VAROP -> BACKTICK IDENTIFIER BACKTICK
Rule 80    OP -> VAROP
Rule 81    EXP_LIST -> EXP_LIST COMMA EXP
Rule 82    EXP_LIST -> EXP
Rule 83    APATS -> APAT APATS
Rule 84    APATS -> <empty>
Rule 85    PAT_LIST -> PAT_LIST COMMA PAT
Rule 86    PAT_LIST -> PAT
Rule 87    VARSYM -> PLUS
Rule 88    VARSYM -> MINUS
Rule 89    VARSYM -> TIMES
Rule 90    VARSYM -> DIVIDE
Rule 91    VARSYM -> POW
Rule 92    VARSYM -> EQUALITY
Rule 93    VARSYM -> LESS
Rule 94    VARSYM -> LEQ
Rule 95    VARSYM -> GREATER
Rule 96    VARSYM -> GEQ
Rule 97    TYPES_LIST -> TYPES_LIST COMMA TYPE
Rule 98    TYPES_LIST -> TYPE
Rule 99    LITERAL -> FLOAT
Rule 100   LITERAL -> INTEGER
Rule 101   LITERAL -> BOOL
Rule 102   LITERAL -> CHAR
Rule 103   LITERAL -> STRING

Terminals, with rules where they appear

ARROW                : 24 46 62
AS                   : 7
BACKTICK             : 79 79
BOOL                 : 101
CHAR                 : 102
CLOSE_BRACE          : 2 3 12 13 49
CLOSE_PAREN          : 26 27 31 56 57 67 68 73 74 76
CLOSE_SQUARE         : 28 58 59 75 77
COMMA                : 21 39 57 59 74 81 85 97
CONSTRUCTOR          : 64
DIVIDE               : 90
ELSE                 : 48
ENDSTATEMENT         : 2 4 8 14 60
EQUALITY             : 92
EQUALS               : 10 32 33 36 37
FLOAT                : 68 99
GEQ                  : 96
GREATER              : 95
IDENTIFIER           : 1 6 7 7 21 22 29 53 69 79
IF                   : 48
IMPORT               : 6 7
IN                   : 47
INEQUALITY           : 
INTEGER              : 67 100
LAMBDA               : 46
LEQ                  : 94
LESS                 : 93
LET                  : 47
MATCH                : 49
MINUS                : 44 67 68 88
MODULE               : 1
NEWTYPE              : 10
OF                   : 49
OPEN_BRACE           : 2 3 12 13 49
OPEN_PAREN           : 26 27 31 56 57 67 68 73 74 76
OPEN_SQUARE          : 28 58 59 75 77
PIPE                 : 38
PLUS                 : 87
POW                  : 91
STRING               : 103
THEN                 : 48
TIMES                : 89
TYPENAME             : 10 10 25
TYPESIG              : 19
WHERE                : 1 33 35
WHITESPACE           : 
WILDCARD             : 72
error                : 

Nonterminals, with rules where they appear

AEXP                 : 51 52
ALT                  : 60 61
ALTS                 : 49 60
APAT                 : 29 31 46 66 83
APATS                : 29 31 46 83
ATYPE                : 23 24
BODY                 : 1
DECLARATION          : 11 14 15
DECLARATIONS         : 33 35 47
DECLARATIONS_LIST    : 12 14
EXP                  : 32 33 36 37 46 47 48 48 48 49 56 57 58 59 62 81 82
EXP_LIST             : 57 59 81
FEXP                 : 50 51
FUNCTION_LHS         : 17 31
GCON                 : 54 70
GDRHS                : 34 35 37
GEN_DECLARATION      : 16
GUARD                : 39 40
GUARDS               : 36 37
GUARD_LIST           : 38 39
IMPORT_DECLARATION   : 4 5
IMPORT_DECLARATIONS  : 2 4
INFIX_EXP            : 41 42 43 44
LEXP                 : 43 45
LITERAL              : 55 71
LPAT                 : 64 65
MODULE_DEFINITION    : 0
OP                   : 43
PAT                  : 18 30 30 62 64 73 74 85 86
PAT_LIST             : 74 75 85
RHS                  : 17 18
TOP_DECLARATION      : 8 9
TOP_DECLARATIONS     : 2 3 8
TYPE                 : 19 24 27 28 97 98
TYPES_LIST           : 26 97
VAROP                : 30 80
VARS                 : 19 21
VARSYM               : 78

Parsing method: LALR

state 0

    (0) S' -> . MODULE_DEFINITION
    (1) MODULE_DEFINITION -> . MODULE IDENTIFIER WHERE BODY

    MODULE          shift and go to state 2

    MODULE_DEFINITION              shift and go to state 1

state 1

    (0) S' -> MODULE_DEFINITION .



state 2

    (1) MODULE_DEFINITION -> MODULE . IDENTIFIER WHERE BODY

    IDENTIFIER      shift and go to state 3


state 3

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER . WHERE BODY

    WHERE           shift and go to state 4


state 4

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE . BODY
    (2) BODY -> . OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> . OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 6

    BODY                           shift and go to state 5

state 5

    (1) MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .

    $end            reduce using rule 1 (MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY .)


state 6

    (2) BODY -> OPEN_BRACE . IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (3) BODY -> OPEN_BRACE . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> . IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION
    (5) IMPORT_DECLARATIONS -> . IMPORT_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (9) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (7) IMPORT_DECLARATION -> . IMPORT IDENTIFIER AS IDENTIFIER
    (10) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME
    (11) TOP_DECLARATION -> . DECLARATION
    (16) DECLARATION -> . GEN_DECLARATION
    (17) DECLARATION -> . FUNCTION_LHS RHS
    (18) DECLARATION -> . PAT RHS
    (19) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (20) GEN_DECLARATION -> .
    (29) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (30) FUNCTION_LHS -> . PAT VAROP PAT
    (31) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (21) VARS -> . VARS COMMA IDENTIFIER
    (22) VARS -> . IDENTIFIER
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 20
    MINUS           shift and go to state 22
    WILDCARD        shift and go to state 27
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    IMPORT_DECLARATIONS            shift and go to state 7
    TOP_DECLARATIONS               shift and go to state 8
    IMPORT_DECLARATION             shift and go to state 9
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    APAT                           shift and go to state 19
    LPAT                           shift and go to state 21
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 7

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS . ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS . ENDSTATEMENT IMPORT_DECLARATION

    ENDSTATEMENT    shift and go to state 32


state 8

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS . CLOSE_BRACE
    (8) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 33
    ENDSTATEMENT    shift and go to state 34


state 9

    (5) IMPORT_DECLARATIONS -> IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 5 (IMPORT_DECLARATIONS -> IMPORT_DECLARATION .)


state 10

    (9) TOP_DECLARATIONS -> TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 9 (TOP_DECLARATIONS -> TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 9 (TOP_DECLARATIONS -> TOP_DECLARATION .)


state 11

    (6) IMPORT_DECLARATION -> IMPORT . IDENTIFIER
    (7) IMPORT_DECLARATION -> IMPORT . IDENTIFIER AS IDENTIFIER

    IDENTIFIER      shift and go to state 35


state 12

    (29) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (22) VARS -> IDENTIFIER .
    (69) APAT -> IDENTIFIER .
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    TYPESIG         reduce using rule 22 (VARS -> IDENTIFIER .)
    COMMA           reduce using rule 22 (VARS -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 69 (APAT -> IDENTIFIER .)
    EQUALS          reduce using rule 69 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 69 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 69 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 69 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 69 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 69 (APAT -> IDENTIFIER .)
    POW             reduce using rule 69 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 69 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 69 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 69 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 69 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 69 (APAT -> IDENTIFIER .)
    PIPE            reduce using rule 69 (APAT -> IDENTIFIER .)
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 37
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 13

    (10) TOP_DECLARATION -> NEWTYPE . TYPENAME EQUALS TYPENAME

    TYPENAME        shift and go to state 39


state 14

    (11) TOP_DECLARATION -> DECLARATION .

    CLOSE_BRACE     reduce using rule 11 (TOP_DECLARATION -> DECLARATION .)
    ENDSTATEMENT    reduce using rule 11 (TOP_DECLARATION -> DECLARATION .)


state 15

    (16) DECLARATION -> GEN_DECLARATION .

    CLOSE_BRACE     reduce using rule 16 (DECLARATION -> GEN_DECLARATION .)
    ENDSTATEMENT    reduce using rule 16 (DECLARATION -> GEN_DECLARATION .)


state 16

    (17) DECLARATION -> FUNCTION_LHS . RHS
    (32) RHS -> . EQUALS EXP
    (33) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (34) RHS -> . GDRHS
    (35) RHS -> . GDRHS WHERE DECLARATIONS
    (36) GDRHS -> . GUARDS EQUALS EXP
    (37) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (38) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 41
    PIPE            shift and go to state 44

    RHS                            shift and go to state 40
    GDRHS                          shift and go to state 42
    GUARDS                         shift and go to state 43

state 17

    (18) DECLARATION -> PAT . RHS
    (30) FUNCTION_LHS -> PAT . VAROP PAT
    (32) RHS -> . EQUALS EXP
    (33) RHS -> . EQUALS EXP WHERE DECLARATIONS
    (34) RHS -> . GDRHS
    (35) RHS -> . GDRHS WHERE DECLARATIONS
    (78) VAROP -> . VARSYM
    (79) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (36) GDRHS -> . GUARDS EQUALS EXP
    (37) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (87) VARSYM -> . PLUS
    (88) VARSYM -> . MINUS
    (89) VARSYM -> . TIMES
    (90) VARSYM -> . DIVIDE
    (91) VARSYM -> . POW
    (92) VARSYM -> . EQUALITY
    (93) VARSYM -> . LESS
    (94) VARSYM -> . LEQ
    (95) VARSYM -> . GREATER
    (96) VARSYM -> . GEQ
    (38) GUARDS -> . PIPE GUARD_LIST

    EQUALS          shift and go to state 41
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58
    PIPE            shift and go to state 44

    RHS                            shift and go to state 45
    VAROP                          shift and go to state 46
    GDRHS                          shift and go to state 42
    VARSYM                         shift and go to state 47
    GUARDS                         shift and go to state 43

state 18

    (19) GEN_DECLARATION -> VARS . TYPESIG TYPE
    (21) VARS -> VARS . COMMA IDENTIFIER

    TYPESIG         shift and go to state 59
    COMMA           shift and go to state 60


state 19

    (66) LPAT -> APAT .

    CONSTRUCTOR     reduce using rule 66 (LPAT -> APAT .)
    EQUALS          reduce using rule 66 (LPAT -> APAT .)
    BACKTICK        reduce using rule 66 (LPAT -> APAT .)
    PLUS            reduce using rule 66 (LPAT -> APAT .)
    MINUS           reduce using rule 66 (LPAT -> APAT .)
    TIMES           reduce using rule 66 (LPAT -> APAT .)
    DIVIDE          reduce using rule 66 (LPAT -> APAT .)
    POW             reduce using rule 66 (LPAT -> APAT .)
    EQUALITY        reduce using rule 66 (LPAT -> APAT .)
    LESS            reduce using rule 66 (LPAT -> APAT .)
    LEQ             reduce using rule 66 (LPAT -> APAT .)
    GREATER         reduce using rule 66 (LPAT -> APAT .)
    GEQ             reduce using rule 66 (LPAT -> APAT .)
    PIPE            reduce using rule 66 (LPAT -> APAT .)
    CLOSE_PAREN     reduce using rule 66 (LPAT -> APAT .)
    COMMA           reduce using rule 66 (LPAT -> APAT .)
    CLOSE_SQUARE    reduce using rule 66 (LPAT -> APAT .)
    ARROW           reduce using rule 66 (LPAT -> APAT .)


state 20

    (31) FUNCTION_LHS -> OPEN_PAREN . FUNCTION_LHS CLOSE_PAREN APAT APATS
    (73) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (74) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (76) GCON -> OPEN_PAREN . CLOSE_PAREN
    (29) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (30) FUNCTION_LHS -> . PAT VAROP PAT
    (31) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 62
    IDENTIFIER      shift and go to state 64
    OPEN_PAREN      shift and go to state 20
    MINUS           shift and go to state 22
    WILDCARD        shift and go to state 27
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    FUNCTION_LHS                   shift and go to state 61
    APAT                           shift and go to state 19
    PAT                            shift and go to state 63
    LPAT                           shift and go to state 21
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 21

    (64) PAT -> LPAT . CONSTRUCTOR PAT
    (65) PAT -> LPAT .

    CONSTRUCTOR     shift and go to state 65
    EQUALS          reduce using rule 65 (PAT -> LPAT .)
    BACKTICK        reduce using rule 65 (PAT -> LPAT .)
    PLUS            reduce using rule 65 (PAT -> LPAT .)
    MINUS           reduce using rule 65 (PAT -> LPAT .)
    TIMES           reduce using rule 65 (PAT -> LPAT .)
    DIVIDE          reduce using rule 65 (PAT -> LPAT .)
    POW             reduce using rule 65 (PAT -> LPAT .)
    EQUALITY        reduce using rule 65 (PAT -> LPAT .)
    LESS            reduce using rule 65 (PAT -> LPAT .)
    LEQ             reduce using rule 65 (PAT -> LPAT .)
    GREATER         reduce using rule 65 (PAT -> LPAT .)
    GEQ             reduce using rule 65 (PAT -> LPAT .)
    PIPE            reduce using rule 65 (PAT -> LPAT .)
    CLOSE_PAREN     reduce using rule 65 (PAT -> LPAT .)
    COMMA           reduce using rule 65 (PAT -> LPAT .)
    CLOSE_SQUARE    reduce using rule 65 (PAT -> LPAT .)
    ARROW           reduce using rule 65 (PAT -> LPAT .)


state 22

    (67) LPAT -> MINUS . OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> MINUS . OPEN_PAREN FLOAT CLOSE_PAREN

    OPEN_PAREN      shift and go to state 66


state 23

    (100) LITERAL -> INTEGER .

    CONSTRUCTOR     reduce using rule 100 (LITERAL -> INTEGER .)
    EQUALS          reduce using rule 100 (LITERAL -> INTEGER .)
    BACKTICK        reduce using rule 100 (LITERAL -> INTEGER .)
    PLUS            reduce using rule 100 (LITERAL -> INTEGER .)
    MINUS           reduce using rule 100 (LITERAL -> INTEGER .)
    TIMES           reduce using rule 100 (LITERAL -> INTEGER .)
    DIVIDE          reduce using rule 100 (LITERAL -> INTEGER .)
    POW             reduce using rule 100 (LITERAL -> INTEGER .)
    EQUALITY        reduce using rule 100 (LITERAL -> INTEGER .)
    LESS            reduce using rule 100 (LITERAL -> INTEGER .)
    LEQ             reduce using rule 100 (LITERAL -> INTEGER .)
    GREATER         reduce using rule 100 (LITERAL -> INTEGER .)
    GEQ             reduce using rule 100 (LITERAL -> INTEGER .)
    PIPE            reduce using rule 100 (LITERAL -> INTEGER .)
    IDENTIFIER      reduce using rule 100 (LITERAL -> INTEGER .)
    WILDCARD        reduce using rule 100 (LITERAL -> INTEGER .)
    OPEN_PAREN      reduce using rule 100 (LITERAL -> INTEGER .)
    OPEN_SQUARE     reduce using rule 100 (LITERAL -> INTEGER .)
    FLOAT           reduce using rule 100 (LITERAL -> INTEGER .)
    INTEGER         reduce using rule 100 (LITERAL -> INTEGER .)
    BOOL            reduce using rule 100 (LITERAL -> INTEGER .)
    CHAR            reduce using rule 100 (LITERAL -> INTEGER .)
    STRING          reduce using rule 100 (LITERAL -> INTEGER .)
    CLOSE_PAREN     reduce using rule 100 (LITERAL -> INTEGER .)
    COMMA           reduce using rule 100 (LITERAL -> INTEGER .)
    CLOSE_SQUARE    reduce using rule 100 (LITERAL -> INTEGER .)
    WHERE           reduce using rule 100 (LITERAL -> INTEGER .)
    CLOSE_BRACE     reduce using rule 100 (LITERAL -> INTEGER .)
    ENDSTATEMENT    reduce using rule 100 (LITERAL -> INTEGER .)
    ARROW           reduce using rule 100 (LITERAL -> INTEGER .)
    THEN            reduce using rule 100 (LITERAL -> INTEGER .)
    OF              reduce using rule 100 (LITERAL -> INTEGER .)
    ELSE            reduce using rule 100 (LITERAL -> INTEGER .)


state 24

    (99) LITERAL -> FLOAT .

    CONSTRUCTOR     reduce using rule 99 (LITERAL -> FLOAT .)
    EQUALS          reduce using rule 99 (LITERAL -> FLOAT .)
    BACKTICK        reduce using rule 99 (LITERAL -> FLOAT .)
    PLUS            reduce using rule 99 (LITERAL -> FLOAT .)
    MINUS           reduce using rule 99 (LITERAL -> FLOAT .)
    TIMES           reduce using rule 99 (LITERAL -> FLOAT .)
    DIVIDE          reduce using rule 99 (LITERAL -> FLOAT .)
    POW             reduce using rule 99 (LITERAL -> FLOAT .)
    EQUALITY        reduce using rule 99 (LITERAL -> FLOAT .)
    LESS            reduce using rule 99 (LITERAL -> FLOAT .)
    LEQ             reduce using rule 99 (LITERAL -> FLOAT .)
    GREATER         reduce using rule 99 (LITERAL -> FLOAT .)
    GEQ             reduce using rule 99 (LITERAL -> FLOAT .)
    PIPE            reduce using rule 99 (LITERAL -> FLOAT .)
    IDENTIFIER      reduce using rule 99 (LITERAL -> FLOAT .)
    WILDCARD        reduce using rule 99 (LITERAL -> FLOAT .)
    OPEN_PAREN      reduce using rule 99 (LITERAL -> FLOAT .)
    OPEN_SQUARE     reduce using rule 99 (LITERAL -> FLOAT .)
    FLOAT           reduce using rule 99 (LITERAL -> FLOAT .)
    INTEGER         reduce using rule 99 (LITERAL -> FLOAT .)
    BOOL            reduce using rule 99 (LITERAL -> FLOAT .)
    CHAR            reduce using rule 99 (LITERAL -> FLOAT .)
    STRING          reduce using rule 99 (LITERAL -> FLOAT .)
    CLOSE_PAREN     reduce using rule 99 (LITERAL -> FLOAT .)
    COMMA           reduce using rule 99 (LITERAL -> FLOAT .)
    CLOSE_SQUARE    reduce using rule 99 (LITERAL -> FLOAT .)
    WHERE           reduce using rule 99 (LITERAL -> FLOAT .)
    CLOSE_BRACE     reduce using rule 99 (LITERAL -> FLOAT .)
    ENDSTATEMENT    reduce using rule 99 (LITERAL -> FLOAT .)
    ARROW           reduce using rule 99 (LITERAL -> FLOAT .)
    THEN            reduce using rule 99 (LITERAL -> FLOAT .)
    OF              reduce using rule 99 (LITERAL -> FLOAT .)
    ELSE            reduce using rule 99 (LITERAL -> FLOAT .)


state 25

    (70) APAT -> GCON .

    CONSTRUCTOR     reduce using rule 70 (APAT -> GCON .)
    EQUALS          reduce using rule 70 (APAT -> GCON .)
    BACKTICK        reduce using rule 70 (APAT -> GCON .)
    PLUS            reduce using rule 70 (APAT -> GCON .)
    MINUS           reduce using rule 70 (APAT -> GCON .)
    TIMES           reduce using rule 70 (APAT -> GCON .)
    DIVIDE          reduce using rule 70 (APAT -> GCON .)
    POW             reduce using rule 70 (APAT -> GCON .)
    EQUALITY        reduce using rule 70 (APAT -> GCON .)
    LESS            reduce using rule 70 (APAT -> GCON .)
    LEQ             reduce using rule 70 (APAT -> GCON .)
    GREATER         reduce using rule 70 (APAT -> GCON .)
    GEQ             reduce using rule 70 (APAT -> GCON .)
    PIPE            reduce using rule 70 (APAT -> GCON .)
    IDENTIFIER      reduce using rule 70 (APAT -> GCON .)
    WILDCARD        reduce using rule 70 (APAT -> GCON .)
    OPEN_PAREN      reduce using rule 70 (APAT -> GCON .)
    OPEN_SQUARE     reduce using rule 70 (APAT -> GCON .)
    FLOAT           reduce using rule 70 (APAT -> GCON .)
    INTEGER         reduce using rule 70 (APAT -> GCON .)
    BOOL            reduce using rule 70 (APAT -> GCON .)
    CHAR            reduce using rule 70 (APAT -> GCON .)
    STRING          reduce using rule 70 (APAT -> GCON .)
    CLOSE_PAREN     reduce using rule 70 (APAT -> GCON .)
    COMMA           reduce using rule 70 (APAT -> GCON .)
    CLOSE_SQUARE    reduce using rule 70 (APAT -> GCON .)
    ARROW           reduce using rule 70 (APAT -> GCON .)


state 26

    (71) APAT -> LITERAL .

    CONSTRUCTOR     reduce using rule 71 (APAT -> LITERAL .)
    EQUALS          reduce using rule 71 (APAT -> LITERAL .)
    BACKTICK        reduce using rule 71 (APAT -> LITERAL .)
    PLUS            reduce using rule 71 (APAT -> LITERAL .)
    MINUS           reduce using rule 71 (APAT -> LITERAL .)
    TIMES           reduce using rule 71 (APAT -> LITERAL .)
    DIVIDE          reduce using rule 71 (APAT -> LITERAL .)
    POW             reduce using rule 71 (APAT -> LITERAL .)
    EQUALITY        reduce using rule 71 (APAT -> LITERAL .)
    LESS            reduce using rule 71 (APAT -> LITERAL .)
    LEQ             reduce using rule 71 (APAT -> LITERAL .)
    GREATER         reduce using rule 71 (APAT -> LITERAL .)
    GEQ             reduce using rule 71 (APAT -> LITERAL .)
    PIPE            reduce using rule 71 (APAT -> LITERAL .)
    IDENTIFIER      reduce using rule 71 (APAT -> LITERAL .)
    WILDCARD        reduce using rule 71 (APAT -> LITERAL .)
    OPEN_PAREN      reduce using rule 71 (APAT -> LITERAL .)
    OPEN_SQUARE     reduce using rule 71 (APAT -> LITERAL .)
    FLOAT           reduce using rule 71 (APAT -> LITERAL .)
    INTEGER         reduce using rule 71 (APAT -> LITERAL .)
    BOOL            reduce using rule 71 (APAT -> LITERAL .)
    CHAR            reduce using rule 71 (APAT -> LITERAL .)
    STRING          reduce using rule 71 (APAT -> LITERAL .)
    CLOSE_PAREN     reduce using rule 71 (APAT -> LITERAL .)
    COMMA           reduce using rule 71 (APAT -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 71 (APAT -> LITERAL .)
    ARROW           reduce using rule 71 (APAT -> LITERAL .)


state 27

    (72) APAT -> WILDCARD .

    CONSTRUCTOR     reduce using rule 72 (APAT -> WILDCARD .)
    EQUALS          reduce using rule 72 (APAT -> WILDCARD .)
    BACKTICK        reduce using rule 72 (APAT -> WILDCARD .)
    PLUS            reduce using rule 72 (APAT -> WILDCARD .)
    MINUS           reduce using rule 72 (APAT -> WILDCARD .)
    TIMES           reduce using rule 72 (APAT -> WILDCARD .)
    DIVIDE          reduce using rule 72 (APAT -> WILDCARD .)
    POW             reduce using rule 72 (APAT -> WILDCARD .)
    EQUALITY        reduce using rule 72 (APAT -> WILDCARD .)
    LESS            reduce using rule 72 (APAT -> WILDCARD .)
    LEQ             reduce using rule 72 (APAT -> WILDCARD .)
    GREATER         reduce using rule 72 (APAT -> WILDCARD .)
    GEQ             reduce using rule 72 (APAT -> WILDCARD .)
    PIPE            reduce using rule 72 (APAT -> WILDCARD .)
    IDENTIFIER      reduce using rule 72 (APAT -> WILDCARD .)
    WILDCARD        reduce using rule 72 (APAT -> WILDCARD .)
    OPEN_PAREN      reduce using rule 72 (APAT -> WILDCARD .)
    OPEN_SQUARE     reduce using rule 72 (APAT -> WILDCARD .)
    FLOAT           reduce using rule 72 (APAT -> WILDCARD .)
    INTEGER         reduce using rule 72 (APAT -> WILDCARD .)
    BOOL            reduce using rule 72 (APAT -> WILDCARD .)
    CHAR            reduce using rule 72 (APAT -> WILDCARD .)
    STRING          reduce using rule 72 (APAT -> WILDCARD .)
    CLOSE_PAREN     reduce using rule 72 (APAT -> WILDCARD .)
    COMMA           reduce using rule 72 (APAT -> WILDCARD .)
    CLOSE_SQUARE    reduce using rule 72 (APAT -> WILDCARD .)
    ARROW           reduce using rule 72 (APAT -> WILDCARD .)


state 28

    (75) APAT -> OPEN_SQUARE . PAT_LIST CLOSE_SQUARE
    (77) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (85) PAT_LIST -> . PAT_LIST COMMA PAT
    (86) PAT_LIST -> . PAT
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 68
    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT_LIST                       shift and go to state 67
    PAT                            shift and go to state 69
    LPAT                           shift and go to state 21
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 29

    (101) LITERAL -> BOOL .

    CONSTRUCTOR     reduce using rule 101 (LITERAL -> BOOL .)
    EQUALS          reduce using rule 101 (LITERAL -> BOOL .)
    BACKTICK        reduce using rule 101 (LITERAL -> BOOL .)
    PLUS            reduce using rule 101 (LITERAL -> BOOL .)
    MINUS           reduce using rule 101 (LITERAL -> BOOL .)
    TIMES           reduce using rule 101 (LITERAL -> BOOL .)
    DIVIDE          reduce using rule 101 (LITERAL -> BOOL .)
    POW             reduce using rule 101 (LITERAL -> BOOL .)
    EQUALITY        reduce using rule 101 (LITERAL -> BOOL .)
    LESS            reduce using rule 101 (LITERAL -> BOOL .)
    LEQ             reduce using rule 101 (LITERAL -> BOOL .)
    GREATER         reduce using rule 101 (LITERAL -> BOOL .)
    GEQ             reduce using rule 101 (LITERAL -> BOOL .)
    PIPE            reduce using rule 101 (LITERAL -> BOOL .)
    IDENTIFIER      reduce using rule 101 (LITERAL -> BOOL .)
    WILDCARD        reduce using rule 101 (LITERAL -> BOOL .)
    OPEN_PAREN      reduce using rule 101 (LITERAL -> BOOL .)
    OPEN_SQUARE     reduce using rule 101 (LITERAL -> BOOL .)
    FLOAT           reduce using rule 101 (LITERAL -> BOOL .)
    INTEGER         reduce using rule 101 (LITERAL -> BOOL .)
    BOOL            reduce using rule 101 (LITERAL -> BOOL .)
    CHAR            reduce using rule 101 (LITERAL -> BOOL .)
    STRING          reduce using rule 101 (LITERAL -> BOOL .)
    CLOSE_PAREN     reduce using rule 101 (LITERAL -> BOOL .)
    COMMA           reduce using rule 101 (LITERAL -> BOOL .)
    CLOSE_SQUARE    reduce using rule 101 (LITERAL -> BOOL .)
    WHERE           reduce using rule 101 (LITERAL -> BOOL .)
    CLOSE_BRACE     reduce using rule 101 (LITERAL -> BOOL .)
    ENDSTATEMENT    reduce using rule 101 (LITERAL -> BOOL .)
    ARROW           reduce using rule 101 (LITERAL -> BOOL .)
    THEN            reduce using rule 101 (LITERAL -> BOOL .)
    OF              reduce using rule 101 (LITERAL -> BOOL .)
    ELSE            reduce using rule 101 (LITERAL -> BOOL .)


state 30

    (102) LITERAL -> CHAR .

    CONSTRUCTOR     reduce using rule 102 (LITERAL -> CHAR .)
    EQUALS          reduce using rule 102 (LITERAL -> CHAR .)
    BACKTICK        reduce using rule 102 (LITERAL -> CHAR .)
    PLUS            reduce using rule 102 (LITERAL -> CHAR .)
    MINUS           reduce using rule 102 (LITERAL -> CHAR .)
    TIMES           reduce using rule 102 (LITERAL -> CHAR .)
    DIVIDE          reduce using rule 102 (LITERAL -> CHAR .)
    POW             reduce using rule 102 (LITERAL -> CHAR .)
    EQUALITY        reduce using rule 102 (LITERAL -> CHAR .)
    LESS            reduce using rule 102 (LITERAL -> CHAR .)
    LEQ             reduce using rule 102 (LITERAL -> CHAR .)
    GREATER         reduce using rule 102 (LITERAL -> CHAR .)
    GEQ             reduce using rule 102 (LITERAL -> CHAR .)
    PIPE            reduce using rule 102 (LITERAL -> CHAR .)
    IDENTIFIER      reduce using rule 102 (LITERAL -> CHAR .)
    WILDCARD        reduce using rule 102 (LITERAL -> CHAR .)
    OPEN_PAREN      reduce using rule 102 (LITERAL -> CHAR .)
    OPEN_SQUARE     reduce using rule 102 (LITERAL -> CHAR .)
    FLOAT           reduce using rule 102 (LITERAL -> CHAR .)
    INTEGER         reduce using rule 102 (LITERAL -> CHAR .)
    BOOL            reduce using rule 102 (LITERAL -> CHAR .)
    CHAR            reduce using rule 102 (LITERAL -> CHAR .)
    STRING          reduce using rule 102 (LITERAL -> CHAR .)
    CLOSE_PAREN     reduce using rule 102 (LITERAL -> CHAR .)
    COMMA           reduce using rule 102 (LITERAL -> CHAR .)
    CLOSE_SQUARE    reduce using rule 102 (LITERAL -> CHAR .)
    WHERE           reduce using rule 102 (LITERAL -> CHAR .)
    CLOSE_BRACE     reduce using rule 102 (LITERAL -> CHAR .)
    ENDSTATEMENT    reduce using rule 102 (LITERAL -> CHAR .)
    ARROW           reduce using rule 102 (LITERAL -> CHAR .)
    THEN            reduce using rule 102 (LITERAL -> CHAR .)
    OF              reduce using rule 102 (LITERAL -> CHAR .)
    ELSE            reduce using rule 102 (LITERAL -> CHAR .)


state 31

    (103) LITERAL -> STRING .

    CONSTRUCTOR     reduce using rule 103 (LITERAL -> STRING .)
    EQUALS          reduce using rule 103 (LITERAL -> STRING .)
    BACKTICK        reduce using rule 103 (LITERAL -> STRING .)
    PLUS            reduce using rule 103 (LITERAL -> STRING .)
    MINUS           reduce using rule 103 (LITERAL -> STRING .)
    TIMES           reduce using rule 103 (LITERAL -> STRING .)
    DIVIDE          reduce using rule 103 (LITERAL -> STRING .)
    POW             reduce using rule 103 (LITERAL -> STRING .)
    EQUALITY        reduce using rule 103 (LITERAL -> STRING .)
    LESS            reduce using rule 103 (LITERAL -> STRING .)
    LEQ             reduce using rule 103 (LITERAL -> STRING .)
    GREATER         reduce using rule 103 (LITERAL -> STRING .)
    GEQ             reduce using rule 103 (LITERAL -> STRING .)
    PIPE            reduce using rule 103 (LITERAL -> STRING .)
    IDENTIFIER      reduce using rule 103 (LITERAL -> STRING .)
    WILDCARD        reduce using rule 103 (LITERAL -> STRING .)
    OPEN_PAREN      reduce using rule 103 (LITERAL -> STRING .)
    OPEN_SQUARE     reduce using rule 103 (LITERAL -> STRING .)
    FLOAT           reduce using rule 103 (LITERAL -> STRING .)
    INTEGER         reduce using rule 103 (LITERAL -> STRING .)
    BOOL            reduce using rule 103 (LITERAL -> STRING .)
    CHAR            reduce using rule 103 (LITERAL -> STRING .)
    STRING          reduce using rule 103 (LITERAL -> STRING .)
    CLOSE_PAREN     reduce using rule 103 (LITERAL -> STRING .)
    COMMA           reduce using rule 103 (LITERAL -> STRING .)
    CLOSE_SQUARE    reduce using rule 103 (LITERAL -> STRING .)
    WHERE           reduce using rule 103 (LITERAL -> STRING .)
    CLOSE_BRACE     reduce using rule 103 (LITERAL -> STRING .)
    ENDSTATEMENT    reduce using rule 103 (LITERAL -> STRING .)
    ARROW           reduce using rule 103 (LITERAL -> STRING .)
    THEN            reduce using rule 103 (LITERAL -> STRING .)
    OF              reduce using rule 103 (LITERAL -> STRING .)
    ELSE            reduce using rule 103 (LITERAL -> STRING .)


state 32

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT . TOP_DECLARATIONS CLOSE_BRACE
    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT . IMPORT_DECLARATION
    (8) TOP_DECLARATIONS -> . TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION
    (9) TOP_DECLARATIONS -> . TOP_DECLARATION
    (6) IMPORT_DECLARATION -> . IMPORT IDENTIFIER
    (7) IMPORT_DECLARATION -> . IMPORT IDENTIFIER AS IDENTIFIER
    (10) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME
    (11) TOP_DECLARATION -> . DECLARATION
    (16) DECLARATION -> . GEN_DECLARATION
    (17) DECLARATION -> . FUNCTION_LHS RHS
    (18) DECLARATION -> . PAT RHS
    (19) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (20) GEN_DECLARATION -> .
    (29) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (30) FUNCTION_LHS -> . PAT VAROP PAT
    (31) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (21) VARS -> . VARS COMMA IDENTIFIER
    (22) VARS -> . IDENTIFIER
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    IMPORT          shift and go to state 11
    NEWTYPE         shift and go to state 13
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 20
    MINUS           shift and go to state 22
    WILDCARD        shift and go to state 27
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    TOP_DECLARATIONS               shift and go to state 70
    IMPORT_DECLARATION             shift and go to state 71
    TOP_DECLARATION                shift and go to state 10
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    APAT                           shift and go to state 19
    LPAT                           shift and go to state 21
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 33

    (3) BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 3 (BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE .)


state 34

    (8) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT . TOP_DECLARATION
    (10) TOP_DECLARATION -> . NEWTYPE TYPENAME EQUALS TYPENAME
    (11) TOP_DECLARATION -> . DECLARATION
    (16) DECLARATION -> . GEN_DECLARATION
    (17) DECLARATION -> . FUNCTION_LHS RHS
    (18) DECLARATION -> . PAT RHS
    (19) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (20) GEN_DECLARATION -> .
    (29) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (30) FUNCTION_LHS -> . PAT VAROP PAT
    (31) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (21) VARS -> . VARS COMMA IDENTIFIER
    (22) VARS -> . IDENTIFIER
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    NEWTYPE         shift and go to state 13
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 20
    MINUS           shift and go to state 22
    WILDCARD        shift and go to state 27
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    TOP_DECLARATION                shift and go to state 72
    DECLARATION                    shift and go to state 14
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    APAT                           shift and go to state 19
    LPAT                           shift and go to state 21
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 35

    (6) IMPORT_DECLARATION -> IMPORT IDENTIFIER .
    (7) IMPORT_DECLARATION -> IMPORT IDENTIFIER . AS IDENTIFIER

    ENDSTATEMENT    reduce using rule 6 (IMPORT_DECLARATION -> IMPORT IDENTIFIER .)
    AS              shift and go to state 73


state 36

    (69) APAT -> IDENTIFIER .

    IDENTIFIER      reduce using rule 69 (APAT -> IDENTIFIER .)
    WILDCARD        reduce using rule 69 (APAT -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 69 (APAT -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 69 (APAT -> IDENTIFIER .)
    FLOAT           reduce using rule 69 (APAT -> IDENTIFIER .)
    INTEGER         reduce using rule 69 (APAT -> IDENTIFIER .)
    BOOL            reduce using rule 69 (APAT -> IDENTIFIER .)
    CHAR            reduce using rule 69 (APAT -> IDENTIFIER .)
    STRING          reduce using rule 69 (APAT -> IDENTIFIER .)
    EQUALS          reduce using rule 69 (APAT -> IDENTIFIER .)
    PIPE            reduce using rule 69 (APAT -> IDENTIFIER .)
    CONSTRUCTOR     reduce using rule 69 (APAT -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 69 (APAT -> IDENTIFIER .)
    COMMA           reduce using rule 69 (APAT -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 69 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 69 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 69 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 69 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 69 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 69 (APAT -> IDENTIFIER .)
    POW             reduce using rule 69 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 69 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 69 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 69 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 69 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 69 (APAT -> IDENTIFIER .)
    ARROW           reduce using rule 69 (APAT -> IDENTIFIER .)


state 37

    (29) FUNCTION_LHS -> IDENTIFIER APAT . APATS
    (83) APATS -> . APAT APATS
    (84) APATS -> .
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    EQUALS          reduce using rule 84 (APATS -> .)
    PIPE            reduce using rule 84 (APATS -> .)
    CLOSE_PAREN     reduce using rule 84 (APATS -> .)
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 74
    APATS                          shift and go to state 75
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 38

    (73) APAT -> OPEN_PAREN . PAT CLOSE_PAREN
    (74) APAT -> OPEN_PAREN . PAT COMMA PAT_LIST CLOSE_PAREN
    (76) GCON -> OPEN_PAREN . CLOSE_PAREN
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 62
    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 76
    LPAT                           shift and go to state 21
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 39

    (10) TOP_DECLARATION -> NEWTYPE TYPENAME . EQUALS TYPENAME

    EQUALS          shift and go to state 77


state 40

    (17) DECLARATION -> FUNCTION_LHS RHS .

    CLOSE_BRACE     reduce using rule 17 (DECLARATION -> FUNCTION_LHS RHS .)
    ENDSTATEMENT    reduce using rule 17 (DECLARATION -> FUNCTION_LHS RHS .)


state 41

    (32) RHS -> EQUALS . EXP
    (33) RHS -> EQUALS . EXP WHERE DECLARATIONS
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 78
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 42

    (34) RHS -> GDRHS .
    (35) RHS -> GDRHS . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 34 (RHS -> GDRHS .)
    ENDSTATEMENT    reduce using rule 34 (RHS -> GDRHS .)
    WHERE           shift and go to state 93


state 43

    (36) GDRHS -> GUARDS . EQUALS EXP
    (37) GDRHS -> GUARDS . EQUALS EXP GDRHS

    EQUALS          shift and go to state 94


state 44

    (38) GUARDS -> PIPE . GUARD_LIST
    (39) GUARD_LIST -> . GUARD_LIST COMMA GUARD
    (40) GUARD_LIST -> . GUARD
    (41) GUARD -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    GUARD_LIST                     shift and go to state 95
    GUARD                          shift and go to state 96
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 45

    (18) DECLARATION -> PAT RHS .

    CLOSE_BRACE     reduce using rule 18 (DECLARATION -> PAT RHS .)
    ENDSTATEMENT    reduce using rule 18 (DECLARATION -> PAT RHS .)


state 46

    (30) FUNCTION_LHS -> PAT VAROP . PAT
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 98
    LPAT                           shift and go to state 21
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 47

    (78) VAROP -> VARSYM .

    MINUS           reduce using rule 78 (VAROP -> VARSYM .)
    IDENTIFIER      reduce using rule 78 (VAROP -> VARSYM .)
    WILDCARD        reduce using rule 78 (VAROP -> VARSYM .)
    OPEN_PAREN      reduce using rule 78 (VAROP -> VARSYM .)
    OPEN_SQUARE     reduce using rule 78 (VAROP -> VARSYM .)
    FLOAT           reduce using rule 78 (VAROP -> VARSYM .)
    INTEGER         reduce using rule 78 (VAROP -> VARSYM .)
    BOOL            reduce using rule 78 (VAROP -> VARSYM .)
    CHAR            reduce using rule 78 (VAROP -> VARSYM .)
    STRING          reduce using rule 78 (VAROP -> VARSYM .)
    LAMBDA          reduce using rule 78 (VAROP -> VARSYM .)
    LET             reduce using rule 78 (VAROP -> VARSYM .)
    IF              reduce using rule 78 (VAROP -> VARSYM .)
    MATCH           reduce using rule 78 (VAROP -> VARSYM .)


state 48

    (79) VAROP -> BACKTICK . IDENTIFIER BACKTICK

    IDENTIFIER      shift and go to state 99


state 49

    (87) VARSYM -> PLUS .

    MINUS           reduce using rule 87 (VARSYM -> PLUS .)
    IDENTIFIER      reduce using rule 87 (VARSYM -> PLUS .)
    WILDCARD        reduce using rule 87 (VARSYM -> PLUS .)
    OPEN_PAREN      reduce using rule 87 (VARSYM -> PLUS .)
    OPEN_SQUARE     reduce using rule 87 (VARSYM -> PLUS .)
    FLOAT           reduce using rule 87 (VARSYM -> PLUS .)
    INTEGER         reduce using rule 87 (VARSYM -> PLUS .)
    BOOL            reduce using rule 87 (VARSYM -> PLUS .)
    CHAR            reduce using rule 87 (VARSYM -> PLUS .)
    STRING          reduce using rule 87 (VARSYM -> PLUS .)
    LAMBDA          reduce using rule 87 (VARSYM -> PLUS .)
    LET             reduce using rule 87 (VARSYM -> PLUS .)
    IF              reduce using rule 87 (VARSYM -> PLUS .)
    MATCH           reduce using rule 87 (VARSYM -> PLUS .)


state 50

    (88) VARSYM -> MINUS .

    MINUS           reduce using rule 88 (VARSYM -> MINUS .)
    IDENTIFIER      reduce using rule 88 (VARSYM -> MINUS .)
    WILDCARD        reduce using rule 88 (VARSYM -> MINUS .)
    OPEN_PAREN      reduce using rule 88 (VARSYM -> MINUS .)
    OPEN_SQUARE     reduce using rule 88 (VARSYM -> MINUS .)
    FLOAT           reduce using rule 88 (VARSYM -> MINUS .)
    INTEGER         reduce using rule 88 (VARSYM -> MINUS .)
    BOOL            reduce using rule 88 (VARSYM -> MINUS .)
    CHAR            reduce using rule 88 (VARSYM -> MINUS .)
    STRING          reduce using rule 88 (VARSYM -> MINUS .)
    LAMBDA          reduce using rule 88 (VARSYM -> MINUS .)
    LET             reduce using rule 88 (VARSYM -> MINUS .)
    IF              reduce using rule 88 (VARSYM -> MINUS .)
    MATCH           reduce using rule 88 (VARSYM -> MINUS .)


state 51

    (89) VARSYM -> TIMES .

    MINUS           reduce using rule 89 (VARSYM -> TIMES .)
    IDENTIFIER      reduce using rule 89 (VARSYM -> TIMES .)
    WILDCARD        reduce using rule 89 (VARSYM -> TIMES .)
    OPEN_PAREN      reduce using rule 89 (VARSYM -> TIMES .)
    OPEN_SQUARE     reduce using rule 89 (VARSYM -> TIMES .)
    FLOAT           reduce using rule 89 (VARSYM -> TIMES .)
    INTEGER         reduce using rule 89 (VARSYM -> TIMES .)
    BOOL            reduce using rule 89 (VARSYM -> TIMES .)
    CHAR            reduce using rule 89 (VARSYM -> TIMES .)
    STRING          reduce using rule 89 (VARSYM -> TIMES .)
    LAMBDA          reduce using rule 89 (VARSYM -> TIMES .)
    LET             reduce using rule 89 (VARSYM -> TIMES .)
    IF              reduce using rule 89 (VARSYM -> TIMES .)
    MATCH           reduce using rule 89 (VARSYM -> TIMES .)


state 52

    (90) VARSYM -> DIVIDE .

    MINUS           reduce using rule 90 (VARSYM -> DIVIDE .)
    IDENTIFIER      reduce using rule 90 (VARSYM -> DIVIDE .)
    WILDCARD        reduce using rule 90 (VARSYM -> DIVIDE .)
    OPEN_PAREN      reduce using rule 90 (VARSYM -> DIVIDE .)
    OPEN_SQUARE     reduce using rule 90 (VARSYM -> DIVIDE .)
    FLOAT           reduce using rule 90 (VARSYM -> DIVIDE .)
    INTEGER         reduce using rule 90 (VARSYM -> DIVIDE .)
    BOOL            reduce using rule 90 (VARSYM -> DIVIDE .)
    CHAR            reduce using rule 90 (VARSYM -> DIVIDE .)
    STRING          reduce using rule 90 (VARSYM -> DIVIDE .)
    LAMBDA          reduce using rule 90 (VARSYM -> DIVIDE .)
    LET             reduce using rule 90 (VARSYM -> DIVIDE .)
    IF              reduce using rule 90 (VARSYM -> DIVIDE .)
    MATCH           reduce using rule 90 (VARSYM -> DIVIDE .)


state 53

    (91) VARSYM -> POW .

    MINUS           reduce using rule 91 (VARSYM -> POW .)
    IDENTIFIER      reduce using rule 91 (VARSYM -> POW .)
    WILDCARD        reduce using rule 91 (VARSYM -> POW .)
    OPEN_PAREN      reduce using rule 91 (VARSYM -> POW .)
    OPEN_SQUARE     reduce using rule 91 (VARSYM -> POW .)
    FLOAT           reduce using rule 91 (VARSYM -> POW .)
    INTEGER         reduce using rule 91 (VARSYM -> POW .)
    BOOL            reduce using rule 91 (VARSYM -> POW .)
    CHAR            reduce using rule 91 (VARSYM -> POW .)
    STRING          reduce using rule 91 (VARSYM -> POW .)
    LAMBDA          reduce using rule 91 (VARSYM -> POW .)
    LET             reduce using rule 91 (VARSYM -> POW .)
    IF              reduce using rule 91 (VARSYM -> POW .)
    MATCH           reduce using rule 91 (VARSYM -> POW .)


state 54

    (92) VARSYM -> EQUALITY .

    MINUS           reduce using rule 92 (VARSYM -> EQUALITY .)
    IDENTIFIER      reduce using rule 92 (VARSYM -> EQUALITY .)
    WILDCARD        reduce using rule 92 (VARSYM -> EQUALITY .)
    OPEN_PAREN      reduce using rule 92 (VARSYM -> EQUALITY .)
    OPEN_SQUARE     reduce using rule 92 (VARSYM -> EQUALITY .)
    FLOAT           reduce using rule 92 (VARSYM -> EQUALITY .)
    INTEGER         reduce using rule 92 (VARSYM -> EQUALITY .)
    BOOL            reduce using rule 92 (VARSYM -> EQUALITY .)
    CHAR            reduce using rule 92 (VARSYM -> EQUALITY .)
    STRING          reduce using rule 92 (VARSYM -> EQUALITY .)
    LAMBDA          reduce using rule 92 (VARSYM -> EQUALITY .)
    LET             reduce using rule 92 (VARSYM -> EQUALITY .)
    IF              reduce using rule 92 (VARSYM -> EQUALITY .)
    MATCH           reduce using rule 92 (VARSYM -> EQUALITY .)


state 55

    (93) VARSYM -> LESS .

    MINUS           reduce using rule 93 (VARSYM -> LESS .)
    IDENTIFIER      reduce using rule 93 (VARSYM -> LESS .)
    WILDCARD        reduce using rule 93 (VARSYM -> LESS .)
    OPEN_PAREN      reduce using rule 93 (VARSYM -> LESS .)
    OPEN_SQUARE     reduce using rule 93 (VARSYM -> LESS .)
    FLOAT           reduce using rule 93 (VARSYM -> LESS .)
    INTEGER         reduce using rule 93 (VARSYM -> LESS .)
    BOOL            reduce using rule 93 (VARSYM -> LESS .)
    CHAR            reduce using rule 93 (VARSYM -> LESS .)
    STRING          reduce using rule 93 (VARSYM -> LESS .)
    LAMBDA          reduce using rule 93 (VARSYM -> LESS .)
    LET             reduce using rule 93 (VARSYM -> LESS .)
    IF              reduce using rule 93 (VARSYM -> LESS .)
    MATCH           reduce using rule 93 (VARSYM -> LESS .)


state 56

    (94) VARSYM -> LEQ .

    MINUS           reduce using rule 94 (VARSYM -> LEQ .)
    IDENTIFIER      reduce using rule 94 (VARSYM -> LEQ .)
    WILDCARD        reduce using rule 94 (VARSYM -> LEQ .)
    OPEN_PAREN      reduce using rule 94 (VARSYM -> LEQ .)
    OPEN_SQUARE     reduce using rule 94 (VARSYM -> LEQ .)
    FLOAT           reduce using rule 94 (VARSYM -> LEQ .)
    INTEGER         reduce using rule 94 (VARSYM -> LEQ .)
    BOOL            reduce using rule 94 (VARSYM -> LEQ .)
    CHAR            reduce using rule 94 (VARSYM -> LEQ .)
    STRING          reduce using rule 94 (VARSYM -> LEQ .)
    LAMBDA          reduce using rule 94 (VARSYM -> LEQ .)
    LET             reduce using rule 94 (VARSYM -> LEQ .)
    IF              reduce using rule 94 (VARSYM -> LEQ .)
    MATCH           reduce using rule 94 (VARSYM -> LEQ .)


state 57

    (95) VARSYM -> GREATER .

    MINUS           reduce using rule 95 (VARSYM -> GREATER .)
    IDENTIFIER      reduce using rule 95 (VARSYM -> GREATER .)
    WILDCARD        reduce using rule 95 (VARSYM -> GREATER .)
    OPEN_PAREN      reduce using rule 95 (VARSYM -> GREATER .)
    OPEN_SQUARE     reduce using rule 95 (VARSYM -> GREATER .)
    FLOAT           reduce using rule 95 (VARSYM -> GREATER .)
    INTEGER         reduce using rule 95 (VARSYM -> GREATER .)
    BOOL            reduce using rule 95 (VARSYM -> GREATER .)
    CHAR            reduce using rule 95 (VARSYM -> GREATER .)
    STRING          reduce using rule 95 (VARSYM -> GREATER .)
    LAMBDA          reduce using rule 95 (VARSYM -> GREATER .)
    LET             reduce using rule 95 (VARSYM -> GREATER .)
    IF              reduce using rule 95 (VARSYM -> GREATER .)
    MATCH           reduce using rule 95 (VARSYM -> GREATER .)


state 58

    (96) VARSYM -> GEQ .

    MINUS           reduce using rule 96 (VARSYM -> GEQ .)
    IDENTIFIER      reduce using rule 96 (VARSYM -> GEQ .)
    WILDCARD        reduce using rule 96 (VARSYM -> GEQ .)
    OPEN_PAREN      reduce using rule 96 (VARSYM -> GEQ .)
    OPEN_SQUARE     reduce using rule 96 (VARSYM -> GEQ .)
    FLOAT           reduce using rule 96 (VARSYM -> GEQ .)
    INTEGER         reduce using rule 96 (VARSYM -> GEQ .)
    BOOL            reduce using rule 96 (VARSYM -> GEQ .)
    CHAR            reduce using rule 96 (VARSYM -> GEQ .)
    STRING          reduce using rule 96 (VARSYM -> GEQ .)
    LAMBDA          reduce using rule 96 (VARSYM -> GEQ .)
    LET             reduce using rule 96 (VARSYM -> GEQ .)
    IF              reduce using rule 96 (VARSYM -> GEQ .)
    MATCH           reduce using rule 96 (VARSYM -> GEQ .)


state 59

    (19) GEN_DECLARATION -> VARS TYPESIG . TYPE
    (23) TYPE -> . ATYPE
    (24) TYPE -> . ATYPE ARROW TYPE
    (25) ATYPE -> . TYPENAME
    (26) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (27) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (28) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 102
    OPEN_PAREN      shift and go to state 103
    OPEN_SQUARE     shift and go to state 104

    TYPE                           shift and go to state 100
    ATYPE                          shift and go to state 101

state 60

    (21) VARS -> VARS COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 105


state 61

    (31) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS . CLOSE_PAREN APAT APATS

    CLOSE_PAREN     shift and go to state 106


state 62

    (76) GCON -> OPEN_PAREN CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALS          reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BACKTICK        reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PLUS            reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    MINUS           reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    TIMES           reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    DIVIDE          reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    POW             reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    EQUALITY        reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LESS            reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    LEQ             reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GREATER         reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    GEQ             reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    PIPE            reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WILDCARD        reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    FLOAT           reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    INTEGER         reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    BOOL            reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CHAR            reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    STRING          reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    COMMA           reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    WHERE           reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ARROW           reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    THEN            reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    OF              reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)
    ELSE            reduce using rule 76 (GCON -> OPEN_PAREN CLOSE_PAREN .)


state 63

    (73) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (74) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN
    (30) FUNCTION_LHS -> PAT . VAROP PAT
    (78) VAROP -> . VARSYM
    (79) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (87) VARSYM -> . PLUS
    (88) VARSYM -> . MINUS
    (89) VARSYM -> . TIMES
    (90) VARSYM -> . DIVIDE
    (91) VARSYM -> . POW
    (92) VARSYM -> . EQUALITY
    (93) VARSYM -> . LESS
    (94) VARSYM -> . LEQ
    (95) VARSYM -> . GREATER
    (96) VARSYM -> . GEQ

    CLOSE_PAREN     shift and go to state 107
    COMMA           shift and go to state 108
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58

    VAROP                          shift and go to state 46
    VARSYM                         shift and go to state 47

state 64

    (29) FUNCTION_LHS -> IDENTIFIER . APAT APATS
    (69) APAT -> IDENTIFIER .
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CONSTRUCTOR     reduce using rule 69 (APAT -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 69 (APAT -> IDENTIFIER .)
    COMMA           reduce using rule 69 (APAT -> IDENTIFIER .)
    BACKTICK        reduce using rule 69 (APAT -> IDENTIFIER .)
    PLUS            reduce using rule 69 (APAT -> IDENTIFIER .)
    MINUS           reduce using rule 69 (APAT -> IDENTIFIER .)
    TIMES           reduce using rule 69 (APAT -> IDENTIFIER .)
    DIVIDE          reduce using rule 69 (APAT -> IDENTIFIER .)
    POW             reduce using rule 69 (APAT -> IDENTIFIER .)
    EQUALITY        reduce using rule 69 (APAT -> IDENTIFIER .)
    LESS            reduce using rule 69 (APAT -> IDENTIFIER .)
    LEQ             reduce using rule 69 (APAT -> IDENTIFIER .)
    GREATER         reduce using rule 69 (APAT -> IDENTIFIER .)
    GEQ             reduce using rule 69 (APAT -> IDENTIFIER .)
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 37
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 65

    (64) PAT -> LPAT CONSTRUCTOR . PAT
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    LPAT                           shift and go to state 21
    PAT                            shift and go to state 109
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 66

    (67) LPAT -> MINUS OPEN_PAREN . INTEGER CLOSE_PAREN
    (68) LPAT -> MINUS OPEN_PAREN . FLOAT CLOSE_PAREN

    INTEGER         shift and go to state 110
    FLOAT           shift and go to state 111


state 67

    (75) APAT -> OPEN_SQUARE PAT_LIST . CLOSE_SQUARE
    (85) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_SQUARE    shift and go to state 112
    COMMA           shift and go to state 113


state 68

    (77) GCON -> OPEN_SQUARE CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALS          reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BACKTICK        reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PLUS            reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    MINUS           reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    TIMES           reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    DIVIDE          reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    POW             reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    EQUALITY        reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LESS            reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    LEQ             reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GREATER         reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    GEQ             reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    PIPE            reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WILDCARD        reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    FLOAT           reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    INTEGER         reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    BOOL            reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CHAR            reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    STRING          reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    COMMA           reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    WHERE           reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ARROW           reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    THEN            reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    OF              reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)
    ELSE            reduce using rule 77 (GCON -> OPEN_SQUARE CLOSE_SQUARE .)


state 69

    (86) PAT_LIST -> PAT .

    CLOSE_SQUARE    reduce using rule 86 (PAT_LIST -> PAT .)
    COMMA           reduce using rule 86 (PAT_LIST -> PAT .)
    CLOSE_PAREN     reduce using rule 86 (PAT_LIST -> PAT .)


state 70

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS . CLOSE_BRACE
    (8) TOP_DECLARATIONS -> TOP_DECLARATIONS . ENDSTATEMENT TOP_DECLARATION

    CLOSE_BRACE     shift and go to state 114
    ENDSTATEMENT    shift and go to state 34


state 71

    (4) IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .

    ENDSTATEMENT    reduce using rule 4 (IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION .)


state 72

    (8) TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .

    CLOSE_BRACE     reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)
    ENDSTATEMENT    reduce using rule 8 (TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION .)


state 73

    (7) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS . IDENTIFIER

    IDENTIFIER      shift and go to state 115


state 74

    (83) APATS -> APAT . APATS
    (83) APATS -> . APAT APATS
    (84) APATS -> .
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    EQUALS          reduce using rule 84 (APATS -> .)
    PIPE            reduce using rule 84 (APATS -> .)
    CLOSE_PAREN     reduce using rule 84 (APATS -> .)
    ARROW           reduce using rule 84 (APATS -> .)
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 74
    APATS                          shift and go to state 116
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 75

    (29) FUNCTION_LHS -> IDENTIFIER APAT APATS .

    EQUALS          reduce using rule 29 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    PIPE            reduce using rule 29 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)
    CLOSE_PAREN     reduce using rule 29 (FUNCTION_LHS -> IDENTIFIER APAT APATS .)


state 76

    (73) APAT -> OPEN_PAREN PAT . CLOSE_PAREN
    (74) APAT -> OPEN_PAREN PAT . COMMA PAT_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 107
    COMMA           shift and go to state 108


state 77

    (10) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS . TYPENAME

    TYPENAME        shift and go to state 117


state 78

    (32) RHS -> EQUALS EXP .
    (33) RHS -> EQUALS EXP . WHERE DECLARATIONS

    CLOSE_BRACE     reduce using rule 32 (RHS -> EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 32 (RHS -> EQUALS EXP .)
    WHERE           shift and go to state 118


state 79

    (42) EXP -> INFIX_EXP .

    WHERE           reduce using rule 42 (EXP -> INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 42 (EXP -> INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 42 (EXP -> INFIX_EXP .)
    THEN            reduce using rule 42 (EXP -> INFIX_EXP .)
    OF              reduce using rule 42 (EXP -> INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 42 (EXP -> INFIX_EXP .)
    COMMA           reduce using rule 42 (EXP -> INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 42 (EXP -> INFIX_EXP .)
    PIPE            reduce using rule 42 (EXP -> INFIX_EXP .)
    EQUALS          reduce using rule 42 (EXP -> INFIX_EXP .)
    BACKTICK        reduce using rule 42 (EXP -> INFIX_EXP .)
    PLUS            reduce using rule 42 (EXP -> INFIX_EXP .)
    MINUS           reduce using rule 42 (EXP -> INFIX_EXP .)
    TIMES           reduce using rule 42 (EXP -> INFIX_EXP .)
    DIVIDE          reduce using rule 42 (EXP -> INFIX_EXP .)
    POW             reduce using rule 42 (EXP -> INFIX_EXP .)
    EQUALITY        reduce using rule 42 (EXP -> INFIX_EXP .)
    LESS            reduce using rule 42 (EXP -> INFIX_EXP .)
    LEQ             reduce using rule 42 (EXP -> INFIX_EXP .)
    GREATER         reduce using rule 42 (EXP -> INFIX_EXP .)
    GEQ             reduce using rule 42 (EXP -> INFIX_EXP .)
    ELSE            reduce using rule 42 (EXP -> INFIX_EXP .)
    IDENTIFIER      reduce using rule 42 (EXP -> INFIX_EXP .)
    WILDCARD        reduce using rule 42 (EXP -> INFIX_EXP .)
    OPEN_PAREN      reduce using rule 42 (EXP -> INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 42 (EXP -> INFIX_EXP .)
    FLOAT           reduce using rule 42 (EXP -> INFIX_EXP .)
    INTEGER         reduce using rule 42 (EXP -> INFIX_EXP .)
    BOOL            reduce using rule 42 (EXP -> INFIX_EXP .)
    CHAR            reduce using rule 42 (EXP -> INFIX_EXP .)
    STRING          reduce using rule 42 (EXP -> INFIX_EXP .)


state 80

    (43) INFIX_EXP -> LEXP . OP INFIX_EXP
    (45) INFIX_EXP -> LEXP .
    (80) OP -> . VAROP
    (78) VAROP -> . VARSYM
    (79) VAROP -> . BACKTICK IDENTIFIER BACKTICK
    (87) VARSYM -> . PLUS
    (88) VARSYM -> . MINUS
    (89) VARSYM -> . TIMES
    (90) VARSYM -> . DIVIDE
    (91) VARSYM -> . POW
    (92) VARSYM -> . EQUALITY
    (93) VARSYM -> . LESS
    (94) VARSYM -> . LEQ
    (95) VARSYM -> . GREATER
    (96) VARSYM -> . GEQ

  ! shift/reduce conflict for BACKTICK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    WHERE           reduce using rule 45 (INFIX_EXP -> LEXP .)
    CLOSE_BRACE     reduce using rule 45 (INFIX_EXP -> LEXP .)
    ENDSTATEMENT    reduce using rule 45 (INFIX_EXP -> LEXP .)
    COMMA           reduce using rule 45 (INFIX_EXP -> LEXP .)
    EQUALS          reduce using rule 45 (INFIX_EXP -> LEXP .)
    THEN            reduce using rule 45 (INFIX_EXP -> LEXP .)
    OF              reduce using rule 45 (INFIX_EXP -> LEXP .)
    CLOSE_PAREN     reduce using rule 45 (INFIX_EXP -> LEXP .)
    CLOSE_SQUARE    reduce using rule 45 (INFIX_EXP -> LEXP .)
    PIPE            reduce using rule 45 (INFIX_EXP -> LEXP .)
    ELSE            reduce using rule 45 (INFIX_EXP -> LEXP .)
    IDENTIFIER      reduce using rule 45 (INFIX_EXP -> LEXP .)
    WILDCARD        reduce using rule 45 (INFIX_EXP -> LEXP .)
    OPEN_PAREN      reduce using rule 45 (INFIX_EXP -> LEXP .)
    OPEN_SQUARE     reduce using rule 45 (INFIX_EXP -> LEXP .)
    FLOAT           reduce using rule 45 (INFIX_EXP -> LEXP .)
    INTEGER         reduce using rule 45 (INFIX_EXP -> LEXP .)
    BOOL            reduce using rule 45 (INFIX_EXP -> LEXP .)
    CHAR            reduce using rule 45 (INFIX_EXP -> LEXP .)
    STRING          reduce using rule 45 (INFIX_EXP -> LEXP .)
    BACKTICK        shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52
    POW             shift and go to state 53
    EQUALITY        shift and go to state 54
    LESS            shift and go to state 55
    LEQ             shift and go to state 56
    GREATER         shift and go to state 57
    GEQ             shift and go to state 58

  ! BACKTICK        [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! PLUS            [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! MINUS           [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! TIMES           [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! DIVIDE          [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! POW             [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! EQUALITY        [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! LESS            [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! LEQ             [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! GREATER         [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]
  ! GEQ             [ reduce using rule 45 (INFIX_EXP -> LEXP .) ]

    OP                             shift and go to state 119
    VAROP                          shift and go to state 120
    VARSYM                         shift and go to state 47

state 81

    (44) INFIX_EXP -> MINUS . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    INFIX_EXP                      shift and go to state 121
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 82

    (46) LEXP -> LAMBDA . APAT APATS ARROW EXP
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 122
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 83

    (47) LEXP -> LET . DECLARATIONS IN EXP
    (12) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (13) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 124

    DECLARATIONS                   shift and go to state 123

state 84

    (48) LEXP -> IF . EXP THEN EXP ELSE EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 125
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 85

    (49) LEXP -> MATCH . EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 126
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 86

    (50) LEXP -> FEXP .
    (51) FEXP -> FEXP . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    BACKTICK        reduce using rule 50 (LEXP -> FEXP .)
    PLUS            reduce using rule 50 (LEXP -> FEXP .)
    MINUS           reduce using rule 50 (LEXP -> FEXP .)
    TIMES           reduce using rule 50 (LEXP -> FEXP .)
    DIVIDE          reduce using rule 50 (LEXP -> FEXP .)
    POW             reduce using rule 50 (LEXP -> FEXP .)
    EQUALITY        reduce using rule 50 (LEXP -> FEXP .)
    LESS            reduce using rule 50 (LEXP -> FEXP .)
    LEQ             reduce using rule 50 (LEXP -> FEXP .)
    GREATER         reduce using rule 50 (LEXP -> FEXP .)
    GEQ             reduce using rule 50 (LEXP -> FEXP .)
    WHERE           reduce using rule 50 (LEXP -> FEXP .)
    CLOSE_BRACE     reduce using rule 50 (LEXP -> FEXP .)
    ENDSTATEMENT    reduce using rule 50 (LEXP -> FEXP .)
    COMMA           reduce using rule 50 (LEXP -> FEXP .)
    EQUALS          reduce using rule 50 (LEXP -> FEXP .)
    THEN            reduce using rule 50 (LEXP -> FEXP .)
    OF              reduce using rule 50 (LEXP -> FEXP .)
    CLOSE_PAREN     reduce using rule 50 (LEXP -> FEXP .)
    CLOSE_SQUARE    reduce using rule 50 (LEXP -> FEXP .)
    PIPE            reduce using rule 50 (LEXP -> FEXP .)
    ELSE            reduce using rule 50 (LEXP -> FEXP .)
    WILDCARD        reduce using rule 50 (LEXP -> FEXP .)
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

  ! IDENTIFIER      [ reduce using rule 50 (LEXP -> FEXP .) ]
  ! OPEN_PAREN      [ reduce using rule 50 (LEXP -> FEXP .) ]
  ! OPEN_SQUARE     [ reduce using rule 50 (LEXP -> FEXP .) ]
  ! FLOAT           [ reduce using rule 50 (LEXP -> FEXP .) ]
  ! INTEGER         [ reduce using rule 50 (LEXP -> FEXP .) ]
  ! BOOL            [ reduce using rule 50 (LEXP -> FEXP .) ]
  ! CHAR            [ reduce using rule 50 (LEXP -> FEXP .) ]
  ! STRING          [ reduce using rule 50 (LEXP -> FEXP .) ]

    AEXP                           shift and go to state 127
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 87

    (52) FEXP -> AEXP .

    IDENTIFIER      reduce using rule 52 (FEXP -> AEXP .)
    OPEN_PAREN      reduce using rule 52 (FEXP -> AEXP .)
    OPEN_SQUARE     reduce using rule 52 (FEXP -> AEXP .)
    FLOAT           reduce using rule 52 (FEXP -> AEXP .)
    INTEGER         reduce using rule 52 (FEXP -> AEXP .)
    BOOL            reduce using rule 52 (FEXP -> AEXP .)
    CHAR            reduce using rule 52 (FEXP -> AEXP .)
    STRING          reduce using rule 52 (FEXP -> AEXP .)
    BACKTICK        reduce using rule 52 (FEXP -> AEXP .)
    PLUS            reduce using rule 52 (FEXP -> AEXP .)
    MINUS           reduce using rule 52 (FEXP -> AEXP .)
    TIMES           reduce using rule 52 (FEXP -> AEXP .)
    DIVIDE          reduce using rule 52 (FEXP -> AEXP .)
    POW             reduce using rule 52 (FEXP -> AEXP .)
    EQUALITY        reduce using rule 52 (FEXP -> AEXP .)
    LESS            reduce using rule 52 (FEXP -> AEXP .)
    LEQ             reduce using rule 52 (FEXP -> AEXP .)
    GREATER         reduce using rule 52 (FEXP -> AEXP .)
    GEQ             reduce using rule 52 (FEXP -> AEXP .)
    WHERE           reduce using rule 52 (FEXP -> AEXP .)
    CLOSE_BRACE     reduce using rule 52 (FEXP -> AEXP .)
    ENDSTATEMENT    reduce using rule 52 (FEXP -> AEXP .)
    COMMA           reduce using rule 52 (FEXP -> AEXP .)
    EQUALS          reduce using rule 52 (FEXP -> AEXP .)
    THEN            reduce using rule 52 (FEXP -> AEXP .)
    OF              reduce using rule 52 (FEXP -> AEXP .)
    CLOSE_PAREN     reduce using rule 52 (FEXP -> AEXP .)
    CLOSE_SQUARE    reduce using rule 52 (FEXP -> AEXP .)
    PIPE            reduce using rule 52 (FEXP -> AEXP .)
    ELSE            reduce using rule 52 (FEXP -> AEXP .)
    WILDCARD        reduce using rule 52 (FEXP -> AEXP .)


state 88

    (53) AEXP -> IDENTIFIER .

    IDENTIFIER      reduce using rule 53 (AEXP -> IDENTIFIER .)
    OPEN_PAREN      reduce using rule 53 (AEXP -> IDENTIFIER .)
    OPEN_SQUARE     reduce using rule 53 (AEXP -> IDENTIFIER .)
    FLOAT           reduce using rule 53 (AEXP -> IDENTIFIER .)
    INTEGER         reduce using rule 53 (AEXP -> IDENTIFIER .)
    BOOL            reduce using rule 53 (AEXP -> IDENTIFIER .)
    CHAR            reduce using rule 53 (AEXP -> IDENTIFIER .)
    STRING          reduce using rule 53 (AEXP -> IDENTIFIER .)
    BACKTICK        reduce using rule 53 (AEXP -> IDENTIFIER .)
    PLUS            reduce using rule 53 (AEXP -> IDENTIFIER .)
    MINUS           reduce using rule 53 (AEXP -> IDENTIFIER .)
    TIMES           reduce using rule 53 (AEXP -> IDENTIFIER .)
    DIVIDE          reduce using rule 53 (AEXP -> IDENTIFIER .)
    POW             reduce using rule 53 (AEXP -> IDENTIFIER .)
    EQUALITY        reduce using rule 53 (AEXP -> IDENTIFIER .)
    LESS            reduce using rule 53 (AEXP -> IDENTIFIER .)
    LEQ             reduce using rule 53 (AEXP -> IDENTIFIER .)
    GREATER         reduce using rule 53 (AEXP -> IDENTIFIER .)
    GEQ             reduce using rule 53 (AEXP -> IDENTIFIER .)
    WHERE           reduce using rule 53 (AEXP -> IDENTIFIER .)
    CLOSE_BRACE     reduce using rule 53 (AEXP -> IDENTIFIER .)
    ENDSTATEMENT    reduce using rule 53 (AEXP -> IDENTIFIER .)
    COMMA           reduce using rule 53 (AEXP -> IDENTIFIER .)
    EQUALS          reduce using rule 53 (AEXP -> IDENTIFIER .)
    THEN            reduce using rule 53 (AEXP -> IDENTIFIER .)
    OF              reduce using rule 53 (AEXP -> IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 53 (AEXP -> IDENTIFIER .)
    CLOSE_SQUARE    reduce using rule 53 (AEXP -> IDENTIFIER .)
    PIPE            reduce using rule 53 (AEXP -> IDENTIFIER .)
    ELSE            reduce using rule 53 (AEXP -> IDENTIFIER .)
    WILDCARD        reduce using rule 53 (AEXP -> IDENTIFIER .)


state 89

    (54) AEXP -> GCON .

    IDENTIFIER      reduce using rule 54 (AEXP -> GCON .)
    OPEN_PAREN      reduce using rule 54 (AEXP -> GCON .)
    OPEN_SQUARE     reduce using rule 54 (AEXP -> GCON .)
    FLOAT           reduce using rule 54 (AEXP -> GCON .)
    INTEGER         reduce using rule 54 (AEXP -> GCON .)
    BOOL            reduce using rule 54 (AEXP -> GCON .)
    CHAR            reduce using rule 54 (AEXP -> GCON .)
    STRING          reduce using rule 54 (AEXP -> GCON .)
    BACKTICK        reduce using rule 54 (AEXP -> GCON .)
    PLUS            reduce using rule 54 (AEXP -> GCON .)
    MINUS           reduce using rule 54 (AEXP -> GCON .)
    TIMES           reduce using rule 54 (AEXP -> GCON .)
    DIVIDE          reduce using rule 54 (AEXP -> GCON .)
    POW             reduce using rule 54 (AEXP -> GCON .)
    EQUALITY        reduce using rule 54 (AEXP -> GCON .)
    LESS            reduce using rule 54 (AEXP -> GCON .)
    LEQ             reduce using rule 54 (AEXP -> GCON .)
    GREATER         reduce using rule 54 (AEXP -> GCON .)
    GEQ             reduce using rule 54 (AEXP -> GCON .)
    WHERE           reduce using rule 54 (AEXP -> GCON .)
    CLOSE_BRACE     reduce using rule 54 (AEXP -> GCON .)
    ENDSTATEMENT    reduce using rule 54 (AEXP -> GCON .)
    COMMA           reduce using rule 54 (AEXP -> GCON .)
    EQUALS          reduce using rule 54 (AEXP -> GCON .)
    THEN            reduce using rule 54 (AEXP -> GCON .)
    OF              reduce using rule 54 (AEXP -> GCON .)
    CLOSE_PAREN     reduce using rule 54 (AEXP -> GCON .)
    CLOSE_SQUARE    reduce using rule 54 (AEXP -> GCON .)
    PIPE            reduce using rule 54 (AEXP -> GCON .)
    ELSE            reduce using rule 54 (AEXP -> GCON .)
    WILDCARD        reduce using rule 54 (AEXP -> GCON .)


state 90

    (55) AEXP -> LITERAL .

    IDENTIFIER      reduce using rule 55 (AEXP -> LITERAL .)
    OPEN_PAREN      reduce using rule 55 (AEXP -> LITERAL .)
    OPEN_SQUARE     reduce using rule 55 (AEXP -> LITERAL .)
    FLOAT           reduce using rule 55 (AEXP -> LITERAL .)
    INTEGER         reduce using rule 55 (AEXP -> LITERAL .)
    BOOL            reduce using rule 55 (AEXP -> LITERAL .)
    CHAR            reduce using rule 55 (AEXP -> LITERAL .)
    STRING          reduce using rule 55 (AEXP -> LITERAL .)
    BACKTICK        reduce using rule 55 (AEXP -> LITERAL .)
    PLUS            reduce using rule 55 (AEXP -> LITERAL .)
    MINUS           reduce using rule 55 (AEXP -> LITERAL .)
    TIMES           reduce using rule 55 (AEXP -> LITERAL .)
    DIVIDE          reduce using rule 55 (AEXP -> LITERAL .)
    POW             reduce using rule 55 (AEXP -> LITERAL .)
    EQUALITY        reduce using rule 55 (AEXP -> LITERAL .)
    LESS            reduce using rule 55 (AEXP -> LITERAL .)
    LEQ             reduce using rule 55 (AEXP -> LITERAL .)
    GREATER         reduce using rule 55 (AEXP -> LITERAL .)
    GEQ             reduce using rule 55 (AEXP -> LITERAL .)
    WHERE           reduce using rule 55 (AEXP -> LITERAL .)
    CLOSE_BRACE     reduce using rule 55 (AEXP -> LITERAL .)
    ENDSTATEMENT    reduce using rule 55 (AEXP -> LITERAL .)
    COMMA           reduce using rule 55 (AEXP -> LITERAL .)
    EQUALS          reduce using rule 55 (AEXP -> LITERAL .)
    THEN            reduce using rule 55 (AEXP -> LITERAL .)
    OF              reduce using rule 55 (AEXP -> LITERAL .)
    CLOSE_PAREN     reduce using rule 55 (AEXP -> LITERAL .)
    CLOSE_SQUARE    reduce using rule 55 (AEXP -> LITERAL .)
    PIPE            reduce using rule 55 (AEXP -> LITERAL .)
    ELSE            reduce using rule 55 (AEXP -> LITERAL .)
    WILDCARD        reduce using rule 55 (AEXP -> LITERAL .)


state 91

    (56) AEXP -> OPEN_PAREN . EXP CLOSE_PAREN
    (57) AEXP -> OPEN_PAREN . EXP COMMA EXP_LIST CLOSE_PAREN
    (76) GCON -> OPEN_PAREN . CLOSE_PAREN
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_PAREN     shift and go to state 62
    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 128
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 92

    (58) AEXP -> OPEN_SQUARE . EXP CLOSE_SQUARE
    (59) AEXP -> OPEN_SQUARE . EXP COMMA EXP_LIST CLOSE_SQUARE
    (77) GCON -> OPEN_SQUARE . CLOSE_SQUARE
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_SQUARE    shift and go to state 68
    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 129
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 93

    (35) RHS -> GDRHS WHERE . DECLARATIONS
    (12) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (13) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 124

    DECLARATIONS                   shift and go to state 130

state 94

    (36) GDRHS -> GUARDS EQUALS . EXP
    (37) GDRHS -> GUARDS EQUALS . EXP GDRHS
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 131
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 95

    (38) GUARDS -> PIPE GUARD_LIST .
    (39) GUARD_LIST -> GUARD_LIST . COMMA GUARD

    EQUALS          reduce using rule 38 (GUARDS -> PIPE GUARD_LIST .)
    COMMA           shift and go to state 132


state 96

    (40) GUARD_LIST -> GUARD .

    COMMA           reduce using rule 40 (GUARD_LIST -> GUARD .)
    EQUALS          reduce using rule 40 (GUARD_LIST -> GUARD .)


state 97

    (41) GUARD -> INFIX_EXP .

    COMMA           reduce using rule 41 (GUARD -> INFIX_EXP .)
    EQUALS          reduce using rule 41 (GUARD -> INFIX_EXP .)


state 98

    (30) FUNCTION_LHS -> PAT VAROP PAT .

    EQUALS          reduce using rule 30 (FUNCTION_LHS -> PAT VAROP PAT .)
    PIPE            reduce using rule 30 (FUNCTION_LHS -> PAT VAROP PAT .)
    CLOSE_PAREN     reduce using rule 30 (FUNCTION_LHS -> PAT VAROP PAT .)


state 99

    (79) VAROP -> BACKTICK IDENTIFIER . BACKTICK

    BACKTICK        shift and go to state 133


state 100

    (19) GEN_DECLARATION -> VARS TYPESIG TYPE .

    CLOSE_BRACE     reduce using rule 19 (GEN_DECLARATION -> VARS TYPESIG TYPE .)
    ENDSTATEMENT    reduce using rule 19 (GEN_DECLARATION -> VARS TYPESIG TYPE .)


state 101

    (23) TYPE -> ATYPE .
    (24) TYPE -> ATYPE . ARROW TYPE

    CLOSE_BRACE     reduce using rule 23 (TYPE -> ATYPE .)
    ENDSTATEMENT    reduce using rule 23 (TYPE -> ATYPE .)
    CLOSE_PAREN     reduce using rule 23 (TYPE -> ATYPE .)
    COMMA           reduce using rule 23 (TYPE -> ATYPE .)
    CLOSE_SQUARE    reduce using rule 23 (TYPE -> ATYPE .)
    ARROW           shift and go to state 134


state 102

    (25) ATYPE -> TYPENAME .

    ARROW           reduce using rule 25 (ATYPE -> TYPENAME .)
    CLOSE_BRACE     reduce using rule 25 (ATYPE -> TYPENAME .)
    ENDSTATEMENT    reduce using rule 25 (ATYPE -> TYPENAME .)
    CLOSE_PAREN     reduce using rule 25 (ATYPE -> TYPENAME .)
    COMMA           reduce using rule 25 (ATYPE -> TYPENAME .)
    CLOSE_SQUARE    reduce using rule 25 (ATYPE -> TYPENAME .)


state 103

    (26) ATYPE -> OPEN_PAREN . TYPES_LIST CLOSE_PAREN
    (27) ATYPE -> OPEN_PAREN . TYPE CLOSE_PAREN
    (97) TYPES_LIST -> . TYPES_LIST COMMA TYPE
    (98) TYPES_LIST -> . TYPE
    (23) TYPE -> . ATYPE
    (24) TYPE -> . ATYPE ARROW TYPE
    (25) ATYPE -> . TYPENAME
    (26) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (27) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (28) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 102
    OPEN_PAREN      shift and go to state 103
    OPEN_SQUARE     shift and go to state 104

    TYPES_LIST                     shift and go to state 135
    TYPE                           shift and go to state 136
    ATYPE                          shift and go to state 101

state 104

    (28) ATYPE -> OPEN_SQUARE . TYPE CLOSE_SQUARE
    (23) TYPE -> . ATYPE
    (24) TYPE -> . ATYPE ARROW TYPE
    (25) ATYPE -> . TYPENAME
    (26) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (27) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (28) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 102
    OPEN_PAREN      shift and go to state 103
    OPEN_SQUARE     shift and go to state 104

    TYPE                           shift and go to state 137
    ATYPE                          shift and go to state 101

state 105

    (21) VARS -> VARS COMMA IDENTIFIER .

    TYPESIG         reduce using rule 21 (VARS -> VARS COMMA IDENTIFIER .)
    COMMA           reduce using rule 21 (VARS -> VARS COMMA IDENTIFIER .)


state 106

    (31) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN . APAT APATS
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 138
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 107

    (73) APAT -> OPEN_PAREN PAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALS          reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PLUS            reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    MINUS           reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    TIMES           reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    POW             reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LESS            reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    LEQ             reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GREATER         reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    GEQ             reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    PIPE            reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    WILDCARD        reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    FLOAT           reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    INTEGER         reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    BOOL            reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CHAR            reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    STRING          reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    COMMA           reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)
    ARROW           reduce using rule 73 (APAT -> OPEN_PAREN PAT CLOSE_PAREN .)


state 108

    (74) APAT -> OPEN_PAREN PAT COMMA . PAT_LIST CLOSE_PAREN
    (85) PAT_LIST -> . PAT_LIST COMMA PAT
    (86) PAT_LIST -> . PAT
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 69
    PAT_LIST                       shift and go to state 139
    LPAT                           shift and go to state 21
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 109

    (64) PAT -> LPAT CONSTRUCTOR PAT .

    EQUALS          reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    BACKTICK        reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    PLUS            reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    MINUS           reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    TIMES           reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    DIVIDE          reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    POW             reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    EQUALITY        reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    LESS            reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    LEQ             reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    GREATER         reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    GEQ             reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    PIPE            reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_PAREN     reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    COMMA           reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    CLOSE_SQUARE    reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)
    ARROW           reduce using rule 64 (PAT -> LPAT CONSTRUCTOR PAT .)


state 110

    (67) LPAT -> MINUS OPEN_PAREN INTEGER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 140


state 111

    (68) LPAT -> MINUS OPEN_PAREN FLOAT . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 141


state 112

    (75) APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .

    CONSTRUCTOR     reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    POW             reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    IDENTIFIER      reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    WILDCARD        reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)
    ARROW           reduce using rule 75 (APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE .)


state 113

    (85) PAT_LIST -> PAT_LIST COMMA . PAT
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    PAT                            shift and go to state 142
    LPAT                           shift and go to state 21
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 114

    (2) BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .

    $end            reduce using rule 2 (BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE .)


state 115

    (7) IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER .

    ENDSTATEMENT    reduce using rule 7 (IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER .)


state 116

    (83) APATS -> APAT APATS .

    EQUALS          reduce using rule 83 (APATS -> APAT APATS .)
    PIPE            reduce using rule 83 (APATS -> APAT APATS .)
    CLOSE_PAREN     reduce using rule 83 (APATS -> APAT APATS .)
    ARROW           reduce using rule 83 (APATS -> APAT APATS .)


state 117

    (10) TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME .

    CLOSE_BRACE     reduce using rule 10 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME .)
    ENDSTATEMENT    reduce using rule 10 (TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME .)


state 118

    (33) RHS -> EQUALS EXP WHERE . DECLARATIONS
    (12) DECLARATIONS -> . OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE
    (13) DECLARATIONS -> . OPEN_BRACE CLOSE_BRACE

    OPEN_BRACE      shift and go to state 124

    DECLARATIONS                   shift and go to state 143

state 119

    (43) INFIX_EXP -> LEXP OP . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    LEXP                           shift and go to state 80
    INFIX_EXP                      shift and go to state 144
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 120

    (80) OP -> VAROP .

    MINUS           reduce using rule 80 (OP -> VAROP .)
    LAMBDA          reduce using rule 80 (OP -> VAROP .)
    LET             reduce using rule 80 (OP -> VAROP .)
    IF              reduce using rule 80 (OP -> VAROP .)
    MATCH           reduce using rule 80 (OP -> VAROP .)
    IDENTIFIER      reduce using rule 80 (OP -> VAROP .)
    OPEN_PAREN      reduce using rule 80 (OP -> VAROP .)
    OPEN_SQUARE     reduce using rule 80 (OP -> VAROP .)
    FLOAT           reduce using rule 80 (OP -> VAROP .)
    INTEGER         reduce using rule 80 (OP -> VAROP .)
    BOOL            reduce using rule 80 (OP -> VAROP .)
    CHAR            reduce using rule 80 (OP -> VAROP .)
    STRING          reduce using rule 80 (OP -> VAROP .)


state 121

    (44) INFIX_EXP -> MINUS INFIX_EXP .

    WHERE           reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    COMMA           reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALS          reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    THEN            reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    OF              reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    PIPE            reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    BACKTICK        reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    PLUS            reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    MINUS           reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    TIMES           reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    DIVIDE          reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    POW             reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    EQUALITY        reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    LESS            reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    LEQ             reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    GREATER         reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    GEQ             reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    ELSE            reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    IDENTIFIER      reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    WILDCARD        reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_PAREN      reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    FLOAT           reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    INTEGER         reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    BOOL            reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    CHAR            reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)
    STRING          reduce using rule 44 (INFIX_EXP -> MINUS INFIX_EXP .)


state 122

    (46) LEXP -> LAMBDA APAT . APATS ARROW EXP
    (83) APATS -> . APAT APATS
    (84) APATS -> .
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    ARROW           reduce using rule 84 (APATS -> .)
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 74
    APATS                          shift and go to state 145
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 123

    (47) LEXP -> LET DECLARATIONS . IN EXP

    IN              shift and go to state 146


state 124

    (12) DECLARATIONS -> OPEN_BRACE . DECLARATIONS_LIST CLOSE_BRACE
    (13) DECLARATIONS -> OPEN_BRACE . CLOSE_BRACE
    (14) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (15) DECLARATIONS_LIST -> . DECLARATION
    (16) DECLARATION -> . GEN_DECLARATION
    (17) DECLARATION -> . FUNCTION_LHS RHS
    (18) DECLARATION -> . PAT RHS
    (19) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (20) GEN_DECLARATION -> .
    (29) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (30) FUNCTION_LHS -> . PAT VAROP PAT
    (31) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (21) VARS -> . VARS COMMA IDENTIFIER
    (22) VARS -> . IDENTIFIER
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

  ! shift/reduce conflict for CLOSE_BRACE resolved as shift
    CLOSE_BRACE     shift and go to state 148
    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 20
    MINUS           shift and go to state 22
    WILDCARD        shift and go to state 27
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

  ! CLOSE_BRACE     [ reduce using rule 20 (GEN_DECLARATION -> .) ]

    DECLARATIONS_LIST              shift and go to state 147
    DECLARATION                    shift and go to state 149
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    APAT                           shift and go to state 19
    LPAT                           shift and go to state 21
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 125

    (48) LEXP -> IF EXP . THEN EXP ELSE EXP

    THEN            shift and go to state 150


state 126

    (49) LEXP -> MATCH EXP . OF OPEN_BRACE ALTS CLOSE_BRACE

    OF              shift and go to state 151


state 127

    (51) FEXP -> FEXP AEXP .

    IDENTIFIER      reduce using rule 51 (FEXP -> FEXP AEXP .)
    OPEN_PAREN      reduce using rule 51 (FEXP -> FEXP AEXP .)
    OPEN_SQUARE     reduce using rule 51 (FEXP -> FEXP AEXP .)
    FLOAT           reduce using rule 51 (FEXP -> FEXP AEXP .)
    INTEGER         reduce using rule 51 (FEXP -> FEXP AEXP .)
    BOOL            reduce using rule 51 (FEXP -> FEXP AEXP .)
    CHAR            reduce using rule 51 (FEXP -> FEXP AEXP .)
    STRING          reduce using rule 51 (FEXP -> FEXP AEXP .)
    BACKTICK        reduce using rule 51 (FEXP -> FEXP AEXP .)
    PLUS            reduce using rule 51 (FEXP -> FEXP AEXP .)
    MINUS           reduce using rule 51 (FEXP -> FEXP AEXP .)
    TIMES           reduce using rule 51 (FEXP -> FEXP AEXP .)
    DIVIDE          reduce using rule 51 (FEXP -> FEXP AEXP .)
    POW             reduce using rule 51 (FEXP -> FEXP AEXP .)
    EQUALITY        reduce using rule 51 (FEXP -> FEXP AEXP .)
    LESS            reduce using rule 51 (FEXP -> FEXP AEXP .)
    LEQ             reduce using rule 51 (FEXP -> FEXP AEXP .)
    GREATER         reduce using rule 51 (FEXP -> FEXP AEXP .)
    GEQ             reduce using rule 51 (FEXP -> FEXP AEXP .)
    WHERE           reduce using rule 51 (FEXP -> FEXP AEXP .)
    CLOSE_BRACE     reduce using rule 51 (FEXP -> FEXP AEXP .)
    ENDSTATEMENT    reduce using rule 51 (FEXP -> FEXP AEXP .)
    COMMA           reduce using rule 51 (FEXP -> FEXP AEXP .)
    EQUALS          reduce using rule 51 (FEXP -> FEXP AEXP .)
    THEN            reduce using rule 51 (FEXP -> FEXP AEXP .)
    OF              reduce using rule 51 (FEXP -> FEXP AEXP .)
    CLOSE_PAREN     reduce using rule 51 (FEXP -> FEXP AEXP .)
    CLOSE_SQUARE    reduce using rule 51 (FEXP -> FEXP AEXP .)
    PIPE            reduce using rule 51 (FEXP -> FEXP AEXP .)
    ELSE            reduce using rule 51 (FEXP -> FEXP AEXP .)
    WILDCARD        reduce using rule 51 (FEXP -> FEXP AEXP .)


state 128

    (56) AEXP -> OPEN_PAREN EXP . CLOSE_PAREN
    (57) AEXP -> OPEN_PAREN EXP . COMMA EXP_LIST CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 152
    COMMA           shift and go to state 153


state 129

    (58) AEXP -> OPEN_SQUARE EXP . CLOSE_SQUARE
    (59) AEXP -> OPEN_SQUARE EXP . COMMA EXP_LIST CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 154
    COMMA           shift and go to state 155


state 130

    (35) RHS -> GDRHS WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 35 (RHS -> GDRHS WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 35 (RHS -> GDRHS WHERE DECLARATIONS .)


state 131

    (36) GDRHS -> GUARDS EQUALS EXP .
    (37) GDRHS -> GUARDS EQUALS EXP . GDRHS
    (36) GDRHS -> . GUARDS EQUALS EXP
    (37) GDRHS -> . GUARDS EQUALS EXP GDRHS
    (38) GUARDS -> . PIPE GUARD_LIST

    WHERE           reduce using rule 36 (GDRHS -> GUARDS EQUALS EXP .)
    CLOSE_BRACE     reduce using rule 36 (GDRHS -> GUARDS EQUALS EXP .)
    ENDSTATEMENT    reduce using rule 36 (GDRHS -> GUARDS EQUALS EXP .)
    PIPE            shift and go to state 44

    GUARDS                         shift and go to state 43
    GDRHS                          shift and go to state 156

state 132

    (39) GUARD_LIST -> GUARD_LIST COMMA . GUARD
    (41) GUARD -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    GUARD                          shift and go to state 157
    INFIX_EXP                      shift and go to state 97
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 133

    (79) VAROP -> BACKTICK IDENTIFIER BACKTICK .

    MINUS           reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IDENTIFIER      reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    WILDCARD        reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_PAREN      reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    OPEN_SQUARE     reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    FLOAT           reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    INTEGER         reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    BOOL            reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    CHAR            reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    STRING          reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LAMBDA          reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    LET             reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    IF              reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)
    MATCH           reduce using rule 79 (VAROP -> BACKTICK IDENTIFIER BACKTICK .)


state 134

    (24) TYPE -> ATYPE ARROW . TYPE
    (23) TYPE -> . ATYPE
    (24) TYPE -> . ATYPE ARROW TYPE
    (25) ATYPE -> . TYPENAME
    (26) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (27) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (28) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 102
    OPEN_PAREN      shift and go to state 103
    OPEN_SQUARE     shift and go to state 104

    ATYPE                          shift and go to state 101
    TYPE                           shift and go to state 158

state 135

    (26) ATYPE -> OPEN_PAREN TYPES_LIST . CLOSE_PAREN
    (97) TYPES_LIST -> TYPES_LIST . COMMA TYPE

    CLOSE_PAREN     shift and go to state 159
    COMMA           shift and go to state 160


state 136

    (27) ATYPE -> OPEN_PAREN TYPE . CLOSE_PAREN
    (98) TYPES_LIST -> TYPE .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 161
    COMMA           reduce using rule 98 (TYPES_LIST -> TYPE .)

  ! CLOSE_PAREN     [ reduce using rule 98 (TYPES_LIST -> TYPE .) ]


state 137

    (28) ATYPE -> OPEN_SQUARE TYPE . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 162


state 138

    (31) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT . APATS
    (83) APATS -> . APAT APATS
    (84) APATS -> .
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    EQUALS          reduce using rule 84 (APATS -> .)
    PIPE            reduce using rule 84 (APATS -> .)
    CLOSE_PAREN     reduce using rule 84 (APATS -> .)
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    APAT                           shift and go to state 74
    APATS                          shift and go to state 163
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 139

    (74) APAT -> OPEN_PAREN PAT COMMA PAT_LIST . CLOSE_PAREN
    (85) PAT_LIST -> PAT_LIST . COMMA PAT

    CLOSE_PAREN     shift and go to state 164
    COMMA           shift and go to state 113


state 140

    (67) LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALS          reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    BACKTICK        reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PLUS            reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    MINUS           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    TIMES           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    DIVIDE          reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    POW             reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    EQUALITY        reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LESS            reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    LEQ             reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GREATER         reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    GEQ             reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    PIPE            reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    COMMA           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)
    ARROW           reduce using rule 67 (LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN .)


state 141

    (68) LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALS          reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    BACKTICK        reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PLUS            reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    MINUS           reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    TIMES           reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    DIVIDE          reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    POW             reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    EQUALITY        reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LESS            reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    LEQ             reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GREATER         reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    GEQ             reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    PIPE            reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    COMMA           reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)
    ARROW           reduce using rule 68 (LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN .)


state 142

    (85) PAT_LIST -> PAT_LIST COMMA PAT .

    CLOSE_SQUARE    reduce using rule 85 (PAT_LIST -> PAT_LIST COMMA PAT .)
    COMMA           reduce using rule 85 (PAT_LIST -> PAT_LIST COMMA PAT .)
    CLOSE_PAREN     reduce using rule 85 (PAT_LIST -> PAT_LIST COMMA PAT .)


state 143

    (33) RHS -> EQUALS EXP WHERE DECLARATIONS .

    CLOSE_BRACE     reduce using rule 33 (RHS -> EQUALS EXP WHERE DECLARATIONS .)
    ENDSTATEMENT    reduce using rule 33 (RHS -> EQUALS EXP WHERE DECLARATIONS .)


state 144

    (43) INFIX_EXP -> LEXP OP INFIX_EXP .

    WHERE           reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_BRACE     reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ENDSTATEMENT    reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    COMMA           reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALS          reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    THEN            reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OF              reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_PAREN     reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CLOSE_SQUARE    reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PIPE            reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BACKTICK        reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    PLUS            reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    MINUS           reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    TIMES           reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    DIVIDE          reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    POW             reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    EQUALITY        reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LESS            reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    LEQ             reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GREATER         reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    GEQ             reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    ELSE            reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    IDENTIFIER      reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    WILDCARD        reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_PAREN      reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    OPEN_SQUARE     reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    FLOAT           reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    INTEGER         reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    BOOL            reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    CHAR            reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)
    STRING          reduce using rule 43 (INFIX_EXP -> LEXP OP INFIX_EXP .)


state 145

    (46) LEXP -> LAMBDA APAT APATS . ARROW EXP

    ARROW           shift and go to state 165


state 146

    (47) LEXP -> LET DECLARATIONS IN . EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 166
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 147

    (12) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 167


state 148

    (13) DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .

    IN              reduce using rule 13 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 13 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 13 (DECLARATIONS -> OPEN_BRACE CLOSE_BRACE .)


state 149

    (14) DECLARATIONS_LIST -> DECLARATION . ENDSTATEMENT DECLARATIONS_LIST
    (15) DECLARATIONS_LIST -> DECLARATION .

    ENDSTATEMENT    shift and go to state 168
    CLOSE_BRACE     reduce using rule 15 (DECLARATIONS_LIST -> DECLARATION .)


state 150

    (48) LEXP -> IF EXP THEN . EXP ELSE EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 169
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 151

    (49) LEXP -> MATCH EXP OF . OPEN_BRACE ALTS CLOSE_BRACE

    OPEN_BRACE      shift and go to state 170


state 152

    (56) AEXP -> OPEN_PAREN EXP CLOSE_PAREN .

    IDENTIFIER      reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    FLOAT           reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    INTEGER         reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BOOL            reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CHAR            reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    STRING          reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    BACKTICK        reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PLUS            reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    MINUS           reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    TIMES           reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    DIVIDE          reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    POW             reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALITY        reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LESS            reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    LEQ             reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GREATER         reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    GEQ             reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WHERE           reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    COMMA           reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    EQUALS          reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    THEN            reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    OF              reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    PIPE            reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    ELSE            reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)
    WILDCARD        reduce using rule 56 (AEXP -> OPEN_PAREN EXP CLOSE_PAREN .)


state 153

    (57) AEXP -> OPEN_PAREN EXP COMMA . EXP_LIST CLOSE_PAREN
    (81) EXP_LIST -> . EXP_LIST COMMA EXP
    (82) EXP_LIST -> . EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 171
    EXP_LIST                       shift and go to state 172
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 154

    (58) AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .

    IDENTIFIER      reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    FLOAT           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    INTEGER         reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BOOL            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CHAR            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    STRING          reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    BACKTICK        reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PLUS            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    MINUS           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    TIMES           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    DIVIDE          reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    POW             reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALITY        reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LESS            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    LEQ             reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GREATER         reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    GEQ             reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WHERE           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    COMMA           reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    EQUALS          reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    THEN            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    OF              reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    PIPE            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    ELSE            reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)
    WILDCARD        reduce using rule 58 (AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE .)


state 155

    (59) AEXP -> OPEN_SQUARE EXP COMMA . EXP_LIST CLOSE_SQUARE
    (81) EXP_LIST -> . EXP_LIST COMMA EXP
    (82) EXP_LIST -> . EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 171
    EXP_LIST                       shift and go to state 173
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 156

    (37) GDRHS -> GUARDS EQUALS EXP GDRHS .

    WHERE           reduce using rule 37 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    CLOSE_BRACE     reduce using rule 37 (GDRHS -> GUARDS EQUALS EXP GDRHS .)
    ENDSTATEMENT    reduce using rule 37 (GDRHS -> GUARDS EQUALS EXP GDRHS .)


state 157

    (39) GUARD_LIST -> GUARD_LIST COMMA GUARD .

    COMMA           reduce using rule 39 (GUARD_LIST -> GUARD_LIST COMMA GUARD .)
    EQUALS          reduce using rule 39 (GUARD_LIST -> GUARD_LIST COMMA GUARD .)


state 158

    (24) TYPE -> ATYPE ARROW TYPE .

    CLOSE_BRACE     reduce using rule 24 (TYPE -> ATYPE ARROW TYPE .)
    ENDSTATEMENT    reduce using rule 24 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_PAREN     reduce using rule 24 (TYPE -> ATYPE ARROW TYPE .)
    COMMA           reduce using rule 24 (TYPE -> ATYPE ARROW TYPE .)
    CLOSE_SQUARE    reduce using rule 24 (TYPE -> ATYPE ARROW TYPE .)


state 159

    (26) ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .

    ARROW           reduce using rule 26 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 26 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 26 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 26 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 26 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 26 (ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN .)


state 160

    (97) TYPES_LIST -> TYPES_LIST COMMA . TYPE
    (23) TYPE -> . ATYPE
    (24) TYPE -> . ATYPE ARROW TYPE
    (25) ATYPE -> . TYPENAME
    (26) ATYPE -> . OPEN_PAREN TYPES_LIST CLOSE_PAREN
    (27) ATYPE -> . OPEN_PAREN TYPE CLOSE_PAREN
    (28) ATYPE -> . OPEN_SQUARE TYPE CLOSE_SQUARE

    TYPENAME        shift and go to state 102
    OPEN_PAREN      shift and go to state 103
    OPEN_SQUARE     shift and go to state 104

    TYPE                           shift and go to state 174
    ATYPE                          shift and go to state 101

state 161

    (27) ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .

    ARROW           reduce using rule 27 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 27 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 27 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 27 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    COMMA           reduce using rule 27 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 27 (ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN .)


state 162

    (28) ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .

    ARROW           reduce using rule 28 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 28 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 28 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 28 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    COMMA           reduce using rule 28 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 28 (ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE .)


state 163

    (31) FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .

    EQUALS          reduce using rule 31 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    PIPE            reduce using rule 31 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)
    CLOSE_PAREN     reduce using rule 31 (FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS .)


state 164

    (74) APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .

    CONSTRUCTOR     reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    POW             reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LESS            reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    IDENTIFIER      reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    WILDCARD        reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    STRING          reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)
    ARROW           reduce using rule 74 (APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN .)


state 165

    (46) LEXP -> LAMBDA APAT APATS ARROW . EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 175
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 166

    (47) LEXP -> LET DECLARATIONS IN EXP .

    BACKTICK        reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    PLUS            reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    MINUS           reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    TIMES           reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    DIVIDE          reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    POW             reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALITY        reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    LESS            reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    LEQ             reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    GREATER         reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    GEQ             reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    WHERE           reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_BRACE     reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    ENDSTATEMENT    reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    COMMA           reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    EQUALS          reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    THEN            reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    OF              reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_PAREN     reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    CLOSE_SQUARE    reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    PIPE            reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    ELSE            reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    IDENTIFIER      reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    WILDCARD        reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_PAREN      reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    OPEN_SQUARE     reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    FLOAT           reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    INTEGER         reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    BOOL            reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    CHAR            reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)
    STRING          reduce using rule 47 (LEXP -> LET DECLARATIONS IN EXP .)


state 167

    (12) DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .

    IN              reduce using rule 12 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 12 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 12 (DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE .)


state 168

    (14) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT . DECLARATIONS_LIST
    (14) DECLARATIONS_LIST -> . DECLARATION ENDSTATEMENT DECLARATIONS_LIST
    (15) DECLARATIONS_LIST -> . DECLARATION
    (16) DECLARATION -> . GEN_DECLARATION
    (17) DECLARATION -> . FUNCTION_LHS RHS
    (18) DECLARATION -> . PAT RHS
    (19) GEN_DECLARATION -> . VARS TYPESIG TYPE
    (20) GEN_DECLARATION -> .
    (29) FUNCTION_LHS -> . IDENTIFIER APAT APATS
    (30) FUNCTION_LHS -> . PAT VAROP PAT
    (31) FUNCTION_LHS -> . OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (21) VARS -> . VARS COMMA IDENTIFIER
    (22) VARS -> . IDENTIFIER
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    ENDSTATEMENT    reduce using rule 20 (GEN_DECLARATION -> .)
    CLOSE_BRACE     reduce using rule 20 (GEN_DECLARATION -> .)
    IDENTIFIER      shift and go to state 12
    OPEN_PAREN      shift and go to state 20
    MINUS           shift and go to state 22
    WILDCARD        shift and go to state 27
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    DECLARATION                    shift and go to state 149
    DECLARATIONS_LIST              shift and go to state 176
    GEN_DECLARATION                shift and go to state 15
    FUNCTION_LHS                   shift and go to state 16
    PAT                            shift and go to state 17
    VARS                           shift and go to state 18
    APAT                           shift and go to state 19
    LPAT                           shift and go to state 21
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 169

    (48) LEXP -> IF EXP THEN EXP . ELSE EXP

    ELSE            shift and go to state 177


state 170

    (49) LEXP -> MATCH EXP OF OPEN_BRACE . ALTS CLOSE_BRACE
    (60) ALTS -> . ALTS ALT ENDSTATEMENT
    (61) ALTS -> . ALT
    (62) ALT -> . PAT ARROW EXP
    (63) ALT -> .
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for WILDCARD resolved as shift
  ! shift/reduce conflict for OPEN_PAREN resolved as shift
  ! shift/reduce conflict for OPEN_SQUARE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    CLOSE_BRACE     reduce using rule 63 (ALT -> .)
    ENDSTATEMENT    reduce using rule 63 (ALT -> .)
    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

  ! MINUS           [ reduce using rule 63 (ALT -> .) ]
  ! IDENTIFIER      [ reduce using rule 63 (ALT -> .) ]
  ! WILDCARD        [ reduce using rule 63 (ALT -> .) ]
  ! OPEN_PAREN      [ reduce using rule 63 (ALT -> .) ]
  ! OPEN_SQUARE     [ reduce using rule 63 (ALT -> .) ]
  ! FLOAT           [ reduce using rule 63 (ALT -> .) ]
  ! INTEGER         [ reduce using rule 63 (ALT -> .) ]
  ! BOOL            [ reduce using rule 63 (ALT -> .) ]
  ! CHAR            [ reduce using rule 63 (ALT -> .) ]
  ! STRING          [ reduce using rule 63 (ALT -> .) ]

    ALTS                           shift and go to state 178
    ALT                            shift and go to state 179
    PAT                            shift and go to state 180
    LPAT                           shift and go to state 21
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 171

    (82) EXP_LIST -> EXP .

    CLOSE_PAREN     reduce using rule 82 (EXP_LIST -> EXP .)
    COMMA           reduce using rule 82 (EXP_LIST -> EXP .)
    CLOSE_SQUARE    reduce using rule 82 (EXP_LIST -> EXP .)


state 172

    (57) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST . CLOSE_PAREN
    (81) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_PAREN     shift and go to state 182
    COMMA           shift and go to state 181


state 173

    (59) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST . CLOSE_SQUARE
    (81) EXP_LIST -> EXP_LIST . COMMA EXP

    CLOSE_SQUARE    shift and go to state 183
    COMMA           shift and go to state 181


state 174

    (97) TYPES_LIST -> TYPES_LIST COMMA TYPE .

    CLOSE_PAREN     reduce using rule 97 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)
    COMMA           reduce using rule 97 (TYPES_LIST -> TYPES_LIST COMMA TYPE .)


state 175

    (46) LEXP -> LAMBDA APAT APATS ARROW EXP .

    BACKTICK        reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PLUS            reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    MINUS           reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    TIMES           reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    DIVIDE          reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    POW             reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALITY        reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LESS            reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    LEQ             reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GREATER         reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    GEQ             reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WHERE           reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_BRACE     reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ENDSTATEMENT    reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    COMMA           reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    EQUALS          reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    THEN            reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OF              reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_PAREN     reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CLOSE_SQUARE    reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    PIPE            reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    ELSE            reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    IDENTIFIER      reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    WILDCARD        reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_PAREN      reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    OPEN_SQUARE     reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    FLOAT           reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    INTEGER         reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    BOOL            reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    CHAR            reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)
    STRING          reduce using rule 46 (LEXP -> LAMBDA APAT APATS ARROW EXP .)


state 176

    (14) DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .

    CLOSE_BRACE     reduce using rule 14 (DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST .)


state 177

    (48) LEXP -> IF EXP THEN EXP ELSE . EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 184
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 178

    (49) LEXP -> MATCH EXP OF OPEN_BRACE ALTS . CLOSE_BRACE
    (60) ALTS -> ALTS . ALT ENDSTATEMENT
    (62) ALT -> . PAT ARROW EXP
    (63) ALT -> .
    (64) PAT -> . LPAT CONSTRUCTOR PAT
    (65) PAT -> . LPAT
    (66) LPAT -> . APAT
    (67) LPAT -> . MINUS OPEN_PAREN INTEGER CLOSE_PAREN
    (68) LPAT -> . MINUS OPEN_PAREN FLOAT CLOSE_PAREN
    (69) APAT -> . IDENTIFIER
    (70) APAT -> . GCON
    (71) APAT -> . LITERAL
    (72) APAT -> . WILDCARD
    (73) APAT -> . OPEN_PAREN PAT CLOSE_PAREN
    (74) APAT -> . OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN
    (75) APAT -> . OPEN_SQUARE PAT_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    CLOSE_BRACE     shift and go to state 185
    ENDSTATEMENT    reduce using rule 63 (ALT -> .)
    MINUS           shift and go to state 22
    IDENTIFIER      shift and go to state 36
    WILDCARD        shift and go to state 27
    OPEN_PAREN      shift and go to state 38
    OPEN_SQUARE     shift and go to state 28
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    ALT                            shift and go to state 186
    PAT                            shift and go to state 180
    LPAT                           shift and go to state 21
    APAT                           shift and go to state 19
    GCON                           shift and go to state 25
    LITERAL                        shift and go to state 26

state 179

    (61) ALTS -> ALT .

    CLOSE_BRACE     reduce using rule 61 (ALTS -> ALT .)
    MINUS           reduce using rule 61 (ALTS -> ALT .)
    IDENTIFIER      reduce using rule 61 (ALTS -> ALT .)
    WILDCARD        reduce using rule 61 (ALTS -> ALT .)
    OPEN_PAREN      reduce using rule 61 (ALTS -> ALT .)
    OPEN_SQUARE     reduce using rule 61 (ALTS -> ALT .)
    FLOAT           reduce using rule 61 (ALTS -> ALT .)
    INTEGER         reduce using rule 61 (ALTS -> ALT .)
    BOOL            reduce using rule 61 (ALTS -> ALT .)
    CHAR            reduce using rule 61 (ALTS -> ALT .)
    STRING          reduce using rule 61 (ALTS -> ALT .)
    ENDSTATEMENT    reduce using rule 61 (ALTS -> ALT .)


state 180

    (62) ALT -> PAT . ARROW EXP

    ARROW           shift and go to state 187


state 181

    (81) EXP_LIST -> EXP_LIST COMMA . EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 188
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 182

    (57) AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .

    IDENTIFIER      reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OPEN_SQUARE     reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    FLOAT           reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    INTEGER         reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BOOL            reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CHAR            reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    STRING          reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    BACKTICK        reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PLUS            reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    MINUS           reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    TIMES           reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    DIVIDE          reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    POW             reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALITY        reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LESS            reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    LEQ             reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GREATER         reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    GEQ             reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WHERE           reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_BRACE     reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ENDSTATEMENT    reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    COMMA           reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    EQUALS          reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    THEN            reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    OF              reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    CLOSE_SQUARE    reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    PIPE            reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    ELSE            reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)
    WILDCARD        reduce using rule 57 (AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN .)


state 183

    (59) AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .

    IDENTIFIER      reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_PAREN      reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OPEN_SQUARE     reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    FLOAT           reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    INTEGER         reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BOOL            reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CHAR            reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    STRING          reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    BACKTICK        reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PLUS            reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    MINUS           reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    TIMES           reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    DIVIDE          reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    POW             reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALITY        reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LESS            reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    LEQ             reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GREATER         reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    GEQ             reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WHERE           reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_BRACE     reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ENDSTATEMENT    reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    COMMA           reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    EQUALS          reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    THEN            reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    OF              reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_PAREN     reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    CLOSE_SQUARE    reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    PIPE            reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    ELSE            reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)
    WILDCARD        reduce using rule 59 (AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE .)


state 184

    (48) LEXP -> IF EXP THEN EXP ELSE EXP .

    BACKTICK        reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PLUS            reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    MINUS           reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    TIMES           reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    DIVIDE          reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    POW             reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALITY        reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LESS            reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    LEQ             reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GREATER         reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    GEQ             reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WHERE           reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_BRACE     reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ENDSTATEMENT    reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    COMMA           reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    EQUALS          reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    THEN            reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OF              reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_PAREN     reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CLOSE_SQUARE    reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    PIPE            reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    ELSE            reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    IDENTIFIER      reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    WILDCARD        reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_PAREN      reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    OPEN_SQUARE     reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    FLOAT           reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    INTEGER         reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    BOOL            reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    CHAR            reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)
    STRING          reduce using rule 48 (LEXP -> IF EXP THEN EXP ELSE EXP .)


state 185

    (49) LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .

    BACKTICK        reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PLUS            reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    MINUS           reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    TIMES           reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    DIVIDE          reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    POW             reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALITY        reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LESS            reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    LEQ             reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GREATER         reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    GEQ             reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WHERE           reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ENDSTATEMENT    reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    COMMA           reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    EQUALS          reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    THEN            reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OF              reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_PAREN     reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CLOSE_SQUARE    reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    PIPE            reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    ELSE            reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    WILDCARD        reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_PAREN      reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    OPEN_SQUARE     reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    FLOAT           reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    INTEGER         reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    BOOL            reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    CHAR            reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)
    STRING          reduce using rule 49 (LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE .)


state 186

    (60) ALTS -> ALTS ALT . ENDSTATEMENT

    ENDSTATEMENT    shift and go to state 189


state 187

    (62) ALT -> PAT ARROW . EXP
    (42) EXP -> . INFIX_EXP
    (43) INFIX_EXP -> . LEXP OP INFIX_EXP
    (44) INFIX_EXP -> . MINUS INFIX_EXP
    (45) INFIX_EXP -> . LEXP
    (46) LEXP -> . LAMBDA APAT APATS ARROW EXP
    (47) LEXP -> . LET DECLARATIONS IN EXP
    (48) LEXP -> . IF EXP THEN EXP ELSE EXP
    (49) LEXP -> . MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE
    (50) LEXP -> . FEXP
    (51) FEXP -> . FEXP AEXP
    (52) FEXP -> . AEXP
    (53) AEXP -> . IDENTIFIER
    (54) AEXP -> . GCON
    (55) AEXP -> . LITERAL
    (56) AEXP -> . OPEN_PAREN EXP CLOSE_PAREN
    (57) AEXP -> . OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN
    (58) AEXP -> . OPEN_SQUARE EXP CLOSE_SQUARE
    (59) AEXP -> . OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE
    (76) GCON -> . OPEN_PAREN CLOSE_PAREN
    (77) GCON -> . OPEN_SQUARE CLOSE_SQUARE
    (99) LITERAL -> . FLOAT
    (100) LITERAL -> . INTEGER
    (101) LITERAL -> . BOOL
    (102) LITERAL -> . CHAR
    (103) LITERAL -> . STRING

    MINUS           shift and go to state 81
    LAMBDA          shift and go to state 82
    LET             shift and go to state 83
    IF              shift and go to state 84
    MATCH           shift and go to state 85
    IDENTIFIER      shift and go to state 88
    OPEN_PAREN      shift and go to state 91
    OPEN_SQUARE     shift and go to state 92
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 23
    BOOL            shift and go to state 29
    CHAR            shift and go to state 30
    STRING          shift and go to state 31

    EXP                            shift and go to state 190
    INFIX_EXP                      shift and go to state 79
    LEXP                           shift and go to state 80
    FEXP                           shift and go to state 86
    AEXP                           shift and go to state 87
    GCON                           shift and go to state 89
    LITERAL                        shift and go to state 90

state 188

    (81) EXP_LIST -> EXP_LIST COMMA EXP .

    CLOSE_PAREN     reduce using rule 81 (EXP_LIST -> EXP_LIST COMMA EXP .)
    COMMA           reduce using rule 81 (EXP_LIST -> EXP_LIST COMMA EXP .)
    CLOSE_SQUARE    reduce using rule 81 (EXP_LIST -> EXP_LIST COMMA EXP .)


state 189

    (60) ALTS -> ALTS ALT ENDSTATEMENT .

    CLOSE_BRACE     reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    MINUS           reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    IDENTIFIER      reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    WILDCARD        reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_PAREN      reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    OPEN_SQUARE     reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    FLOAT           reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    INTEGER         reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    BOOL            reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    CHAR            reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    STRING          reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)
    ENDSTATEMENT    reduce using rule 60 (ALTS -> ALTS ALT ENDSTATEMENT .)


state 190

    (62) ALT -> PAT ARROW EXP .

    CLOSE_BRACE     reduce using rule 62 (ALT -> PAT ARROW EXP .)
    MINUS           reduce using rule 62 (ALT -> PAT ARROW EXP .)
    IDENTIFIER      reduce using rule 62 (ALT -> PAT ARROW EXP .)
    WILDCARD        reduce using rule 62 (ALT -> PAT ARROW EXP .)
    OPEN_PAREN      reduce using rule 62 (ALT -> PAT ARROW EXP .)
    OPEN_SQUARE     reduce using rule 62 (ALT -> PAT ARROW EXP .)
    FLOAT           reduce using rule 62 (ALT -> PAT ARROW EXP .)
    INTEGER         reduce using rule 62 (ALT -> PAT ARROW EXP .)
    BOOL            reduce using rule 62 (ALT -> PAT ARROW EXP .)
    CHAR            reduce using rule 62 (ALT -> PAT ARROW EXP .)
    STRING          reduce using rule 62 (ALT -> PAT ARROW EXP .)
    ENDSTATEMENT    reduce using rule 62 (ALT -> PAT ARROW EXP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BACKTICK in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for POW in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS in state 80 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 80 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 80 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 86 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 86 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 86 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 86 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 86 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 86 resolved as shift
WARNING: shift/reduce conflict for STRING in state 86 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACE in state 124 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 170 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 170 resolved as shift
WARNING: shift/reduce conflict for WILDCARD in state 170 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 170 resolved as shift
WARNING: shift/reduce conflict for OPEN_SQUARE in state 170 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 170 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 170 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 170 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 170 resolved as shift
WARNING: shift/reduce conflict for STRING in state 170 resolved as shift
