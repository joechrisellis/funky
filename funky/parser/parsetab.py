
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONnonassocEQUALITYleftLESSLEQGREATERGEQleftPLUSMINUSleftTIMESDIVIDErightPOWARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INFIX INFIXL INFIXR INTEGER LAMBDA LEQ LESS LET MATCH MINUS MODULE NEWTYPE OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACE WILDCARDMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n                              | IMPORT IDENTIFIER AS IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS \n        GEN_DECLARATION : VARS TYPESIG TYPE\n                           | FIXITY INTEGER OPS\n                           | FIXITY OPS\n                           |\n        OPS : OPS COMMA OP\n               | OP\n        VARS : VARS COMMA IDENTIFIER\n                | IDENTIFIER\n        FIXITY : INFIXL\n                  | INFIXR\n                  | INFIX\n        TYPE : BTYPE\n                | BTYPE ARROW TYPE\n        BTYPE : ATYPE\n                 | BTYPE ATYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD_LIST\n        GUARD_LIST : GUARD_LIST GUARD\n                      | GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : IDENTIFIER\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALTS ALT ENDSTATEMENT\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : IDENTIFIER\n                | GCON\n                | LITERAL\n                | WILDCARD\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        '
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,37,125,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,20,22,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,68,70,72,73,76,81,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,117,118,119,123,124,130,131,132,134,137,142,143,150,157,159,163,165,166,167,168,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[3,12,39,40,-109,72,-108,-79,-80,-81,40,-110,-111,-112,12,12,-78,40,40,96,96,40,-87,107,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,114,-89,-85,40,40,-86,126,40,-51,-54,96,40,96,96,96,-61,-62,-63,-64,96,96,96,96,-49,-50,40,-82,40,-84,40,96,-53,40,12,-60,-48,-88,40,-52,96,96,-65,96,-67,96,-83,96,-56,12,40,-55,96,40,-70,96,-66,-68,-57,-58,96,-69,-71,]),'WHERE':([3,20,28,33,34,35,46,70,76,86,87,88,94,95,96,97,98,131,137,141,157,165,167,169,178,187,194,195,196,197,],[4,-109,-108,-110,-111,-112,101,-85,-86,129,-51,-54,-59,-61,-62,-63,-64,-53,-60,-45,-52,-65,-67,-46,-56,-55,-66,-68,-57,-58,]),'OPEN_BRACE':([4,91,101,129,164,],[6,134,134,134,182,]),'IMPORT':([6,36,],[11,11,]),'NEWTYPE':([6,36,38,],[13,13,13,]),'CLOSE_BRACE':([6,8,10,14,15,20,28,33,34,35,36,38,44,46,49,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,76,78,80,86,87,88,94,95,96,97,98,108,109,110,111,115,131,134,137,140,141,143,145,149,155,156,157,160,161,162,165,167,169,170,171,173,174,178,179,180,182,187,188,190,191,194,195,196,197,201,202,],[-22,37,-9,-11,-16,-109,-108,-110,-111,-112,-22,-22,-17,-43,-18,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-21,-24,-89,-85,-86,125,-8,-41,-51,-54,-59,-61,-62,-63,-64,-19,-30,-32,-34,-20,-53,161,-60,-44,-45,-88,-33,-23,-10,-42,-52,179,-13,-15,-65,-67,-46,-31,-35,-36,-37,-56,-12,-22,-72,-55,-14,197,-70,-66,-68,-57,-58,-69,-71,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,20,28,33,34,35,36,38,39,44,46,49,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,76,78,79,80,86,87,88,94,95,96,97,98,108,109,110,111,115,126,128,131,134,137,140,141,143,145,149,155,156,157,161,162,165,167,169,170,171,173,174,178,179,180,182,187,190,191,194,195,196,197,198,201,202,],[-22,36,38,-5,-9,-11,-16,-109,-108,-110,-111,-112,-22,-22,-6,-17,-43,-18,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-21,-24,-89,-85,-86,38,-4,-8,-41,-51,-54,-59,-61,-62,-63,-64,-19,-30,-32,-34,-20,-7,155,-53,-22,-60,-44,-45,-88,-33,-23,-10,-42,-52,-13,180,-65,-67,-46,-31,-35,-36,-37,-56,-12,-22,-72,-55,-72,-70,-66,-68,-57,-58,201,-69,-71,]),'OPEN_PAREN':([6,12,20,22,27,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,76,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,109,110,111,112,113,117,118,119,123,124,130,131,132,134,137,142,143,144,145,150,157,159,163,165,166,167,168,171,172,173,174,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[22,42,-109,22,74,-108,-79,-80,-81,42,-110,-111,-112,22,22,-78,42,42,99,99,42,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,112,-89,-85,42,42,-86,42,-51,-54,99,42,99,99,99,-61,-62,-63,-64,99,99,99,99,-49,-50,112,-32,-34,112,112,42,-82,42,-84,42,99,-53,42,22,-60,-48,-88,112,-33,42,-52,99,99,-65,99,-67,99,-35,112,-36,-37,-83,99,-56,22,42,-55,99,42,-70,99,-66,-68,-57,-58,99,-69,-71,]),'INFIXL':([6,36,38,134,180,],[24,24,24,24,24,]),'INFIXR':([6,36,38,134,180,],[25,25,25,25,25,]),'INFIX':([6,36,38,134,180,],[26,26,26,26,26,]),'MINUS':([6,12,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,38,40,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,65,68,70,71,72,73,76,87,88,89,92,93,94,95,96,97,98,99,100,102,103,104,105,116,118,119,120,123,124,130,131,134,137,142,143,152,153,157,159,163,165,166,167,168,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[27,-78,54,54,-109,-75,27,-74,-27,-28,-29,-108,-79,-80,-81,27,-110,-111,-112,27,27,-78,27,89,89,27,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,54,-89,-85,54,-78,27,-86,-51,54,89,89,89,-59,-61,-62,-63,-64,89,89,89,89,-49,-50,54,-82,27,-73,-84,27,89,-53,27,-60,-48,-88,-76,-77,-52,89,89,-65,89,-67,89,-83,89,-56,27,27,-55,89,27,-70,89,-66,-68,-57,-58,89,-69,-71,]),'WILDCARD':([6,12,20,22,28,29,30,31,32,33,34,35,36,38,40,41,42,50,51,53,54,55,56,57,58,59,60,61,62,70,72,73,76,82,87,88,90,94,95,96,97,98,117,118,119,123,124,131,132,134,137,143,150,157,165,167,176,178,180,182,187,190,191,194,195,196,197,201,202,],[31,31,-109,31,-108,-79,-80,-81,31,-110,-111,-112,31,31,-78,31,31,31,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-85,31,31,-86,31,-51,-54,31,-59,-61,-62,-63,-64,31,-82,31,-84,31,-53,31,31,-60,-88,31,-52,-65,-67,-83,-56,31,31,-55,31,-70,-66,-68,-57,-58,-69,-71,]),'OPEN_SQUARE':([6,12,20,22,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,76,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,109,110,111,112,113,117,118,119,123,124,130,131,132,134,137,142,143,144,145,150,157,159,163,165,166,167,168,171,172,173,174,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[32,32,-109,32,-108,-79,-80,-81,32,-110,-111,-112,32,32,-78,32,32,100,100,32,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,113,-89,-85,32,32,-86,32,-51,-54,100,32,100,100,100,-61,-62,-63,-64,100,100,100,100,-49,-50,113,-32,-34,113,113,32,-82,32,-84,32,100,-53,32,32,-60,-48,-88,113,-33,32,-52,100,100,-65,100,-67,100,-35,113,-36,-37,-83,100,-56,32,32,-55,100,32,-70,100,-66,-68,-57,-58,100,-69,-71,]),'FLOAT':([6,12,20,22,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,74,76,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,117,118,119,123,124,130,131,132,134,137,142,143,150,157,159,163,165,166,167,168,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[28,28,-109,28,-108,-79,-80,-81,28,-110,-111,-112,28,28,-78,28,28,28,28,28,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,28,28,122,-86,28,-51,-54,28,28,28,28,28,-61,-62,-63,-64,28,28,28,28,-49,-50,28,-82,28,-84,28,28,-53,28,28,-60,-48,-88,28,-52,28,28,-65,28,-67,28,-83,28,-56,28,28,-55,28,28,-70,28,-66,-68,-57,-58,28,-69,-71,]),'INTEGER':([6,12,19,20,22,24,25,26,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,74,76,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,117,118,119,123,124,130,131,132,134,137,142,143,150,157,159,163,165,166,167,168,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[20,20,65,-109,20,-27,-28,-29,-108,-79,-80,-81,20,-110,-111,-112,20,20,-78,20,20,20,20,20,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,20,20,121,-86,20,-51,-54,20,20,20,20,20,-61,-62,-63,-64,20,20,20,20,-49,-50,20,-82,20,-84,20,20,-53,20,20,-60,-48,-88,20,-52,20,20,-65,20,-67,20,-83,20,-56,20,20,-55,20,20,-70,20,-66,-68,-57,-58,20,-69,-71,]),'BOOL':([6,12,20,22,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,76,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,117,118,119,123,124,130,131,132,134,137,142,143,150,157,159,163,165,166,167,168,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[33,33,-109,33,-108,-79,-80,-81,33,-110,-111,-112,33,33,-78,33,33,33,33,33,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,33,33,-86,33,-51,-54,33,33,33,33,33,-61,-62,-63,-64,33,33,33,33,-49,-50,33,-82,33,-84,33,33,-53,33,33,-60,-48,-88,33,-52,33,33,-65,33,-67,33,-83,33,-56,33,33,-55,33,33,-70,33,-66,-68,-57,-58,33,-69,-71,]),'CHAR':([6,12,20,22,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,76,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,117,118,119,123,124,130,131,132,134,137,142,143,150,157,159,163,165,166,167,168,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[34,34,-109,34,-108,-79,-80,-81,34,-110,-111,-112,34,34,-78,34,34,34,34,34,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,34,34,-86,34,-51,-54,34,34,34,34,34,-61,-62,-63,-64,34,34,34,34,-49,-50,34,-82,34,-84,34,34,-53,34,34,-60,-48,-88,34,-52,34,34,-65,34,-67,34,-83,34,-56,34,34,-55,34,34,-70,34,-66,-68,-57,-58,34,-69,-71,]),'STRING':([6,12,20,22,28,29,30,31,32,33,34,35,36,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,76,82,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,117,118,119,123,124,130,131,132,134,137,142,143,150,157,159,163,165,166,167,168,176,177,178,180,182,187,189,190,191,193,194,195,196,197,199,201,202,],[35,35,-109,35,-108,-79,-80,-81,35,-110,-111,-112,35,35,-78,35,35,35,35,35,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,35,35,-86,35,-51,-54,35,35,35,35,35,-61,-62,-63,-64,35,35,35,35,-49,-50,35,-82,35,-84,35,35,-53,35,35,-60,-48,-88,35,-52,35,35,-65,35,-67,35,-83,35,-56,35,35,-55,35,35,-70,35,-66,-68,-57,-58,35,-69,-71,]),'TYPESIG':([12,18,114,],[-26,63,-25,]),'COMMA':([12,18,20,21,23,28,29,30,31,33,34,35,40,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,71,72,75,76,77,84,87,88,94,95,96,97,98,109,110,111,114,115,118,120,123,131,137,138,139,143,145,146,147,149,151,152,153,154,157,165,167,170,171,173,174,176,178,183,184,185,186,187,194,195,196,197,200,],[-26,64,-109,-75,-74,-108,-79,-80,-81,-110,-111,-112,-78,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,116,-24,-89,-85,119,-78,124,-86,-95,119,-51,-54,-59,-61,-62,-63,-64,-30,-32,-34,-25,116,-82,-73,-84,-53,-60,166,168,-88,-33,172,-107,-23,124,-76,-77,-94,-52,-65,-67,-31,-35,-36,-37,-83,-56,-91,193,193,-106,-55,-66,-68,-57,-58,-90,]),'CONSTRUCTOR':([12,20,21,23,28,29,30,31,33,34,35,40,70,72,76,118,123,152,153,176,],[-78,-109,-75,73,-108,-79,-80,-81,-110,-111,-112,-78,-85,-78,-86,-82,-84,-76,-77,-83,]),'EQUALS':([12,16,17,20,21,23,28,29,30,31,33,34,35,40,41,43,47,70,76,82,83,87,88,94,95,96,97,98,103,104,105,106,118,120,123,127,131,137,142,150,152,153,157,165,167,175,176,178,187,194,195,196,197,],[-78,45,45,-109,-75,-74,-108,-79,-80,-81,-110,-111,-112,-78,-93,85,102,-85,-86,-93,-38,-51,-54,-59,-61,-62,-63,-64,-47,-49,-50,-39,-82,-73,-84,-92,-53,-60,-48,-93,-76,-77,-52,-65,-67,-40,-83,-56,-55,-66,-68,-57,-58,]),'BACKTICK':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,107,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,52,52,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,52,-85,52,-78,-86,-51,52,-59,-61,-62,-63,-64,143,52,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'PLUS':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,53,53,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,53,-85,53,-78,-86,-51,53,-59,-61,-62,-63,-64,53,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'TIMES':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,55,55,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,55,-85,55,-78,-86,-51,55,-59,-61,-62,-63,-64,55,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'DIVIDE':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,56,56,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,56,-85,56,-78,-86,-51,56,-59,-61,-62,-63,-64,56,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'POW':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,57,57,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,57,-85,57,-78,-86,-51,57,-59,-61,-62,-63,-64,57,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'EQUALITY':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,58,58,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,58,-85,58,-78,-86,-51,58,-59,-61,-62,-63,-64,58,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'LESS':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,59,59,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,59,-85,59,-78,-86,-51,59,-59,-61,-62,-63,-64,59,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'LEQ':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,60,60,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,60,-85,60,-78,-86,-51,60,-59,-61,-62,-63,-64,60,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'GREATER':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,61,61,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,61,-85,61,-78,-86,-51,61,-59,-61,-62,-63,-64,61,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'GEQ':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,35,40,65,70,71,72,76,87,88,94,95,96,97,98,116,118,120,123,131,137,152,153,157,165,167,176,178,187,194,195,196,197,],[-78,62,62,-109,-75,-74,-27,-28,-29,-108,-79,-80,-81,-110,-111,-112,-78,62,-85,62,-78,-86,-51,62,-59,-61,-62,-63,-64,62,-82,-73,-84,-53,-60,-76,-77,-52,-65,-67,-83,-56,-55,-66,-68,-57,-58,]),'PIPE':([12,16,17,20,21,23,28,29,30,31,33,34,35,40,41,70,76,82,83,87,88,94,95,96,97,98,106,118,120,123,127,131,137,141,150,152,153,157,165,167,175,176,178,187,194,195,196,197,],[-78,48,48,-109,-75,-74,-108,-79,-80,-81,-110,-111,-112,-78,-93,-85,-86,-93,-38,-51,-54,-59,-61,-62,-63,-64,-39,-82,-73,-84,-92,-53,-60,48,-93,-76,-77,-52,-65,-67,-40,-83,-56,-55,-66,-68,-57,-58,]),'TYPENAME':([13,63,85,109,110,111,112,113,144,145,171,172,173,174,],[43,111,128,111,-32,-34,111,111,111,-33,-35,111,-36,-37,]),'CLOSE_PAREN':([20,21,22,23,28,29,30,31,33,34,35,40,41,42,69,70,71,72,76,77,82,83,84,87,88,94,95,96,97,98,99,106,109,110,111,118,120,121,122,123,127,131,137,138,145,146,147,150,151,152,153,154,157,165,167,170,171,173,174,175,176,178,183,184,186,187,194,195,196,197,200,],[-109,-75,70,-74,-108,-79,-80,-81,-110,-111,-112,-78,-93,70,117,-85,118,-78,-86,-95,-93,-38,118,-51,-54,-59,-61,-62,-63,-64,70,-39,-30,-32,-34,-82,-73,152,153,-84,-92,-53,-60,165,-33,171,173,-93,176,-76,-77,-94,-52,-65,-67,-31,-35,-36,-37,-40,-83,-56,-91,194,-106,-55,-66,-68,-57,-58,-90,]),'CLOSE_SQUARE':([20,21,23,28,29,30,31,32,33,34,35,40,70,75,76,77,87,88,94,95,96,97,98,100,109,110,111,118,120,123,131,137,139,145,148,152,153,154,157,165,167,170,171,173,174,176,178,183,185,187,194,195,196,197,200,],[-109,-75,-74,-108,-79,-80,-81,76,-110,-111,-112,-78,-85,123,-86,-95,-51,-54,-59,-61,-62,-63,-64,76,-30,-32,-34,-82,-73,-84,-53,-60,167,-33,174,-76,-77,-94,-52,-65,-67,-31,-35,-36,-37,-83,-56,-91,195,-55,-66,-68,-57,-58,-90,]),'LAMBDA':([20,28,33,34,35,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,87,88,89,92,93,94,95,96,97,98,99,100,102,103,104,105,130,131,137,142,143,157,159,163,165,166,167,168,177,178,187,189,193,194,195,196,197,199,],[-109,-108,-110,-111,-112,90,90,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,-86,-51,-54,90,90,90,-59,-61,-62,-63,-64,90,90,90,90,-49,-50,90,-53,-60,-48,-88,-52,90,90,-65,90,-67,90,90,-56,-55,90,90,-66,-68,-57,-58,90,]),'LET':([20,28,33,34,35,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,87,88,89,92,93,94,95,96,97,98,99,100,102,103,104,105,130,131,137,142,143,157,159,163,165,166,167,168,177,178,187,189,193,194,195,196,197,199,],[-109,-108,-110,-111,-112,91,91,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,-86,-51,-54,91,91,91,-59,-61,-62,-63,-64,91,91,91,91,-49,-50,91,-53,-60,-48,-88,-52,91,91,-65,91,-67,91,91,-56,-55,91,91,-66,-68,-57,-58,91,]),'IF':([20,28,33,34,35,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,87,88,89,92,93,94,95,96,97,98,99,100,102,103,104,105,130,131,137,142,143,157,159,163,165,166,167,168,177,178,187,189,193,194,195,196,197,199,],[-109,-108,-110,-111,-112,92,92,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,-86,-51,-54,92,92,92,-59,-61,-62,-63,-64,92,92,92,92,-49,-50,92,-53,-60,-48,-88,-52,92,92,-65,92,-67,92,92,-56,-55,92,92,-66,-68,-57,-58,92,]),'MATCH':([20,28,33,34,35,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,87,88,89,92,93,94,95,96,97,98,99,100,102,103,104,105,130,131,137,142,143,157,159,163,165,166,167,168,177,178,187,189,193,194,195,196,197,199,],[-109,-108,-110,-111,-112,93,93,-87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,-85,-86,-51,-54,93,93,93,-59,-61,-62,-63,-64,93,93,93,93,-49,-50,93,-53,-60,-48,-88,-52,93,93,-65,93,-67,93,93,-56,-55,93,93,-66,-68,-57,-58,93,]),'ARROW':([20,21,23,28,29,30,31,33,34,35,40,70,76,82,109,110,111,118,120,123,127,132,145,152,153,158,171,173,174,176,192,],[-109,-75,-74,-108,-79,-80,-81,-110,-111,-112,-78,-85,-86,-93,144,-32,-34,-82,-73,-84,-92,-93,-33,-76,-77,177,-35,-36,-37,-83,199,]),'THEN':([20,28,33,34,35,70,76,87,88,94,95,96,97,98,131,135,137,157,165,167,178,187,194,195,196,197,],[-109,-108,-110,-111,-112,-85,-86,-51,-54,-59,-61,-62,-63,-64,-53,163,-60,-52,-65,-67,-56,-55,-66,-68,-57,-58,]),'OF':([20,28,33,34,35,70,76,87,88,94,95,96,97,98,131,136,137,157,165,167,178,187,194,195,196,197,],[-109,-108,-110,-111,-112,-85,-86,-51,-54,-59,-61,-62,-63,-64,-53,164,-60,-52,-65,-67,-56,-55,-66,-68,-57,-58,]),'ELSE':([20,28,33,34,35,70,76,87,88,94,95,96,97,98,131,137,157,165,167,178,181,187,194,195,196,197,],[-109,-108,-110,-111,-112,-85,-86,-51,-54,-59,-61,-62,-63,-64,-53,-60,-52,-65,-67,-56,189,-55,-66,-68,-57,-58,]),'AS':([39,],[81,]),'IN':([133,161,179,],[159,-13,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,36,],[8,78,]),'IMPORT_DECLARATION':([6,36,],[9,79,]),'TOP_DECLARATION':([6,36,38,],[10,10,80,]),'DECLARATION':([6,36,38,134,180,],[14,14,14,162,162,]),'GEN_DECLARATION':([6,36,38,134,180,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,22,36,38,134,180,],[16,69,16,16,16,16,]),'PAT':([6,22,32,36,38,42,50,73,119,124,134,180,182,190,],[17,71,77,17,17,84,106,120,77,154,17,17,192,192,]),'VARS':([6,36,38,134,180,],[18,18,18,18,18,]),'FIXITY':([6,36,38,134,180,],[19,19,19,19,19,]),'APAT':([6,12,22,32,36,38,41,42,50,72,73,82,90,117,119,124,132,134,150,180,182,190,],[21,41,21,21,21,21,82,21,21,41,21,82,132,150,21,21,82,21,82,21,21,21,]),'LPAT':([6,22,32,36,38,42,50,73,119,124,134,180,182,190,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'GCON':([6,12,22,32,36,38,41,42,45,48,50,72,73,82,89,90,92,93,94,99,100,102,103,117,119,124,130,132,134,150,159,163,166,168,177,180,182,189,190,193,199,],[29,29,29,29,29,29,29,29,97,97,29,29,29,29,97,29,97,97,97,97,97,97,97,29,29,29,97,29,29,29,97,97,97,97,97,29,29,97,29,97,97,]),'LITERAL':([6,12,22,32,36,38,41,42,45,48,50,72,73,82,89,90,92,93,94,99,100,102,103,117,119,124,130,132,134,150,159,163,166,168,177,180,182,189,190,193,199,],[30,30,30,30,30,30,30,30,98,98,30,30,30,30,98,30,98,98,98,98,98,98,98,30,30,30,98,30,30,30,98,98,98,98,98,30,30,98,30,98,98,]),'RHS':([16,17,],[44,49,]),'GDRHS':([16,17,141,],[46,46,169,]),'GUARDS':([16,17,141,],[47,47,47,]),'VAROP':([17,19,65,71,88,116,],[50,68,68,50,68,68,]),'VARSYM':([17,19,65,71,88,116,],[51,51,51,51,51,51,]),'OPS':([19,65,],[66,115,]),'OP':([19,65,88,116,],[67,67,130,149,]),'PAT_LIST':([32,119,],[75,151,]),'APATS':([41,82,132,150,],[83,127,158,175,]),'EXP':([45,92,93,99,100,102,159,163,166,168,177,189,193,199,],[86,135,136,138,139,141,178,181,183,183,187,196,200,202,]),'INFIX_EXP':([45,48,89,92,93,99,100,102,103,130,159,163,166,168,177,189,193,199,],[87,105,131,87,87,87,87,87,105,157,87,87,87,87,87,87,87,87,]),'LEXP':([45,48,89,92,93,99,100,102,103,130,159,163,166,168,177,189,193,199,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'FEXP':([45,48,89,92,93,99,100,102,103,130,159,163,166,168,177,189,193,199,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'AEXP':([45,48,89,92,93,94,99,100,102,103,130,159,163,166,168,177,189,193,199,],[95,95,95,95,95,137,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'GUARD_LIST':([48,],[103,]),'GUARD':([48,103,],[104,142,]),'TYPE':([63,112,113,144,172,],[108,147,148,170,186,]),'BTYPE':([63,112,113,144,172,],[109,109,109,109,109,]),'ATYPE':([63,109,112,113,144,172,],[110,145,110,110,110,110,]),'DECLARATIONS':([91,101,129,],[133,140,156,]),'TYPES_LIST':([112,],[146,]),'DECLARATIONS_LIST':([134,180,],[160,188,]),'EXP_LIST':([166,168,],[184,185,]),'ALTS':([182,],[190,]),'ALT':([182,190,],[191,198,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',22),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',28),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',29),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',39),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',40),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',48),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER','IMPORT_DECLARATION',4,'p_IMPORT_DECLARATION','funky_parser.py',49),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',55),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',56),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT','TOP_DECLARATION',5,'p_TOP_DECLARATION','funky_parser.py',64),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',65),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',73),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',74),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',82),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',83),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',91),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',92),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',93),
  ('GEN_DECLARATION -> VARS TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',102),
  ('GEN_DECLARATION -> FIXITY INTEGER OPS','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',103),
  ('GEN_DECLARATION -> FIXITY OPS','GEN_DECLARATION',2,'p_GEN_DECLARATION','funky_parser.py',104),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',105),
  ('OPS -> OPS COMMA OP','OPS',3,'p_OPS','funky_parser.py',113),
  ('OPS -> OP','OPS',1,'p_OPS','funky_parser.py',114),
  ('VARS -> VARS COMMA IDENTIFIER','VARS',3,'p_VARS','funky_parser.py',119),
  ('VARS -> IDENTIFIER','VARS',1,'p_VARS','funky_parser.py',120),
  ('FIXITY -> INFIXL','FIXITY',1,'p_FIXITY','funky_parser.py',128),
  ('FIXITY -> INFIXR','FIXITY',1,'p_FIXITY','funky_parser.py',129),
  ('FIXITY -> INFIX','FIXITY',1,'p_FIXITY','funky_parser.py',130),
  ('TYPE -> BTYPE','TYPE',1,'p_TYPE','funky_parser.py',135),
  ('TYPE -> BTYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',136),
  ('BTYPE -> ATYPE','BTYPE',1,'p_BTYPE','funky_parser.py',144),
  ('BTYPE -> BTYPE ATYPE','BTYPE',2,'p_BTYPE','funky_parser.py',145),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',153),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',154),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',155),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',156),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',169),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',170),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',171),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',176),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',177),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',178),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',179),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',184),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',185),
  ('GUARDS -> PIPE GUARD_LIST','GUARDS',2,'p_GUARDS','funky_parser.py',190),
  ('GUARD_LIST -> GUARD_LIST GUARD','GUARD_LIST',2,'p_GUARD_LIST','funky_parser.py',195),
  ('GUARD_LIST -> GUARD','GUARD_LIST',1,'p_GUARD_LIST','funky_parser.py',196),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',201),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',206),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',211),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',212),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',213),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',218),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',219),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',220),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',221),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',222),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',227),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',228),
  ('AEXP -> IDENTIFIER','AEXP',1,'p_AEXP','funky_parser.py',233),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',234),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',235),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',236),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',237),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',238),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',239),
  ('ALTS -> ALTS ALT ENDSTATEMENT','ALTS',3,'p_ALTS','funky_parser.py',244),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',245),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',250),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',251),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',256),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',257),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',262),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',263),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',264),
  ('APAT -> IDENTIFIER','APAT',1,'p_APAT','funky_parser.py',269),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',270),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',271),
  ('APAT -> WILDCARD','APAT',1,'p_APAT','funky_parser.py',272),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',273),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',274),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',275),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',280),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',281),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',286),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',287),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',292),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',297),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',298),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',303),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',304),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',309),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',310),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',315),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',316),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',317),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',318),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',319),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',320),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',321),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',322),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',323),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',324),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',329),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',330),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',338),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',339),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',340),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',341),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',342),
]
