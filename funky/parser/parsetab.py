
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONnonassocEQUALITYleftLESSLEQGREATERGEQleftPLUSMINUSleftTIMESDIVIDErightPOWARROW AS BACKTICK CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INFIX INFIXL INFIXR INTEGER LAMBDA LEQ LESS LET MATCH MINUS MODULE NEWTYPE OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACE WILDCARDMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER ENDSTATEMENT\n                              | IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : VARS TYPESIG TYPE\n                           | FIXITY INTEGER OPS\n                           | FIXITY OPS\n                           |\n        OPS : OPS COMMA OP\n               | OP\n        VARS : VARS COMMA IDENTIFIER\n                | IDENTIFIER\n        FIXITY : INFIXL\n                  | INFIXR\n                  | INFIX\n        TYPE : BTYPE\n                | BTYPE ARROW TYPE\n        BTYPE : ATYPE\n                 | BTYPE ATYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD_LIST\n        GUARD_LIST : GUARD_LIST GUARD\n                      | GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : IDENTIFIER\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALTS ALT ENDSTATEMENT\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : IDENTIFIER\n                | GCON\n                | LITERAL\n                | WILDCARD\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : INTEGER\n                   | FLOAT\n                   | CHAR\n                   | STRING\n        '
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,36,37,126,],[0,-1,-3,-4,-2,]),'IDENTIFIER':([2,6,11,12,20,22,28,29,30,31,32,33,34,35,38,40,41,42,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,68,70,72,73,76,82,83,88,89,90,91,93,94,95,96,97,98,99,100,101,103,104,105,106,118,119,120,124,125,131,132,133,135,138,143,144,151,159,161,165,167,168,169,170,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[3,12,39,40,-109,72,-110,-80,-81,-82,40,-111,-112,12,12,-79,40,40,97,97,40,-88,108,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,115,-90,-86,40,40,-87,127,40,-52,-55,97,40,97,97,97,-62,-63,-64,-65,97,97,97,97,-50,-51,40,-83,40,-85,40,97,-54,40,12,-61,-49,-89,40,-53,97,97,-66,97,-68,97,-84,97,-57,12,40,-56,97,40,-71,97,-67,-69,-58,-59,97,-70,-72,]),'WHERE':([3,20,28,33,34,46,70,76,87,88,89,95,96,97,98,99,132,138,142,159,167,169,171,180,189,196,197,198,199,],[4,-109,-110,-111,-112,102,-86,-87,130,-52,-55,-60,-62,-63,-64,-65,-54,-61,-46,-53,-66,-68,-47,-57,-56,-67,-69,-58,-59,]),'OPEN_BRACE':([4,92,102,130,166,],[6,135,135,135,184,]),'IMPORT':([6,35,],[11,11,]),'NEWTYPE':([6,35,38,],[13,13,13,]),'CLOSE_BRACE':([6,7,8,9,10,14,15,20,28,33,34,35,38,44,46,49,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,76,78,79,80,81,87,88,89,95,96,97,98,99,109,110,111,112,116,132,135,138,141,142,144,146,150,156,157,158,159,162,163,164,167,169,171,172,173,175,176,180,181,182,184,189,190,192,193,196,197,198,199,203,204,],[-23,36,37,-6,-10,-12,-17,-109,-110,-111,-112,-23,-23,-18,-44,-19,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-22,-25,-90,-86,-87,126,-5,-9,-7,-42,-52,-55,-60,-62,-63,-64,-65,-20,-31,-33,-35,-21,-54,163,-61,-45,-46,-89,-34,-24,-8,-11,-43,-53,181,-14,-16,-66,-68,-47,-32,-36,-37,-38,-57,-13,-23,-73,-56,-15,199,-71,-67,-69,-58,-59,-70,-72,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,20,28,33,34,35,38,39,44,46,49,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,76,78,79,80,81,87,88,89,95,96,97,98,99,109,110,111,112,116,127,129,132,135,138,141,142,144,146,150,156,157,158,159,163,164,167,169,171,172,173,175,176,180,181,182,184,189,192,193,196,197,198,199,200,203,204,],[-23,35,38,-6,-10,-12,-17,-109,-110,-111,-112,-23,-23,81,-18,-44,-19,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-22,-25,-90,-86,-87,38,-5,-9,-7,-42,-52,-55,-60,-62,-63,-64,-65,-20,-31,-33,-35,-21,156,157,-54,-23,-61,-45,-46,-89,-34,-24,-8,-11,-43,-53,-14,182,-66,-68,-47,-32,-36,-37,-38,-57,-13,-23,-73,-56,-73,-71,-67,-69,-58,-59,203,-70,-72,]),'OPEN_PAREN':([6,12,20,22,27,28,29,30,31,32,33,34,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,76,83,88,89,90,91,93,94,95,96,97,98,99,100,101,103,104,105,106,110,111,112,113,114,118,119,120,124,125,131,132,133,135,138,143,144,145,146,151,159,161,165,167,168,169,170,173,174,175,176,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[22,42,-109,22,74,-110,-80,-81,-82,42,-111,-112,22,22,-79,42,42,100,100,42,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,113,-90,-86,42,42,-87,42,-52,-55,100,42,100,100,100,-62,-63,-64,-65,100,100,100,100,-50,-51,113,-33,-35,113,113,42,-83,42,-85,42,100,-54,42,22,-61,-49,-89,113,-34,42,-53,100,100,-66,100,-68,100,-36,113,-37,-38,-84,100,-57,22,42,-56,100,42,-71,100,-67,-69,-58,-59,100,-70,-72,]),'INFIXL':([6,35,38,135,182,],[24,24,24,24,24,]),'INFIXR':([6,35,38,135,182,],[25,25,25,25,25,]),'INFIX':([6,35,38,135,182,],[26,26,26,26,26,]),'MINUS':([6,12,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,38,40,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,65,68,70,71,72,73,76,88,89,90,93,94,95,96,97,98,99,100,101,103,104,105,106,117,119,120,121,124,125,131,132,135,138,143,144,153,154,159,161,165,167,168,169,170,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[27,-79,54,54,-109,-76,27,-75,-28,-29,-30,-110,-80,-81,-82,27,-111,-112,27,27,-79,27,90,90,27,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,54,-90,-86,54,-79,27,-87,-52,54,90,90,90,-60,-62,-63,-64,-65,90,90,90,90,-50,-51,54,-83,27,-74,-85,27,90,-54,27,-61,-49,-89,-77,-78,-53,90,90,-66,90,-68,90,-84,90,-57,27,27,-56,90,27,-71,90,-67,-69,-58,-59,90,-70,-72,]),'WILDCARD':([6,12,20,22,28,29,30,31,32,33,34,35,38,40,41,42,50,51,53,54,55,56,57,58,59,60,61,62,70,72,73,76,83,88,89,91,95,96,97,98,99,118,119,120,124,125,132,133,135,138,144,151,159,167,169,178,180,182,184,189,192,193,196,197,198,199,203,204,],[31,31,-109,31,-110,-80,-81,-82,31,-111,-112,31,31,-79,31,31,31,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-86,31,31,-87,31,-52,-55,31,-60,-62,-63,-64,-65,31,-83,31,-85,31,-54,31,31,-61,-89,31,-53,-66,-68,-84,-57,31,31,-56,31,-71,-67,-69,-58,-59,-70,-72,]),'OPEN_SQUARE':([6,12,20,22,28,29,30,31,32,33,34,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,76,83,88,89,90,91,93,94,95,96,97,98,99,100,101,103,104,105,106,110,111,112,113,114,118,119,120,124,125,131,132,133,135,138,143,144,145,146,151,159,161,165,167,168,169,170,173,174,175,176,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[32,32,-109,32,-110,-80,-81,-82,32,-111,-112,32,32,-79,32,32,101,101,32,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,114,-90,-86,32,32,-87,32,-52,-55,101,32,101,101,101,-62,-63,-64,-65,101,101,101,101,-50,-51,114,-33,-35,114,114,32,-83,32,-85,32,101,-54,32,32,-61,-49,-89,114,-34,32,-53,101,101,-66,101,-68,101,-36,114,-37,-38,-84,101,-57,32,32,-56,101,32,-71,101,-67,-69,-58,-59,101,-70,-72,]),'INTEGER':([6,12,19,20,22,24,25,26,28,29,30,31,32,33,34,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,74,76,83,88,89,90,91,93,94,95,96,97,98,99,100,101,103,104,105,106,118,119,120,124,125,131,132,133,135,138,143,144,151,159,161,165,167,168,169,170,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[20,20,65,-109,20,-28,-29,-30,-110,-80,-81,-82,20,-111,-112,20,20,-79,20,20,20,20,20,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,20,20,122,-87,20,-52,-55,20,20,20,20,20,-62,-63,-64,-65,20,20,20,20,-50,-51,20,-83,20,-85,20,20,-54,20,20,-61,-49,-89,20,-53,20,20,-66,20,-68,20,-84,20,-57,20,20,-56,20,20,-71,20,-67,-69,-58,-59,20,-70,-72,]),'FLOAT':([6,12,20,22,28,29,30,31,32,33,34,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,74,76,83,88,89,90,91,93,94,95,96,97,98,99,100,101,103,104,105,106,118,119,120,124,125,131,132,133,135,138,143,144,151,159,161,165,167,168,169,170,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[28,28,-109,28,-110,-80,-81,-82,28,-111,-112,28,28,-79,28,28,28,28,28,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,28,28,123,-87,28,-52,-55,28,28,28,28,28,-62,-63,-64,-65,28,28,28,28,-50,-51,28,-83,28,-85,28,28,-54,28,28,-61,-49,-89,28,-53,28,28,-66,28,-68,28,-84,28,-57,28,28,-56,28,28,-71,28,-67,-69,-58,-59,28,-70,-72,]),'CHAR':([6,12,20,22,28,29,30,31,32,33,34,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,76,83,88,89,90,91,93,94,95,96,97,98,99,100,101,103,104,105,106,118,119,120,124,125,131,132,133,135,138,143,144,151,159,161,165,167,168,169,170,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[33,33,-109,33,-110,-80,-81,-82,33,-111,-112,33,33,-79,33,33,33,33,33,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,33,33,-87,33,-52,-55,33,33,33,33,33,-62,-63,-64,-65,33,33,33,33,-50,-51,33,-83,33,-85,33,33,-54,33,33,-61,-49,-89,33,-53,33,33,-66,33,-68,33,-84,33,-57,33,33,-56,33,33,-71,33,-67,-69,-58,-59,33,-70,-72,]),'STRING':([6,12,20,22,28,29,30,31,32,33,34,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,76,83,88,89,90,91,93,94,95,96,97,98,99,100,101,103,104,105,106,118,119,120,124,125,131,132,133,135,138,143,144,151,159,161,165,167,168,169,170,178,179,180,182,184,189,191,192,193,195,196,197,198,199,201,203,204,],[34,34,-109,34,-110,-80,-81,-82,34,-111,-112,34,34,-79,34,34,34,34,34,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,34,34,-87,34,-52,-55,34,34,34,34,34,-62,-63,-64,-65,34,34,34,34,-50,-51,34,-83,34,-85,34,34,-54,34,34,-61,-49,-89,34,-53,34,34,-66,34,-68,34,-84,34,-57,34,34,-56,34,34,-71,34,-67,-69,-58,-59,34,-70,-72,]),'TYPESIG':([12,18,115,],[-27,63,-26,]),'COMMA':([12,18,20,21,23,28,29,30,31,33,34,40,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,71,72,75,76,77,85,88,89,95,96,97,98,99,110,111,112,115,116,119,121,124,132,138,139,140,144,146,147,148,150,152,153,154,155,159,167,169,172,173,175,176,178,180,185,186,187,188,189,196,197,198,199,202,],[-27,64,-109,-76,-75,-110,-80,-81,-82,-111,-112,-79,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,117,-25,-90,-86,120,-79,125,-87,-96,120,-52,-55,-60,-62,-63,-64,-65,-31,-33,-35,-26,117,-83,-74,-85,-54,-61,168,170,-89,-34,174,-108,-24,125,-77,-78,-95,-53,-66,-68,-32,-36,-37,-38,-84,-57,-92,195,195,-107,-56,-67,-69,-58,-59,-91,]),'CONSTRUCTOR':([12,20,21,23,28,29,30,31,33,34,40,70,72,76,119,124,153,154,178,],[-79,-109,-76,73,-110,-80,-81,-82,-111,-112,-79,-86,-79,-87,-83,-85,-77,-78,-84,]),'EQUALS':([12,16,17,20,21,23,28,29,30,31,33,34,40,41,43,47,70,76,83,84,88,89,95,96,97,98,99,104,105,106,107,119,121,124,128,132,138,143,151,153,154,159,167,169,177,178,180,189,196,197,198,199,],[-79,45,45,-109,-76,-75,-110,-80,-81,-82,-111,-112,-79,-94,86,103,-86,-87,-94,-39,-52,-55,-60,-62,-63,-64,-65,-48,-50,-51,-40,-83,-74,-85,-93,-54,-61,-49,-94,-77,-78,-53,-66,-68,-41,-84,-57,-56,-67,-69,-58,-59,]),'BACKTICK':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,108,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,52,52,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,52,-86,52,-79,-87,-52,52,-60,-62,-63,-64,-65,144,52,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'PLUS':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,53,53,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,53,-86,53,-79,-87,-52,53,-60,-62,-63,-64,-65,53,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'TIMES':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,55,55,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,55,-86,55,-79,-87,-52,55,-60,-62,-63,-64,-65,55,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'DIVIDE':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,56,56,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,56,-86,56,-79,-87,-52,56,-60,-62,-63,-64,-65,56,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'POW':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,57,57,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,57,-86,57,-79,-87,-52,57,-60,-62,-63,-64,-65,57,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'EQUALITY':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,58,58,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,58,-86,58,-79,-87,-52,58,-60,-62,-63,-64,-65,58,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'LESS':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,59,59,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,59,-86,59,-79,-87,-52,59,-60,-62,-63,-64,-65,59,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'LEQ':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,60,60,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,60,-86,60,-79,-87,-52,60,-60,-62,-63,-64,-65,60,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'GREATER':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,61,61,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,61,-86,61,-79,-87,-52,61,-60,-62,-63,-64,-65,61,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'GEQ':([12,17,19,20,21,23,24,25,26,28,29,30,31,33,34,40,65,70,71,72,76,88,89,95,96,97,98,99,117,119,121,124,132,138,153,154,159,167,169,178,180,189,196,197,198,199,],[-79,62,62,-109,-76,-75,-28,-29,-30,-110,-80,-81,-82,-111,-112,-79,62,-86,62,-79,-87,-52,62,-60,-62,-63,-64,-65,62,-83,-74,-85,-54,-61,-77,-78,-53,-66,-68,-84,-57,-56,-67,-69,-58,-59,]),'PIPE':([12,16,17,20,21,23,28,29,30,31,33,34,40,41,70,76,83,84,88,89,95,96,97,98,99,107,119,121,124,128,132,138,142,151,153,154,159,167,169,177,178,180,189,196,197,198,199,],[-79,48,48,-109,-76,-75,-110,-80,-81,-82,-111,-112,-79,-94,-86,-87,-94,-39,-52,-55,-60,-62,-63,-64,-65,-40,-83,-74,-85,-93,-54,-61,48,-94,-77,-78,-53,-66,-68,-41,-84,-57,-56,-67,-69,-58,-59,]),'TYPENAME':([13,63,86,110,111,112,113,114,145,146,173,174,175,176,],[43,112,129,112,-33,-35,112,112,112,-34,-36,112,-37,-38,]),'CLOSE_PAREN':([20,21,22,23,28,29,30,31,33,34,40,41,42,69,70,71,72,76,77,83,84,85,88,89,95,96,97,98,99,100,107,110,111,112,119,121,122,123,124,128,132,138,139,146,147,148,151,152,153,154,155,159,167,169,172,173,175,176,177,178,180,185,186,188,189,196,197,198,199,202,],[-109,-76,70,-75,-110,-80,-81,-82,-111,-112,-79,-94,70,118,-86,119,-79,-87,-96,-94,-39,119,-52,-55,-60,-62,-63,-64,-65,70,-40,-31,-33,-35,-83,-74,153,154,-85,-93,-54,-61,167,-34,173,175,-94,178,-77,-78,-95,-53,-66,-68,-32,-36,-37,-38,-41,-84,-57,-92,196,-107,-56,-67,-69,-58,-59,-91,]),'CLOSE_SQUARE':([20,21,23,28,29,30,31,32,33,34,40,70,75,76,77,88,89,95,96,97,98,99,101,110,111,112,119,121,124,132,138,140,146,149,153,154,155,159,167,169,172,173,175,176,178,180,185,187,189,196,197,198,199,202,],[-109,-76,-75,-110,-80,-81,-82,76,-111,-112,-79,-86,124,-87,-96,-52,-55,-60,-62,-63,-64,-65,76,-31,-33,-35,-83,-74,-85,-54,-61,169,-34,176,-77,-78,-95,-53,-66,-68,-32,-36,-37,-38,-84,-57,-92,197,-56,-67,-69,-58,-59,-91,]),'LAMBDA':([20,28,33,34,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,88,89,90,93,94,95,96,97,98,99,100,101,103,104,105,106,131,132,138,143,144,159,161,165,167,168,169,170,179,180,189,191,195,196,197,198,199,201,],[-109,-110,-111,-112,91,91,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,-87,-52,-55,91,91,91,-60,-62,-63,-64,-65,91,91,91,91,-50,-51,91,-54,-61,-49,-89,-53,91,91,-66,91,-68,91,91,-57,-56,91,91,-67,-69,-58,-59,91,]),'LET':([20,28,33,34,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,88,89,90,93,94,95,96,97,98,99,100,101,103,104,105,106,131,132,138,143,144,159,161,165,167,168,169,170,179,180,189,191,195,196,197,198,199,201,],[-109,-110,-111,-112,92,92,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,-87,-52,-55,92,92,92,-60,-62,-63,-64,-65,92,92,92,92,-50,-51,92,-54,-61,-49,-89,-53,92,92,-66,92,-68,92,92,-57,-56,92,92,-67,-69,-58,-59,92,]),'IF':([20,28,33,34,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,88,89,90,93,94,95,96,97,98,99,100,101,103,104,105,106,131,132,138,143,144,159,161,165,167,168,169,170,179,180,189,191,195,196,197,198,199,201,],[-109,-110,-111,-112,93,93,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,-87,-52,-55,93,93,93,-60,-62,-63,-64,-65,93,93,93,93,-50,-51,93,-54,-61,-49,-89,-53,93,93,-66,93,-68,93,93,-57,-56,93,93,-67,-69,-58,-59,93,]),'MATCH':([20,28,33,34,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,88,89,90,93,94,95,96,97,98,99,100,101,103,104,105,106,131,132,138,143,144,159,161,165,167,168,169,170,179,180,189,191,195,196,197,198,199,201,],[-109,-110,-111,-112,94,94,-88,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-90,-86,-87,-52,-55,94,94,94,-60,-62,-63,-64,-65,94,94,94,94,-50,-51,94,-54,-61,-49,-89,-53,94,94,-66,94,-68,94,94,-57,-56,94,94,-67,-69,-58,-59,94,]),'ARROW':([20,21,23,28,29,30,31,33,34,40,70,76,83,110,111,112,119,121,124,128,133,146,153,154,160,173,175,176,178,194,],[-109,-76,-75,-110,-80,-81,-82,-111,-112,-79,-86,-87,-94,145,-33,-35,-83,-74,-85,-93,-94,-34,-77,-78,179,-36,-37,-38,-84,201,]),'THEN':([20,28,33,34,70,76,88,89,95,96,97,98,99,132,136,138,159,167,169,180,189,196,197,198,199,],[-109,-110,-111,-112,-86,-87,-52,-55,-60,-62,-63,-64,-65,-54,165,-61,-53,-66,-68,-57,-56,-67,-69,-58,-59,]),'OF':([20,28,33,34,70,76,88,89,95,96,97,98,99,132,137,138,159,167,169,180,189,196,197,198,199,],[-109,-110,-111,-112,-86,-87,-52,-55,-60,-62,-63,-64,-65,-54,166,-61,-53,-66,-68,-57,-56,-67,-69,-58,-59,]),'ELSE':([20,28,33,34,70,76,88,89,95,96,97,98,99,132,138,159,167,169,180,183,189,196,197,198,199,],[-109,-110,-111,-112,-86,-87,-52,-55,-60,-62,-63,-64,-65,-54,-61,-53,-66,-68,-57,191,-56,-67,-69,-58,-59,]),'AS':([39,],[82,]),'IN':([134,163,181,],[161,-14,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,35,],[8,78,]),'IMPORT_DECLARATION':([6,35,],[9,79,]),'TOP_DECLARATION':([6,35,38,],[10,10,80,]),'DECLARATION':([6,35,38,135,182,],[14,14,14,164,164,]),'GEN_DECLARATION':([6,35,38,135,182,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,22,35,38,135,182,],[16,69,16,16,16,16,]),'PAT':([6,22,32,35,38,42,50,73,120,125,135,182,184,192,],[17,71,77,17,17,85,107,121,77,155,17,17,194,194,]),'VARS':([6,35,38,135,182,],[18,18,18,18,18,]),'FIXITY':([6,35,38,135,182,],[19,19,19,19,19,]),'APAT':([6,12,22,32,35,38,41,42,50,72,73,83,91,118,120,125,133,135,151,182,184,192,],[21,41,21,21,21,21,83,21,21,41,21,83,133,151,21,21,83,21,83,21,21,21,]),'LPAT':([6,22,32,35,38,42,50,73,120,125,135,182,184,192,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'GCON':([6,12,22,32,35,38,41,42,45,48,50,72,73,83,90,91,93,94,95,100,101,103,104,118,120,125,131,133,135,151,161,165,168,170,179,182,184,191,192,195,201,],[29,29,29,29,29,29,29,29,98,98,29,29,29,29,98,29,98,98,98,98,98,98,98,29,29,29,98,29,29,29,98,98,98,98,98,29,29,98,29,98,98,]),'LITERAL':([6,12,22,32,35,38,41,42,45,48,50,72,73,83,90,91,93,94,95,100,101,103,104,118,120,125,131,133,135,151,161,165,168,170,179,182,184,191,192,195,201,],[30,30,30,30,30,30,30,30,99,99,30,30,30,30,99,30,99,99,99,99,99,99,99,30,30,30,99,30,30,30,99,99,99,99,99,30,30,99,30,99,99,]),'RHS':([16,17,],[44,49,]),'GDRHS':([16,17,142,],[46,46,171,]),'GUARDS':([16,17,142,],[47,47,47,]),'VAROP':([17,19,65,71,89,117,],[50,68,68,50,68,68,]),'VARSYM':([17,19,65,71,89,117,],[51,51,51,51,51,51,]),'OPS':([19,65,],[66,116,]),'OP':([19,65,89,117,],[67,67,131,150,]),'PAT_LIST':([32,120,],[75,152,]),'APATS':([41,83,133,151,],[84,128,160,177,]),'EXP':([45,93,94,100,101,103,161,165,168,170,179,191,195,201,],[87,136,137,139,140,142,180,183,185,185,189,198,202,204,]),'INFIX_EXP':([45,48,90,93,94,100,101,103,104,131,161,165,168,170,179,191,195,201,],[88,106,132,88,88,88,88,88,106,159,88,88,88,88,88,88,88,88,]),'LEXP':([45,48,90,93,94,100,101,103,104,131,161,165,168,170,179,191,195,201,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'FEXP':([45,48,90,93,94,100,101,103,104,131,161,165,168,170,179,191,195,201,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'AEXP':([45,48,90,93,94,95,100,101,103,104,131,161,165,168,170,179,191,195,201,],[96,96,96,96,96,138,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'GUARD_LIST':([48,],[104,]),'GUARD':([48,104,],[105,143,]),'TYPE':([63,113,114,145,174,],[109,148,149,172,188,]),'BTYPE':([63,113,114,145,174,],[110,110,110,110,110,]),'ATYPE':([63,110,113,114,145,174,],[111,146,111,111,111,111,]),'DECLARATIONS':([92,102,130,],[134,141,158,]),'TYPES_LIST':([113,],[147,]),'DECLARATIONS_LIST':([135,182,],[162,190,]),'EXP_LIST':([168,170,],[186,187,]),'ALTS':([184,],[192,]),'ALT':([184,192,],[193,200,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',20),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',25),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',26),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',27),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',32),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',33),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT','IMPORT_DECLARATION',3,'p_IMPORT_DECLARATION','funky_parser.py',38),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT','IMPORT_DECLARATION',5,'p_IMPORT_DECLARATION','funky_parser.py',39),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',45),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',46),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT','TOP_DECLARATION',5,'p_TOP_DECLARATION','funky_parser.py',51),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',52),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',57),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',58),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',63),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',64),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',69),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',70),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',71),
  ('GEN_DECLARATION -> VARS TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',76),
  ('GEN_DECLARATION -> FIXITY INTEGER OPS','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',77),
  ('GEN_DECLARATION -> FIXITY OPS','GEN_DECLARATION',2,'p_GEN_DECLARATION','funky_parser.py',78),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',79),
  ('OPS -> OPS COMMA OP','OPS',3,'p_OPS','funky_parser.py',84),
  ('OPS -> OP','OPS',1,'p_OPS','funky_parser.py',85),
  ('VARS -> VARS COMMA IDENTIFIER','VARS',3,'p_VARS','funky_parser.py',90),
  ('VARS -> IDENTIFIER','VARS',1,'p_VARS','funky_parser.py',91),
  ('FIXITY -> INFIXL','FIXITY',1,'p_FIXITY','funky_parser.py',96),
  ('FIXITY -> INFIXR','FIXITY',1,'p_FIXITY','funky_parser.py',97),
  ('FIXITY -> INFIX','FIXITY',1,'p_FIXITY','funky_parser.py',98),
  ('TYPE -> BTYPE','TYPE',1,'p_TYPE','funky_parser.py',103),
  ('TYPE -> BTYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',104),
  ('BTYPE -> ATYPE','BTYPE',1,'p_BTYPE','funky_parser.py',109),
  ('BTYPE -> BTYPE ATYPE','BTYPE',2,'p_BTYPE','funky_parser.py',110),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',115),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',116),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',117),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',118),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',123),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',124),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',125),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',130),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',131),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',132),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',133),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',138),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',139),
  ('GUARDS -> PIPE GUARD_LIST','GUARDS',2,'p_GUARDS','funky_parser.py',144),
  ('GUARD_LIST -> GUARD_LIST GUARD','GUARD_LIST',2,'p_GUARD_LIST','funky_parser.py',149),
  ('GUARD_LIST -> GUARD','GUARD_LIST',1,'p_GUARD_LIST','funky_parser.py',150),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',155),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',160),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',165),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',166),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',167),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',172),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',173),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',174),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',175),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',176),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',181),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',182),
  ('AEXP -> IDENTIFIER','AEXP',1,'p_AEXP','funky_parser.py',187),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',188),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',189),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',190),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',191),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',192),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',193),
  ('ALTS -> ALTS ALT ENDSTATEMENT','ALTS',3,'p_ALTS','funky_parser.py',198),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',199),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',204),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',205),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',210),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',211),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',216),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',217),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',218),
  ('APAT -> IDENTIFIER','APAT',1,'p_APAT','funky_parser.py',223),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',224),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',225),
  ('APAT -> WILDCARD','APAT',1,'p_APAT','funky_parser.py',226),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',227),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',228),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',229),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',236),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',237),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',242),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',243),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',248),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',253),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',254),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',259),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',260),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',265),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',266),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',271),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',272),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',273),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',274),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',275),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',276),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',277),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',278),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',279),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',280),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',285),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',286),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',291),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',292),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',293),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',294),
]
