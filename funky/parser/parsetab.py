
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEQ LESS LET MATCH MINUS MODULE NEWTYPE OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACE WILDCARDMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n                              | IMPORT IDENTIFIER AS IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPENAME\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : VARS TYPESIG TYPE\n                           |\n        VARS : VARS COMMA IDENTIFIER\n                | IDENTIFIER\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD_LIST\n        GUARD_LIST : GUARD_LIST COMMA GUARD\n                      | GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : IDENTIFIER\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALTS ALT ENDSTATEMENT\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : IDENTIFIER\n                | GCON\n                | LITERAL\n                | WILDCARD\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        '
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,33,114,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,68,73,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,106,107,108,112,113,119,120,121,122,124,127,132,133,138,144,146,150,152,153,154,155,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[3,12,35,36,64,-100,-99,-70,-71,-72,36,-101,-102,-103,12,12,-69,36,36,88,88,36,-78,99,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,105,-76,36,36,-77,115,36,-42,-45,88,36,88,88,88,-52,-53,-54,-55,88,88,88,36,-73,36,-75,36,88,-80,-44,36,12,-51,88,-79,36,-43,88,88,-56,88,-58,88,-74,88,-47,12,36,-46,88,36,-61,88,-57,-59,-48,-49,88,-60,-62,]),'WHERE':([3,23,24,29,30,31,42,62,68,78,79,80,86,87,88,89,90,121,127,131,144,152,154,156,166,175,182,183,184,185,],[4,-100,-99,-101,-102,-103,93,-76,-77,118,-42,-45,-50,-52,-53,-54,-55,-44,-51,-36,-43,-56,-58,-37,-47,-46,-57,-59,-48,-49,]),'OPEN_BRACE':([4,83,93,118,151,],[6,124,124,124,170,]),'IMPORT':([6,32,],[11,11,]),'NEWTYPE':([6,32,34,],[13,13,13,]),'CLOSE_BRACE':([6,8,10,14,15,23,24,29,30,31,32,34,40,42,45,62,68,70,72,78,79,80,86,87,88,89,90,100,101,102,117,121,124,127,130,131,143,144,147,148,149,152,154,156,158,159,161,162,166,167,168,170,175,176,178,179,182,183,184,185,189,190,],[-20,33,-9,-11,-16,-100,-99,-101,-102,-103,-20,-20,-17,-34,-18,-76,-77,114,-8,-32,-42,-45,-50,-52,-53,-54,-55,-19,-23,-25,-10,-44,148,-51,-35,-36,-33,-43,167,-13,-15,-56,-58,-37,-24,-26,-27,-28,-47,-12,-20,-63,-46,-14,185,-61,-57,-59,-48,-49,-60,-62,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,23,24,29,30,31,32,34,35,40,42,45,62,68,70,71,72,78,79,80,86,87,88,89,90,100,101,102,115,117,121,124,127,130,131,143,144,148,149,152,154,156,158,159,161,162,166,167,168,170,175,178,179,182,183,184,185,186,189,190,],[-20,32,34,-5,-9,-11,-16,-100,-99,-101,-102,-103,-20,-20,-6,-17,-34,-18,-76,-77,34,-4,-8,-32,-42,-45,-50,-52,-53,-54,-55,-19,-23,-25,-7,-10,-44,-20,-51,-35,-36,-33,-43,-13,168,-56,-58,-37,-24,-26,-27,-28,-47,-12,-20,-63,-46,-63,-61,-57,-59,-48,-49,189,-60,-62,]),'OPEN_PAREN':([6,12,20,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,59,62,64,65,68,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,103,104,106,107,108,112,113,119,120,121,122,124,127,132,133,134,138,144,146,150,152,153,154,155,160,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[20,38,20,66,-100,-99,-70,-71,-72,38,-101,-102,-103,20,20,-69,38,38,91,91,38,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,103,-76,38,38,-77,38,-42,-45,91,38,91,91,91,-52,-53,-54,-55,91,91,91,103,103,38,-73,38,-75,38,91,-80,-44,38,20,-51,91,-79,103,38,-43,91,91,-56,91,-58,91,103,-74,91,-47,20,38,-46,91,38,-61,91,-57,-59,-48,-49,91,-60,-62,]),'MINUS':([6,12,17,19,20,21,23,24,25,26,27,28,29,30,31,32,34,36,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,63,64,65,68,79,80,81,84,85,86,87,88,89,90,91,92,94,107,108,109,112,113,119,120,121,124,127,132,133,140,141,144,146,150,152,153,154,155,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[22,-69,50,-66,22,-65,-100,-99,-70,-71,-72,22,-101,-102,-103,22,22,-69,22,81,81,22,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-76,50,-69,22,-77,-42,50,81,81,81,-50,-52,-53,-54,-55,81,81,81,-73,22,-64,-75,22,81,-80,-44,22,-51,81,-79,-67,-68,-43,81,81,-56,81,-58,81,-74,81,-47,22,22,-46,81,22,-61,81,-57,-59,-48,-49,81,-60,-62,]),'WILDCARD':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,74,79,80,82,86,87,88,89,90,106,107,108,112,113,121,122,124,127,133,138,144,152,154,164,166,168,170,175,178,179,182,183,184,185,189,190,],[27,27,27,-100,-99,-70,-71,-72,27,-101,-102,-103,27,27,-69,27,27,27,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-76,27,27,-77,27,-42,-45,27,-50,-52,-53,-54,-55,27,-73,27,-75,27,-44,27,27,-51,-79,27,-43,-56,-58,-74,-47,27,27,-46,27,-61,-57,-59,-48,-49,-60,-62,]),'OPEN_SQUARE':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,59,62,64,65,68,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,103,104,106,107,108,112,113,119,120,121,122,124,127,132,133,134,138,144,146,150,152,153,154,155,160,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[28,28,28,-100,-99,-70,-71,-72,28,-101,-102,-103,28,28,-69,28,28,92,92,28,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,104,-76,28,28,-77,28,-42,-45,92,28,92,92,92,-52,-53,-54,-55,92,92,92,104,104,28,-73,28,-75,28,92,-80,-44,28,28,-51,92,-79,104,28,-43,92,92,-56,92,-58,92,104,-74,92,-47,28,28,-46,92,28,-61,92,-57,-59,-48,-49,92,-60,-62,]),'FLOAT':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,66,68,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,106,107,108,112,113,119,120,121,122,124,127,132,133,138,144,146,150,152,153,154,155,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[24,24,24,-100,-99,-70,-71,-72,24,-101,-102,-103,24,24,-69,24,24,24,24,24,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-76,24,24,111,-77,24,-42,-45,24,24,24,24,24,-52,-53,-54,-55,24,24,24,24,-73,24,-75,24,24,-80,-44,24,24,-51,24,-79,24,-43,24,24,-56,24,-58,24,-74,24,-47,24,24,-46,24,24,-61,24,-57,-59,-48,-49,24,-60,-62,]),'INTEGER':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,66,68,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,106,107,108,112,113,119,120,121,122,124,127,132,133,138,144,146,150,152,153,154,155,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[23,23,23,-100,-99,-70,-71,-72,23,-101,-102,-103,23,23,-69,23,23,23,23,23,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-76,23,23,110,-77,23,-42,-45,23,23,23,23,23,-52,-53,-54,-55,23,23,23,23,-73,23,-75,23,23,-80,-44,23,23,-51,23,-79,23,-43,23,23,-56,23,-58,23,-74,23,-47,23,23,-46,23,23,-61,23,-57,-59,-48,-49,23,-60,-62,]),'BOOL':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,106,107,108,112,113,119,120,121,122,124,127,132,133,138,144,146,150,152,153,154,155,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[29,29,29,-100,-99,-70,-71,-72,29,-101,-102,-103,29,29,-69,29,29,29,29,29,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-76,29,29,-77,29,-42,-45,29,29,29,29,29,-52,-53,-54,-55,29,29,29,29,-73,29,-75,29,29,-80,-44,29,29,-51,29,-79,29,-43,29,29,-56,29,-58,29,-74,29,-47,29,29,-46,29,29,-61,29,-57,-59,-48,-49,29,-60,-62,]),'CHAR':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,106,107,108,112,113,119,120,121,122,124,127,132,133,138,144,146,150,152,153,154,155,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[30,30,30,-100,-99,-70,-71,-72,30,-101,-102,-103,30,30,-69,30,30,30,30,30,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-76,30,30,-77,30,-42,-45,30,30,30,30,30,-52,-53,-54,-55,30,30,30,30,-73,30,-75,30,30,-80,-44,30,30,-51,30,-79,30,-43,30,30,-56,30,-58,30,-74,30,-47,30,30,-46,30,30,-61,30,-57,-59,-48,-49,30,-60,-62,]),'STRING':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,74,79,80,81,82,84,85,86,87,88,89,90,91,92,94,106,107,108,112,113,119,120,121,122,124,127,132,133,138,144,146,150,152,153,154,155,164,165,166,168,170,175,177,178,179,181,182,183,184,185,187,189,190,],[31,31,31,-100,-99,-70,-71,-72,31,-101,-102,-103,31,31,-69,31,31,31,31,31,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-76,31,31,-77,31,-42,-45,31,31,31,31,31,-52,-53,-54,-55,31,31,31,31,-73,31,-75,31,31,-80,-44,31,31,-51,31,-79,31,-43,31,31,-56,31,-58,31,-74,31,-47,31,31,-46,31,31,-61,31,-57,-59,-48,-49,31,-60,-62,]),'TYPESIG':([12,18,105,],[-22,59,-21,]),'COMMA':([12,18,19,21,23,24,25,26,27,29,30,31,36,62,63,64,67,68,69,76,79,80,86,87,88,89,90,95,96,97,101,102,105,107,109,112,121,127,128,129,135,136,139,140,141,142,144,152,154,157,158,159,161,162,164,166,171,172,173,174,175,182,183,184,185,188,],[-22,60,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,108,-69,113,-77,-86,108,-42,-45,-50,-52,-53,-54,-55,132,-40,-41,-23,-25,-21,-73,-64,-75,-44,-51,153,155,160,-98,113,-67,-68,-85,-43,-56,-58,-39,-24,-26,-27,-28,-74,-47,-82,181,181,-97,-46,-57,-59,-48,-49,-81,]),'CONSTRUCTOR':([12,19,21,23,24,25,26,27,29,30,31,36,62,64,68,107,112,140,141,164,],[-69,-66,65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,-69,-77,-73,-75,-67,-68,-74,]),'EQUALS':([12,16,17,19,21,23,24,25,26,27,29,30,31,36,37,39,43,62,68,74,75,79,80,86,87,88,89,90,95,96,97,98,107,109,112,116,121,127,138,140,141,144,152,154,157,163,164,166,175,182,183,184,185,],[-69,41,41,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-84,77,94,-76,-77,-84,-29,-42,-45,-50,-52,-53,-54,-55,-38,-40,-41,-30,-73,-64,-75,-83,-44,-51,-84,-67,-68,-43,-56,-58,-39,-31,-74,-47,-46,-57,-59,-48,-49,]),'BACKTICK':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,99,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,48,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,48,-69,-77,-42,48,-50,-52,-53,-54,-55,133,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'PLUS':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,49,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,49,-69,-77,-42,49,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'TIMES':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,51,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,51,-69,-77,-42,51,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'DIVIDE':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,52,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,52,-69,-77,-42,52,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'POW':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,53,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,53,-69,-77,-42,53,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'EQUALITY':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,54,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,54,-69,-77,-42,54,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'LESS':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,55,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,55,-69,-77,-42,55,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'LEQ':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,56,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,56,-69,-77,-42,56,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'GREATER':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,57,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,57,-69,-77,-42,57,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'GEQ':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,79,80,86,87,88,89,90,107,109,112,121,127,140,141,144,152,154,164,166,175,182,183,184,185,],[-69,58,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,58,-69,-77,-42,58,-50,-52,-53,-54,-55,-73,-64,-75,-44,-51,-67,-68,-43,-56,-58,-74,-47,-46,-57,-59,-48,-49,]),'PIPE':([12,16,17,19,21,23,24,25,26,27,29,30,31,36,37,62,68,74,75,79,80,86,87,88,89,90,98,107,109,112,116,121,127,131,138,140,141,144,152,154,163,164,166,175,182,183,184,185,],[-69,44,44,-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-84,-76,-77,-84,-29,-42,-45,-50,-52,-53,-54,-55,-30,-73,-64,-75,-83,-44,-51,44,-84,-67,-68,-43,-56,-58,-31,-74,-47,-46,-57,-59,-48,-49,]),'TYPENAME':([13,59,77,103,104,134,160,],[39,102,117,102,102,102,102,]),'CLOSE_PAREN':([19,20,21,23,24,25,26,27,29,30,31,36,37,38,61,62,63,64,68,69,74,75,76,79,80,86,87,88,89,90,91,98,101,102,107,109,110,111,112,116,121,127,128,135,136,138,139,140,141,142,144,152,154,158,159,161,162,163,164,166,171,172,174,175,182,183,184,185,188,],[-66,62,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-84,62,106,-76,107,-69,-77,-86,-84,-29,107,-42,-45,-50,-52,-53,-54,-55,62,-30,-23,-25,-73,-64,140,141,-75,-83,-44,-51,152,159,161,-84,164,-67,-68,-85,-43,-56,-58,-24,-26,-27,-28,-31,-74,-47,-82,182,-97,-46,-57,-59,-48,-49,-81,]),'CLOSE_SQUARE':([19,21,23,24,25,26,27,28,29,30,31,36,62,67,68,69,79,80,86,87,88,89,90,92,101,102,107,109,112,121,127,129,137,140,141,142,144,152,154,158,159,161,162,164,166,171,173,175,182,183,184,185,188,],[-66,-65,-100,-99,-70,-71,-72,68,-101,-102,-103,-69,-76,112,-77,-86,-42,-45,-50,-52,-53,-54,-55,68,-23,-25,-73,-64,-75,-44,-51,154,162,-67,-68,-85,-43,-56,-58,-24,-26,-27,-28,-74,-47,-82,183,-46,-57,-59,-48,-49,-81,]),'ARROW':([19,21,23,24,25,26,27,29,30,31,36,62,68,74,101,102,107,109,112,116,122,140,141,145,159,161,162,164,180,],[-66,-65,-100,-99,-70,-71,-72,-101,-102,-103,-69,-76,-77,-84,134,-25,-73,-64,-75,-83,-84,-67,-68,165,-26,-27,-28,-74,187,]),'THEN':([23,24,29,30,31,62,68,79,80,86,87,88,89,90,121,125,127,144,152,154,166,175,182,183,184,185,],[-100,-99,-101,-102,-103,-76,-77,-42,-45,-50,-52,-53,-54,-55,-44,150,-51,-43,-56,-58,-47,-46,-57,-59,-48,-49,]),'OF':([23,24,29,30,31,62,68,79,80,86,87,88,89,90,121,126,127,144,152,154,166,175,182,183,184,185,],[-100,-99,-101,-102,-103,-76,-77,-42,-45,-50,-52,-53,-54,-55,-44,151,-51,-43,-56,-58,-47,-46,-57,-59,-48,-49,]),'ELSE':([23,24,29,30,31,62,68,79,80,86,87,88,89,90,121,127,144,152,154,166,169,175,182,183,184,185,],[-100,-99,-101,-102,-103,-76,-77,-42,-45,-50,-52,-53,-54,-55,-44,-51,-43,-56,-58,-47,177,-46,-57,-59,-48,-49,]),'AS':([35,],[73,]),'LAMBDA':([41,44,47,49,50,51,52,53,54,55,56,57,58,81,84,85,91,92,94,119,120,132,133,146,150,153,155,165,177,181,187,],[82,82,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,82,82,82,82,82,82,82,-80,82,-79,82,82,82,82,82,82,82,82,]),'LET':([41,44,47,49,50,51,52,53,54,55,56,57,58,81,84,85,91,92,94,119,120,132,133,146,150,153,155,165,177,181,187,],[83,83,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,83,83,83,83,83,83,83,-80,83,-79,83,83,83,83,83,83,83,83,]),'IF':([41,44,47,49,50,51,52,53,54,55,56,57,58,81,84,85,91,92,94,119,120,132,133,146,150,153,155,165,177,181,187,],[84,84,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,84,84,84,84,84,84,84,-80,84,-79,84,84,84,84,84,84,84,84,]),'MATCH':([41,44,47,49,50,51,52,53,54,55,56,57,58,81,84,85,91,92,94,119,120,132,133,146,150,153,155,165,177,181,187,],[85,85,-78,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,85,85,85,85,85,85,85,-80,85,-79,85,85,85,85,85,85,85,85,]),'IN':([123,148,167,],[146,-13,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,32,],[8,70,]),'IMPORT_DECLARATION':([6,32,],[9,71,]),'TOP_DECLARATION':([6,32,34,],[10,10,72,]),'DECLARATION':([6,32,34,124,168,],[14,14,14,149,149,]),'GEN_DECLARATION':([6,32,34,124,168,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,20,32,34,124,168,],[16,61,16,16,16,16,]),'PAT':([6,20,28,32,34,38,46,65,108,113,124,168,170,178,],[17,63,69,17,17,76,98,109,69,142,17,17,180,180,]),'VARS':([6,32,34,124,168,],[18,18,18,18,18,]),'APAT':([6,12,20,28,32,34,37,38,46,64,65,74,82,106,108,113,122,124,138,168,170,178,],[19,37,19,19,19,19,74,19,19,37,19,74,122,138,19,19,74,19,74,19,19,19,]),'LPAT':([6,20,28,32,34,38,46,65,108,113,124,168,170,178,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'GCON':([6,12,20,28,32,34,37,38,41,44,46,64,65,74,81,82,84,85,86,91,92,94,106,108,113,119,122,124,132,138,146,150,153,155,165,168,170,177,178,181,187,],[25,25,25,25,25,25,25,25,89,89,25,25,25,25,89,25,89,89,89,89,89,89,25,25,25,89,25,25,89,25,89,89,89,89,89,25,25,89,25,89,89,]),'LITERAL':([6,12,20,28,32,34,37,38,41,44,46,64,65,74,81,82,84,85,86,91,92,94,106,108,113,119,122,124,132,138,146,150,153,155,165,168,170,177,178,181,187,],[26,26,26,26,26,26,26,26,90,90,26,26,26,26,90,26,90,90,90,90,90,90,26,26,26,90,26,26,90,26,90,90,90,90,90,26,26,90,26,90,90,]),'RHS':([16,17,],[40,45,]),'GDRHS':([16,17,131,],[42,42,156,]),'GUARDS':([16,17,131,],[43,43,43,]),'VAROP':([17,63,80,],[46,46,120,]),'VARSYM':([17,63,80,],[47,47,47,]),'PAT_LIST':([28,108,],[67,139,]),'APATS':([37,74,122,138,],[75,116,145,163,]),'EXP':([41,84,85,91,92,94,146,150,153,155,165,177,181,187,],[78,125,126,128,129,131,166,169,171,171,175,184,188,190,]),'INFIX_EXP':([41,44,81,84,85,91,92,94,119,132,146,150,153,155,165,177,181,187,],[79,97,121,79,79,79,79,79,144,97,79,79,79,79,79,79,79,79,]),'LEXP':([41,44,81,84,85,91,92,94,119,132,146,150,153,155,165,177,181,187,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'FEXP':([41,44,81,84,85,91,92,94,119,132,146,150,153,155,165,177,181,187,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'AEXP':([41,44,81,84,85,86,91,92,94,119,132,146,150,153,155,165,177,181,187,],[87,87,87,87,87,127,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'GUARD_LIST':([44,],[95,]),'GUARD':([44,132,],[96,157,]),'TYPE':([59,103,104,134,160,],[100,136,137,158,174,]),'ATYPE':([59,103,104,134,160,],[101,101,101,101,101,]),'OP':([80,],[119,]),'DECLARATIONS':([83,93,118,],[123,130,143,]),'TYPES_LIST':([103,],[135,]),'DECLARATIONS_LIST':([124,168,],[147,176,]),'EXP_LIST':([153,155,],[172,173,]),'ALTS':([170,],[178,]),'ALT':([170,178,],[179,186,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',27),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',33),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',34),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',44),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',45),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',53),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER','IMPORT_DECLARATION',4,'p_IMPORT_DECLARATION','funky_parser.py',54),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',60),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',61),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',69),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',70),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',78),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',79),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',87),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',88),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',96),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',97),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',98),
  ('GEN_DECLARATION -> VARS TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',108),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',109),
  ('VARS -> VARS COMMA IDENTIFIER','VARS',3,'p_VARS','funky_parser.py',117),
  ('VARS -> IDENTIFIER','VARS',1,'p_VARS','funky_parser.py',118),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',126),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',127),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',135),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',136),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',137),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',138),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',151),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',152),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',153),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',165),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',166),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',167),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',168),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',181),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',182),
  ('GUARDS -> PIPE GUARD_LIST','GUARDS',2,'p_GUARDS','funky_parser.py',190),
  ('GUARD_LIST -> GUARD_LIST COMMA GUARD','GUARD_LIST',3,'p_GUARD_LIST','funky_parser.py',195),
  ('GUARD_LIST -> GUARD','GUARD_LIST',1,'p_GUARD_LIST','funky_parser.py',196),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',204),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',209),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',215),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',216),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',217),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',235),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',236),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',237),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',238),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',239),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',254),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',255),
  ('AEXP -> IDENTIFIER','AEXP',1,'p_AEXP','funky_parser.py',263),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',264),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',265),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',266),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',267),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',268),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',269),
  ('ALTS -> ALTS ALT ENDSTATEMENT','ALTS',3,'p_ALTS','funky_parser.py',285),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',286),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',294),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',295),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',301),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',302),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',310),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',311),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',312),
  ('APAT -> IDENTIFIER','APAT',1,'p_APAT','funky_parser.py',320),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',321),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',322),
  ('APAT -> WILDCARD','APAT',1,'p_APAT','funky_parser.py',323),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',324),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',325),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',326),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',339),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',340),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',348),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',349),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',357),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',362),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',363),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',371),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',372),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',380),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',381),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',389),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',390),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',391),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',392),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',393),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',394),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',395),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',396),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',397),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',398),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',403),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',404),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',412),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',413),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',414),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',415),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',416),
]
