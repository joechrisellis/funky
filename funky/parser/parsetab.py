
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONnonassocEQUALITYleftLESSLEQGREATERGEQleftPLUSMINUSleftTIMESDIVIDErightPOWARROW AS BACKTICK CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA COMMENT CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INDENTATION INEQUALITY INFIX INFIXL INFIXR INTEGER LAMBDA LEQ LESS LET MATCH MINUS MODULE NEWTYPE OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW STRING THEN TIMES TYPENAME TYPESIG WHERE WILDCARDMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n                             | BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER ENDSTATEMENT\n                              | IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : VARS TYPESIG TYPE\n                           | FIXITY INTEGER OPS\n                           | FIXITY OPS\n                           |\n        OPS : OPS COMMA OP\n               | OP\n        VARS : VARS COMMA IDENTIFIER\n                | IDENTIFIER\n        FIXITY : INFIXL\n                  | INFIXR\n                  | INFIX\n        TYPE : BTYPE\n                | BTYPE ARROW TYPE\n        BTYPE : ATYPE\n                 | BTYPE ATYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD_LIST\n        GUARD_LIST : GUARD_LIST GUARD\n                      | GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : IDENTIFIER\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALTS ALT ENDSTATEMENT\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : IDENTIFIER\n                | GCON\n                | LITERAL\n                | WILDCARD\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : INTEGER\n                   | FLOAT\n                   | CHAR\n                   | STRING\n        '
    
_lr_action_items = {'MODULE':([0,],[2,]),'OPEN_BRACE':([0,34,93,103,131,167,],[4,4,136,136,136,185,]),'$end':([1,3,36,37,78,127,],[0,-2,-4,-5,-1,-3,]),'IDENTIFIER':([2,4,10,11,19,21,27,28,29,30,31,32,33,35,38,40,41,42,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,68,70,72,73,76,83,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,119,120,121,125,126,132,133,134,136,139,144,145,152,160,162,166,168,169,170,171,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[5,11,39,40,-110,72,-111,-81,-82,-83,40,-112,-113,11,11,-80,40,40,98,98,40,-89,109,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,116,-91,-87,40,40,-88,128,40,-53,-56,98,40,98,98,98,-63,-64,-65,-66,98,98,98,98,-51,-52,40,-84,40,-86,40,98,-55,40,11,-62,-50,-90,40,-54,98,98,-67,98,-69,98,-85,98,-58,11,40,-57,98,40,-72,98,-68,-70,-59,-60,98,-71,-73,]),'IMPORT':([4,35,],[10,10,]),'NEWTYPE':([4,35,38,],[12,12,12,]),'CLOSE_BRACE':([4,6,7,8,9,13,14,19,27,32,33,35,38,44,46,49,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,76,79,80,81,82,88,89,90,96,97,98,99,100,110,111,112,113,117,133,136,139,142,143,145,147,151,157,158,159,160,163,164,165,168,170,172,173,174,176,177,181,182,183,185,190,191,193,194,197,198,199,200,204,205,],[-24,36,37,-7,-11,-13,-18,-110,-111,-112,-113,-24,-24,-19,-45,-20,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-23,-26,-91,-87,-88,127,-6,-10,-8,-43,-53,-56,-61,-63,-64,-65,-66,-21,-32,-34,-36,-22,-55,164,-62,-46,-47,-90,-35,-25,-9,-12,-44,-54,182,-15,-17,-67,-69,-48,-33,-37,-38,-39,-58,-14,-24,-74,-57,-16,200,-72,-68,-70,-59,-60,-71,-73,]),'ENDSTATEMENT':([4,6,7,8,9,13,14,19,27,32,33,35,38,39,44,46,49,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,76,79,80,81,82,88,89,90,96,97,98,99,100,110,111,112,113,117,128,130,133,136,139,142,143,145,147,151,157,158,159,160,164,165,168,170,172,173,174,176,177,181,182,183,185,190,193,194,197,198,199,200,201,204,205,],[-24,35,38,-7,-11,-13,-18,-110,-111,-112,-113,-24,-24,82,-19,-45,-20,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-23,-26,-91,-87,-88,38,-6,-10,-8,-43,-53,-56,-61,-63,-64,-65,-66,-21,-32,-34,-36,-22,157,158,-55,-24,-62,-46,-47,-90,-35,-25,-9,-12,-44,-54,-15,183,-67,-69,-48,-33,-37,-38,-39,-58,-14,-24,-74,-57,-74,-72,-68,-70,-59,-60,204,-71,-73,]),'OPEN_PAREN':([4,11,19,21,26,27,28,29,30,31,32,33,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,76,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,111,112,113,114,115,119,120,121,125,126,132,133,134,136,139,144,145,146,147,152,160,162,166,168,169,170,171,174,175,176,177,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[21,42,-110,21,74,-111,-81,-82,-83,42,-112,-113,21,21,-80,42,42,101,101,42,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,114,-91,-87,42,42,-88,42,-53,-56,101,42,101,101,101,-63,-64,-65,-66,101,101,101,101,-51,-52,114,-34,-36,114,114,42,-84,42,-86,42,101,-55,42,21,-62,-50,-90,114,-35,42,-54,101,101,-67,101,-69,101,-37,114,-38,-39,-85,101,-58,21,42,-57,101,42,-72,101,-68,-70,-59,-60,101,-71,-73,]),'INFIXL':([4,35,38,136,183,],[23,23,23,23,23,]),'INFIXR':([4,35,38,136,183,],[24,24,24,24,24,]),'INFIX':([4,35,38,136,183,],[25,25,25,25,25,]),'MINUS':([4,11,16,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,35,38,40,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,65,68,70,71,72,73,76,89,90,91,94,95,96,97,98,99,100,101,102,104,105,106,107,118,120,121,122,125,126,132,133,136,139,144,145,154,155,160,162,166,168,169,170,171,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[26,-80,54,54,-110,-77,26,-76,-29,-30,-31,-111,-81,-82,-83,26,-112,-113,26,26,-80,26,91,91,26,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,54,-91,-87,54,-80,26,-88,-53,54,91,91,91,-61,-63,-64,-65,-66,91,91,91,91,-51,-52,54,-84,26,-75,-86,26,91,-55,26,-62,-50,-90,-78,-79,-54,91,91,-67,91,-69,91,-85,91,-58,26,26,-57,91,26,-72,91,-68,-70,-59,-60,91,-71,-73,]),'WILDCARD':([4,11,19,21,27,28,29,30,31,32,33,35,38,40,41,42,50,51,53,54,55,56,57,58,59,60,61,62,70,72,73,76,84,89,90,92,96,97,98,99,100,119,120,121,125,126,133,134,136,139,145,152,160,168,170,179,181,183,185,190,193,194,197,198,199,200,204,205,],[30,30,-110,30,-111,-81,-82,-83,30,-112,-113,30,30,-80,30,30,30,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-87,30,30,-88,30,-53,-56,30,-61,-63,-64,-65,-66,30,-84,30,-86,30,-55,30,30,-62,-90,30,-54,-67,-69,-85,-58,30,30,-57,30,-72,-68,-70,-59,-60,-71,-73,]),'OPEN_SQUARE':([4,11,19,21,27,28,29,30,31,32,33,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,76,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,111,112,113,114,115,119,120,121,125,126,132,133,134,136,139,144,145,146,147,152,160,162,166,168,169,170,171,174,175,176,177,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[31,31,-110,31,-111,-81,-82,-83,31,-112,-113,31,31,-80,31,31,102,102,31,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,115,-91,-87,31,31,-88,31,-53,-56,102,31,102,102,102,-63,-64,-65,-66,102,102,102,102,-51,-52,115,-34,-36,115,115,31,-84,31,-86,31,102,-55,31,31,-62,-50,-90,115,-35,31,-54,102,102,-67,102,-69,102,-37,115,-38,-39,-85,102,-58,31,31,-57,102,31,-72,102,-68,-70,-59,-60,102,-71,-73,]),'INTEGER':([4,11,18,19,21,23,24,25,27,28,29,30,31,32,33,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,74,76,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,119,120,121,125,126,132,133,134,136,139,144,145,152,160,162,166,168,169,170,171,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[19,19,65,-110,19,-29,-30,-31,-111,-81,-82,-83,19,-112,-113,19,19,-80,19,19,19,19,19,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,19,19,123,-88,19,-53,-56,19,19,19,19,19,-63,-64,-65,-66,19,19,19,19,-51,-52,19,-84,19,-86,19,19,-55,19,19,-62,-50,-90,19,-54,19,19,-67,19,-69,19,-85,19,-58,19,19,-57,19,19,-72,19,-68,-70,-59,-60,19,-71,-73,]),'FLOAT':([4,11,19,21,27,28,29,30,31,32,33,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,74,76,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,119,120,121,125,126,132,133,134,136,139,144,145,152,160,162,166,168,169,170,171,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[27,27,-110,27,-111,-81,-82,-83,27,-112,-113,27,27,-80,27,27,27,27,27,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,27,27,124,-88,27,-53,-56,27,27,27,27,27,-63,-64,-65,-66,27,27,27,27,-51,-52,27,-84,27,-86,27,27,-55,27,27,-62,-50,-90,27,-54,27,27,-67,27,-69,27,-85,27,-58,27,27,-57,27,27,-72,27,-68,-70,-59,-60,27,-71,-73,]),'CHAR':([4,11,19,21,27,28,29,30,31,32,33,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,76,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,119,120,121,125,126,132,133,134,136,139,144,145,152,160,162,166,168,169,170,171,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[32,32,-110,32,-111,-81,-82,-83,32,-112,-113,32,32,-80,32,32,32,32,32,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,32,32,-88,32,-53,-56,32,32,32,32,32,-63,-64,-65,-66,32,32,32,32,-51,-52,32,-84,32,-86,32,32,-55,32,32,-62,-50,-90,32,-54,32,32,-67,32,-69,32,-85,32,-58,32,32,-57,32,32,-72,32,-68,-70,-59,-60,32,-71,-73,]),'STRING':([4,11,19,21,27,28,29,30,31,32,33,35,38,40,41,42,45,48,50,51,53,54,55,56,57,58,59,60,61,62,68,70,72,73,76,84,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,119,120,121,125,126,132,133,134,136,139,144,145,152,160,162,166,168,169,170,171,179,180,181,183,185,190,192,193,194,196,197,198,199,200,202,204,205,],[33,33,-110,33,-111,-81,-82,-83,33,-112,-113,33,33,-80,33,33,33,33,33,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,33,33,-88,33,-53,-56,33,33,33,33,33,-63,-64,-65,-66,33,33,33,33,-51,-52,33,-84,33,-86,33,33,-55,33,33,-62,-50,-90,33,-54,33,33,-67,33,-69,33,-85,33,-58,33,33,-57,33,33,-72,33,-68,-70,-59,-60,33,-71,-73,]),'WHERE':([5,19,27,32,33,46,70,76,88,89,90,96,97,98,99,100,133,139,143,160,168,170,172,181,190,197,198,199,200,],[34,-110,-111,-112,-113,103,-87,-88,131,-53,-56,-61,-63,-64,-65,-66,-55,-62,-47,-54,-67,-69,-48,-58,-57,-68,-70,-59,-60,]),'TYPESIG':([11,17,116,],[-28,63,-27,]),'COMMA':([11,17,19,20,22,27,28,29,30,32,33,40,51,53,54,55,56,57,58,59,60,61,62,66,67,68,70,71,72,75,76,77,86,89,90,96,97,98,99,100,111,112,113,116,117,120,122,125,133,139,140,141,145,147,148,149,151,153,154,155,156,160,168,170,173,174,176,177,179,181,186,187,188,189,190,197,198,199,200,203,],[-28,64,-110,-77,-76,-111,-81,-82,-83,-112,-113,-80,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,118,-26,-91,-87,121,-80,126,-88,-97,121,-53,-56,-61,-63,-64,-65,-66,-32,-34,-36,-27,118,-84,-75,-86,-55,-62,169,171,-90,-35,175,-109,-25,126,-78,-79,-96,-54,-67,-69,-33,-37,-38,-39,-85,-58,-93,196,196,-108,-57,-68,-70,-59,-60,-92,]),'CONSTRUCTOR':([11,19,20,22,27,28,29,30,32,33,40,70,72,76,120,125,154,155,179,],[-80,-110,-77,73,-111,-81,-82,-83,-112,-113,-80,-87,-80,-88,-84,-86,-78,-79,-85,]),'EQUALS':([11,15,16,19,20,22,27,28,29,30,32,33,40,41,43,47,70,76,84,85,89,90,96,97,98,99,100,105,106,107,108,120,122,125,129,133,139,144,152,154,155,160,168,170,178,179,181,190,197,198,199,200,],[-80,45,45,-110,-77,-76,-111,-81,-82,-83,-112,-113,-80,-95,87,104,-87,-88,-95,-40,-53,-56,-61,-63,-64,-65,-66,-49,-51,-52,-41,-84,-75,-86,-94,-55,-62,-50,-95,-78,-79,-54,-67,-69,-42,-85,-58,-57,-68,-70,-59,-60,]),'BACKTICK':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,109,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,52,52,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,52,-87,52,-80,-88,-53,52,-61,-63,-64,-65,-66,145,52,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'PLUS':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,53,53,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,53,-87,53,-80,-88,-53,53,-61,-63,-64,-65,-66,53,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'TIMES':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,55,55,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,55,-87,55,-80,-88,-53,55,-61,-63,-64,-65,-66,55,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'DIVIDE':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,56,56,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,56,-87,56,-80,-88,-53,56,-61,-63,-64,-65,-66,56,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'POW':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,57,57,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,57,-87,57,-80,-88,-53,57,-61,-63,-64,-65,-66,57,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'EQUALITY':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,58,58,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,58,-87,58,-80,-88,-53,58,-61,-63,-64,-65,-66,58,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'LESS':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,59,59,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,59,-87,59,-80,-88,-53,59,-61,-63,-64,-65,-66,59,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'LEQ':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,60,60,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,60,-87,60,-80,-88,-53,60,-61,-63,-64,-65,-66,60,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'GREATER':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,61,61,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,61,-87,61,-80,-88,-53,61,-61,-63,-64,-65,-66,61,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'GEQ':([11,16,18,19,20,22,23,24,25,27,28,29,30,32,33,40,65,70,71,72,76,89,90,96,97,98,99,100,118,120,122,125,133,139,154,155,160,168,170,179,181,190,197,198,199,200,],[-80,62,62,-110,-77,-76,-29,-30,-31,-111,-81,-82,-83,-112,-113,-80,62,-87,62,-80,-88,-53,62,-61,-63,-64,-65,-66,62,-84,-75,-86,-55,-62,-78,-79,-54,-67,-69,-85,-58,-57,-68,-70,-59,-60,]),'PIPE':([11,15,16,19,20,22,27,28,29,30,32,33,40,41,70,76,84,85,89,90,96,97,98,99,100,108,120,122,125,129,133,139,143,152,154,155,160,168,170,178,179,181,190,197,198,199,200,],[-80,48,48,-110,-77,-76,-111,-81,-82,-83,-112,-113,-80,-95,-87,-88,-95,-40,-53,-56,-61,-63,-64,-65,-66,-41,-84,-75,-86,-94,-55,-62,48,-95,-78,-79,-54,-67,-69,-42,-85,-58,-57,-68,-70,-59,-60,]),'TYPENAME':([12,63,87,111,112,113,114,115,146,147,174,175,176,177,],[43,113,130,113,-34,-36,113,113,113,-35,-37,113,-38,-39,]),'CLOSE_PAREN':([19,20,21,22,27,28,29,30,32,33,40,41,42,69,70,71,72,76,77,84,85,86,89,90,96,97,98,99,100,101,108,111,112,113,120,122,123,124,125,129,133,139,140,147,148,149,152,153,154,155,156,160,168,170,173,174,176,177,178,179,181,186,187,189,190,197,198,199,200,203,],[-110,-77,70,-76,-111,-81,-82,-83,-112,-113,-80,-95,70,119,-87,120,-80,-88,-97,-95,-40,120,-53,-56,-61,-63,-64,-65,-66,70,-41,-32,-34,-36,-84,-75,154,155,-86,-94,-55,-62,168,-35,174,176,-95,179,-78,-79,-96,-54,-67,-69,-33,-37,-38,-39,-42,-85,-58,-93,197,-108,-57,-68,-70,-59,-60,-92,]),'CLOSE_SQUARE':([19,20,22,27,28,29,30,31,32,33,40,70,75,76,77,89,90,96,97,98,99,100,102,111,112,113,120,122,125,133,139,141,147,150,154,155,156,160,168,170,173,174,176,177,179,181,186,188,190,197,198,199,200,203,],[-110,-77,-76,-111,-81,-82,-83,76,-112,-113,-80,-87,125,-88,-97,-53,-56,-61,-63,-64,-65,-66,76,-32,-34,-36,-84,-75,-86,-55,-62,170,-35,177,-78,-79,-96,-54,-67,-69,-33,-37,-38,-39,-85,-58,-93,198,-57,-68,-70,-59,-60,-92,]),'LAMBDA':([19,27,32,33,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,89,90,91,94,95,96,97,98,99,100,101,102,104,105,106,107,132,133,139,144,145,160,162,166,168,169,170,171,180,181,190,192,196,197,198,199,200,202,],[-110,-111,-112,-113,92,92,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,-88,-53,-56,92,92,92,-61,-63,-64,-65,-66,92,92,92,92,-51,-52,92,-55,-62,-50,-90,-54,92,92,-67,92,-69,92,92,-58,-57,92,92,-68,-70,-59,-60,92,]),'LET':([19,27,32,33,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,89,90,91,94,95,96,97,98,99,100,101,102,104,105,106,107,132,133,139,144,145,160,162,166,168,169,170,171,180,181,190,192,196,197,198,199,200,202,],[-110,-111,-112,-113,93,93,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,-88,-53,-56,93,93,93,-61,-63,-64,-65,-66,93,93,93,93,-51,-52,93,-55,-62,-50,-90,-54,93,93,-67,93,-69,93,93,-58,-57,93,93,-68,-70,-59,-60,93,]),'IF':([19,27,32,33,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,89,90,91,94,95,96,97,98,99,100,101,102,104,105,106,107,132,133,139,144,145,160,162,166,168,169,170,171,180,181,190,192,196,197,198,199,200,202,],[-110,-111,-112,-113,94,94,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,-88,-53,-56,94,94,94,-61,-63,-64,-65,-66,94,94,94,94,-51,-52,94,-55,-62,-50,-90,-54,94,94,-67,94,-69,94,94,-58,-57,94,94,-68,-70,-59,-60,94,]),'MATCH':([19,27,32,33,45,48,51,53,54,55,56,57,58,59,60,61,62,68,70,76,89,90,91,94,95,96,97,98,99,100,101,102,104,105,106,107,132,133,139,144,145,160,162,166,168,169,170,171,180,181,190,192,196,197,198,199,200,202,],[-110,-111,-112,-113,95,95,-89,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-91,-87,-88,-53,-56,95,95,95,-61,-63,-64,-65,-66,95,95,95,95,-51,-52,95,-55,-62,-50,-90,-54,95,95,-67,95,-69,95,95,-58,-57,95,95,-68,-70,-59,-60,95,]),'ARROW':([19,20,22,27,28,29,30,32,33,40,70,76,84,111,112,113,120,122,125,129,134,147,154,155,161,174,176,177,179,195,],[-110,-77,-76,-111,-81,-82,-83,-112,-113,-80,-87,-88,-95,146,-34,-36,-84,-75,-86,-94,-95,-35,-78,-79,180,-37,-38,-39,-85,202,]),'THEN':([19,27,32,33,70,76,89,90,96,97,98,99,100,133,137,139,160,168,170,181,190,197,198,199,200,],[-110,-111,-112,-113,-87,-88,-53,-56,-61,-63,-64,-65,-66,-55,166,-62,-54,-67,-69,-58,-57,-68,-70,-59,-60,]),'OF':([19,27,32,33,70,76,89,90,96,97,98,99,100,133,138,139,160,168,170,181,190,197,198,199,200,],[-110,-111,-112,-113,-87,-88,-53,-56,-61,-63,-64,-65,-66,-55,167,-62,-54,-67,-69,-58,-57,-68,-70,-59,-60,]),'ELSE':([19,27,32,33,70,76,89,90,96,97,98,99,100,133,139,160,168,170,181,184,190,197,198,199,200,],[-110,-111,-112,-113,-87,-88,-53,-56,-61,-63,-64,-65,-66,-55,-62,-54,-67,-69,-58,192,-57,-68,-70,-59,-60,]),'AS':([39,],[83,]),'IN':([135,164,182,],[162,-15,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([0,34,],[3,78,]),'IMPORT_DECLARATIONS':([4,],[6,]),'TOP_DECLARATIONS':([4,35,],[7,79,]),'IMPORT_DECLARATION':([4,35,],[8,80,]),'TOP_DECLARATION':([4,35,38,],[9,9,81,]),'DECLARATION':([4,35,38,136,183,],[13,13,13,165,165,]),'GEN_DECLARATION':([4,35,38,136,183,],[14,14,14,14,14,]),'FUNCTION_LHS':([4,21,35,38,136,183,],[15,69,15,15,15,15,]),'PAT':([4,21,31,35,38,42,50,73,121,126,136,183,185,193,],[16,71,77,16,16,86,108,122,77,156,16,16,195,195,]),'VARS':([4,35,38,136,183,],[17,17,17,17,17,]),'FIXITY':([4,35,38,136,183,],[18,18,18,18,18,]),'APAT':([4,11,21,31,35,38,41,42,50,72,73,84,92,119,121,126,134,136,152,183,185,193,],[20,41,20,20,20,20,84,20,20,41,20,84,134,152,20,20,84,20,84,20,20,20,]),'LPAT':([4,21,31,35,38,42,50,73,121,126,136,183,185,193,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'GCON':([4,11,21,31,35,38,41,42,45,48,50,72,73,84,91,92,94,95,96,101,102,104,105,119,121,126,132,134,136,152,162,166,169,171,180,183,185,192,193,196,202,],[28,28,28,28,28,28,28,28,99,99,28,28,28,28,99,28,99,99,99,99,99,99,99,28,28,28,99,28,28,28,99,99,99,99,99,28,28,99,28,99,99,]),'LITERAL':([4,11,21,31,35,38,41,42,45,48,50,72,73,84,91,92,94,95,96,101,102,104,105,119,121,126,132,134,136,152,162,166,169,171,180,183,185,192,193,196,202,],[29,29,29,29,29,29,29,29,100,100,29,29,29,29,100,29,100,100,100,100,100,100,100,29,29,29,100,29,29,29,100,100,100,100,100,29,29,100,29,100,100,]),'RHS':([15,16,],[44,49,]),'GDRHS':([15,16,143,],[46,46,172,]),'GUARDS':([15,16,143,],[47,47,47,]),'VAROP':([16,18,65,71,90,118,],[50,68,68,50,68,68,]),'VARSYM':([16,18,65,71,90,118,],[51,51,51,51,51,51,]),'OPS':([18,65,],[66,117,]),'OP':([18,65,90,118,],[67,67,132,151,]),'PAT_LIST':([31,121,],[75,153,]),'APATS':([41,84,134,152,],[85,129,161,178,]),'EXP':([45,94,95,101,102,104,162,166,169,171,180,192,196,202,],[88,137,138,140,141,143,181,184,186,186,190,199,203,205,]),'INFIX_EXP':([45,48,91,94,95,101,102,104,105,132,162,166,169,171,180,192,196,202,],[89,107,133,89,89,89,89,89,107,160,89,89,89,89,89,89,89,89,]),'LEXP':([45,48,91,94,95,101,102,104,105,132,162,166,169,171,180,192,196,202,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'FEXP':([45,48,91,94,95,101,102,104,105,132,162,166,169,171,180,192,196,202,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'AEXP':([45,48,91,94,95,96,101,102,104,105,132,162,166,169,171,180,192,196,202,],[97,97,97,97,97,139,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'GUARD_LIST':([48,],[105,]),'GUARD':([48,105,],[106,144,]),'TYPE':([63,114,115,146,175,],[110,149,150,173,189,]),'BTYPE':([63,114,115,146,175,],[111,111,111,111,111,]),'ATYPE':([63,111,114,115,146,175,],[112,147,112,112,112,112,]),'DECLARATIONS':([93,103,131,],[135,142,159,]),'TYPES_LIST':([114,],[148,]),'DECLARATIONS_LIST':([136,183,],[163,191,]),'EXP_LIST':([169,171,],[187,188,]),'ALTS':([185,],[193,]),'ALT':([185,193,],[194,201,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',19),
  ('MODULE_DEFINITION -> BODY','MODULE_DEFINITION',1,'p_MODULE_DEFINITION','funky_parser.py',20),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',25),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',26),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',27),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',32),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',33),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER ENDSTATEMENT','IMPORT_DECLARATION',3,'p_IMPORT_DECLARATION','funky_parser.py',38),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER AS IDENTIFIER ENDSTATEMENT','IMPORT_DECLARATION',5,'p_IMPORT_DECLARATION','funky_parser.py',39),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',45),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',46),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME ENDSTATEMENT','TOP_DECLARATION',5,'p_TOP_DECLARATION','funky_parser.py',51),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',52),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',57),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',58),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',63),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',64),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',69),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',70),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',71),
  ('GEN_DECLARATION -> VARS TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',76),
  ('GEN_DECLARATION -> FIXITY INTEGER OPS','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',77),
  ('GEN_DECLARATION -> FIXITY OPS','GEN_DECLARATION',2,'p_GEN_DECLARATION','funky_parser.py',78),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',79),
  ('OPS -> OPS COMMA OP','OPS',3,'p_OPS','funky_parser.py',84),
  ('OPS -> OP','OPS',1,'p_OPS','funky_parser.py',85),
  ('VARS -> VARS COMMA IDENTIFIER','VARS',3,'p_VARS','funky_parser.py',90),
  ('VARS -> IDENTIFIER','VARS',1,'p_VARS','funky_parser.py',91),
  ('FIXITY -> INFIXL','FIXITY',1,'p_FIXITY','funky_parser.py',96),
  ('FIXITY -> INFIXR','FIXITY',1,'p_FIXITY','funky_parser.py',97),
  ('FIXITY -> INFIX','FIXITY',1,'p_FIXITY','funky_parser.py',98),
  ('TYPE -> BTYPE','TYPE',1,'p_TYPE','funky_parser.py',103),
  ('TYPE -> BTYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',104),
  ('BTYPE -> ATYPE','BTYPE',1,'p_BTYPE','funky_parser.py',109),
  ('BTYPE -> BTYPE ATYPE','BTYPE',2,'p_BTYPE','funky_parser.py',110),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',115),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',116),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',117),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',118),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',123),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',124),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',125),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',130),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',131),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',132),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',133),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',138),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',139),
  ('GUARDS -> PIPE GUARD_LIST','GUARDS',2,'p_GUARDS','funky_parser.py',144),
  ('GUARD_LIST -> GUARD_LIST GUARD','GUARD_LIST',2,'p_GUARD_LIST','funky_parser.py',149),
  ('GUARD_LIST -> GUARD','GUARD_LIST',1,'p_GUARD_LIST','funky_parser.py',150),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',155),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',160),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',165),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',166),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',167),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',172),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',173),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',174),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',175),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',176),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',181),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',182),
  ('AEXP -> IDENTIFIER','AEXP',1,'p_AEXP','funky_parser.py',187),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',188),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',189),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',190),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',191),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',192),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',193),
  ('ALTS -> ALTS ALT ENDSTATEMENT','ALTS',3,'p_ALTS','funky_parser.py',198),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',199),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',204),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',205),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',210),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',211),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',216),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',217),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',218),
  ('APAT -> IDENTIFIER','APAT',1,'p_APAT','funky_parser.py',223),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',224),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',225),
  ('APAT -> WILDCARD','APAT',1,'p_APAT','funky_parser.py',226),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',227),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',228),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',229),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',236),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',237),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',242),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',243),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',248),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',253),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',254),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',259),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',260),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',265),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',266),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',271),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',272),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',273),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',274),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',275),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',276),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',277),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',278),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',279),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',280),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',285),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',286),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',291),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',292),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',293),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',294),
]
