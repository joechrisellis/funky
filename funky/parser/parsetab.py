
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'MODULE_DEFINITIONARROW AS BACKTICK BOOL CHAR CLOSE_BRACE CLOSE_PAREN CLOSE_SQUARE COMMA CONSTRUCTOR DIVIDE ELSE ENDSTATEMENT EQUALITY EQUALS FLOAT GEQ GREATER IDENTIFIER IF IMPORT IN INEQUALITY INTEGER LAMBDA LEQ LESS LET MATCH MINUS MODULE NEWTYPE OF OPEN_BRACE OPEN_PAREN OPEN_SQUARE PIPE PLUS POW STRING THEN TIMES TYPENAME TYPESIG WHERE WHITESPACE WILDCARDMODULE_DEFINITION : MODULE IDENTIFIER WHERE BODY\n        BODY : OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE\n                | OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE\n        IMPORT_DECLARATIONS : IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION\n                               | IMPORT_DECLARATION\n        IMPORT_DECLARATION : IMPORT IDENTIFIER\n        TOP_DECLARATIONS : TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION\n                            | TOP_DECLARATION\n        TOP_DECLARATION : NEWTYPE TYPENAME EQUALS TYPENAME\n                           | DECLARATION\n        DECLARATIONS : OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE\n                        | OPEN_BRACE CLOSE_BRACE\n        DECLARATIONS_LIST : DECLARATION ENDSTATEMENT DECLARATIONS_LIST\n                             | DECLARATION\n        DECLARATION : GEN_DECLARATION\n                       | FUNCTION_LHS RHS\n                       | PAT RHS\n        GEN_DECLARATION : VARS TYPESIG TYPE\n                           |\n        VARS : VARS COMMA IDENTIFIER\n                | IDENTIFIER\n        TYPE : ATYPE\n                | ATYPE ARROW TYPE\n        ATYPE : TYPENAME\n                 | OPEN_PAREN TYPES_LIST CLOSE_PAREN\n                 | OPEN_PAREN TYPE CLOSE_PAREN\n                 | OPEN_SQUARE TYPE CLOSE_SQUARE\n        FUNCTION_LHS : IDENTIFIER APAT APATS\n                        | PAT VAROP PAT\n                        | OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS\n        RHS : EQUALS EXP\n               | EQUALS EXP WHERE DECLARATIONS\n               | GDRHS\n               | GDRHS WHERE DECLARATIONS\n        GDRHS : GUARDS EQUALS EXP\n                 | GUARDS EQUALS EXP GDRHS\n        GUARDS : PIPE GUARD_LIST\n        GUARD_LIST : GUARD_LIST COMMA GUARD\n                      | GUARD\n        GUARD : INFIX_EXP\n        EXP : INFIX_EXP\n        INFIX_EXP : LEXP OP INFIX_EXP\n                     | MINUS INFIX_EXP\n                     | LEXP\n        LEXP : LAMBDA APAT APATS ARROW EXP\n                | LET DECLARATIONS IN EXP\n                | IF EXP THEN EXP ELSE EXP\n                | MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE\n                | FEXP\n        FEXP : FEXP AEXP\n                | AEXP\n        AEXP : IDENTIFIER\n                | GCON\n                | LITERAL\n                | OPEN_PAREN EXP CLOSE_PAREN\n                | OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN\n                | OPEN_SQUARE EXP CLOSE_SQUARE\n                | OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE\n        ALTS : ALTS ALT ENDSTATEMENT\n                | ALT\n        ALT : PAT ARROW EXP\n               |\n        PAT : LPAT CONSTRUCTOR PAT\n               | LPAT\n        LPAT : APAT\n                | MINUS OPEN_PAREN INTEGER CLOSE_PAREN\n                | MINUS OPEN_PAREN FLOAT CLOSE_PAREN\n        APAT : IDENTIFIER\n                | GCON\n                | LITERAL\n                | WILDCARD\n                | OPEN_PAREN PAT CLOSE_PAREN\n                | OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN\n                | OPEN_SQUARE PAT_LIST CLOSE_SQUARE\n        GCON : OPEN_PAREN CLOSE_PAREN\n                | OPEN_SQUARE CLOSE_SQUARE\n        VAROP : VARSYM\n                 | BACKTICK IDENTIFIER BACKTICK\n        OP : VAROP\n        EXP_LIST : EXP_LIST COMMA EXP\n                    | EXP\n        APATS : APAT APATS\n                 |\n        PAT_LIST : PAT_LIST COMMA PAT\n                    | PAT\n        VARSYM : PLUS\n                  | MINUS\n                  | TIMES\n                  | DIVIDE\n                  | POW\n                  | EQUALITY\n                  | LESS\n                  | LEQ\n                  | GREATER\n                  | GEQ\n        TYPES_LIST : TYPES_LIST COMMA TYPE\n                      | TYPE\n        LITERAL : FLOAT\n                   | INTEGER\n                   | BOOL\n                   | CHAR\n                   | STRING\n        '
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,5,33,113,],[0,-1,-3,-2,]),'IDENTIFIER':([2,6,11,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,65,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,105,106,107,111,112,117,118,119,120,122,125,130,131,136,142,144,148,150,151,152,153,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[3,12,35,36,64,-99,-98,-69,-70,-71,36,-100,-101,-102,12,12,-68,36,36,87,87,36,-77,98,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,104,-75,36,36,-76,36,-41,-44,87,36,87,87,87,-51,-52,-53,-54,87,87,87,36,-72,36,-74,36,87,-79,-43,36,12,-50,87,-78,36,-42,87,87,-55,87,-57,87,-73,87,-46,12,36,-45,87,36,-60,87,-56,-58,-47,-48,87,-59,-61,]),'WHERE':([3,23,24,29,30,31,42,62,68,77,78,79,85,86,87,88,89,119,125,129,142,150,152,154,164,173,180,181,182,183,],[4,-99,-98,-100,-101,-102,92,-75,-76,116,-41,-44,-49,-51,-52,-53,-54,-43,-50,-35,-42,-55,-57,-36,-46,-45,-56,-58,-47,-48,]),'OPEN_BRACE':([4,82,92,116,149,],[6,122,122,122,168,]),'IMPORT':([6,32,],[11,11,]),'NEWTYPE':([6,32,34,],[13,13,13,]),'CLOSE_BRACE':([6,8,10,14,15,23,24,29,30,31,32,34,40,42,45,62,68,70,72,77,78,79,85,86,87,88,89,99,100,101,115,119,122,125,128,129,141,142,145,146,147,150,152,154,156,157,159,160,164,165,166,168,173,174,176,177,180,181,182,183,187,188,],[-19,33,-8,-10,-15,-99,-98,-100,-101,-102,-19,-19,-16,-33,-17,-75,-76,113,-7,-31,-41,-44,-49,-51,-52,-53,-54,-18,-22,-24,-9,-43,146,-50,-34,-35,-32,-42,165,-12,-14,-55,-57,-36,-23,-25,-26,-27,-46,-11,-19,-62,-45,-13,183,-60,-56,-58,-47,-48,-59,-61,]),'ENDSTATEMENT':([6,7,8,9,10,14,15,23,24,29,30,31,32,34,35,40,42,45,62,68,70,71,72,77,78,79,85,86,87,88,89,99,100,101,115,119,122,125,128,129,141,142,146,147,150,152,154,156,157,159,160,164,165,166,168,173,176,177,180,181,182,183,184,187,188,],[-19,32,34,-5,-8,-10,-15,-99,-98,-100,-101,-102,-19,-19,-6,-16,-33,-17,-75,-76,34,-4,-7,-31,-41,-44,-49,-51,-52,-53,-54,-18,-22,-24,-9,-43,-19,-50,-34,-35,-32,-42,-12,166,-55,-57,-36,-23,-25,-26,-27,-46,-11,-19,-62,-45,-62,-60,-56,-58,-47,-48,187,-59,-61,]),'OPEN_PAREN':([6,12,20,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,59,62,64,65,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,102,103,105,106,107,111,112,117,118,119,120,122,125,130,131,132,136,142,144,148,150,151,152,153,158,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[20,38,20,66,-99,-98,-69,-70,-71,38,-100,-101,-102,20,20,-68,38,38,90,90,38,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,102,-75,38,38,-76,38,-41,-44,90,38,90,90,90,-51,-52,-53,-54,90,90,90,102,102,38,-72,38,-74,38,90,-79,-43,38,20,-50,90,-78,102,38,-42,90,90,-55,90,-57,90,102,-73,90,-46,20,38,-45,90,38,-60,90,-56,-58,-47,-48,90,-59,-61,]),'MINUS':([6,12,17,19,20,21,23,24,25,26,27,28,29,30,31,32,34,36,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,63,64,65,68,78,79,80,83,84,85,86,87,88,89,90,91,93,106,107,108,111,112,117,118,119,122,125,130,131,138,139,142,144,148,150,151,152,153,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[22,-68,50,-65,22,-64,-99,-98,-69,-70,-71,22,-100,-101,-102,22,22,-68,22,80,80,22,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-75,50,-68,22,-76,-41,50,80,80,80,-49,-51,-52,-53,-54,80,80,80,-72,22,-63,-74,22,80,-79,-43,22,-50,80,-78,-66,-67,-42,80,80,-55,80,-57,80,-73,80,-46,22,22,-45,80,22,-60,80,-56,-58,-47,-48,80,-59,-61,]),'WILDCARD':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,73,78,79,81,85,86,87,88,89,105,106,107,111,112,119,120,122,125,131,136,142,150,152,162,164,166,168,173,176,177,180,181,182,183,187,188,],[27,27,27,-99,-98,-69,-70,-71,27,-100,-101,-102,27,27,-68,27,27,27,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-75,27,27,-76,27,-41,-44,27,-49,-51,-52,-53,-54,27,-72,27,-74,27,-43,27,27,-50,-78,27,-42,-55,-57,-73,-46,27,27,-45,27,-60,-56,-58,-47,-48,-59,-61,]),'OPEN_SQUARE':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,59,62,64,65,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,102,103,105,106,107,111,112,117,118,119,120,122,125,130,131,132,136,142,144,148,150,151,152,153,158,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[28,28,28,-99,-98,-69,-70,-71,28,-100,-101,-102,28,28,-68,28,28,91,91,28,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,103,-75,28,28,-76,28,-41,-44,91,28,91,91,91,-51,-52,-53,-54,91,91,91,103,103,28,-72,28,-74,28,91,-79,-43,28,28,-50,91,-78,103,28,-42,91,91,-55,91,-57,91,103,-73,91,-46,28,28,-45,91,28,-60,91,-56,-58,-47,-48,91,-59,-61,]),'FLOAT':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,66,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,105,106,107,111,112,117,118,119,120,122,125,130,131,136,142,144,148,150,151,152,153,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[24,24,24,-99,-98,-69,-70,-71,24,-100,-101,-102,24,24,-68,24,24,24,24,24,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-75,24,24,110,-76,24,-41,-44,24,24,24,24,24,-51,-52,-53,-54,24,24,24,24,-72,24,-74,24,24,-79,-43,24,24,-50,24,-78,24,-42,24,24,-55,24,-57,24,-73,24,-46,24,24,-45,24,24,-60,24,-56,-58,-47,-48,24,-59,-61,]),'INTEGER':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,66,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,105,106,107,111,112,117,118,119,120,122,125,130,131,136,142,144,148,150,151,152,153,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[23,23,23,-99,-98,-69,-70,-71,23,-100,-101,-102,23,23,-68,23,23,23,23,23,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-75,23,23,109,-76,23,-41,-44,23,23,23,23,23,-51,-52,-53,-54,23,23,23,23,-72,23,-74,23,23,-79,-43,23,23,-50,23,-78,23,-42,23,23,-55,23,-57,23,-73,23,-46,23,23,-45,23,23,-60,23,-56,-58,-47,-48,23,-59,-61,]),'BOOL':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,105,106,107,111,112,117,118,119,120,122,125,130,131,136,142,144,148,150,151,152,153,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[29,29,29,-99,-98,-69,-70,-71,29,-100,-101,-102,29,29,-68,29,29,29,29,29,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-75,29,29,-76,29,-41,-44,29,29,29,29,29,-51,-52,-53,-54,29,29,29,29,-72,29,-74,29,29,-79,-43,29,29,-50,29,-78,29,-42,29,29,-55,29,-57,29,-73,29,-46,29,29,-45,29,29,-60,29,-56,-58,-47,-48,29,-59,-61,]),'CHAR':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,105,106,107,111,112,117,118,119,120,122,125,130,131,136,142,144,148,150,151,152,153,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[30,30,30,-99,-98,-69,-70,-71,30,-100,-101,-102,30,30,-68,30,30,30,30,30,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-75,30,30,-76,30,-41,-44,30,30,30,30,30,-51,-52,-53,-54,30,30,30,30,-72,30,-74,30,30,-79,-43,30,30,-50,30,-78,30,-42,30,30,-55,30,-57,30,-73,30,-46,30,30,-45,30,30,-60,30,-56,-58,-47,-48,30,-59,-61,]),'STRING':([6,12,20,23,24,25,26,27,28,29,30,31,32,34,36,37,38,41,44,46,47,49,50,51,52,53,54,55,56,57,58,62,64,65,68,73,78,79,80,81,83,84,85,86,87,88,89,90,91,93,105,106,107,111,112,117,118,119,120,122,125,130,131,136,142,144,148,150,151,152,153,162,163,164,166,168,173,175,176,177,179,180,181,182,183,185,187,188,],[31,31,31,-99,-98,-69,-70,-71,31,-100,-101,-102,31,31,-68,31,31,31,31,31,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-75,31,31,-76,31,-41,-44,31,31,31,31,31,-51,-52,-53,-54,31,31,31,31,-72,31,-74,31,31,-79,-43,31,31,-50,31,-78,31,-42,31,31,-55,31,-57,31,-73,31,-46,31,31,-45,31,31,-60,31,-56,-58,-47,-48,31,-59,-61,]),'TYPESIG':([12,18,104,],[-21,59,-20,]),'COMMA':([12,18,19,21,23,24,25,26,27,29,30,31,36,62,63,64,67,68,69,75,78,79,85,86,87,88,89,94,95,96,100,101,104,106,108,111,119,125,126,127,133,134,137,138,139,140,142,150,152,155,156,157,159,160,162,164,169,170,171,172,173,180,181,182,183,186,],[-21,60,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,107,-68,112,-76,-85,107,-41,-44,-49,-51,-52,-53,-54,130,-39,-40,-22,-24,-20,-72,-63,-74,-43,-50,151,153,158,-97,112,-66,-67,-84,-42,-55,-57,-38,-23,-25,-26,-27,-73,-46,-81,179,179,-96,-45,-56,-58,-47,-48,-80,]),'CONSTRUCTOR':([12,19,21,23,24,25,26,27,29,30,31,36,62,64,68,106,111,138,139,162,],[-68,-65,65,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,-68,-76,-72,-74,-66,-67,-73,]),'EQUALS':([12,16,17,19,21,23,24,25,26,27,29,30,31,36,37,39,43,62,68,73,74,78,79,85,86,87,88,89,94,95,96,97,106,108,111,114,119,125,136,138,139,142,150,152,155,161,162,164,173,180,181,182,183,],[-68,41,41,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-83,76,93,-75,-76,-83,-28,-41,-44,-49,-51,-52,-53,-54,-37,-39,-40,-29,-72,-63,-74,-82,-43,-50,-83,-66,-67,-42,-55,-57,-38,-30,-73,-46,-45,-56,-58,-47,-48,]),'BACKTICK':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,98,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,48,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,48,-68,-76,-41,48,-49,-51,-52,-53,-54,131,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'PLUS':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,49,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,49,-68,-76,-41,49,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'TIMES':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,51,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,51,-68,-76,-41,51,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'DIVIDE':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,52,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,52,-68,-76,-41,52,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'POW':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,53,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,53,-68,-76,-41,53,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'EQUALITY':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,54,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,54,-68,-76,-41,54,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'LESS':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,55,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,55,-68,-76,-41,55,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'LEQ':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,56,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,56,-68,-76,-41,56,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'GREATER':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,57,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,57,-68,-76,-41,57,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'GEQ':([12,17,19,21,23,24,25,26,27,29,30,31,36,62,63,64,68,78,79,85,86,87,88,89,106,108,111,119,125,138,139,142,150,152,162,164,173,180,181,182,183,],[-68,58,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,58,-68,-76,-41,58,-49,-51,-52,-53,-54,-72,-63,-74,-43,-50,-66,-67,-42,-55,-57,-73,-46,-45,-56,-58,-47,-48,]),'PIPE':([12,16,17,19,21,23,24,25,26,27,29,30,31,36,37,62,68,73,74,78,79,85,86,87,88,89,97,106,108,111,114,119,125,129,136,138,139,142,150,152,161,162,164,173,180,181,182,183,],[-68,44,44,-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-83,-75,-76,-83,-28,-41,-44,-49,-51,-52,-53,-54,-29,-72,-63,-74,-82,-43,-50,44,-83,-66,-67,-42,-55,-57,-30,-73,-46,-45,-56,-58,-47,-48,]),'TYPENAME':([13,59,76,102,103,132,158,],[39,101,115,101,101,101,101,]),'CLOSE_PAREN':([19,20,21,23,24,25,26,27,29,30,31,36,37,38,61,62,63,64,68,69,73,74,75,78,79,85,86,87,88,89,90,97,100,101,106,108,109,110,111,114,119,125,126,133,134,136,137,138,139,140,142,150,152,156,157,159,160,161,162,164,169,170,172,173,180,181,182,183,186,],[-65,62,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-83,62,105,-75,106,-68,-76,-85,-83,-28,106,-41,-44,-49,-51,-52,-53,-54,62,-29,-22,-24,-72,-63,138,139,-74,-82,-43,-50,150,157,159,-83,162,-66,-67,-84,-42,-55,-57,-23,-25,-26,-27,-30,-73,-46,-81,180,-96,-45,-56,-58,-47,-48,-80,]),'CLOSE_SQUARE':([19,21,23,24,25,26,27,28,29,30,31,36,62,67,68,69,78,79,85,86,87,88,89,91,100,101,106,108,111,119,125,127,135,138,139,140,142,150,152,156,157,159,160,162,164,169,171,173,180,181,182,183,186,],[-65,-64,-99,-98,-69,-70,-71,68,-100,-101,-102,-68,-75,111,-76,-85,-41,-44,-49,-51,-52,-53,-54,68,-22,-24,-72,-63,-74,-43,-50,152,160,-66,-67,-84,-42,-55,-57,-23,-25,-26,-27,-73,-46,-81,181,-45,-56,-58,-47,-48,-80,]),'ARROW':([19,21,23,24,25,26,27,29,30,31,36,62,68,73,100,101,106,108,111,114,120,138,139,143,157,159,160,162,178,],[-65,-64,-99,-98,-69,-70,-71,-100,-101,-102,-68,-75,-76,-83,132,-24,-72,-63,-74,-82,-83,-66,-67,163,-25,-26,-27,-73,185,]),'THEN':([23,24,29,30,31,62,68,78,79,85,86,87,88,89,119,123,125,142,150,152,164,173,180,181,182,183,],[-99,-98,-100,-101,-102,-75,-76,-41,-44,-49,-51,-52,-53,-54,-43,148,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'OF':([23,24,29,30,31,62,68,78,79,85,86,87,88,89,119,124,125,142,150,152,164,173,180,181,182,183,],[-99,-98,-100,-101,-102,-75,-76,-41,-44,-49,-51,-52,-53,-54,-43,149,-50,-42,-55,-57,-46,-45,-56,-58,-47,-48,]),'ELSE':([23,24,29,30,31,62,68,78,79,85,86,87,88,89,119,125,142,150,152,164,167,173,180,181,182,183,],[-99,-98,-100,-101,-102,-75,-76,-41,-44,-49,-51,-52,-53,-54,-43,-50,-42,-55,-57,-46,175,-45,-56,-58,-47,-48,]),'LAMBDA':([41,44,47,49,50,51,52,53,54,55,56,57,58,80,83,84,90,91,93,117,118,130,131,144,148,151,153,163,175,179,185,],[81,81,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,81,81,81,81,81,81,81,-79,81,-78,81,81,81,81,81,81,81,81,]),'LET':([41,44,47,49,50,51,52,53,54,55,56,57,58,80,83,84,90,91,93,117,118,130,131,144,148,151,153,163,175,179,185,],[82,82,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,82,82,82,82,82,82,82,-79,82,-78,82,82,82,82,82,82,82,82,]),'IF':([41,44,47,49,50,51,52,53,54,55,56,57,58,80,83,84,90,91,93,117,118,130,131,144,148,151,153,163,175,179,185,],[83,83,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,83,83,83,83,83,83,83,-79,83,-78,83,83,83,83,83,83,83,83,]),'MATCH':([41,44,47,49,50,51,52,53,54,55,56,57,58,80,83,84,90,91,93,117,118,130,131,144,148,151,153,163,175,179,185,],[84,84,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,84,84,84,84,84,84,84,-79,84,-78,84,84,84,84,84,84,84,84,]),'IN':([121,146,165,],[144,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'MODULE_DEFINITION':([0,],[1,]),'BODY':([4,],[5,]),'IMPORT_DECLARATIONS':([6,],[7,]),'TOP_DECLARATIONS':([6,32,],[8,70,]),'IMPORT_DECLARATION':([6,32,],[9,71,]),'TOP_DECLARATION':([6,32,34,],[10,10,72,]),'DECLARATION':([6,32,34,122,166,],[14,14,14,147,147,]),'GEN_DECLARATION':([6,32,34,122,166,],[15,15,15,15,15,]),'FUNCTION_LHS':([6,20,32,34,122,166,],[16,61,16,16,16,16,]),'PAT':([6,20,28,32,34,38,46,65,107,112,122,166,168,176,],[17,63,69,17,17,75,97,108,69,140,17,17,178,178,]),'VARS':([6,32,34,122,166,],[18,18,18,18,18,]),'APAT':([6,12,20,28,32,34,37,38,46,64,65,73,81,105,107,112,120,122,136,166,168,176,],[19,37,19,19,19,19,73,19,19,37,19,73,120,136,19,19,73,19,73,19,19,19,]),'LPAT':([6,20,28,32,34,38,46,65,107,112,122,166,168,176,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'GCON':([6,12,20,28,32,34,37,38,41,44,46,64,65,73,80,81,83,84,85,90,91,93,105,107,112,117,120,122,130,136,144,148,151,153,163,166,168,175,176,179,185,],[25,25,25,25,25,25,25,25,88,88,25,25,25,25,88,25,88,88,88,88,88,88,25,25,25,88,25,25,88,25,88,88,88,88,88,25,25,88,25,88,88,]),'LITERAL':([6,12,20,28,32,34,37,38,41,44,46,64,65,73,80,81,83,84,85,90,91,93,105,107,112,117,120,122,130,136,144,148,151,153,163,166,168,175,176,179,185,],[26,26,26,26,26,26,26,26,89,89,26,26,26,26,89,26,89,89,89,89,89,89,26,26,26,89,26,26,89,26,89,89,89,89,89,26,26,89,26,89,89,]),'RHS':([16,17,],[40,45,]),'GDRHS':([16,17,129,],[42,42,154,]),'GUARDS':([16,17,129,],[43,43,43,]),'VAROP':([17,63,79,],[46,46,118,]),'VARSYM':([17,63,79,],[47,47,47,]),'PAT_LIST':([28,107,],[67,137,]),'APATS':([37,73,120,136,],[74,114,143,161,]),'EXP':([41,83,84,90,91,93,144,148,151,153,163,175,179,185,],[77,123,124,126,127,129,164,167,169,169,173,182,186,188,]),'INFIX_EXP':([41,44,80,83,84,90,91,93,117,130,144,148,151,153,163,175,179,185,],[78,96,119,78,78,78,78,78,142,96,78,78,78,78,78,78,78,78,]),'LEXP':([41,44,80,83,84,90,91,93,117,130,144,148,151,153,163,175,179,185,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'FEXP':([41,44,80,83,84,90,91,93,117,130,144,148,151,153,163,175,179,185,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'AEXP':([41,44,80,83,84,85,90,91,93,117,130,144,148,151,153,163,175,179,185,],[86,86,86,86,86,125,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'GUARD_LIST':([44,],[94,]),'GUARD':([44,130,],[95,155,]),'TYPE':([59,102,103,132,158,],[99,134,135,156,172,]),'ATYPE':([59,102,103,132,158,],[100,100,100,100,100,]),'OP':([79,],[117,]),'DECLARATIONS':([82,92,116,],[121,128,141,]),'TYPES_LIST':([102,],[133,]),'DECLARATIONS_LIST':([122,166,],[145,174,]),'EXP_LIST':([151,153,],[170,171,]),'ALTS':([168,],[176,]),'ALT':([168,176,],[177,184,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> MODULE_DEFINITION","S'",1,None,None,None),
  ('MODULE_DEFINITION -> MODULE IDENTIFIER WHERE BODY','MODULE_DEFINITION',4,'p_MODULE_DEFINITION','funky_parser.py',25),
  ('BODY -> OPEN_BRACE IMPORT_DECLARATIONS ENDSTATEMENT TOP_DECLARATIONS CLOSE_BRACE','BODY',5,'p_BODY','funky_parser.py',31),
  ('BODY -> OPEN_BRACE TOP_DECLARATIONS CLOSE_BRACE','BODY',3,'p_BODY','funky_parser.py',32),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATIONS ENDSTATEMENT IMPORT_DECLARATION','IMPORT_DECLARATIONS',3,'p_IMPORT_DECLARATIONS','funky_parser.py',42),
  ('IMPORT_DECLARATIONS -> IMPORT_DECLARATION','IMPORT_DECLARATIONS',1,'p_IMPORT_DECLARATIONS','funky_parser.py',43),
  ('IMPORT_DECLARATION -> IMPORT IDENTIFIER','IMPORT_DECLARATION',2,'p_IMPORT_DECLARATION','funky_parser.py',51),
  ('TOP_DECLARATIONS -> TOP_DECLARATIONS ENDSTATEMENT TOP_DECLARATION','TOP_DECLARATIONS',3,'p_TOP_DECLARATIONS','funky_parser.py',57),
  ('TOP_DECLARATIONS -> TOP_DECLARATION','TOP_DECLARATIONS',1,'p_TOP_DECLARATIONS','funky_parser.py',58),
  ('TOP_DECLARATION -> NEWTYPE TYPENAME EQUALS TYPENAME','TOP_DECLARATION',4,'p_TOP_DECLARATION','funky_parser.py',66),
  ('TOP_DECLARATION -> DECLARATION','TOP_DECLARATION',1,'p_TOP_DECLARATION','funky_parser.py',67),
  ('DECLARATIONS -> OPEN_BRACE DECLARATIONS_LIST CLOSE_BRACE','DECLARATIONS',3,'p_DECLARATIONS','funky_parser.py',75),
  ('DECLARATIONS -> OPEN_BRACE CLOSE_BRACE','DECLARATIONS',2,'p_DECLARATIONS','funky_parser.py',76),
  ('DECLARATIONS_LIST -> DECLARATION ENDSTATEMENT DECLARATIONS_LIST','DECLARATIONS_LIST',3,'p_DECLARATIONS_LIST','funky_parser.py',84),
  ('DECLARATIONS_LIST -> DECLARATION','DECLARATIONS_LIST',1,'p_DECLARATIONS_LIST','funky_parser.py',85),
  ('DECLARATION -> GEN_DECLARATION','DECLARATION',1,'p_DECLARATION','funky_parser.py',93),
  ('DECLARATION -> FUNCTION_LHS RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',94),
  ('DECLARATION -> PAT RHS','DECLARATION',2,'p_DECLARATION','funky_parser.py',95),
  ('GEN_DECLARATION -> VARS TYPESIG TYPE','GEN_DECLARATION',3,'p_GEN_DECLARATION','funky_parser.py',105),
  ('GEN_DECLARATION -> <empty>','GEN_DECLARATION',0,'p_GEN_DECLARATION','funky_parser.py',106),
  ('VARS -> VARS COMMA IDENTIFIER','VARS',3,'p_VARS','funky_parser.py',114),
  ('VARS -> IDENTIFIER','VARS',1,'p_VARS','funky_parser.py',115),
  ('TYPE -> ATYPE','TYPE',1,'p_TYPE','funky_parser.py',123),
  ('TYPE -> ATYPE ARROW TYPE','TYPE',3,'p_TYPE','funky_parser.py',124),
  ('ATYPE -> TYPENAME','ATYPE',1,'p_ATYPE','funky_parser.py',132),
  ('ATYPE -> OPEN_PAREN TYPES_LIST CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',133),
  ('ATYPE -> OPEN_PAREN TYPE CLOSE_PAREN','ATYPE',3,'p_ATYPE','funky_parser.py',134),
  ('ATYPE -> OPEN_SQUARE TYPE CLOSE_SQUARE','ATYPE',3,'p_ATYPE','funky_parser.py',135),
  ('FUNCTION_LHS -> IDENTIFIER APAT APATS','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',148),
  ('FUNCTION_LHS -> PAT VAROP PAT','FUNCTION_LHS',3,'p_FUNCTION_LHS','funky_parser.py',149),
  ('FUNCTION_LHS -> OPEN_PAREN FUNCTION_LHS CLOSE_PAREN APAT APATS','FUNCTION_LHS',5,'p_FUNCTION_LHS','funky_parser.py',150),
  ('RHS -> EQUALS EXP','RHS',2,'p_RHS','funky_parser.py',162),
  ('RHS -> EQUALS EXP WHERE DECLARATIONS','RHS',4,'p_RHS','funky_parser.py',163),
  ('RHS -> GDRHS','RHS',1,'p_RHS','funky_parser.py',164),
  ('RHS -> GDRHS WHERE DECLARATIONS','RHS',3,'p_RHS','funky_parser.py',165),
  ('GDRHS -> GUARDS EQUALS EXP','GDRHS',3,'p_GDRHS','funky_parser.py',178),
  ('GDRHS -> GUARDS EQUALS EXP GDRHS','GDRHS',4,'p_GDRHS','funky_parser.py',179),
  ('GUARDS -> PIPE GUARD_LIST','GUARDS',2,'p_GUARDS','funky_parser.py',187),
  ('GUARD_LIST -> GUARD_LIST COMMA GUARD','GUARD_LIST',3,'p_GUARD_LIST','funky_parser.py',192),
  ('GUARD_LIST -> GUARD','GUARD_LIST',1,'p_GUARD_LIST','funky_parser.py',193),
  ('GUARD -> INFIX_EXP','GUARD',1,'p_GUARD','funky_parser.py',201),
  ('EXP -> INFIX_EXP','EXP',1,'p_EXP','funky_parser.py',206),
  ('INFIX_EXP -> LEXP OP INFIX_EXP','INFIX_EXP',3,'p_INFIX_EXP','funky_parser.py',212),
  ('INFIX_EXP -> MINUS INFIX_EXP','INFIX_EXP',2,'p_INFIX_EXP','funky_parser.py',213),
  ('INFIX_EXP -> LEXP','INFIX_EXP',1,'p_INFIX_EXP','funky_parser.py',214),
  ('LEXP -> LAMBDA APAT APATS ARROW EXP','LEXP',5,'p_LEXP','funky_parser.py',232),
  ('LEXP -> LET DECLARATIONS IN EXP','LEXP',4,'p_LEXP','funky_parser.py',233),
  ('LEXP -> IF EXP THEN EXP ELSE EXP','LEXP',6,'p_LEXP','funky_parser.py',234),
  ('LEXP -> MATCH EXP OF OPEN_BRACE ALTS CLOSE_BRACE','LEXP',6,'p_LEXP','funky_parser.py',235),
  ('LEXP -> FEXP','LEXP',1,'p_LEXP','funky_parser.py',236),
  ('FEXP -> FEXP AEXP','FEXP',2,'p_FEXP','funky_parser.py',251),
  ('FEXP -> AEXP','FEXP',1,'p_FEXP','funky_parser.py',252),
  ('AEXP -> IDENTIFIER','AEXP',1,'p_AEXP','funky_parser.py',260),
  ('AEXP -> GCON','AEXP',1,'p_AEXP','funky_parser.py',261),
  ('AEXP -> LITERAL','AEXP',1,'p_AEXP','funky_parser.py',262),
  ('AEXP -> OPEN_PAREN EXP CLOSE_PAREN','AEXP',3,'p_AEXP','funky_parser.py',263),
  ('AEXP -> OPEN_PAREN EXP COMMA EXP_LIST CLOSE_PAREN','AEXP',5,'p_AEXP','funky_parser.py',264),
  ('AEXP -> OPEN_SQUARE EXP CLOSE_SQUARE','AEXP',3,'p_AEXP','funky_parser.py',265),
  ('AEXP -> OPEN_SQUARE EXP COMMA EXP_LIST CLOSE_SQUARE','AEXP',5,'p_AEXP','funky_parser.py',266),
  ('ALTS -> ALTS ALT ENDSTATEMENT','ALTS',3,'p_ALTS','funky_parser.py',282),
  ('ALTS -> ALT','ALTS',1,'p_ALTS','funky_parser.py',283),
  ('ALT -> PAT ARROW EXP','ALT',3,'p_ALT','funky_parser.py',291),
  ('ALT -> <empty>','ALT',0,'p_ALT','funky_parser.py',292),
  ('PAT -> LPAT CONSTRUCTOR PAT','PAT',3,'p_PAT','funky_parser.py',298),
  ('PAT -> LPAT','PAT',1,'p_PAT','funky_parser.py',299),
  ('LPAT -> APAT','LPAT',1,'p_LPAT','funky_parser.py',307),
  ('LPAT -> MINUS OPEN_PAREN INTEGER CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',308),
  ('LPAT -> MINUS OPEN_PAREN FLOAT CLOSE_PAREN','LPAT',4,'p_LPAT','funky_parser.py',309),
  ('APAT -> IDENTIFIER','APAT',1,'p_APAT','funky_parser.py',317),
  ('APAT -> GCON','APAT',1,'p_APAT','funky_parser.py',318),
  ('APAT -> LITERAL','APAT',1,'p_APAT','funky_parser.py',319),
  ('APAT -> WILDCARD','APAT',1,'p_APAT','funky_parser.py',320),
  ('APAT -> OPEN_PAREN PAT CLOSE_PAREN','APAT',3,'p_APAT','funky_parser.py',321),
  ('APAT -> OPEN_PAREN PAT COMMA PAT_LIST CLOSE_PAREN','APAT',5,'p_APAT','funky_parser.py',322),
  ('APAT -> OPEN_SQUARE PAT_LIST CLOSE_SQUARE','APAT',3,'p_APAT','funky_parser.py',323),
  ('GCON -> OPEN_PAREN CLOSE_PAREN','GCON',2,'p_GCON','funky_parser.py',336),
  ('GCON -> OPEN_SQUARE CLOSE_SQUARE','GCON',2,'p_GCON','funky_parser.py',337),
  ('VAROP -> VARSYM','VAROP',1,'p_VAROP','funky_parser.py',345),
  ('VAROP -> BACKTICK IDENTIFIER BACKTICK','VAROP',3,'p_VAROP','funky_parser.py',346),
  ('OP -> VAROP','OP',1,'p_OP','funky_parser.py',354),
  ('EXP_LIST -> EXP_LIST COMMA EXP','EXP_LIST',3,'p_EXP_LIST','funky_parser.py',359),
  ('EXP_LIST -> EXP','EXP_LIST',1,'p_EXP_LIST','funky_parser.py',360),
  ('APATS -> APAT APATS','APATS',2,'p_APATS','funky_parser.py',368),
  ('APATS -> <empty>','APATS',0,'p_APATS','funky_parser.py',369),
  ('PAT_LIST -> PAT_LIST COMMA PAT','PAT_LIST',3,'p_PAT_LIST','funky_parser.py',377),
  ('PAT_LIST -> PAT','PAT_LIST',1,'p_PAT_LIST','funky_parser.py',378),
  ('VARSYM -> PLUS','VARSYM',1,'p_VARSYM','funky_parser.py',386),
  ('VARSYM -> MINUS','VARSYM',1,'p_VARSYM','funky_parser.py',387),
  ('VARSYM -> TIMES','VARSYM',1,'p_VARSYM','funky_parser.py',388),
  ('VARSYM -> DIVIDE','VARSYM',1,'p_VARSYM','funky_parser.py',389),
  ('VARSYM -> POW','VARSYM',1,'p_VARSYM','funky_parser.py',390),
  ('VARSYM -> EQUALITY','VARSYM',1,'p_VARSYM','funky_parser.py',391),
  ('VARSYM -> LESS','VARSYM',1,'p_VARSYM','funky_parser.py',392),
  ('VARSYM -> LEQ','VARSYM',1,'p_VARSYM','funky_parser.py',393),
  ('VARSYM -> GREATER','VARSYM',1,'p_VARSYM','funky_parser.py',394),
  ('VARSYM -> GEQ','VARSYM',1,'p_VARSYM','funky_parser.py',395),
  ('TYPES_LIST -> TYPES_LIST COMMA TYPE','TYPES_LIST',3,'p_TYPES_LIST','funky_parser.py',400),
  ('TYPES_LIST -> TYPE','TYPES_LIST',1,'p_TYPES_LIST','funky_parser.py',401),
  ('LITERAL -> FLOAT','LITERAL',1,'p_LITERAL','funky_parser.py',409),
  ('LITERAL -> INTEGER','LITERAL',1,'p_LITERAL','funky_parser.py',410),
  ('LITERAL -> BOOL','LITERAL',1,'p_LITERAL','funky_parser.py',411),
  ('LITERAL -> CHAR','LITERAL',1,'p_LITERAL','funky_parser.py',412),
  ('LITERAL -> STRING','LITERAL',1,'p_LITERAL','funky_parser.py',413),
]
