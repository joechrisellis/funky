# code generated by funky py_compiler
# generated 2019-02-01 at 15:15:13

from contextlib import contextmanager
from inspect import currentframe, getouterframes

class ADT:
    """Superclass for all ADTs."""
    pass

def __eq(a):
    return lambda x: a == x

def __neq(a):
    return lambda x: a != x

def __less(a):
    return lambda x: a < x

def __leq(a):
    return lambda x: a <= x

def __greater(a):
    return lambda x: a > x

def __geq(a):
    return lambda x: a >= x

def __pow(a):
    return lambda x: a ** x

def __add(a):
    return lambda x: a + x

def __sub(a):
    return lambda x: a - x

def __negate(a):
    return -a

def __mul(a):
    return lambda x: a * x

def __div(a):
    return lambda x: a / x

def __logical_and(a):
    return lambda x: a and x

def __logical_or(a):
    return lambda x: a or x

def __match(scrutinee, outcomes):
    if isinstance(scrutinee, ADT):
        ans = __match_adt(scrutinee, outcomes)
    else:
        ans = __match_literal(scrutinee, outcomes)

    return ans

def __match_adt(scrutinee, outcomes):
    raise NotImplementedError()

def __match_literal(scrutinee, outcomes):
    for alt, expr in outcomes.items():
        if scrutinee == alt:
            return expr

@contextmanager
def __let(**bindings):
    # special thanks to Vladimir Iakovlev
    # 2 because first frame in `contextmanager` decorator  
    frame = getouterframes(currentframe(), 2)[-1][0]
    locals_ = frame.f_locals
    original = {var: locals_.get(var) for var in bindings.keys()}
    locals_.update(bindings)
    yield
    locals_.update(original)



v0 = True
None
v1 = lambda v1_0: lambda v1_1: __match(((__eq)(v1_1))(0), {True : v1_0, False : __match(v0, {True : ((v1)(v1_1))(((__add)(v1_0))(v1_1)), False : None}) if __match(v0, {True : ((v1)(v1_1))(((__add)(v1_0))(v1_1)), False : None}) is not None else None}) if __match(((__eq)(v1_1))(0), {True : v1_0, False : __match(v0, {True : ((v1)(v1_1))(((__add)(v1_0))(v1_1)), False : None}) if __match(v0, {True : ((v1)(v1_1))(((__add)(v1_0))(v1_1)), False : None}) is not None else None}) is not None else None
None
