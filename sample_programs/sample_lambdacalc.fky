module lambdacalc where

    # Inspired by Jim Fisher's blog post code, available at:
    # https://jameshfisher.com/2018/03/15/a-lambda-calculus-interpreter
    # -in-haskell.html

    newtype LambdaExpression = App   LambdaExpression LambdaExpression
                             | Abs   LambdaExpression
                             | Var   Integer
                             | Const Integer

    eval (App fun arg) = match eval fun of
                             Abs body -> eval (sub 0 body)
                             x        -> App x arg
                         where sub n (App e1 e2) = App (sub n e1) (sub n e2)
                               sub n (Abs e)     = Abs (sub (n + 1) e)
                               sub n (Var y)     = arg if n == y else Var y
                               sub n x           = x
    eval x = x

    main = eval my_expr
           where my_expr = App (App (Abs (Abs (Var 1))) (Const 4)) (Const 5)
