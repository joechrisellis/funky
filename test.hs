-- code generated by funky's haskell generator
-- timestamp: 2019-02-22 at 18:30:40

-- section: create_adts
data List = Cons Integer List
          | Nil 
          deriving (Show, Eq)

v0 = \v0_0 -> \v0_1 -> case v0_1 of { Nil  -> Nil; _ -> case v0_1 of { Cons cons_v0_1_0 cons_v0_1_1 -> ((Cons)((v0_0)(cons_v0_1_0)))(((v0)(v0_0))(cons_v0_1_1)); _ -> undefined } }

-- section: emit_main
main = do
       print (let { v1 = ((Cons)(5))(((Cons)(1))(((Cons)(7))(((Cons)(7))(((Cons)(3))(Nil))))); v2 = ((||)(True))(False) } in ((v0)((+)(2)))(v1))
