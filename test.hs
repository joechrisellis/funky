-- code generated by funky's haskell generator
-- timestamp: 2019-02-23 at 16:48:12

-- section: create_adts
data List = Cons Integer List
          | Nil 
          deriving (Show, Eq)

v0 = True
v1 = \v1_0 -> case v1_0 of { True -> False; _ -> case v1_0 of { False -> True; _ -> undefined } }
v2 = \v2_0 -> case v2_0 of { Nil  -> 0; _ -> case v2_0 of { Cons cons_v2_0_0 cons_v2_0_1 -> ((+)(1))((v2)(cons_v2_0_1)); _ -> undefined } }
v3 = \v3_0 -> \v3_1 -> case v3_1 of { Nil  -> Nil; _ -> case v3_1 of { Cons cons_v3_1_0 cons_v3_1_1 -> let { v4 = ((v3)(v3_0))(cons_v3_1_1) } in case (v3_0)(cons_v3_1_0) of { True -> ((Cons)(cons_v3_1_0))(v4); False -> case v0 of { True -> v4; False -> undefined } }; _ -> undefined } }
v5 = \v5_0 -> \v5_1 -> (v2)(((v3)((==)(v5_0)))(v5_1))

-- section: emit_main
main = do
       print ((v1)(True))
