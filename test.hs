-- code generated by funky's haskell generator
-- timestamp: 2019-02-25 at 18:27:30

-- section: create_adts
data IList = ICons Integer IList
           | INil 
           deriving (Show, Eq)

data SList = SCons String SList
           | SNil 
           deriving (Show, Eq)

v15 = \v15_0 -> \v15_1 -> case v15_1 of { INil  -> SNil; _ -> case v15_1 of { ICons icons_v15_1_0 icons_v15_1_1 -> ((SCons)((v15_0)(icons_v15_1_0)))(((v15)(v15_0))(icons_v15_1_1)); _ -> undefined } }
v14 = \v14_0 -> case v14_0 of { 0 -> "zero"; _ -> case v14_0 of { 1 -> "one"; _ -> case v14_0 of { 2 -> "two"; _ -> case v14_0 of { 3 -> "three"; _ -> case v14_0 of { 4 -> "four"; _ -> case v14_0 of { 5 -> "five"; _ -> case v14_0 of { 6 -> "six"; _ -> case v14_0 of { 7 -> "seven"; _ -> case v14_0 of { 8 -> "eight"; _ -> case v14_0 of { 9 -> "nine"; _ -> "undefined" } } } } } } } } } }

-- section: emit_main
main = do
       print (let { v16 = ((ICons)(5))(((ICons)(1))(((ICons)(7))(((ICons)(7))(((ICons)(3))(INil))))) } in ((v15)(v14))(v16))
