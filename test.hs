-- code generated by funky's haskell generator
-- timestamp: 2019-02-23 at 13:04:26

-- section: create_adts
data List = Cons Integer List
          | Nil 
          deriving (Show, Eq)

v0 = True
v1 = \v1_0 -> case v1_0 of { Nil  -> 0; _ -> case v1_0 of { Cons cons_v1_0_0 cons_v1_0_1 -> ((+)(1))((v1)(cons_v1_0_1)); _ -> undefined } }
v2 = \v2_0 -> \v2_1 -> case v2_1 of { Nil  -> Nil; _ -> case v2_1 of { Cons cons_v2_1_0 cons_v2_1_1 -> let { v3 = ((v2)(v2_0))(cons_v2_1_1) } in case (v2_0)(cons_v2_1_0) of { True -> ((Cons)(cons_v2_1_0))(v3); False -> case v0 of { True -> v3; False -> undefined } }; _ -> undefined } }
v4 = \v4_0 -> \v4_1 -> (v1)(((v2)((==)(v4_0)))(v4_1))

-- section: emit_main
main = do
       print (let { v5 = ((Cons)(5))(((Cons)(1))(((Cons)(7))(((Cons)(5))(((Cons)(3))(((Cons)(5))(Nil)))))) } in ((v4)(5))(v5))
